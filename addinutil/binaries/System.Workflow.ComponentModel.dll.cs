#define TRACE
using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.ComponentModel.Design.Serialization;
using System.Configuration;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Design;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Drawing.Printing;
using System.Drawing.Text;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Versioning;
using System.Security;
using System.Security.Cryptography;
using System.Security.Permissions;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Transactions;
using System.Windows.Forms;
using System.Windows.Forms.Design;
using System.Workflow.ComponentModel.Compiler;
using System.Workflow.ComponentModel.Design;
using System.Workflow.ComponentModel.Serialization;
using System.Workflow.Interop;
using System.Workflow.Runtime;
using System.Xml;
using System.Xml.Serialization;
using Microsoft.Build.Framework;
using Microsoft.Build.Tasks;
using Microsoft.Build.Utilities;
using Microsoft.CSharp;
using Microsoft.VisualBasic;
using Microsoft.Win32;
using Microsoft.Workflow.Compiler;

[assembly: CompilationRelaxations(8)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly: InternalsVisibleTo("System.Workflow.Runtime, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
[assembly: InternalsVisibleTo("System.WorkflowServices, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
[assembly: InternalsVisibleTo("Microsoft.Workflow.Compiler, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
[assembly: InternalsVisibleTo("System.ServiceModel.Activities, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
[assembly: XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.ComponentModel")]
[assembly: XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.ComponentModel.Compiler")]
[assembly: XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml", "System.Workflow.ComponentModel.Serialization")]
[assembly: XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.ComponentModel.Design")]
[assembly: XmlnsPrefix("http://schemas.microsoft.com/winfx/2006/xaml/workflow", "wf")]
[assembly: XmlnsPrefix("http://schemas.microsoft.com/winfx/2006/xaml", "x")]
[assembly: ComVisible(false)]
[assembly: CLSCompliant(true)]
[assembly: AssemblyTitle("System.Workflow.ComponentModel.dll")]
[assembly: AssemblyDescription("System.Workflow.ComponentModel.dll")]
[assembly: AssemblyDefaultAlias("System.Workflow.ComponentModel.dll")]
[assembly: AssemblyCompany("Microsoft Corporation")]
[assembly: AssemblyProduct("Microsoft® .NET Framework")]
[assembly: AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
[assembly: AssemblyFileVersion("4.8.9032.0")]
[assembly: AssemblyInformationalVersion("4.8.9032.0")]
[assembly: SatelliteContractVersion("4.0.0.0")]
[assembly: NeutralResourcesLanguage("en-US")]
[assembly: AssemblyDelaySign(true)]
[assembly: AssemblyKeyFile("f:\\dd\\tools\\devdiv\\35MSSharedLib1024.snk")]
[assembly: AssemblySignatureKey("002400000c80000014010000060200000024000052534131000800000100010085aad0bef0688d1b994a0d78e1fd29fc24ac34ed3d3ac3fb9b3d0c48386ba834aa880035060a8848b2d8adf58e670ed20914be3681a891c9c8c01eef2ab22872547c39be00af0e6c72485d7cfd1a51df8947d36ceba9989106b58abe79e6a3e71a01ed6bdc867012883e0b1a4d35b1b5eeed6df21e401bb0c22f2246ccb69979dc9e61eef262832ed0f2064853725a75485fa8a3efb7e027319c86dec03dc3b1bca2b5081bab52a627b9917450dfad534799e1c7af58683bdfa135f1518ff1ea60e90d7b993a6c87fd3dd93408e35d1296f9a7f9a97c5db56c0f3cc25ad11e9777f94d138b3cea53b9a8331c2e6dcb8d2ea94e18bf1163ff112a22dbd92d429a", "8913ef869646d14971df222c210018ab394cfe63f8eb9b4d894c0dda7368cfb69df15d049b347f8a8b9205cdcc3d6bd6690f0bd24b3da3179feb8c03f410703027c7844ff654997e38015dfc97222c15061af2a1d3fe91775b9dd4b8ede64d3d59816270a9520e393c8e60619b80d40fc1dc4f12b5aa0c2df20d02ea32960851")]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: DefaultDllImportSearchPaths(DllImportSearchPath.System32 | DllImportSearchPath.AssemblyDirectory)]
[assembly: AssemblyVersion("4.0.0.0")]
[AttributeUsage(AttributeTargets.All)]
internal sealed class SRDescriptionAttribute : DescriptionAttribute
{
	public SRDescriptionAttribute(string description)
	{
		base.DescriptionValue = SR.GetString(description);
	}

	public SRDescriptionAttribute(string description, string resourceSet)
	{
		ResourceManager resourceManager = new ResourceManager(resourceSet, Assembly.GetExecutingAssembly());
		base.DescriptionValue = resourceManager.GetString(description);
	}
}
[AttributeUsage(AttributeTargets.All)]
internal sealed class SRCategoryAttribute : CategoryAttribute
{
	private string resourceSet = string.Empty;

	public SRCategoryAttribute(string category)
		: base(category)
	{
	}

	public SRCategoryAttribute(string category, string resourceSet)
		: base(category)
	{
		this.resourceSet = resourceSet;
	}

	protected override string GetLocalizedString(string value)
	{
		if (resourceSet.Length > 0)
		{
			ResourceManager resourceManager = new ResourceManager(resourceSet, Assembly.GetExecutingAssembly());
			return resourceManager.GetString(value);
		}
		return SR.GetString(value);
	}
}
[AttributeUsage(AttributeTargets.All)]
internal sealed class SRDisplayNameAttribute : DisplayNameAttribute
{
	public SRDisplayNameAttribute(string name)
	{
		base.DisplayNameValue = SR.GetString(name);
	}

	public SRDisplayNameAttribute(string name, string resourceSet)
	{
		ResourceManager resourceManager = new ResourceManager(resourceSet, Assembly.GetExecutingAssembly());
		base.DisplayNameValue = resourceManager.GetString(name);
	}
}
internal sealed class SR
{
	private static SR loader;

	private ResourceManager resources;

	internal const string Activity = "Activity";

	internal const string Handlers = "Handlers";

	internal const string Conditions = "Conditions";

	internal const string ConditionedActivityConditions = "ConditionedActivityConditions";

	internal const string Correlations = "Correlations";

	internal const string CorrelationSet = "CorrelationSet";

	internal const string NameDescr = "NameDescr";

	internal const string EnabledDescr = "EnabledDescr";

	internal const string DescriptionDescr = "DescriptionDescr";

	internal const string UnlessConditionDescr = "UnlessConditionDescr";

	internal const string InitializeDescr = "InitializeDescr";

	internal const string CatchTypeDescr = "CatchTypeDescr";

	internal const string ExceptionTypeDescr = "ExceptionTypeDescr";

	internal const string FaultDescription = "FaultDescription";

	internal const string FaultTypeDescription = "FaultTypeDescription";

	internal const string ContainingAssemblyDescr = "ContainingAssemblyDescr";

	internal const string ExecutionModeDescr = "ExecutionModeDescr";

	internal const string Error_ReadOnlyTemplateActivity = "Error_ReadOnlyTemplateActivity";

	internal const string Error_TypeNotString = "Error_TypeNotString";

	internal const string Error_InvalidErrorType = "Error_InvalidErrorType";

	internal const string Error_LiteralConversionFailed = "Error_LiteralConversionFailed";

	internal const string Error_TypeNotPrimitive = "Error_TypeNotPrimitive";

	internal const string CompletedCaleeDescr = "CompletedCaleeDescr";

	internal const string ProxyClassDescr = "ProxyClassDescr";

	internal const string ActivitySetDescr = "ActivitySetDescr";

	internal const string VersionDescr = "VersionDescr";

	internal const string ActivationDescr = "ActivationDescr";

	internal const string CorrelationSetsDescr = "CorrelationSetsDescr";

	internal const string CompanionClassDescr = "CompanionClassDescr";

	internal const string TransactionTypeDescr = "TransactionTypeDescr";

	internal const string SynchronizedDescr = "SynchronizedDescr";

	internal const string IsolationLevelDescr = "IsolationLevelDescr";

	internal const string TimeoutDescr = "TimeoutDescr";

	internal const string BatchableDescr = "BatchableDescr";

	internal const string LRTTimeoutDescr = "LRTTimeoutDescr";

	internal const string OnGetCalleeCountDescr = "OnGetCalleeCountDescr";

	internal const string CompensatableActivityDescr = "CompensatableActivityDescr";

	internal const string OnAfterEventDescr = "OnAfterEventDescr";

	internal const string OnBeforeMethodInvokeDescr = "OnBeforeMethodInvokeDescr";

	internal const string AssignedToDescr = "AssignedToDescr";

	internal const string TypeDescr = "TypeDescr";

	internal const string TemplateActivityDescr = "TemplateActivityDescr";

	internal const string ErrorMessageDescr = "ErrorMessageDescr";

	internal const string WebServiceSynchronizedDescr = "WebServiceSynchronizedDescr";

	internal const string CorrelationSetDescr = "CorrelationSetDescr";

	internal const string ExecutionTypeDescr = "ExecutionTypeDescr";

	internal const string RoleDescr = "RoleDescr";

	internal const string OnInitializeClonesDescr = "OnInitializeClonesDescr";

	internal const string CorrelationSetDisplayName = "CorrelationSetDisplayName";

	internal const string PastingActivities = "PastingActivities";

	internal const string DeletingActivities = "DeletingActivities";

	internal const string DragDropActivities = "DragDropActivities";

	internal const string ChangingEnabled = "ChangingEnabled";

	internal const string ChangingHandler = "ChangingHandler";

	internal const string ChangingParameter = "ChangingParameter";

	internal const string CollectionItem = "CollectionItem";

	internal const string AddingConditionalBranch = "AddingConditionalBranch";

	internal const string AddingEventActivity = "AddingEventActivity";

	internal const string AddingListenBranch = "AddingListenBranch";

	internal const string AddingParallelBranch = "AddingParallelBranch";

	internal const string CurrentProject = "CurrentProject";

	internal const string ReferencedAssemblies = "ReferencedAssemblies";

	internal const string CollectionText = "CollectionText";

	internal const string ParameterDescription = "ParameterDescription";

	internal const string InvokeParameterDescription = "InvokeParameterDescription";

	internal const string ParametersDescription = "ParametersDescription";

	internal const string ChangingParameters = "ChangingParameters";

	internal const string Condition = "ConditionRule";

	internal const string MovingActivities = "MovingActivities";

	internal const string MemberNameDescr = "MemberNameDescr";

	internal const string OnScopeInitializedDescr = "OnScopeInitializedDescr";

	internal const string OnGeneratorInitializedDescr = "OnGeneratorInitializedDescr";

	internal const string OnScopeCompletedDescr = "OnScopeCompletedDescr";

	internal const string OnGeneratorCompletedDescr = "OnGeneratorCompletedDescr";

	internal const string DataElementRuntimeTypeDescr = "DataElementRuntimeTypeDescr";

	internal const string RuleConditionReferencesDescr = "RuleConditionReferencesDescr";

	internal const string CreateActivityFromToolbox = "CreateActivityFromToolbox";

	internal const string MoveMultipleActivities = "MoveMultipleActivities";

	internal const string MoveSingleActivity = "MoveSingleActivity";

	internal const string CutMultipleActivities = "CutMultipleActivities";

	internal const string CutSingleActivity = "CutSingleActivity";

	internal const string CutActivity = "CutActivity";

	internal const string FaultActivityDescription = "FaultActivityDescription";

	internal const string NullConditionExpression = "NullConditionExpression";

	internal const string ParameterTypeDescription = "ParameterTypeDescription";

	internal const string ParameterCategory = "ParameterCategory";

	internal const string ParameterDirectionDescription = "ParameterDirectionDescription";

	internal const string ParameterElementDescription = "ParameterElementDescription";

	internal const string ParameterDlgDescription = "ParameterDlgDescription";

	internal const string ParameterDlgHeader = "ParameterDlgHeader";

	internal const string SuspendActivityDescription = "SuspendActivityDescription";

	internal const string SuspendErrorMessageDescr = "SuspendErrorMessageDescr";

	internal const string TerminateActivityDescription = "TerminateActivityDescription";

	internal const string TerminateErrorMessageDescr = "TerminateErrorMessageDescr";

	internal const string DeclarationCategory = "DeclarationCategory";

	internal const string NoValidActivityPropertiesAvailable = "NoValidActivityPropertiesAvailable";

	internal const string ChooseActivityDatasource = "ChooseActivityDatasource";

	internal const string Promote = "Promote";

	internal const string Type = "Type";

	internal const string NoMatchingActivityProperties = "NoMatchingActivityProperties";

	internal const string ActivityBindIDDescription = "ActivityBindIDDescription";

	internal const string ActivityBindPathDescription = "ActivityBindPathDescription";

	internal const string XPathDescription = "XPathDescription";

	internal const string TransformerDescription = "TransformerDescription";

	internal const string CustomPropertiesCollectionFormHeader = "CustomPropertiesCollectionFormHeader";

	internal const string CustomPropertiesCollectionFormDescription = "CustomPropertiesCollectionFormDescription";

	internal const string BaseTypePropertyName = "BaseTypePropertyName";

	internal const string CustomActivityBaseClassTypeFilterProviderDesc = "CustomActivityBaseClassTypeFilterProviderDesc";

	internal const string CustomActivityDesignerTypeFilterProviderDesc = "CustomActivityDesignerTypeFilterProviderDesc";

	internal const string CustomActivityValidatorTypeFilterProviderDesc = "CustomActivityValidatorTypeFilterProviderDesc";

	internal const string CustomActivityExecutorTypeFilterProviderDesc = "CustomActivityExecutorTypeFilterProviderDesc";

	internal const string GenericParameters = "GenericParameters";

	internal const string ToolboxItem = "ToolboxItem";

	internal const string ToolboxItemCompanionClassDesc = "ToolboxItemCompanionClassDesc";

	internal const string Error_SerializationInsufficientState = "Error_SerializationInsufficientState";

	internal const string Error_ActivityHasParent = "Error_ActivityHasParent";

	internal const string Error_CompensantionParentNotScope = "Error_CompensantionParentNotScope";

	internal const string Error_ConditionedActivityParentNotCAG = "Error_ConditionedActivityParentNotCAG";

	internal const string Error_CorrelationTypeNotComparable = "Error_CorrelationTypeNotComparable";

	internal const string Error_ArgumentTypeNotMatchParameter = "Error_ArgumentTypeNotMatchParameter";

	internal const string Error_TypeTypeMismatch = "Error_TypeTypeMismatch";

	internal const string Error_ParameterTypeMismatch = "Error_ParameterTypeMismatch";

	internal const string Error_InvokeParameterTypeMismatch = "Error_InvokeParameterTypeMismatch";

	internal const string Error_ParameterPropertyNotSet = "Error_ParameterPropertyNotSet";

	internal const string Error_DataSourceNameNotSet = "Error_DataSourceNameNotSet";

	internal const string Error_DataSourceInvalidIdentifier = "Error_DataSourceInvalidIdentifier";

	internal const string Error_ParameterTypeNotExist = "Error_ParameterTypeNotExist";

	internal const string Error_InvalidParameterName = "Error_InvalidParameterName";

	internal const string Error_InvalidParameterType = "Error_InvalidParameterType";

	internal const string Error_InvalidParameterElement = "Error_InvalidParameterElement";

	internal const string Error_InvalidPropertyType = "Error_InvalidPropertyType";

	internal const string Error_TypeNotResolvedInMethodName = "Error_TypeNotResolvedInMethodName";

	internal const string Error_DelegateNoInvoke = "Error_DelegateNoInvoke";

	internal const string Error_TypeNotDelegate = "Error_TypeNotDelegate";

	internal const string Error_MethodSignatureMismatch = "Error_MethodSignatureMismatch";

	internal const string Error_MethodReturnTypeMismatch = "Error_MethodReturnTypeMismatch";

	internal const string Error_PropertyNotSet = "Error_PropertyNotSet";

	internal const string Error_ScopeCouldNotBeResolved = "Error_ScopeCouldNotBeResolved";

	internal const string Error_IfElseNotAllIfElseBranchDecl = "Error_ConditionalNotAllConditionalBranchDecl";

	internal const string Error_TypeTypeMismatchAmbiguity = "Error_TypeTypeMismatchAmbiguity";

	internal const string Error_InvalidCorrelationSetDatasource = "Error_InvalidCorrelationSetDatasource";

	internal const string Error_InvalidCorrelationSetType = "Error_InvalidCorrelationSetType";

	internal const string Error_MissingCorrelationParameterAttribute = "Error_MissingCorrelationParameterAttribute";

	internal const string Error_CorrelationTypeNotConsistent = "Error_CorrelationTypeNotConsistent";

	internal const string Error_CorrelationInvalid = "Error_CorrelationInvalid";

	internal const string Error_MissingDelegateMethod = "Error_MissingDelegateMethod";

	internal const string Error_MissingHostInterface = "Error_MissingHostInterface";

	internal const string Error_MissingMethodName = "Error_MissingMethodName";

	internal const string Error_NoBoundType = "Error_NoBoundType";

	internal const string Error_PortTypeNotAnInterface = "Error_PortTypeNotAnInterface";

	internal const string Error_MethodNotExists = "Error_MethodNotExists";

	internal const string Error_InvalidRequestResponseMethod = "Error_InvalidRequestResponseMethod";

	internal const string General_MissingService = "General_MissingService";

	internal const string Error_ScopeDuplicatedNameActivity = "Error_ScopeDuplicatedNameActivity";

	internal const string Error_DuplicatedActivityID = "Error_DuplicatedActivityID";

	internal const string Error_DuplicatedParameterName = "Error_DuplicatedParameterName";

	internal const string Error_ScopeMissingSerializableAttribute = "Error_ScopeMissingSerializableAttribute";

	internal const string Error_FieldNotExists = "Error_FieldNotExists";

	internal const string Error_PropertyNotExists = "Error_PropertyNotExists";

	internal const string Error_FieldTypeMismatch = "Error_FieldTypeMismatch";

	internal const string Error_PropertyTypeMismatch = "Error_PropertyTypeMismatch";

	internal const string Error_TypeNotResolvedInFieldName = "Error_TypeNotResolvedInFieldName";

	internal const string Error_TypeNotResolvedInPropertyName = "Error_TypeNotResolvedInPropertyName";

	internal const string Error_FieldGenericParamTypeMismatch = "Error_FieldGenericParamTypeMismatch";

	internal const string Error_TypeNotResolved = "Error_TypeNotResolved";

	internal const string Error_TypeIsUnboundedGeneric = "Error_TypeIsUnboundedGeneric";

	internal const string Error_MissingRootActivity = "Error_MissingRootActivity";

	internal const string Error_PropertyNotReadable = "Error_PropertyNotReadable";

	internal const string Error_PropertyNotWritable = "Error_PropertyNotWritable";

	internal const string Error_NotCompositeActivity = "Error_NotCompositeActivity";

	internal const string Error_TypeNotExist = "Error_TypeNotExist";

	internal const string Error_ActivityRefNotResolved = "Error_ActivityRefNotResolved";

	internal const string Error_ActivityRefNotMatchType = "Error_ActivityRefNotMatchType";

	internal const string Error_ActivityValidation = "Error_ActivityValidation";

	internal const string Error_ActiveChildExist = "Error_ActiveChildExist";

	internal const string Error_ActiveChildContextExist = "Error_ActiveChildContextExist";

	internal const string Error_CannotCompleteContext = "Error_CannotCompleteContext";

	internal const string Error_NoPasteSupport = "Error_NoPasteSupport";

	internal const string Error_UnknownSerializationStore = "Error_UnknownSerializationStore";

	internal const string Error_MissingCorrelationSet = "Error_MissingCorrelationSet";

	internal const string Error_CreateVariable = "Error_CreateVariable";

	internal const string Error_DuplicateCorrelationSetName = "Error_DuplicateCorrelationSetName";

	internal const string Error_DragDropInvalid = "Error_DragDropInvalid";

	internal const string AddingImplicitActivity = "AddingImplicitActivity";

	internal const string Failure_DoDefaultAction = "Failure_DoDefaultAction";

	internal const string Failure_DoDefaultActionCaption = "Failure_DoDefaultActionCaption";

	internal const string Error_FaultInsideAtomicScope = "Error_FaultInsideAtomicScope";

	internal const string Error_ListenNotMoreThanOneDelay = "Error_ListenNotMoreThanOneDelay";

	internal const string Error_AtomicScopeWithFaultHandlersActivityDecl = "Error_AtomicScopeWithFaultHandlersActivityDecl";

	internal const string Error_AtomicScopeWithCancellationHandlerActivity = "Error_AtomicScopeWithCancellationHandlerActivity";

	internal const string Error_ScopeDuplicateFaultHandlerActivityForAll = "Error_ScopeDuplicateFaultHandlerActivityForAll";

	internal const string Error_ScopeDuplicateFaultHandlerActivityFor = "Error_ScopeDuplicateFaultHandlerActivityFor";

	internal const string Error_AtomicScopeNestedInNonLRT = "Error_AtomicScopeNestedInNonLRT";

	internal const string Error_LRTScopeNestedInNonLRT = "Error_LRTScopeNestedInNonLRT";

	internal const string Error_CAGNotAllChildrenConditioned = "Error_CAGNotAllChildrenConditioned";

	internal const string Error_ConditionedActivityChildCount = "Error_ConditionedActivityChildCount";

	internal const string Error_NegativeValue = "Error_NegativeValue";

	internal const string Error_MethodWithReturnType = "Error_MethodWithReturnType";

	internal const string Error_SendReceiveOrderIncorrect = "Error_SendReceiveOrderIncorrect";

	internal const string Error_ReceiveSendOrderIncorrect = "Error_ReceiveSendOrderIncorrect";

	internal const string Error_CompensateBadNesting = "Error_CompensateBadNesting";

	internal const string Error_ReferencedAssemblyIsInvalid = "Error_ReferencedAssemblyIsInvalid";

	internal const string Error_TypeToXsdConversion = "Error_TypeToXsdConversion";

	internal const string Error_FieldTypeNotResolved = "Error_FieldTypeNotResolved";

	internal const string Error_PropertyTypeNotResolved = "Error_PropertyTypeNotResolved";

	internal const string Error_CouldNotDeserializeXomlFile = "Error_CouldNotDeserializeXomlFile";

	internal const string Error_InternalCompilerError = "Error_InternalCompilerError";

	internal const string Error_TypeNotAsseblyQualified = "Error_TypeNotAsseblyQualified";

	internal const string CompilerWarning_StandardAssemlbyInReferences = "CompilerWarning_StandardAssemlbyInReferences";

	internal const string Error_SuspendInAtomicScope = "Error_SuspendInAtomicScope";

	internal const string Error_InvalidActivityExecutionContext = "Error_InvalidActivityExecutionContext";

	internal const string Error_NoRuntimeAvailable = "Error_NoRuntimeAvailable";

	internal const string Error_CanNotChangeAtRuntime = "Error_CanNotChangeAtRuntime";

	internal const string Error_DataContextNotInitialized = "Error_DataContextNotInitialized";

	internal const string Error_DataContextAlreadyInitialized = "Error_DataContextAlreadyInitialized";

	internal const string Error_ParseActivityNameDoesNotExist = "Error_ParseActivityNameDoesNotExist";

	internal const string Error_NoParameterPropertyDeclared = "Error_NoParameterPropertyDeclared";

	internal const string Error_PropertyInvalidIdentifier = "Error_PropertyInvalidIdentifier";

	internal const string Error_WorkflowDefinitionModified = "Error_WorkflowDefinitionModified";

	internal const string Error_FieldAlreadyExist = "Error_FieldAlreadyExist";

	internal const string Failure_FieldAlreadyExist = "Failure_FieldAlreadyExist";

	internal const string Error_DifferentTypeFieldExists = "Error_DifferentTypeFieldExists";

	internal const string Error_RootActivityTypeInvalid = "Error_RootActivityTypeInvalid";

	internal const string Error_RootActivityTypeInvalid2 = "Error_RootActivityTypeInvalid2";

	internal const string Error_CannotCompile_No_XClass = "Error_CannotCompile_No_XClass";

	internal const string Error_TemplateActivityIsNotActivity = "Error_TemplateActivityIsNotActivity";

	internal const string Error_TypeIsNotRootActivity = "Error_TypeIsNotRootActivity";

	internal const string Error_NoTypeProvider = "Error_NoTypeProvider";

	internal const string Error_NotCodeGeneratorType = "Error_NotCodeGeneratorType";

	internal const string Error_NotDataContext = "Error_NotDataContext";

	internal const string Error_MissingDefaultConstructor = "Error_MissingDefaultConstructor";

	internal const string Error_ContextStackItemMissing = "Error_ContextStackItemMissing";

	internal const string Error_UnexpectedArgumentType = "Error_UnexpectedArgumentType";

	internal const string Error_EmptyArgument = "Error_EmptyArgument";

	internal const string Error_DPAlreadyExist = "Error_DPAlreadyExist";

	internal const string Error_DuplicateDynamicProperty = "Error_DuplicateDynamicProperty";

	internal const string Error_DynamicPropertyTypeValueMismatch = "Error_DynamicPropertyTypeValueMismatch";

	internal const string Error_DynamicPropertyNoSupport = "Error_DynamicPropertyNoSupport";

	internal const string Error_NoContextForDatasource = "Error_NoContextForDatasource";

	internal const string Error_NoContextForDatasourceCaption = "Error_NoContextForDatasourceCaption";

	internal const string Error_DataSourceHasParent = "Error_DataSourceHasParent";

	internal const string OnTaskCompletedDescr = "OnTaskCompletedDescr";

	internal const string OnTaskInitializedDescr = "OnTaskInitializedDescr";

	internal const string Error_InvalidXmlData = "Error_InvalidXmlData";

	internal const string Error_HandlerNotOnRoot = "Error_HandlerNotOnRoot";

	internal const string Error_InvalidArgumentIndex = "Error_InvalidArgumentIndex";

	internal const string Error_UITypeEditorTypeNotUITypeEditor = "Error_UITypeEditorTypeNotUITypeEditor";

	internal const string FilterDescription_UITypeEditor = "FilterDescription_UITypeEditor";

	internal const string Error_UserCodeFilesNotAllowed = "Error_UserCodeFilesNotAllowed";

	internal const string Error_CodeWithinNotAllowed = "Error_CodeWithinNotAllowed";

	internal const string Error_TypeNotAuthorized = "Error_TypeNotAuthorized";

	internal const string Error_CantDetermineBaseType = "Error_CantDetermineBaseType";

	internal const string Error_MultipleSelectNotSupportedForBindAndPromote = "Error_MultipleSelectNotSupportedForBindAndPromote";

	internal const string Error_CantDetermineBaseTypeCaption = "Error_CantDetermineBaseTypeCaption";

	internal const string Error_CantDeterminePropertyBaseType = "Error_CantDeterminePropertyBaseType";

	internal const string Error_NullCustomActivityTypeName = "Error_NullCustomActivityTypeName";

	internal const string Error_InvalidAttribute = "Error_InvalidAttribute";

	internal const string Error_InvalidAttributes = "Error_InvalidAttributes";

	internal const string Error_ConfigFileMissingOrInvalid = "Error_ConfigFileMissingOrInvalid";

	internal const string Error_CantHaveContextActivity = "Error_CantHaveContextActivity";

	internal const string Error_SynchronizedNeedsDataContext = "Error_SynchronizedNeedsDataContext";

	internal const string Error_MoreThanOneFaultHandlersActivityDecl = "Error_MoreThanOneFaultHandlersActivityDecl";

	internal const string Error_MoreThanOneEventHandlersDecl = "Error_MoreThanOneEventHandlersDecl";

	internal const string Error_MoreThanOneCancelHandler = "Error_MoreThanOneCancelHandler";

	internal const string Error_MetaDataInterfaceMissing = "Error_MetaDataInterfaceMissing";

	internal const string Error_NonActivityExecutor = "Error_NonActivityExecutor";

	internal const string Error_DynamicUpdateEvaluation = "Error_DynamicUpdateEvaluation";

	internal const string Error_CollectionHasNullEntry = "Error_CollectionHasNullEntry";

	internal const string Error_MissingContextProperty = "Error_MissingContextProperty";

	internal const string Error_AssociatedDesignerMissing = "Error_AssociatedDesignerMissing";

	internal const string Error_MissingContextActivityProperty = "Error_MissingContextActivityProperty";

	internal const string Error_MissingActivityProperty = "Error_MissingActivityProperty";

	internal const string Error_MissingOwnerTypeProperty = "Error_MissingOwnerTypeProperty";

	internal const string Error_DOIsNotAnActivity = "Error_DOIsNotAnActivity";

	internal const string Error_PropertyCanBeOnlyCleared = "Error_PropertyCanBeOnlyCleared";

	internal const string Error_PropertyDefaultTypeMismatch = "Error_PropertyDefaultTypeMismatch";

	internal const string Error_PropertyDefaultIsReference = "Error_PropertyDefaultIsReference";

	internal const string Error_WorkflowLoadFailed = "Error_WorkflowLoadFailed";

	internal const string Error_WorkflowLoadValidationFailed = "Error_WorkflowLoadValidationFailed";

	internal const string Error_WorkflowLoadDeserializationFailed = "Error_WorkflowLoadDeserializationFailed";

	internal const string Error_WorkflowLoadTypeMismatch = "Error_WorkflowLoadTypeMismatch";

	internal const string Error_WorkflowLoadInvalidXoml = "Error_WorkflowLoadInvalidXoml";

	internal const string Error_WorkflowLoadNotValidRootType = "Error_WorkflowLoadNotValidRootType";

	internal const string Error_CantCreateInstanceOfComponent = "Error_CantCreateInstanceOfComponent";

	internal const string Error_NotComponentFactoryType = "Error_NotComponentFactoryType";

	internal const string Error_WorkflowTerminated = "Error_WorkflowTerminated";

	internal const string Error_SerializerAttributesFoundInComplexProperty = "Error_SerializerAttributesFoundInComplexProperty";

	internal const string Error_InvalidDataFound = "Error_InvalidDataFound";

	internal const string Error_InvalidDataFoundForType = "Error_InvalidDataFoundForType";

	internal const string Error_InvalidDataFoundForType1 = "Error_InvalidDataFoundForType1";

	internal const string Error_SerializerTypeNotResolved = "Error_SerializerTypeNotResolved";

	internal const string Error_MarkupSerializerTypeNotResolved = "Error_MarkupSerializerTypeNotResolved";

	internal const string Error_SerializerTypeNotResolvedWithInnerError = "Error_SerializerTypeNotResolvedWithInnerError";

	internal const string Error_SerializerNotAvailable = "Error_SerializerNotAvailable";

	internal const string Error_SerializerNotAvailableForSerialize = "Error_SerializerNotAvailableForSerialize";

	internal const string Error_SerializerCreateInstanceFailed = "Error_SerializerCreateInstanceFailed";

	internal const string Error_SerializerAddChildFailed = "Error_SerializerAddChildFailed";

	internal const string Error_SerializerNoPropertyAvailable = "Error_SerializerNoPropertyAvailable";

	internal const string Error_SerializerPrimitivePropertyReadOnly = "Error_SerializerPrimitivePropertyReadOnly";

	internal const string Error_SerializerCantChangeIsLocked = "Error_SerializerCantChangeIsLocked";

	internal const string Error_SerializerPrimitivePropertySetFailed = "Error_SerializerPrimitivePropertySetFailed";

	internal const string Error_SerializerPropertyGetFailed = "Error_SerializerPropertyGetFailed";

	internal const string Error_SerializerPrimitivePropertyNoLogic = "Error_SerializerPrimitivePropertyNoLogic";

	internal const string Error_SerializerPrimitivePropertyParentIsNull = "Error_SerializerPrimitivePropertyParentIsNull";

	internal const string Error_SerializerComplexPropertySetFailed = "Error_SerializerComplexPropertySetFailed";

	internal const string Error_SerializerNoChildNotion = "Error_SerializerNoChildNotion";

	internal const string Error_SerializerNoDynamicPropertySupport = "Error_SerializerNoDynamicPropertySupport";

	internal const string Error_SerializerNoSerializeLogic = "Error_SerializerNoSerializeLogic";

	internal const string Error_SerializerReadOnlyPropertyAndValueIsNull = "Error_SerializerReadOnlyPropertyAndValueIsNull";

	internal const string Error_SerializerReadOnlyParametersNoChild = "Error_SerializerReadOnlyParametersNoChild";

	internal const string Error_SerializerNotParameterBindingObject = "Error_SerializerNotParameterBindingObject";

	internal const string Error_SerializerThrewException = "Error_SerializerThrewException";

	internal const string Error_ActivityCollectionSerializer = "Error_ActivityCollectionSerializer";

	internal const string Error_MissingClassAttribute = "Error_MissingClassAttribute";

	internal const string Error_MissingClassAttributeValue = "Error_MissingClassAttributeValue";

	internal const string ExecutorCreationFailedErrorMessage = "ExecutorCreationFailedErrorMessage";

	internal const string VariableGetterCode_VB = "VariableGetterCode_VB";

	internal const string VariableGetterCode_CS = "VariableGetterCode_CS";

	internal const string VariableSetterCode_VB = "VariableSetterCode_VB";

	internal const string VariableSetterCode_CS = "VariableSetterCode_CS";

	internal const string StaticVariableGetterCode_VB = "StaticVariableGetterCode_VB";

	internal const string StaticVariableGetterCode_CS = "StaticVariableGetterCode_CS";

	internal const string StaticVariableSetterCode_VB = "StaticVariableSetterCode_VB";

	internal const string StaticVariableSetterCode_CS = "StaticVariableSetterCode_CS";

	internal const string EnterCodeBesidesCode_VB = "EnterCodeBesidesCode_VB";

	internal const string EnterCodeBesidesCode_CS = "EnterCodeBesidesCode_CS";

	internal const string LeaveCodeBesides1Code_VB = "LeaveCodeBesides1Code_VB";

	internal const string LeaveCodeBesides2Code_VB = "LeaveCodeBesides2Code_VB";

	internal const string LeaveCodeBesides1Code_CS = "LeaveCodeBesides1Code_CS";

	internal const string LeaveCodeBesides2Code_CS = "LeaveCodeBesides2Code_CS";

	internal const string VariableSetterName = "VariableSetterName";

	internal const string VariableGetterName = "VariableGetterName";

	internal const string HandlerGetterName = "HandlerGetterName";

	internal const string WorkflowCreatorName = "WorkflowCreatorName";

	internal const string ActivityMethod = "ActivityMethod";

	internal const string CustomActivityPrivateField = "CustomActivityPrivateField";

	internal const string InitializedVariableDeclaration_VB = "InitializedVariableDeclaration_VB";

	internal const string InitializedVariableDeclaration_CS = "InitializedVariableDeclaration_CS";

	internal const string In = "In";

	internal const string Out = "Out";

	internal const string Ref = "Ref";

	internal const string Required = "Required";

	internal const string Optional = "Optional";

	internal const string Parameters = "Parameters";

	internal const string Properties = "Properties";

	internal const string Error_RecursionDetected = "Error_RecursionDetected";

	internal const string Warning_UnverifiedRecursion = "Warning_UnverifiedRecursion";

	internal const string AddConstructorCode = "AddConstructorCode";

	internal const string Error_UninitializedCorrelation = "Error_UninitializedCorrelation";

	internal const string Error_CorrelationAlreadyInitialized = "Error_CorrelationAlreadyInitialized";

	internal const string Error_CorrelatedSendReceiveAtomicScope = "Error_CorrelatedSendReceiveAtomicScope";

	internal const string Warning_ActivityValidation = "Warning_ActivityValidation";

	internal const string Warning_EmptyBehaviourActivity = "Warning_EmptyBehaviourActivity";

	internal const string Error_ParallelActivationNoCorrelation = "Error_ParallelActivationNoCorrelation";

	internal const string Error_MethodNotAccessible = "Error_MethodNotAccessible";

	internal const string Error_FieldNotAccessible = "Error_FieldNotAccessible";

	internal const string Error_PropertyNotAccessible = "Error_PropertyNotAccessible";

	internal const string Error_GenericArgumentsNotAllowed = "Error_GenericArgumentsNotAllowed";

	internal const string Error_InvalidIdentifier = "Error_InvalidIdentifier";

	internal const string Error_InvalidLanguageIdentifier = "Error_InvalidLanguageIdentifier";

	internal const string DuplicateActivityIdentifier = "DuplicateActivityIdentifier";

	internal const string Error_MissingAttribute = "Error_MissingAttribute";

	internal const string Error_LoadUIPropertiesFile = "Error_LoadUIPropertiesFile";

	internal const string Error_SerializerEventGetFailed = "Error_SerializerEventGetFailed";

	internal const string Error_SerializerEventFailed = "Error_SerializerEventFailed";

	internal const string Error_SerializerNoMemberFound = "Error_SerializerNoMemberFound";

	internal const string Error_DynamicEventConflict = "Error_DynamicEventConflict";

	internal const string Error_SerializerMemberSetFailed = "Error_SerializerMemberSetFailed";

	internal const string Error_ContentPropertyCouldNotBeFound = "Error_ContentPropertyCouldNotBeFound";

	internal const string Error_ContentPropertyValueInvalid = "Error_ContentPropertyValueInvalid";

	internal const string Error_ContentPropertyNoSetter = "Error_ContentPropertyNoSetter";

	internal const string Error_ContentCanNotBeConverted = "Error_ContentCanNotBeConverted";

	internal const string Error_ContentPropertyCanNotBeNull = "Error_ContentPropertyCanNotBeNull";

	internal const string Error_SerializerTypeMismatch = "Error_SerializerTypeMismatch";

	internal const string Error_CouldNotAddValueInContentProperty = "Error_CouldNotAddValueInContentProperty";

	internal const string Error_SerializerTypeRequirement = "Error_SerializerTypeRequirement";

	internal const string Error_CanNotAddActivityInBlackBoxActivity = "Error_CanNotAddActivityInBlackBoxActivity";

	internal const string Error_ContentPropertyCanNotSupportCompactFormat = "Error_ContentPropertyCanNotSupportCompactFormat";

	internal const string Error_ContentPropertyNoMultipleContents = "Error_ContentPropertyNoMultipleContents";

	internal const string Error_InternalSerializerError = "Error_InternalSerializerError";

	internal const string Error_DictionarySerializerNonDictionaryObject = "Error_DictionarySerializerNonDictionaryObject";

	internal const string Error_DictionarySerializerKeyNotFound = "Error_DictionarySerializerKeyNotFound";

	internal const string Error_InvalidCancelActivityState = "Error_InvalidCancelActivityState";

	internal const string Error_InvalidCompensateActivityState = "Error_InvalidCompensateActivityState";

	internal const string Error_InvalidCloseActivityState = "Error_InvalidCloseActivityState";

	internal const string Error_SealedPropertyMetadata = "Error_SealedPropertyMetadata";

	internal const string Error_MemberNotFound = "Error_MemberNotFound";

	internal const string Error_EmptyPathValue = "Error_EmptyPathValue";

	internal const string Error_InvalidCompensatingState = "Error_InvalidCompensatingState";

	internal const string Error_InvalidCancelingState = "Error_InvalidCancelingState";

	internal const string Error_InvalidClosingState = "Error_InvalidClosingState";

	internal const string Error_InvalidStateToExecuteChild = "Error_InvalidStateToExecuteChild";

	internal const string Error_InvalidExecutionState = "Error_InvalidExecutionState";

	internal const string Error_InvalidInitializingState = "Error_InvalidInitializingState";

	internal const string Error_InvalidInvokingState = "Error_InvalidInvokingState";

	internal const string Error_NotRegisteredAs = "Error_NotRegisteredAs";

	internal const string Error_AlreadyRegisteredAs = "Error_AlreadyRegisteredAs";

	internal const string Error_InsertingChildControls = "Error_InsertingChildControls";

	internal const string Error_EmptyToolTipRectangle = "Error_EmptyToolTipRectangle";

	internal const string Error_EmptyRectangleValue = "Error_EmptyRectangleValue";

	internal const string Error_InvalidShadowRectangle = "Error_InvalidShadowRectangle";

	internal const string Error_InvalidShadowDepth = "Error_InvalidShadowDepth";

	internal const string Error_InvalidLightSource = "Error_InvalidLightSource";

	internal const string Error_ChangingDock = "Error_ChangingDock";

	internal const string Error_NullOrEmptyValue = "Error_NullOrEmptyValue";

	internal const string Error_InvalidStateImages = "Error_InvalidStateImages";

	internal const string Error_InvalidConnectorSegment = "Error_InvalidConnectorSegment";

	internal const string Error_InvalidConnectorSource = "Error_InvalidConnectorSource";

	internal const string Error_CreatingToolTip = "Error_CreatingToolTip";

	internal const string Error_InvalidDockStyle = "Error_InvalidDockStyle";

	internal const string Error_InvalidConnectorValue = "Error_InvalidConnectorValue";

	internal const string Error_InvalidDesignerVerbValue = "Error_InvalidDesignerVerbValue";

	internal const string Error_InvalidRuntimeType = "Error_InvalidRuntimeType";

	internal const string Error_InvalidArgumentValue = "Error_InvalidArgumentValue";

	internal const string Error_InvalidRadiusValue = "Error_InvalidRadiusValue";

	internal const string ToolTipString = "ToolTipString";

	internal const string CollectionEditorCaption = "CollectionEditorCaption";

	internal const string CollectionEditorProperties = "CollectionEditorProperties";

	internal const string CollectionEditorPropertiesMultiSelect = "CollectionEditorPropertiesMultiSelect";

	internal const string CollectionEditorPropertiesNone = "CollectionEditorPropertiesNone";

	internal const string CollectionEditorCantRemoveItem = "CollectionEditorCantRemoveItem";

	internal const string CollectionEditorUndoBatchDesc = "CollectionEditorUndoBatchDesc";

	internal const string CollectionEditorInheritedReadOnlySelection = "CollectionEditorInheritedReadOnlySelection";

	internal const string Error_ParameterAlreadyExists = "Error_ParameterAlreadyExists";

	internal const string Error_PropertyAlreadyExists = "Error_PropertyAlreadyExists";

	internal const string Error_HiddenPropertyAlreadyExists = "Error_HiddenPropertyAlreadyExists";

	internal const string Error_CorrelationInUse = "Error_CorrelationInUse";

	internal const string Error_ItemNotExists = "Error_ItemNotExists";

	internal const string Error_NoHelpAvailable = "Error_NoHelpAvailable";

	internal const string Error_DuplicateWorkflow = "Error_DuplicateWorkflow";

	internal const string Error_Recursion = "Error_Recursion";

	internal const string Error_RootActivity = "Error_RootActivity";

	internal const string Error_ConditionDefinitionDeserializationFailed = "Error_ConditionDefinitionDeserializationFailed";

	internal const string Error_InvalidConditionDefinition = "Error_InvalidConditionDefinition";

	internal const string SR_InvokeTransactionalFromAtomic = "SR_InvokeTransactionalFromAtomic";

	internal const string Error_SuspendInAtomicCallChain = "Error_SuspendInAtomicCallChain";

	internal const string Error_LiteralPassedToOutRef = "Error_LiteralPassedToOutRef";

	internal const string Error_GeneratorShouldContainSingleActivity = "Error_GeneratorShouldContainSingleActivity";

	internal const string Error_DeclaringPropertyNotSupported = "Error_DeclaringPropertyNotSupported";

	internal const string Error_DeclaringEventNotSupported = "Error_DeclaringEventNotSupported";

	internal const string Error_DynamicEventNotSupported = "Error_DynamicEventNotSupported";

	internal const string Error_DynamicPropertyNotSupported = "Error_DynamicPropertyNotSupported";

	internal const string Error_ParameterTypeResolution = "Error_ParameterTypeResolution";

	internal const string Error_DynamicActivity = "Error_DynamicActivity";

	internal const string Error_DynamicActivity2 = "Error_DynamicActivity2";

	internal const string Error_CompilerValidationFailed = "Error_CompilerValidationFailed";

	internal const string Error_RuntimeValidationFailed = "Error_RuntimeValidationFailed";

	internal const string Error_TransactionAlreadyCanceled = "Error_TransactionAlreadyCanceled";

	internal const string Error_RemoveExecutingActivity = "Error_RemoveExecutingActivity";

	internal const string Error_InsideAtomicScope = "Error_InsideAtomicScope";

	internal const string SuspendReason_WorkflowChange = "SuspendReason_WorkflowChange";

	internal const string FilterDescription_ParameterDeclaration = "FilterDescription_ParameterDeclaration";

	internal const string FilterDescription_GenericArgument = "FilterDescription_GenericArgument";

	internal const string LibraryPathIsInvalid = "LibraryPathIsInvalid";

	internal const string Error_CreateValidator = "Error_CreateValidator";

	internal const string Error_InvalidPackageFile = "Error_InvalidPackageFile";

	internal const string Error_AddAssemblyRef = "Error_AddAssemblyRef";

	internal const string Error_AssemblyBadImage = "Error_AssemblyBadImage";

	internal const string BindPropertySetterName = "BindPropertySetterName";

	internal const string Error_CannotResolveActivity = "Error_CannotResolveActivity";

	internal const string Error_CannotResolveRelativeActivity = "Error_CannotResolveRelativeActivity";

	internal const string Error_PathNotSetForActivitySource = "Error_PathNotSetForActivitySource";

	internal const string Error_InvalidMemberPath = "Error_InvalidMemberPath";

	internal const string Error_TargetTypeMismatch = "Error_TargetTypeMismatch";

	internal const string Warning_ParameterBinding = "Warning_ParameterBinding";

	internal const string Error_ReferencedActivityPropertyNotBind = "Error_ReferencedActivityPropertyNotBind";

	internal const string Error_TargetTypeDataSourcePathMismatch = "Error_TargetTypeDataSourcePathMismatch";

	internal const string Bind_ActivityDataSourceRecursionDetected = "Bind_ActivityDataSourceRecursionDetected";

	internal const string Bind_DuplicateDataSourceNames = "Bind_DuplicateDataSourceNames";

	internal const string Error_PathNotSetForXmlDataSource = "Error_PathNotSetForXmlDataSource";

	internal const string Error_XmlDocumentLoadFailed = "Error_XmlDocumentLoadFailed";

	internal const string Error_XmlDataSourceInvalidPath = "Error_XmlDataSourceInvalidPath";

	internal const string Error_XmlDataSourceMultipleNodes = "Error_XmlDataSourceMultipleNodes";

	internal const string Error_XmlDataSourceInvalidXPath = "Error_XmlDataSourceInvalidXPath";

	internal const string Error_InvalidObjectRefFormat = "Error_InvalidObjectRefFormat";

	internal const string Error_ReadOnlyDataSource = "Error_ReadOnlyDataSource";

	internal const string Error_HandlerReadOnly = "Error_HandlerReadOnly";

	internal const string Error_XmlDataSourceReadOnly = "Error_XmlDataSourceReadOnly";

	internal const string Error_DataSourceNotExist = "Error_DataSourceNotExist";

	internal const string Error_PropertyNoGetter = "Error_PropertyNoGetter";

	internal const string Error_PropertyNoSetter = "Error_PropertyNoSetter";

	internal const string Error_PropertyHasNoGetterDefined = "Error_PropertyHasNoGetterDefined";

	internal const string Error_PropertyHasNoSetterDefined = "Error_PropertyHasNoSetterDefined";

	internal const string Error_PropertyReferenceNoGetter = "Error_PropertyReferenceNoGetter";

	internal const string Error_PropertyReferenceGetterNoAccess = "Error_PropertyReferenceGetterNoAccess";

	internal const string Error_PropertyHasIndexParameters = "Error_PropertyHasIndexParameters";

	internal const string Error_ReadOnlyField = "Error_ReadOnlyField";

	internal const string Error_NoEnclosingContext = "Error_NoEnclosingContext";

	internal const string Error_NestedPersistOnClose = "Error_NestedPersistOnClose";

	internal const string Error_NestedCompensatableActivity = "Error_NestedCompensatableActivity";

	internal const string Error_InvalidActivityForObjectDatasource = "Error_InvalidActivityForObjectDatasource";

	internal const string Error_DataSourceTypeConversionFailed = "Error_DataSourceTypeConversionFailed";

	internal const string Error_BindDialogWrongPropertyType = "Error_BindDialogWrongPropertyType";

	internal const string Error_BindDialogNoValidPropertySelected = "Error_BindDialogNoValidPropertySelected";

	internal const string Error_BindDialogBindNotValid = "Error_BindDialogBindNotValid";

	internal const string Error_BindDialogCanNotBindToItself = "Error_BindDialogCanNotBindToItself";

	internal const string Error_BindActivityReference = "Error_BindActivityReference";

	internal const string Error_NoTargetTypeForMethod = "Error_NoTargetTypeForMethod";

	internal const string Error_MethodDataSourceIsReadOnly = "Error_MethodDataSourceIsReadOnly";

	internal const string Error_NotMethodDataSource = "Error_NotMethodDataSource";

	internal const string Error_MethodDataSourceWithPath = "Error_MethodDataSourceWithPath";

	internal const string Error_PathSyntax = "Error_PathSyntax";

	internal const string Error_UnmatchedParen = "Error_UnmatchedParen";

	internal const string Error_UnmatchedBracket = "Error_UnmatchedBracket";

	internal const string Error_MemberWithSameNameExists = "Error_MemberWithSameNameExists";

	internal const string Error_ActivityIdentifierCanNotBeEmpty = "Error_ActivityIdentifierCanNotBeEmpty";

	internal const string Error_InvalidActivityIdentifier = "Error_InvalidActivityIdentifier";

	internal const string Error_ActivityBindTypeConversionError = "Error_ActivityBindTypeConversionError";

	internal const string EmptyValue = "EmptyValue";

	internal const string Error_PropertyTypeNotDefined = "Error_PropertyTypeNotDefined";

	internal const string Error_CompilationFailed = "Error_CompilationFailed";

	internal const string Error_MissingCompilationContext = "Error_MissingCompilationContext";

	internal const string InvokeWorkflowReference_VB = "InvokeWorkflowReference_VB";

	internal const string InvokeWorkflowReference_CS = "InvokeWorkflowReference_CS";

	internal const string Error_InvalidListItem = "Error_InvalidListItem";

	internal const string ParserMapPINoWhitespace = "ParserMapPINoWhitespace";

	internal const string ParserMapPIBadCharEqual = "ParserMapPIBadCharEqual";

	internal const string ParserMapPIBadCharQuote = "ParserMapPIBadCharQuote";

	internal const string ParserMapPIBadKey = "ParserMapPIBadKey";

	internal const string ParserMapPIMissingKey = "ParserMapPIMissingKey";

	internal const string ParserMapPIKeyNotSet = "ParserMapPIKeyNotSet";

	internal const string ParserMismatchDelimiter = "ParserMismatchDelimiter";

	internal const string ParserDanglingClause = "ParserDanglingClause";

	internal const string UnknownDefinitionTag = "UnknownDefinitionTag";

	internal const string CDATASection = "CDATASection";

	internal const string TextSection = "TextSection";

	internal const string IncorrectSyntax = "IncorrectSyntax";

	internal const string IncorrectTypeSyntax = "IncorrectTypeSyntax";

	internal const string Error_MultipleRootActivityCreator = "Error_MultipleRootActivityCreator";

	internal const string Error_MustHaveParent = "Error_MustHaveParent";

	internal const string Error_ReferenceObjNotInitialized = "Error_ReferenceObjNotInitialized";

	internal const string Error_ReferenceInitResourceManager = "Error_ReferenceInitResourceManager";

	internal const string Error_ResourceReferenceGetObject = "Error_ResourceReferenceGetObject";

	internal const string Error_RefBindCantFindRef = "Error_RefBindCantFindRef";

	internal const string Error_RefBindMissingReferenceName = "Error_RefBindMissingReferenceName";

	internal const string Error_RefBindMissingAttribute = "Error_RefBindMissingAttribute";

	internal const string Error_ReferenceLoad = "Error_ReferenceLoad";

	internal const string Error_ReferenceMissingAttribute = "Error_ReferenceMissingAttribute";

	internal const string Error_ReferenceInvalidResourceFile = "Error_ReferenceInvalidResourceFile";

	internal const string Error_ReferenceEmptyName = "Error_ReferenceEmptyName";

	internal const string HandlerInvokerName = "HandlerInvokerName";

	internal const string HandlerInvokerSwitchPrefix_CS = "HandlerInvokerSwitchPrefix_CS";

	internal const string HandlerInvokerSwitchPrefix_VB = "HandlerInvokerSwitchPrefix_VB";

	internal const string HandlerInvokerSwitchSuffix_CS = "HandlerInvokerSwitchSuffix_CS";

	internal const string HandlerInvokerSwitchSuffix_VB = "HandlerInvokerSwitchSuffix_VB";

	internal const string HandlerInvokerCaseBegin_CS = "HandlerInvokerCaseBegin_CS";

	internal const string HandlerInvokerCaseBegin_VB = "HandlerInvokerCaseBegin_VB";

	internal const string Standard = "Standard";

	internal const string Base = "Base";

	internal const string ValidatorCompanionClassDesc = "ValidatorCompanionClassDesc";

	internal const string ExecutorCompanionClassDesc = "ExecutorCompanionClassDesc";

	internal const string DesignerCompanionClassDesc = "DesignerCompanionClassDesc";

	internal const string CustomActivityBaseTypeDesc = "CustomActivityBaseTypeDesc";

	internal const string ActivityProperties = "ActivityProperties";

	internal const string ActivityPropertiesDesc = "ActivityPropertiesDesc";

	internal const string CompanionClasses = "CompanionClasses";

	internal const string ActivityDesc = "Activity";

	internal const string Error_TypeConversionFailed = "Error_TypeConversionFailed";

	internal const string SupportDataContext = "SupportDataContext";

	internal const string AdvancedCategory = "AdvancedCategory";

	internal const string SupportDataContextDesc = "SupportDataContextDesc";

	internal const string BaseCompanionClassName = "BaseCompanionClassName";

	internal const string BaseCompanionClassDesc = "BaseCompanionClassDesc";

	internal const string Designer = "Designer";

	internal const string Validator = "Validator";

	internal const string Executor = "Executor";

	internal const string BaseActivityType = "BaseActivityType";

	internal const string Error_NotBuiltInActivity = "Error_NotBuiltInActivity";

	internal const string NoChildActivities_Message = "NoChildActivities_Message";

	internal const string NoChildActivities_Caption = "NoChildActivities_Caption";

	internal const string Error_CustomActivityCantCreate = "Error_CustomActivityCantCreate";

	internal const string Error_CantChangeBuiltInActivity = "Error_CantChangeBuiltInActivity";

	internal const string Error_CantAddBeforeBuiltInActivity = "Error_CantAddBeforeBuiltInActivity";

	internal const string Error_CantAddAfterNonBuiltInActivity = "Error_CantAddAfterNonBuiltInActivity";

	internal const string Error_CannotAddRemoveChildActivities = "Error_CannotAddRemoveChildActivities";

	internal const string Error_CantFindBuiltInActivity = "Error_CantFindBuiltInActivity";

	internal const string Error_MissingBaseCompanionClassAttribute = "Error_MissingBaseCompanionClassAttribute";

	internal const string Error_CantFindBuiltInParent = "Error_CantFindBuiltInParent";

	internal const string Error_CantCreateInstanceOfBaseType = "Error_CantCreateInstanceOfBaseType";

	internal const string Error_CustomActivityTypeCouldNotBeFound = "Error_CustomActivityTypeCouldNotBeFound";

	internal const string None = "None";

	internal const string AtomicTransaction = "AtomicTransaction";

	internal const string LocalDataContext = "LocalDataContext";

	internal const string LocalDataContextDesc = "LocalDataContextDesc";

	internal const string CompanionClass = "CompanionClass";

	internal const string Error_AlreadyRootActivity = "Error_AlreadyRootActivity";

	internal const string RootActivityName = "RootActivityName";

	internal const string RootActivityNameDesc = "RootActivityNameDesc";

	internal const string CustomProperties = "CustomProperties";

	internal const string VisibleDescr = "VisibleDescr";

	internal const string EditableDescr = "EditableDescr";

	internal const string Error_CantCreateMethod = "Error_CantCreateMethod";

	internal const string Error_CantEditNullValue = "Error_CantEditNullValue";

	internal const string Error_CompanionTypeNotSet = "Error_CompanionTypeNotSet";

	internal const string Error_CompanionClassNameCanNotBeEmpty = "Error_CompanionClassNameCanNotBeEmpty";

	internal const string Error_CouldNotEmitFieldInLocalDataContext = "Error_CouldNotEmitFieldInLocalDataContext";

	internal const string Error_CouldNotEmitMethodInLocalDataContext = "Error_CouldNotEmitMethodInLocalDataContext";

	internal const string Error_DerivationFromTypeWithLocalDataContext = "Error_DerivationFromTypeWithLocalDataContext";

	internal const string Error_CompanionTypeDerivationError = "Error_CompanionTypeDerivationError";

	internal const string Error_CantCreateDataContextClass = "Error_CantCreateDataContextClass";

	internal const string ArrayExistingBind = "ArrayExistingBind";

	internal const string Error_NoMatchingFieldsOrProperties = "Error_NoMatchingFieldsOrProperties";

	internal const string ChooseFieldPropertyDatasource = "ChooseFieldPropertyDatasource";

	internal const string SupportsTransaction = "SupportsTransaction";

	internal const string SupportsExceptions = "SupportsExceptions";

	internal const string SupportsCancellationHandlerActivity = "SupportsCancellationHandlerActivity";

	internal const string SupportsEvents = "SupportsEvents";

	internal const string SupportsDataSources = "SupportsDataSources";

	internal const string SupportsCompensationHandler = "SupportsCompensationHandler";

	internal const string SupportsCompensationHandlerDesc = "SupportsCompensationHandlerDesc";

	internal const string SupportsTransactionDesc = "SupportsTransactionDesc";

	internal const string SupportsExceptionsDesc = "SupportsExceptionsDesc";

	internal const string SupportsCancelHandlerDesc = "SupportsCancelHandlerDesc";

	internal const string SupportsEventsDesc = "SupportsEventsDesc";

	internal const string TransactionDesc = "TransactionDesc";

	internal const string Error_BaseTypeMustBeActivity = "Error_BaseTypeMustBeActivity";

	internal const string ExistingActivityBindTitle = "ExistingActivityBindTitle";

	internal const string ExistingActivityBindLabel = "ExistingActivityBindLabel";

	internal const string ExistingFieldPropBindTitle = "ExistingFieldPropBindTitle";

	internal const string ExistingFieldPropBindLabel = "ExistingFieldPropBindLabel";

	internal const string ProvidesSynchronization = "ProvidesSynchronization";

	internal const string ProvidesSynchronizationDesc = "ProvidesSynchronizationDesc";

	internal const string SynchronizationHandles = "SynchronizationHandles";

	internal const string SynchronizationHandlesDesc = "SynchronizationHandlesDesc";

	internal const string Error_TransactionAlreadyApplied = "Error_TransactionAlreadyApplied";

	internal const string Error_BindBaseTypeNotSpecified = "Error_BindBaseTypeNotSpecified";

	internal const string NonDelegateTargetType = "NonDelegateTargetType";

	internal const string Error_ClassnameNotInRootNamespace = "Error_ClassnameNotInRootNamespace";

	internal const string Error_CantUseCurrentProjectTypeAsBase = "Error_CantUseCurrentProjectTypeAsBase";

	internal const string Error_UnboundGenericType = "Error_UnboundGenericType";

	internal const string Error_UnboundGenericTypeDataSource = "Error_UnboundGenericTypeDataSource";

	internal const string Error_BaseTypeUnknown = "Error_BaseTypeUnknown";

	internal const string Error_UnconfiguredBind = "Error_UnconfiguredBind";

	internal const string Error_CanNotEmitMemberInLocalDataContext = "Error_CanNotEmitMemberInLocalDataContext";

	internal const string Error_DesignedTypeNotFound = "Error_DesignedTypeNotFound";

	internal const string Error_PathCouldNotBeResolvedToMember = "Error_PathCouldNotBeResolvedToMember";

	internal const string Error_EdittingNullCollection = "Error_EdittingNullCollection";

	internal const string Error_MoreThanOneCompensationDecl = "Error_MoreThanOneCompensationDecl";

	internal const string Error_ParentDoesNotSupportCompensation = "Error_ParentDoesNotSupportCompensation";

	internal const string Error_CantResolveEventHandler = "Error_CantResolveEventHandler";

	internal const string Error_XSDObjectTypeNotSerializable = "Error_XSDObjectTypeNotSerializable";

	internal const string AEC_InvalidActivity = "AEC_InvalidActivity";

	internal const string GetDynamicActivities_InvalidActivity = "GetDynamicActivities_InvalidActivity";

	internal const string AEC_InvalidNestedActivity = "AEC_InvalidNestedActivity";

	internal const string Error_IDNotSetForActivitySource = "Error_IDNotSetForActivitySource";

	internal const string Error_InvalidCustomPropertyName = "Error_InvalidCustomPropertyName";

	internal const string Error_InvalidCustomPropertyType = "Error_InvalidCustomPropertyType";

	internal const string Error_DPReadOnly = "Error_DPReadOnly";

	internal const string Error_DPMetaPropertyBinding = "Error_DPMetaPropertyBinding";

	internal const string Error_DPSetValueBind = "Error_DPSetValueBind";

	internal const string Error_DPSetValueHandler = "Error_DPSetValueHandler";

	internal const string Error_DPGetValueHandler = "Error_DPGetValueHandler";

	internal const string Error_DPAddHandlerNonEvent = "Error_DPAddHandlerNonEvent";

	internal const string Error_DPAddHandlerMetaProperty = "Error_DPAddHandlerMetaProperty";

	internal const string Error_DPRemoveHandlerBind = "Error_DPRemoveHandlerBind";

	internal const string Error_LanguageNeedsToBeVBCSharp = "Error_LanguageNeedsToBeVBCSharp";

	internal const string Error_TargetFxNotSupported = "Error_TargetFxNotSupported";

	internal const string Error_CantConvertValueValue = "Error_CantConvertValueValue";

	internal const string Error_TypeIsNotValid = "Error_TypeIsNotValid";

	internal const string Error_TypePropertyInvalid = "Error_TypePropertyInvalid";

	internal const string Error_EventCantBeMetaProperty = "Error_EventCantBeMetaProperty";

	internal const string Error_EventMustBeDelegate = "Error_EventMustBeDelegate";

	internal const string Error_DPPropertyTypeMissing = "Error_DPPropertyTypeMissing";

	internal const string TransactionalContextActivityDescription = "TransactionalContextActivityDescription";

	internal const string CompensatableTransactionalContextActivityDescription = "CompensatableTransactionalContextActivityDescription";

	internal const string SynchronizationScopeActivityDescription = "SynchronizationScopeActivityDescription";

	internal const string SequenceActivityDescription = "SequenceActivityDescription";

	internal const string CompensateActivityDescription = "CompensateActivityDescription";

	internal const string Error_CompensateBadTargetTX = "Error_CompensateBadTargetTX";

	internal const string Error_CancelHandlerParentNotScope = "Error_CancelHandlerParentNotScope";

	internal const string FaultHandlerActivityDescription = "FaultHandlerActivityDescription";

	internal const string Error_ExceptionTypeNotException = "Error_ExceptionTypeNotException";

	internal const string Error_FaultIsNotOfFaultType = "Error_FaultIsNotOfFaultType";

	internal const string Error_FaultTypeNoDefaultConstructor = "Error_FaultTypeNoDefaultConstructor";

	internal const string FilterDescription_FaultHandlerActivity = "FilterDescription_FaultHandlerActivity";

	internal const string Error_FaultHandlerActivityParentNotFaultHandlersActivity = "Error_FaultHandlerActivityParentNotFaultHandlersActivity";

	internal const string Error_FaultHandlerActivityAllMustBeLast = "Error_FaultHandlerActivityAllMustBeLast";

	internal const string Error_FaultHandlersActivityDeclNotAllFaultHandlerActivityDecl = "Error_FaultHandlersActivityDeclNotAllFaultHandlerActivityDecl";

	internal const string Error_FaultHandlerActivityWrongOrder = "Error_FaultHandlerActivityWrongOrder";

	internal const string Error_SenderMustBeActivityExecutionContext = "Error_SenderMustBeActivityExecutionContext";

	internal const string Error_XomlWorkflowHasCode = "Error_XomlWorkflowHasCode";

	internal const string Error_WrongParamForActivityResolveEventArgs = "Error_WrongParamForActivityResolveEventArgs";

	internal const string Error_ValidatorThrewException = "Error_ValidatorThrewException";

	internal const string Error_Missing_CanModifyProperties_True = "Error_Missing_CanModifyProperties_True";

	internal const string Error_Missing_CanModifyProperties_False = "Error_Missing_CanModifyProperties_False";

	internal const string Error_ModelingConstructsCanNotContainModelingConstructs = "Error_ModelingConstructsCanNotContainModelingConstructs";

	internal const string Error_RootIsNotEnabled = "Error_RootIsNotEnabled";

	internal const string Error_MissingSetAccessor = "Error_MissingSetAccessor";

	internal const string Error_MissingAddHandler = "Error_MissingAddHandler";

	internal const string Error_MissingCLRProperty = "Error_MissingCLRProperty";

	internal const string Error_NotReadOnlyProperty = "Error_NotReadOnlyProperty";

	internal const string Error_InvalidDependencyProperty = "Error_InvalidDependencyProperty";

	internal const string Error_ActivityNameExist = "Error_ActivityNameExist";

	internal const string CannotCreateAttribute = "CannotCreateAttribute";

	internal const string NamespaceAndDeclaringTypeCannotBeNull = "NamespaceAndDeclaringTypeCannotBeNull";

	internal const string NotElementType = "NotElementType";

	internal const string Error_LayoutSerializationActivityNotFound = "Error_LayoutSerializationActivityNotFound";

	internal const string Error_LayoutSerializationAssociatedActivityNotFound = "Error_LayoutSerializationAssociatedActivityNotFound";

	internal const string Error_LayoutSerializationPersistenceSupport = "Error_LayoutSerializationPersistenceSupport";

	internal const string Error_LayoutSerializationRootDesignerNotFound = "Error_LayoutSerializationRootDesignerNotFound";

	internal const string Error_ParameterCannotBeEmpty = "Error_ParameterCannotBeEmpty";

	internal const string InvalidExecutionStatus = "InvalidExecutionStatus";

	internal const string Error_LayoutDeserialization = "Error_LayoutDeserialization";

	internal const string Error_LayoutSerialization = "Error_LayoutSerialization";

	internal const string Error_SerializerStackOverflow = "Error_SerializerStackOverflow";

	internal const string Error_InvalidActivityForWorkflowChanges = "Error_InvalidActivityForWorkflowChanges";

	internal const string Error_InvalidMemberType = "Error_InvalidMemberType";

	internal const string Error_BindPathNullValue = "Error_BindPathNullValue";

	internal const string Error_MarkupExtensionMissingTerminatingCharacter = "Error_MarkupExtensionMissingTerminatingCharacter";

	internal const string Error_MarkupExtensionDeserializeFailed = "Error_MarkupExtensionDeserializeFailed";

	internal const string Error_ApplyDynamicChangeFailed = "Error_ApplyDynamicChangeFailed";

	internal const string Error_ActivityCircularReference = "Error_ActivityCircularReference";

	internal const string Error_ValidatorTypeIsInvalid = "Error_ValidatorTypeIsInvalid";

	internal const string Error_InvalidServiceProvider = "Error_InvalidServiceProvider";

	internal const string Error_InvalidRootForWorkflowChanges = "Error_InvalidRootForWorkflowChanges";

	internal const string Error_ExtraCharacterFoundAtEnd = "Error_ExtraCharacterFoundAtEnd";

	internal const string Error_WorkflowChangesNotSupported = "Error_WorkflowChangesNotSupported";

	internal const string Error_TypeSystemAttributeArgument = "Error_TypeSystemAttributeArgument";

	internal const string Error_InvalidElementFoundForType = "Error_InvalidElementFoundForType";

	internal const string Error_ActivitySaveLoadNotCalled = "Error_ActivitySaveLoadNotCalled";

	internal const string Error_CanNotBindProperty = "Error_CanNotBindProperty";

	private static CultureInfo Culture => null;

	internal SR()
	{
		resources = new ResourceManager("System.Workflow.ComponentModel.StringResources", Assembly.GetExecutingAssembly());
	}

	private static SR GetLoader()
	{
		if (loader == null)
		{
			loader = new SR();
		}
		return loader;
	}

	internal static string GetString(string name, params object[] args)
	{
		return GetString(Culture, name, args);
	}

	internal static string GetString(CultureInfo culture, string name, params object[] args)
	{
		SR sR = GetLoader();
		if (sR == null)
		{
			return null;
		}
		string @string = sR.resources.GetString(name, culture);
		if (args != null && args.Length != 0)
		{
			return string.Format(CultureInfo.CurrentCulture, @string, args);
		}
		return @string;
	}

	internal static string GetString(string name)
	{
		return GetString(Culture, name);
	}

	internal static string GetString(CultureInfo culture, string name)
	{
		return GetLoader()?.resources.GetString(name, culture);
	}
}
namespace System
{
	internal static class AppContextDefaultValues
	{
		public static void PopulateDefaultValues()
		{
			ParseTargetFrameworkName(out var identifier, out var profile, out var version);
			PopulateDefaultValuesPartial(identifier, profile, version);
		}

		private static void ParseTargetFrameworkName(out string identifier, out string profile, out int version)
		{
			string targetFrameworkName = AppDomain.CurrentDomain.SetupInformation.TargetFrameworkName;
			if (!TryParseFrameworkName(targetFrameworkName, out identifier, out version, out profile))
			{
				identifier = ".NETFramework";
				version = 40000;
				profile = string.Empty;
			}
		}

		private static bool TryParseFrameworkName(string frameworkName, out string identifier, out int version, out string profile)
		{
			identifier = (profile = string.Empty);
			version = 0;
			if (frameworkName == null || frameworkName.Length == 0)
			{
				return false;
			}
			string[] array = frameworkName.Split(',');
			version = 0;
			if (array.Length < 2 || array.Length > 3)
			{
				return false;
			}
			identifier = array[0].Trim();
			if (identifier.Length == 0)
			{
				return false;
			}
			bool flag = false;
			profile = null;
			for (int i = 1; i < array.Length; i++)
			{
				string[] array2 = array[i].Split('=');
				if (array2.Length != 2)
				{
					return false;
				}
				string text = array2[0].Trim();
				string text2 = array2[1].Trim();
				if (text.Equals("Version", StringComparison.OrdinalIgnoreCase))
				{
					flag = true;
					if (text2.Length > 0 && (text2[0] == 'v' || text2[0] == 'V'))
					{
						text2 = text2.Substring(1);
					}
					Version version2 = new Version(text2);
					version = version2.Major * 10000;
					if (version2.Minor > 0)
					{
						version += version2.Minor * 100;
					}
					if (version2.Build > 0)
					{
						version += version2.Build;
					}
				}
				else
				{
					if (!text.Equals("Profile", StringComparison.OrdinalIgnoreCase))
					{
						return false;
					}
					if (!string.IsNullOrEmpty(text2))
					{
						profile = text2;
					}
				}
			}
			if (!flag)
			{
				return false;
			}
			return true;
		}

		private static void PopulateDefaultValuesPartial(string platformIdentifier, string profile, int version)
		{
			if ((platformIdentifier == ".NETCore" || platformIdentifier == ".NETFramework") && version <= 40702)
			{
				System.LocalAppContext.DefineSwitchDefault("Switch.System.Workflow.ComponentModel.UseLegacyHashForXomlFileChecksum", initialValue: true);
			}
		}
	}
	internal static class LocalAppContext
	{
		private delegate bool TryGetSwitchDelegate(string switchName, out bool value);

		private static TryGetSwitchDelegate TryGetSwitchFromCentralAppContext;

		private static bool s_canForwardCalls;

		private static Dictionary<string, bool> s_switchMap;

		private static readonly object s_syncLock;

		private static bool DisableCaching { get; set; }

		static LocalAppContext()
		{
			s_switchMap = new Dictionary<string, bool>();
			s_syncLock = new object();
			s_canForwardCalls = SetupDelegate();
			System.AppContextDefaultValues.PopulateDefaultValues();
			DisableCaching = IsSwitchEnabled("TestSwitch.LocalAppContext.DisableCaching");
		}

		public static bool IsSwitchEnabled(string switchName)
		{
			if (s_canForwardCalls && TryGetSwitchFromCentralAppContext(switchName, out var value))
			{
				return value;
			}
			return IsSwitchEnabledLocal(switchName);
		}

		private static bool IsSwitchEnabledLocal(string switchName)
		{
			bool flag;
			bool value;
			lock (s_switchMap)
			{
				flag = s_switchMap.TryGetValue(switchName, out value);
			}
			if (flag)
			{
				return value;
			}
			return false;
		}

		private static bool SetupDelegate()
		{
			Type type = typeof(object).Assembly.GetType("System.AppContext");
			if (type == null)
			{
				return false;
			}
			MethodInfo method = type.GetMethod("TryGetSwitch", BindingFlags.Static | BindingFlags.Public, null, new Type[2]
			{
				typeof(string),
				typeof(bool).MakeByRefType()
			}, null);
			if (method == null)
			{
				return false;
			}
			TryGetSwitchFromCentralAppContext = (TryGetSwitchDelegate)Delegate.CreateDelegate(typeof(TryGetSwitchDelegate), method);
			return true;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static bool GetCachedSwitchValue(string switchName, ref int switchValue)
		{
			if (switchValue < 0)
			{
				return false;
			}
			if (switchValue > 0)
			{
				return true;
			}
			return GetCachedSwitchValueInternal(switchName, ref switchValue);
		}

		private static bool GetCachedSwitchValueInternal(string switchName, ref int switchValue)
		{
			if (DisableCaching)
			{
				return IsSwitchEnabled(switchName);
			}
			bool flag = IsSwitchEnabled(switchName);
			switchValue = (flag ? 1 : (-1));
			return flag;
		}

		internal static void DefineSwitchDefault(string switchName, bool initialValue)
		{
			s_switchMap[switchName] = initialValue;
		}
	}
}
namespace System.Runtime.Serialization
{
	internal static class FormatterServicesNoSerializableCheck
	{
		private struct MemberInfoName
		{
			public MemberInfo[] MemberInfo;

			public string[] Names;
		}

		private static Dictionary<Type, MemberInfoName> m_MemberInfoTable = new Dictionary<Type, MemberInfoName>(32);

		internal static readonly string FakeNameSeparatorString = "+";

		private static object s_FormatterServicesSyncObject = null;

		private static object formatterServicesSyncObject
		{
			get
			{
				if (s_FormatterServicesSyncObject == null)
				{
					object value = new object();
					Interlocked.CompareExchange(ref s_FormatterServicesSyncObject, value, null);
				}
				return s_FormatterServicesSyncObject;
			}
		}

		private static MemberInfo[] GetSerializableMembers2(Type type)
		{
			FieldInfo[] fields = type.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
			int num = 0;
			for (int i = 0; i < fields.Length; i++)
			{
				if ((fields[i].Attributes & FieldAttributes.NotSerialized) != FieldAttributes.NotSerialized)
				{
					num++;
				}
			}
			if (num != fields.Length)
			{
				FieldInfo[] array = new FieldInfo[num];
				num = 0;
				for (int j = 0; j < fields.Length; j++)
				{
					if ((fields[j].Attributes & FieldAttributes.NotSerialized) != FieldAttributes.NotSerialized)
					{
						array[num] = fields[j];
						num++;
					}
				}
				return array;
			}
			return fields;
		}

		private static bool CheckSerializable(Type type)
		{
			return true;
		}

		private static MemberInfo[] InternalGetSerializableMembers(Type type, out string[] typeNames)
		{
			typeNames = null;
			ArrayList arrayList = null;
			ArrayList arrayList2 = null;
			if (type.IsInterface)
			{
				return new MemberInfo[0];
			}
			MemberInfo[] array = GetSerializableMembers2(type);
			if (array != null)
			{
				typeNames = new string[array.Length];
				for (int i = 0; i < array.Length; i++)
				{
					typeNames[i] = array[i].Name;
				}
			}
			Type baseType = type.BaseType;
			if (baseType != null && baseType != typeof(object))
			{
				Type[] parentTypes = null;
				int parentTypeCount = 0;
				bool parentTypes2 = GetParentTypes(baseType, out parentTypes, out parentTypeCount);
				if (parentTypeCount > 0)
				{
					arrayList = new ArrayList();
					arrayList2 = new ArrayList();
					for (int j = 0; j < parentTypeCount; j++)
					{
						baseType = parentTypes[j];
						if (!CheckSerializable(baseType))
						{
							throw new SerializationException();
						}
						FieldInfo[] fields = baseType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic);
						string text = (parentTypes2 ? baseType.Name : baseType.FullName);
						FieldInfo[] array2 = fields;
						foreach (FieldInfo fieldInfo in array2)
						{
							if (fieldInfo.IsPrivate && !fieldInfo.IsNotSerialized)
							{
								arrayList.Add(fieldInfo);
								arrayList2.Add(text + FakeNameSeparatorString + fieldInfo.Name);
							}
						}
					}
					if (arrayList != null && arrayList.Count > 0)
					{
						MemberInfo[] array3 = new MemberInfo[arrayList.Count + array.Length];
						Array.Copy(array, array3, array.Length);
						arrayList.CopyTo(array3, array.Length);
						array = array3;
						string[] array4 = new string[arrayList2.Count + typeNames.Length];
						Array.Copy(typeNames, array4, typeNames.Length);
						arrayList2.CopyTo(array4, typeNames.Length);
						typeNames = array4;
					}
				}
			}
			return array;
		}

		private static bool GetParentTypes(Type parentType, out Type[] parentTypes, out int parentTypeCount)
		{
			parentTypes = null;
			parentTypeCount = 0;
			bool flag = true;
			Type type = parentType;
			while (type != typeof(object))
			{
				if (!type.IsInterface)
				{
					string name = type.Name;
					int num = 0;
					while (flag && num < parentTypeCount)
					{
						string name2 = parentTypes[num].Name;
						if (name2.Length == name.Length && name2[0] == name[0] && name == name2)
						{
							flag = false;
							break;
						}
						num++;
					}
					if (parentTypes == null || parentTypeCount == parentTypes.Length)
					{
						Type[] array = new Type[Math.Max(parentTypeCount * 2, 12)];
						if (parentTypes != null)
						{
							Array.Copy(parentTypes, 0, array, 0, parentTypeCount);
						}
						parentTypes = array;
					}
					parentTypes[parentTypeCount++] = type;
				}
				type = type.BaseType;
			}
			return flag;
		}

		public static MemberInfo[] GetSerializableMembers(Type type, out string[] names)
		{
			names = null;
			if (type == null)
			{
				throw new ArgumentNullException("type");
			}
			MemberInfoName value;
			lock (formatterServicesSyncObject)
			{
				if (m_MemberInfoTable.TryGetValue(type, out value))
				{
					names = value.Names;
					return value.MemberInfo;
				}
			}
			value.MemberInfo = InternalGetSerializableMembers(type, out value.Names);
			lock (formatterServicesSyncObject)
			{
				if (m_MemberInfoTable.TryGetValue(type, out var value2))
				{
					names = value2.Names;
					return value2.MemberInfo;
				}
				m_MemberInfoTable[type] = value;
			}
			names = value.Names;
			return value.MemberInfo;
		}
	}
}
namespace System.Workflow
{
	internal static class Utility
	{
		internal static Guid CreateGuid(string guidString)
		{
			bool flag = false;
			Guid empty = Guid.Empty;
			try
			{
				empty = new Guid(guidString);
				flag = true;
				return empty;
			}
			finally
			{
			}
		}

		internal static bool TryCreateGuid(string guidString, out Guid result)
		{
			bool result2 = false;
			result = Guid.Empty;
			try
			{
				result = new Guid(guidString);
				result2 = true;
			}
			catch (ArgumentException)
			{
			}
			catch (FormatException)
			{
			}
			catch (OverflowException)
			{
			}
			return result2;
		}
	}
}
namespace System.Workflow.Interop
{
	internal static class NativeMethods
	{
		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
		[ComVisible(false)]
		internal class HDITEM
		{
			public int mask;

			public int cxy;

			public IntPtr pszText = IntPtr.Zero;

			public IntPtr hbm = IntPtr.Zero;

			public int cchTextMax;

			public int fmt;

			public int lParam;

			public int image;

			public int order;

			public int type;

			public IntPtr filter = IntPtr.Zero;
		}

		[StructLayout(LayoutKind.Sequential)]
		internal class XFORM
		{
			public float eM11 = 1f;

			public float eM12;

			public float eM21;

			public float eM22 = 1f;

			public float eDx;

			public float eDy;

			public XFORM()
			{
			}

			public XFORM(Matrix transform)
			{
				eM11 = transform.Elements[0];
				eM12 = transform.Elements[1];
				eM21 = transform.Elements[2];
				eM22 = transform.Elements[3];
				eDx = transform.Elements[4];
				eDy = transform.Elements[5];
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		internal class LOGBRUSH
		{
			public int lbStyle;

			public int lbColor;

			public long lbHatch;

			public LOGBRUSH(int style, int color, int hatch)
			{
				lbStyle = style;
				lbColor = color;
				lbHatch = hatch;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		internal class POINT
		{
			public int x;

			public int y;
		}

		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto, Pack = 1)]
		internal class NMHDR
		{
			public IntPtr hwndFrom;

			public int idFrom;

			public int code;

			public NMHDR()
			{
				hwndFrom = IntPtr.Zero;
				idFrom = 0;
				code = 0;
			}
		}

		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto, Pack = 1)]
		internal struct RECT
		{
			public int left;

			public int top;

			public int right;

			public int bottom;
		}

		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto, Pack = 1)]
		internal struct TOOLINFO
		{
			public int size;

			public int flags;

			public IntPtr hwnd;

			public IntPtr id;

			public RECT rect;

			public IntPtr hinst;

			public IntPtr text;

			public IntPtr lParam;
		}

		internal const int HDI_WIDTH = 1;

		internal const int HDI_HEIGHT = 1;

		internal const int HDI_TEXT = 2;

		internal const int HDI_FORMAT = 4;

		internal const int HDI_LPARAM = 8;

		internal const int HDI_BITMAP = 16;

		internal const int HDI_IMAGE = 32;

		internal const int HDI_DI_SETITEM = 64;

		internal const int HDI_ORDER = 128;

		internal const int HDI_FILTER = 256;

		internal const int HDF_LEFT = 0;

		internal const int HDF_RIGHT = 1;

		internal const int HDF_CENTER = 2;

		internal const int HDF_JUSTIFYMASK = 3;

		internal const int HDF_RTLREADING = 4;

		internal const int HDF_OWNERDRAW = 32768;

		internal const int HDF_STRING = 16384;

		internal const int HDF_BITMAP = 8192;

		internal const int HDF_BITMAP_ON_RIGHT = 4096;

		internal const int HDF_IMAGE = 2048;

		internal const int HDF_SORTUP = 1024;

		internal const int HDF_SORTDOWN = 512;

		internal const int LVM_GETHEADER = 4127;

		internal const int HDM_GETITEM = 4619;

		internal const int HDM_SETITEM = 4620;

		internal const int HORZRES = 8;

		internal const int VERTRES = 10;

		internal const int LOGPIXELSX = 88;

		internal const int LOGPIXELSY = 90;

		internal const int PHYSICALWIDTH = 110;

		internal const int PHYSICALHEIGHT = 111;

		internal const int PHYSICALOFFSETX = 112;

		internal const int PHYSICALOFFSETY = 113;

		internal const int WM_SETREDRAW = 11;

		internal const int HOLLOW_BRUSH = 5;

		internal const int OBJ_PEN = 1;

		internal const int OBJ_BRUSH = 2;

		internal const int OBJ_EXTPEN = 11;

		internal const int GM_ADVANCED = 2;

		internal const int PS_COSMETIC = 0;

		internal const int PS_USERSTYLE = 7;

		internal const int BS_SOLID = 0;

		internal const int WS_POPUP = int.MinValue;

		internal const int WS_EX_DLGMODALFRAME = 1;

		internal const int WM_SETICON = 128;

		internal const int SMALL_ICON = 0;

		internal const int LARGE_ICON = 1;

		internal const int PS_SOLID = 0;

		internal const int SWP_NOSIZE = 1;

		internal const int SWP_NOZORDER = 4;

		internal const int SWP_NOACTIVATE = 16;

		internal const int WM_NOTIFY = 78;

		internal const int WM_SETFONT = 48;

		internal const int WS_EX_TOPMOST = 8;

		internal const int WM_KEYDOWN = 256;

		internal const int WM_KEYUP = 257;

		internal const int WM_SYSKEYDOWN = 260;

		internal const int WM_SYSKEYUP = 261;

		internal const int TTF_IDISHWND = 1;

		internal const int TTF_CENTERTIP = 2;

		internal const int TTF_RTLREADING = 4;

		internal const int TTF_SUBCLASS = 16;

		internal const int TTF_TRACK = 32;

		internal const int TTF_ABSOLUTE = 128;

		internal const int TTF_TRANSPARENT = 256;

		internal const int TTF_PARSELINKS = 4096;

		internal const int TTF_DI_SETITEM = 32768;

		internal const int TTS_ALWAYSTIP = 1;

		internal const int TTS_NOPREFIX = 2;

		internal const int TTS_NOANIMATE = 16;

		internal const int TTS_NOFADE = 32;

		internal const int TTS_BALLOON = 64;

		internal const int TTS_CLOSE = 128;

		internal const int TTDT_AUTOMATIC = 0;

		internal const int TTDT_RESHOW = 1;

		internal const int TTDT_AUTOPOP = 2;

		internal const int TTDT_INITIAL = 3;

		internal const int TTI_NONE = 0;

		internal const int TTI_INFO = 1;

		internal const int TTI_WARNING = 2;

		internal const int TTI_ERROR = 3;

		internal static readonly int TTN_GETDISPINFO;

		internal static readonly int TTN_NEEDTEXT;

		internal static readonly int TTN_SHOW;

		internal static readonly int TTN_POP;

		internal static readonly int TTM_POP;

		internal static readonly int TTM_ADDTOOL;

		internal static readonly int TTM_SETTITLE;

		internal static readonly int TTM_DELTOOL;

		internal static readonly int TTM_NEWTOOLRECT;

		internal static readonly int TTM_GETTOOLINFO;

		internal static readonly int TTM_SETTOOLINFO;

		internal static readonly int TTM_HITTEST;

		internal static readonly int TTM_GETTEXT;

		internal static readonly int TTM_UPDATETIPTEXT;

		internal static readonly int TTM_ENUMTOOLS;

		internal static readonly int TTM_GETCURRENTTOOL;

		internal static readonly int TTM_TRACKACTIVATE;

		internal static readonly int TTM_TRACKPOSITION;

		internal static readonly int TTM_ACTIVATE;

		internal static readonly int TTM_ADJUSTRECT;

		internal static readonly int TTM_SETDELAYTIME;

		internal static readonly int TTM_RELAYEVENT;

		internal static readonly int TTM_UPDATE;

		internal static readonly int TTM_WINDOWFROMPOINT;

		internal static readonly int TTM_GETDELAYTIME;

		internal static readonly int TTM_SETMAXTIPWIDTH;

		private const int TTN_GETDISPINFOA = -520;

		private const int TTN_GETDISPINFOW = -530;

		private const int TTN_NEEDTEXTA = -520;

		private const int TTN_NEEDTEXTW = -530;

		private const int TTM_SETTITLEA = 1056;

		private const int TTM_SETTITLEW = 1057;

		private const int TTM_ADDTOOLA = 1028;

		private const int TTM_ADDTOOLW = 1074;

		private const int TTM_DELTOOLA = 1029;

		private const int TTM_DELTOOLW = 1075;

		private const int TTM_NEWTOOLRECTA = 1030;

		private const int TTM_NEWTOOLRECTW = 1076;

		private const int TTM_GETTOOLINFOA = 1032;

		private const int TTM_GETTOOLINFOW = 1077;

		private const int TTM_SETTOOLINFOA = 1033;

		private const int TTM_SETTOOLINFOW = 1078;

		private const int TTM_HITTESTA = 1034;

		private const int TTM_HITTESTW = 1079;

		private const int TTM_GETTEXTA = 1035;

		private const int TTM_GETTEXTW = 1080;

		private const int TTM_UPDATETIPTEXTA = 1036;

		private const int TTM_UPDATETIPTEXTW = 1081;

		private const int TTM_ENUMTOOLSA = 1038;

		private const int TTM_ENUMTOOLSW = 1082;

		private const int TTM_GETCURRENTTOOLA = 1039;

		private const int TTM_GETCURRENTTOOLW = 1083;

		private const int S_OK = 0;

		private const int LOAD_LIBRARY_SEARCH_SYSTEM32 = 2048;

		private static int cachedIsDynamicCodePolicyEnabled;

		static NativeMethods()
		{
			TTN_SHOW = -521;
			TTN_POP = -522;
			TTM_POP = 1052;
			TTM_TRACKACTIVATE = 1041;
			TTM_TRACKPOSITION = 1042;
			TTM_ACTIVATE = 1025;
			TTM_ADJUSTRECT = 1055;
			TTM_SETDELAYTIME = 1027;
			TTM_RELAYEVENT = 1031;
			TTM_UPDATE = 1053;
			TTM_WINDOWFROMPOINT = 1040;
			TTM_GETDELAYTIME = 1045;
			TTM_SETMAXTIPWIDTH = 1048;
			cachedIsDynamicCodePolicyEnabled = -1;
			if (Marshal.SystemDefaultCharSize == 1)
			{
				TTN_GETDISPINFO = -520;
				TTN_NEEDTEXT = -520;
				TTM_ADDTOOL = 1028;
				TTM_SETTITLE = 1056;
				TTM_DELTOOL = 1029;
				TTM_NEWTOOLRECT = 1030;
				TTM_GETTOOLINFO = 1032;
				TTM_SETTOOLINFO = 1033;
				TTM_HITTEST = 1034;
				TTM_GETTEXT = 1035;
				TTM_UPDATETIPTEXT = 1036;
				TTM_ENUMTOOLS = 1038;
				TTM_GETCURRENTTOOL = 1039;
			}
			else
			{
				TTN_GETDISPINFO = -530;
				TTN_NEEDTEXT = -530;
				TTM_ADDTOOL = 1074;
				TTM_SETTITLE = 1057;
				TTM_DELTOOL = 1075;
				TTM_NEWTOOLRECT = 1076;
				TTM_GETTOOLINFO = 1077;
				TTM_SETTOOLINFO = 1078;
				TTM_HITTEST = 1079;
				TTM_GETTEXT = 1080;
				TTM_UPDATETIPTEXT = 1081;
				TTM_ENUMTOOLS = 1082;
				TTM_GETCURRENTTOOL = 1083;
			}
		}

		internal static bool Failed(int hr)
		{
			return hr < 0;
		}

		internal static int ThrowOnFailure(int hr)
		{
			return ThrowOnFailure(hr, null);
		}

		internal static int ThrowOnFailure(int hr, params int[] expectedHRFailure)
		{
			if (Failed(hr) && (expectedHRFailure == null || Array.IndexOf(expectedHRFailure, hr) < 0))
			{
				Marshal.ThrowExceptionForHR(hr);
			}
			return hr;
		}

		internal static IntPtr ListView_GetHeader(IntPtr hWndLV)
		{
			return SendMessage(hWndLV, 4127, IntPtr.Zero, IntPtr.Zero);
		}

		internal static bool Header_GetItem(IntPtr hWndHeader, int index, [In][Out] HDITEM hdi)
		{
			IntPtr intPtr = SendMessage(hWndHeader, 4619, new IntPtr(index), hdi);
			if (!(intPtr != IntPtr.Zero))
			{
				return false;
			}
			return true;
		}

		internal static bool Header_SetItem(IntPtr hWndHeader, int index, [In][Out] HDITEM hdi)
		{
			IntPtr intPtr = SendMessage(hWndHeader, 4620, new IntPtr(index), hdi);
			if (!(intPtr != IntPtr.Zero))
			{
				return false;
			}
			return true;
		}

		[DllImport("gdi32", CharSet = CharSet.Auto)]
		internal static extern bool DeleteObject(IntPtr hObject);

		[DllImport("gdi32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
		public static extern int GetDeviceCaps(IntPtr hDC, int nIndex);

		[DllImport("user32", CharSet = CharSet.Auto)]
		public static extern IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, [In][Out] HDITEM lParam);

		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		public static extern bool IsWindowVisible(IntPtr hWnd);

		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		public static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);

		[DllImport("gdi32.dll", CharSet = CharSet.Auto, ExactSpelling = true, SetLastError = true)]
		public static extern bool LineTo(HandleRef hdc, int x, int y);

		[DllImport("gdi32.dll", CharSet = CharSet.Auto, ExactSpelling = true, SetLastError = true)]
		public static extern bool MoveToEx(HandleRef hdc, int x, int y, POINT pt);

		[DllImport("gdi32.dll", CharSet = CharSet.Auto, ExactSpelling = true, SetLastError = true)]
		public static extern IntPtr SelectObject(HandleRef hdc, HandleRef obj);

		[DllImport("gdi32.dll", CharSet = CharSet.Auto, ExactSpelling = true, SetLastError = true)]
		public static extern IntPtr GetCurrentObject(HandleRef hDC, uint uObjectType);

		[DllImport("gdi32.dll", CharSet = CharSet.Auto, ExactSpelling = true, SetLastError = true)]
		public static extern int DeleteObject(HandleRef hObject);

		[DllImport("gdi32.dll", CharSet = CharSet.Auto, ExactSpelling = true, SetLastError = true)]
		public static extern IntPtr ExtCreatePen(int style, int nWidth, LOGBRUSH logbrush, int styleArrayLength, int[] styleArray);

		[DllImport("gdi32.dll", CharSet = CharSet.Auto, ExactSpelling = true, SetLastError = true)]
		public static extern int SetWorldTransform(HandleRef hdc, XFORM xform);

		[DllImport("gdi32.dll", CharSet = CharSet.Auto, ExactSpelling = true, SetLastError = true)]
		public static extern int SetGraphicsMode(HandleRef hdc, int iMode);

		[DllImport("user32.dll")]
		internal static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, ref TOOLINFO ti);

		[DllImport("user32.dll")]
		internal static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, ref RECT rc);

		[DllImport("user32.dll")]
		internal static extern int SetWindowPos(IntPtr hWnd, IntPtr hwndInsertAfter, int x, int y, int width, int height, int flags);

		[DllImport("wldp.dll", ExactSpelling = true)]
		internal static extern int WldpIsDynamicCodePolicyEnabled(out int enabled);

		[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		public static extern IntPtr GetModuleHandle(string modName);

		[DllImport("kernel32.dll", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		public static extern IntPtr GetProcAddress(HandleRef hModule, string lpProcName);

		[DllImport("kernel32.dll", BestFitMapping = false, CharSet = CharSet.Auto, SetLastError = true)]
		private static extern IntPtr LoadLibraryEx(string lpModuleName, IntPtr hFile, uint dwFlags);

		[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		private static extern IntPtr LoadLibrary(string libname);

		[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		public static extern bool FreeLibrary(HandleRef hModule);

		private static IntPtr LoadLibraryFromSystemPathIfAvailable(string libraryName)
		{
			IntPtr result = IntPtr.Zero;
			IntPtr moduleHandle = GetModuleHandle("kernel32.dll");
			if (moduleHandle != IntPtr.Zero)
			{
				result = ((!(GetProcAddress(new HandleRef(null, moduleHandle), "AddDllDirectory") != IntPtr.Zero)) ? LoadLibrary(libraryName) : LoadLibraryEx(libraryName, IntPtr.Zero, 2048u));
			}
			return result;
		}

		private static bool IsApiAvailable(string libName, string procName)
		{
			bool flag = false;
			if (!string.IsNullOrEmpty(libName) && !string.IsNullOrEmpty(procName))
			{
				IntPtr intPtr = LoadLibraryFromSystemPathIfAvailable(libName);
				if (intPtr != IntPtr.Zero)
				{
					IntPtr procAddress = GetProcAddress(new HandleRef(flag, intPtr), procName);
					if (procAddress != IntPtr.Zero)
					{
						flag = true;
					}
				}
				FreeLibrary(new HandleRef(flag, intPtr));
			}
			return flag;
		}

		internal static bool IsDynamicCodePolicyEnabled()
		{
			if (cachedIsDynamicCodePolicyEnabled == -1)
			{
				int num = 0;
				if (IsApiAvailable("wldp.dll", "WldpIsDynamicCodePolicyEnabled"))
				{
					int enabled = 0;
					num = ((WldpIsDynamicCodePolicyEnabled(out enabled) == 0 && enabled != 0) ? 1 : 0);
				}
				cachedIsDynamicCodePolicyEnabled = num;
			}
			return cachedIsDynamicCodePolicyEnabled > 0;
		}
	}
}
namespace System.Workflow.Runtime
{
	internal static class WorkflowTrace
	{
		private static TraceSource runtime;

		private static TraceSource tracking;

		private static TraceSource host;

		internal static TraceSource Runtime => runtime;

		internal static TraceSource Tracking => tracking;

		internal static TraceSource Host => host;

		static WorkflowTrace()
		{
			runtime = new TraceSource("System.Workflow.Runtime");
			runtime.Switch = new SourceSwitch("System.Workflow.Runtime", SourceLevels.Off.ToString());
			tracking = new TraceSource("System.Workflow.Runtime.Tracking");
			tracking.Switch = new SourceSwitch("System.Workflow.Runtime.Tracking", SourceLevels.Off.ToString());
			host = new TraceSource("System.Workflow.Runtime.Hosting");
			host.Switch = new SourceSwitch("System.Workflow.Runtime.Hosting", SourceLevels.Off.ToString());
			BooleanSwitch booleanSwitch = new BooleanSwitch("System.Workflow LogToFile", "Log traces to file");
			if (booleanSwitch.Enabled)
			{
				TextWriterTraceListener listener = new TextWriterTraceListener("WorkflowTrace.log");
				Trace.Listeners.Add(listener);
				runtime.Listeners.Add(listener);
				hoslisteners.Add(listener);
			}
			BooleanSwitch booleanSwitch2 = new BooleanSwitch("System.Workflow LogToTraceListeners", "Trace to listeners in Trace.Listeners", "0");
			if (!booleanSwitch2.Enabled)
			{
				return;
			}
			foreach (TraceListener listener2 in Trace.Listeners)
			{
				if (!(listener2 is DefaultTraceListener))
				{
					runtime.Listeners.Add(listener2);
					tracking.Listeners.Add(listener2);
					hoslisteners.Add(listener2);
				}
			}
		}
	}
}
namespace System.Workflow.ComponentModel
{
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowChanges
	{
		public static readonly DependencyProperty ConditionProperty = DependencyProperty.RegisterAttached("Condition", typeof(ActivityCondition), typeof(WorkflowChanges), new PropertyMetadata(DependencyPropertyOptions.Metadata));

		internal static DependencyProperty WorkflowChangeActionsProperty = DependencyProperty.RegisterAttached("WorkflowChangeActions", typeof(IList), typeof(WorkflowChanges), new PropertyMetadata(DependencyPropertyOptions.NonSerialized));

		internal static DependencyProperty WorkflowChangeVersionProperty = DependencyProperty.RegisterAttached("WorkflowChangeVersion", typeof(Guid), typeof(WorkflowChanges), new PropertyMetadata(Guid.Empty, DependencyPropertyOptions.NonSerialized));

		private Activity originalRootActivity;

		private Activity clonedRootActivity;

		private List<WorkflowChangeAction> modelChangeActions = new List<WorkflowChangeAction>();

		private bool saved;

		public CompositeActivity TransientWorkflow => clonedRootActivity as CompositeActivity;

		public WorkflowChanges(Activity rootActivity)
		{
			if (rootActivity == null)
			{
				throw new ArgumentNullException("rootActivity");
			}
			if (!(rootActivity is CompositeActivity) || rootActivity.Parent != null)
			{
				throw new ArgumentException(SR.GetString("Error_RootActivityTypeInvalid2"), "rootActivity");
			}
			if (rootActivity.DesignMode)
			{
				throw new InvalidOperationException(SR.GetString("Error_NoRuntimeAvailable"));
			}
			originalRootActivity = (Activity)rootActivity.GetValue(Activity.WorkflowDefinitionProperty);
			if (originalRootActivity == null)
			{
				originalRootActivity = rootActivity;
			}
			clonedRootActivity = CloneRootActivity(originalRootActivity);
			ApplyDynamicUpdateMode(clonedRootActivity);
		}

		public static object GetCondition(object dependencyObject)
		{
			if (dependencyObject == null)
			{
				throw new ArgumentNullException("dependencyObject");
			}
			if (!(dependencyObject is DependencyObject))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(DependencyObject).FullName), "dependencyObject");
			}
			return (dependencyObject as DependencyObject).GetValue(ConditionProperty);
		}

		public static void SetCondition(object dependencyObject, object value)
		{
			if (dependencyObject == null)
			{
				throw new ArgumentNullException("dependencyObject");
			}
			if (!(dependencyObject is DependencyObject))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(DependencyObject).FullName), "dependencyObject");
			}
			(dependencyObject as DependencyObject).SetValue(ConditionProperty, value);
		}

		public ValidationErrorCollection Validate()
		{
			TypeProvider serviceInstance = CreateTypeProvider(originalRootActivity);
			ServiceContainer serviceContainer = new ServiceContainer();
			serviceContainer.AddService(typeof(ITypeProvider), serviceInstance);
			ValidationManager validationManager = new ValidationManager(serviceContainer);
			ValidationErrorCollection errors;
			using (WorkflowCompilationContext.CreateScope(validationManager))
			{
				errors = ValidationHelpers.ValidateObject(validationManager, clonedRootActivity);
			}
			return XomlCompilerHelper.MorphIntoFriendlyValidationErrors(errors);
		}

		private void Save()
		{
			ValidationErrorCollection validationErrorCollection = Validate();
			if (validationErrorCollection.HasErrors)
			{
				throw new WorkflowValidationFailedException(SR.GetString("Error_CompilerValidationFailed"), validationErrorCollection);
			}
			object value = originalRootActivity.GetValue(ConditionTypeConverter.DeclarativeConditionDynamicProp);
			object value2 = clonedRootActivity.GetValue(ConditionTypeConverter.DeclarativeConditionDynamicProp);
			if (value != null)
			{
				modelChangeActions.AddRange(((IWorkflowChangeDiff)value).Diff(value, value2));
			}
			else if (value2 != null)
			{
				modelChangeActions.AddRange(((IWorkflowChangeDiff)value2).Diff(value, value2));
			}
			modelChangeActions.AddRange(DiffTrees(originalRootActivity as CompositeActivity, clonedRootActivity as CompositeActivity));
			ReleaseDynamicUpdateMode(clonedRootActivity);
			ArrayList arrayList = (ArrayList)clonedRootActivity.GetValue(WorkflowChangeActionsProperty);
			if (arrayList == null)
			{
				arrayList = new ArrayList();
				clonedRootActivity.SetValue(WorkflowChangeActionsProperty, arrayList);
			}
			arrayList.AddRange(modelChangeActions);
			clonedRootActivity.SetValue(WorkflowChangeVersionProperty, Guid.NewGuid());
			saved = true;
			((IDependencyObjectAccessor)clonedRootActivity).InitializeDefinitionForRuntime((DependencyObject)null);
		}

		internal void ApplyTo(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (activity.Parent != null)
			{
				throw new ArgumentException(SR.GetString("Error_RootActivityTypeInvalid"), "activity");
			}
			if (activity.RootActivity == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_MissingRootActivity"));
			}
			if (activity.WorkflowCoreRuntime == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_NoRuntimeAvailable"));
			}
			if (saved)
			{
				throw new InvalidOperationException(SR.GetString("Error_TransactionAlreadyApplied"));
			}
			if (!CompareWorkflowDefinition(originalRootActivity, (Activity)activity.RootActivity.GetValue(Activity.WorkflowDefinitionProperty)))
			{
				throw new ArgumentException(SR.GetString("Error_WorkflowDefinitionModified"), "activity");
			}
			Save();
			IWorkflowCoreRuntime workflowCoreRuntime = activity.WorkflowCoreRuntime;
			if (workflowCoreRuntime.CurrentAtomicActivity != null)
			{
				throw new InvalidOperationException(SR.GetString("Error_InsideAtomicScope"));
			}
			bool flag = workflowCoreRuntime.SuspendInstance(SR.GetString("SuspendReason_WorkflowChange"));
			try
			{
				List<Activity> list = new List<Activity>();
				Queue<Activity> queue = new Queue<Activity>();
				queue.Enqueue(workflowCoreRuntime.RootActivity);
				while (queue.Count > 0)
				{
					Activity activity2 = queue.Dequeue();
					list.Add(activity2);
					IList<Activity> list2 = (IList<Activity>)activity2.GetValue(Activity.ActiveExecutionContextsProperty);
					if (list2 == null)
					{
						continue;
					}
					foreach (Activity item in list2)
					{
						queue.Enqueue(item);
					}
				}
				ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
				foreach (WorkflowChangeAction modelChangeAction in modelChangeActions)
				{
					if (!(modelChangeAction is ActivityChangeAction))
					{
						continue;
					}
					foreach (Activity item2 in list)
					{
						if (modelChangeAction is RemovedActivityAction && item2.DottedPath == ((RemovedActivityAction)modelChangeAction).OriginalRemovedActivity.DottedPath)
						{
							validationErrorCollection.AddRange(modelChangeAction.ValidateChanges(item2));
						}
						if (item2.TraverseDottedPathFromRoot(((ActivityChangeAction)modelChangeAction).OwnerActivityDottedPath) != null)
						{
							validationErrorCollection.AddRange(modelChangeAction.ValidateChanges(item2));
						}
					}
				}
				if (validationErrorCollection.HasErrors)
				{
					throw new WorkflowValidationFailedException(SR.GetString("Error_RuntimeValidationFailed"), validationErrorCollection);
				}
				VerifyWorkflowCanBeChanged(workflowCoreRuntime);
				workflowCoreRuntime.OnBeforeDynamicChange(modelChangeActions);
				workflowCoreRuntime.RootActivity.SetValue(Activity.WorkflowDefinitionProperty, clonedRootActivity);
				foreach (Activity item3 in list)
				{
					foreach (WorkflowChangeAction modelChangeAction2 in modelChangeActions)
					{
						if (modelChangeAction2 is ActivityChangeAction && item3.TraverseDottedPathFromRoot(((ActivityChangeAction)modelChangeAction2).OwnerActivityDottedPath) != null)
						{
							bool flag2 = modelChangeAction2.ApplyTo(item3);
						}
					}
					Activity activityByName = clonedRootActivity.GetActivityByName(item3.QualifiedName);
					if (activityByName != null)
					{
						item3.FixUpMetaProperties(activityByName);
					}
					NotifyChangesToChildExecutors(workflowCoreRuntime, item3, modelChangeActions);
					NotifyChangesCompletedToChildExecutors(workflowCoreRuntime, item3);
				}
				workflowCoreRuntime.OnAfterDynamicChange(updateSucceeded: true, modelChangeActions);
			}
			catch
			{
				workflowCoreRuntime.OnAfterDynamicChange(updateSucceeded: false, modelChangeActions);
				throw;
			}
			finally
			{
				if (flag)
				{
					workflowCoreRuntime.Resume();
				}
			}
		}

		private void OnActivityListChanged(object sender, ActivityCollectionChangeEventArgs e)
		{
			if (e.RemovedItems == null)
			{
				return;
			}
			foreach (Activity removedItem in e.RemovedItems)
			{
				if (removedItem.Readonly)
				{
					ReleaseDynamicUpdateMode(removedItem);
				}
			}
		}

		private void ApplyDynamicUpdateMode(Activity seedActivity)
		{
			Queue<Activity> queue = new Queue<Activity>();
			queue.Enqueue(seedActivity);
			while (queue.Count > 0)
			{
				Activity activity = queue.Dequeue();
				activity.Readonly = true;
				activity.DynamicUpdateMode = true;
				foreach (DependencyProperty metaDependencyProperty in activity.MetaDependencyProperties)
				{
					if (activity.IsBindingSet(metaDependencyProperty))
					{
						ActivityBind binding = activity.GetBinding(metaDependencyProperty);
						if (binding != null)
						{
							binding.DynamicUpdateMode = true;
						}
					}
				}
				if (!(activity is CompositeActivity))
				{
					continue;
				}
				CompositeActivity compositeActivity = activity as CompositeActivity;
				compositeActivity.Activities.ListChanged += OnActivityListChanged;
				foreach (Activity activity2 in ((CompositeActivity)activity).Activities)
				{
					queue.Enqueue(activity2);
				}
			}
		}

		private void ReleaseDynamicUpdateMode(Activity seedActivity)
		{
			Queue<Activity> queue = new Queue<Activity>();
			queue.Enqueue(seedActivity);
			while (queue.Count > 0)
			{
				Activity activity = queue.Dequeue();
				activity.Readonly = false;
				activity.DynamicUpdateMode = false;
				foreach (DependencyProperty metaDependencyProperty in activity.MetaDependencyProperties)
				{
					if (activity.IsBindingSet(metaDependencyProperty))
					{
						ActivityBind binding = activity.GetBinding(metaDependencyProperty);
						if (binding != null)
						{
							binding.DynamicUpdateMode = false;
						}
					}
				}
				if (!(activity is CompositeActivity))
				{
					continue;
				}
				CompositeActivity compositeActivity = activity as CompositeActivity;
				compositeActivity.Activities.ListChanged -= OnActivityListChanged;
				foreach (Activity activity2 in ((CompositeActivity)activity).Activities)
				{
					queue.Enqueue(activity2);
				}
			}
		}

		private void VerifyWorkflowCanBeChanged(IWorkflowCoreRuntime workflowCoreRuntime)
		{
			if (!(workflowCoreRuntime.RootActivity.GetValue(ConditionProperty) is ActivityCondition activityCondition))
			{
				return;
			}
			using (workflowCoreRuntime.SetCurrentActivity(workflowCoreRuntime.RootActivity))
			{
				if (!activityCondition.Evaluate(workflowCoreRuntime.RootActivity, workflowCoreRuntime))
				{
					throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_DynamicUpdateEvaluation", workflowCoreRuntime.InstanceID.ToString()));
				}
			}
		}

		private void NotifyChangesCompletedToChildExecutors(IWorkflowCoreRuntime workflowCoreRuntime, Activity contextActivity)
		{
			Queue queue = new Queue();
			queue.Enqueue(contextActivity);
			while (queue.Count > 0)
			{
				if (!(queue.Dequeue() is CompositeActivity compositeActivity) || !IsActivityExecutable(compositeActivity))
				{
					continue;
				}
				if (ActivityExecutors.GetActivityExecutor(compositeActivity) is ISupportWorkflowChanges supportWorkflowChanges)
				{
					using (workflowCoreRuntime.SetCurrentActivity(compositeActivity))
					{
						using ActivityExecutionContext rootContext = new ActivityExecutionContext(compositeActivity);
						supportWorkflowChanges.OnWorkflowChangesCompleted(rootContext);
					}
				}
				foreach (Activity activity in compositeActivity.Activities)
				{
					if (activity is CompositeActivity)
					{
						queue.Enqueue(activity);
					}
				}
			}
		}

		internal static bool IsActivityExecutable(Activity activity)
		{
			if (!activity.Enabled)
			{
				return false;
			}
			if (activity.Parent != null)
			{
				return IsActivityExecutable(activity.Parent);
			}
			return activity.Enabled;
		}

		private void NotifyChangesToChildExecutors(IWorkflowCoreRuntime workflowCoreRuntime, Activity contextActivity, IList<WorkflowChangeAction> changeActions)
		{
			foreach (WorkflowChangeAction changeAction in changeActions)
			{
				if (!(changeAction is ActivityChangeAction) || !(contextActivity.TraverseDottedPathFromRoot(((ActivityChangeAction)changeAction).OwnerActivityDottedPath) is CompositeActivity compositeActivity) || !IsActivityExecutable(compositeActivity))
				{
					continue;
				}
				if (!(ActivityExecutors.GetActivityExecutor(compositeActivity) is ISupportWorkflowChanges supportWorkflowChanges))
				{
					throw new ApplicationException(SR.GetString("Error_WorkflowChangesNotSupported", compositeActivity.GetType().FullName));
				}
				using (workflowCoreRuntime.SetCurrentActivity(compositeActivity))
				{
					using ActivityExecutionContext activityExecutionContext = new ActivityExecutionContext(compositeActivity);
					if (changeAction is AddedActivityAction)
					{
						Activity activity = compositeActivity.Activities[((AddedActivityAction)changeAction).Index];
						if (IsActivityExecutable(activity))
						{
							activity.OnActivityExecutionContextLoad(activityExecutionContext.Activity.RootActivity.WorkflowCoreRuntime);
							activityExecutionContext.InitializeActivity(activity);
							supportWorkflowChanges.OnActivityAdded(activityExecutionContext, activity);
						}
					}
					else
					{
						if (!(changeAction is RemovedActivityAction))
						{
							continue;
						}
						RemovedActivityAction removedActivityAction = (RemovedActivityAction)changeAction;
						if (IsActivityExecutable(removedActivityAction.OriginalRemovedActivity))
						{
							supportWorkflowChanges.OnActivityRemoved(activityExecutionContext, removedActivityAction.OriginalRemovedActivity);
							if (removedActivityAction.OriginalRemovedActivity.ExecutionResult != ActivityExecutionResult.Uninitialized)
							{
								removedActivityAction.OriginalRemovedActivity.Uninitialize(activityExecutionContext.Activity.RootActivity.WorkflowCoreRuntime);
								removedActivityAction.OriginalRemovedActivity.SetValue(Activity.ExecutionResultProperty, ActivityExecutionResult.Uninitialized);
							}
							removedActivityAction.OriginalRemovedActivity.OnActivityExecutionContextUnload(activityExecutionContext.Activity.RootActivity.WorkflowCoreRuntime);
							removedActivityAction.OriginalRemovedActivity.Dispose();
						}
						continue;
					}
				}
			}
		}

		private static bool CompareWorkflowDefinition(Activity originalWorkflowDefinition, Activity currentWorkflowDefinition)
		{
			if (originalWorkflowDefinition == currentWorkflowDefinition)
			{
				return true;
			}
			if (originalWorkflowDefinition.GetType() != currentWorkflowDefinition.GetType())
			{
				return false;
			}
			Guid guid = (Guid)originalWorkflowDefinition.GetValue(WorkflowChangeVersionProperty);
			Guid guid2 = (Guid)currentWorkflowDefinition.GetValue(WorkflowChangeVersionProperty);
			return guid == guid2;
		}

		private static List<WorkflowChangeAction> DiffTrees(CompositeActivity originalCompositeActivity, CompositeActivity clonedCompositeActivity)
		{
			List<WorkflowChangeAction> list = new List<WorkflowChangeAction>();
			IEnumerator<Activity> enumerator = clonedCompositeActivity.Activities.GetEnumerator();
			IEnumerator<Activity> enumerator2 = originalCompositeActivity.Activities.GetEnumerator();
			int num = 0;
			while (enumerator2.MoveNext())
			{
				bool flag = false;
				Activity current = enumerator2.Current;
				while (enumerator.MoveNext())
				{
					Activity current2 = enumerator.Current;
					if (current2.Readonly)
					{
						if (current.DottedPath == current2.CachedDottedPath)
						{
							num++;
							flag = true;
							if (current is CompositeActivity)
							{
								list.AddRange(DiffTrees(current as CompositeActivity, current2 as CompositeActivity));
							}
							break;
						}
						list.Add(new RemovedActivityAction(num, current, clonedCompositeActivity));
						while (enumerator2.MoveNext())
						{
							current = enumerator2.Current;
							if (current.DottedPath == current2.CachedDottedPath)
							{
								num++;
								flag = true;
								if (current is CompositeActivity)
								{
									list.AddRange(DiffTrees(current as CompositeActivity, current2 as CompositeActivity));
								}
								break;
							}
							list.Add(new RemovedActivityAction(num, current, clonedCompositeActivity));
						}
						break;
					}
					list.Add(new AddedActivityAction(clonedCompositeActivity, current2));
					num++;
				}
				if (!flag)
				{
					list.Add(new RemovedActivityAction(num, current, clonedCompositeActivity));
				}
			}
			while (enumerator.MoveNext())
			{
				list.Add(new AddedActivityAction(clonedCompositeActivity, enumerator.Current));
			}
			return list;
		}

		private static Activity CloneRootActivity(Activity originalRootActivity)
		{
			string text = originalRootActivity.GetValue(Activity.WorkflowXamlMarkupProperty) as string;
			string text2 = null;
			Activity activity = null;
			IServiceProvider serviceProvider = originalRootActivity.GetValue(Activity.WorkflowRuntimeProperty) as IServiceProvider;
			if (!string.IsNullOrEmpty(text))
			{
				text2 = originalRootActivity.GetValue(Activity.WorkflowRulesMarkupProperty) as string;
				activity = Activity.OnResolveActivityDefinition(null, text, text2, createNew: true, initForRuntime: false, serviceProvider);
			}
			else
			{
				activity = Activity.OnResolveActivityDefinition(originalRootActivity.GetType(), null, null, createNew: true, initForRuntime: false, serviceProvider);
			}
			if (activity == null)
			{
				throw new NullReferenceException(SR.GetString("Error_InvalidRootForWorkflowChanges"));
			}
			ArrayList arrayList = (ArrayList)originalRootActivity.GetValue(WorkflowChangeActionsProperty);
			if (arrayList != null)
			{
				arrayList = CloneWorkflowChangeActions(arrayList, originalRootActivity);
				if (arrayList != null)
				{
					foreach (WorkflowChangeAction item in arrayList)
					{
						bool flag = item.ApplyTo(activity);
					}
					activity.SetValue(WorkflowChangeActionsProperty, arrayList);
				}
			}
			return activity;
		}

		private static ArrayList CloneWorkflowChangeActions(ArrayList workflowChanges, Activity rootActivity)
		{
			if (workflowChanges == null)
			{
				throw new ArgumentNullException("workflowChanges");
			}
			if (rootActivity == null)
			{
				throw new ArgumentNullException("rootActivity");
			}
			string s = null;
			TypeProvider serviceInstance = CreateTypeProvider(rootActivity);
			ServiceContainer serviceContainer = new ServiceContainer();
			serviceContainer.AddService(typeof(ITypeProvider), serviceInstance);
			DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager(serviceContainer);
			WorkflowMarkupSerializer workflowMarkupSerializer = new WorkflowMarkupSerializer();
			ArrayList arrayList = null;
			using (designerSerializationManager.CreateSession())
			{
				using (StringWriter stringWriter = new StringWriter(CultureInfo.InvariantCulture))
				{
					using XmlWriter writer = Helpers.CreateXmlWriter(stringWriter);
					WorkflowMarkupSerializationManager serializationManager = new WorkflowMarkupSerializationManager(designerSerializationManager);
					workflowMarkupSerializer.Serialize(serializationManager, writer, workflowChanges);
					s = stringWriter.ToString();
				}
				using StringReader input = new StringReader(s);
				using XmlReader reader = XmlReader.Create(input);
				WorkflowMarkupSerializationManager serializationManager2 = new WorkflowMarkupSerializationManager(designerSerializationManager);
				return workflowMarkupSerializer.Deserialize(serializationManager2, reader) as ArrayList;
			}
		}

		internal static TypeProvider CreateTypeProvider(Activity rootActivity)
		{
			TypeProvider typeProvider = new TypeProvider(null);
			Type type = rootActivity.GetType();
			typeProvider.SetLocalAssembly(type.Assembly);
			typeProvider.AddAssembly(type.Assembly);
			AssemblyName[] referencedAssemblies = type.Assembly.GetReferencedAssemblies();
			foreach (AssemblyName assemblyName in referencedAssemblies)
			{
				Assembly assembly = null;
				try
				{
					assembly = Assembly.Load(assemblyName);
					if (assembly != null)
					{
						typeProvider.AddAssembly(assembly);
					}
				}
				catch
				{
				}
				if (assembly == null && assemblyName.CodeBase != null)
				{
					typeProvider.AddAssemblyReference(assemblyName.CodeBase);
				}
			}
			return typeProvider;
		}
	}
	[DesignerSerializer(typeof(WorkflowMarkupSerializer), typeof(WorkflowMarkupSerializer))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public abstract class WorkflowChangeAction
	{
		protected internal abstract bool ApplyTo(Activity rootActivity);

		protected internal abstract ValidationErrorCollection ValidateChanges(Activity activity);
	}
	[DesignerSerializer(typeof(ActivityChangeActionMarkupSerializer), typeof(WorkflowMarkupSerializer))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public abstract class ActivityChangeAction : WorkflowChangeAction
	{
		private string ownerActivityDottedPath = string.Empty;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
		public string OwnerActivityDottedPath
		{
			get
			{
				return ownerActivityDottedPath;
			}
			internal set
			{
				ownerActivityDottedPath = value;
			}
		}

		protected ActivityChangeAction()
		{
		}

		protected ActivityChangeAction(CompositeActivity compositeActivity)
		{
			if (compositeActivity == null)
			{
				throw new ArgumentNullException("compositeActivity");
			}
			ownerActivityDottedPath = compositeActivity.DottedPath;
		}

		protected internal override ValidationErrorCollection ValidateChanges(Activity contextActivity)
		{
			if (contextActivity == null)
			{
				throw new ArgumentNullException("contextActivity");
			}
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			if (contextActivity.TraverseDottedPathFromRoot(OwnerActivityDottedPath) is CompositeActivity compositeActivity && WorkflowChanges.IsActivityExecutable(compositeActivity))
			{
				object[] array = ComponentDispenser.CreateComponents(compositeActivity.GetType(), typeof(ActivityValidatorAttribute));
				for (int i = 0; i < array.Length; i++)
				{
					Validator validator = (Validator)array[i];
					ValidationError validationError = validator.ValidateActivityChange(compositeActivity, this);
					if (validationError != null)
					{
						validationErrorCollection.Add(validationError);
					}
				}
			}
			return validationErrorCollection;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class AddedActivityAction : ActivityChangeAction
	{
		private int index;

		private Activity addedActivity;

		public int Index
		{
			get
			{
				return index;
			}
			internal set
			{
				index = value;
			}
		}

		public Activity AddedActivity
		{
			get
			{
				return addedActivity;
			}
			internal set
			{
				addedActivity = value;
			}
		}

		public AddedActivityAction()
		{
		}

		public AddedActivityAction(CompositeActivity compositeActivity, Activity activityAdded)
			: base(compositeActivity)
		{
			if (compositeActivity == null)
			{
				throw new ArgumentNullException("compositeActivity");
			}
			if (activityAdded == null)
			{
				throw new ArgumentNullException("activityAdded");
			}
			index = ((compositeActivity.Activities != null) ? compositeActivity.Activities.IndexOf(activityAdded) : (-1));
			addedActivity = activityAdded;
		}

		protected internal override bool ApplyTo(Activity rootActivity)
		{
			if (rootActivity == null)
			{
				throw new ArgumentNullException("rootActivity");
			}
			if (!(rootActivity is CompositeActivity))
			{
				throw new ArgumentException(SR.GetString("Error_RootActivityTypeInvalid"), "rootActivity");
			}
			if (!(rootActivity.TraverseDottedPathFromRoot(base.OwnerActivityDottedPath) is CompositeActivity compositeActivity))
			{
				return false;
			}
			compositeActivity.DynamicUpdateMode = true;
			CompositeActivity parent = addedActivity.Parent;
			try
			{
				addedActivity.SetParent(compositeActivity);
				Activity activity = addedActivity;
				if (!addedActivity.DesignMode)
				{
					activity = addedActivity.Clone();
				}
				else
				{
					TypeProvider serviceInstance = WorkflowChanges.CreateTypeProvider(rootActivity);
					ServiceContainer serviceContainer = new ServiceContainer();
					serviceContainer.AddService(typeof(ITypeProvider), serviceInstance);
					DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager(serviceContainer);
					WorkflowMarkupSerializer workflowMarkupSerializer = new WorkflowMarkupSerializer();
					string s = string.Empty;
					using (designerSerializationManager.CreateSession())
					{
						using (StringWriter stringWriter = new StringWriter(CultureInfo.InvariantCulture))
						{
							using XmlWriter writer = Helpers.CreateXmlWriter(stringWriter);
							WorkflowMarkupSerializationManager serializationManager = new WorkflowMarkupSerializationManager(designerSerializationManager);
							workflowMarkupSerializer.Serialize(serializationManager, writer, addedActivity);
							s = stringWriter.ToString();
						}
						using StringReader input = new StringReader(s);
						using XmlReader reader = XmlReader.Create(input);
						WorkflowMarkupSerializationManager serializationManager2 = new WorkflowMarkupSerializationManager(designerSerializationManager);
						activity = workflowMarkupSerializer.Deserialize(serializationManager2, reader) as Activity;
					}
					if (activity == null)
					{
						throw new InvalidOperationException(SR.GetString("Error_ApplyDynamicChangeFailed"));
					}
				}
				if (compositeActivity.WorkflowCoreRuntime != null)
				{
					((IDependencyObjectAccessor)activity).InitializeInstanceForRuntime(compositeActivity.WorkflowCoreRuntime);
				}
				activity.SetParent(null);
				compositeActivity.Activities.Insert(index, activity);
			}
			finally
			{
				addedActivity.SetParent(parent);
				compositeActivity.DynamicUpdateMode = false;
			}
			return true;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class RemovedActivityAction : ActivityChangeAction
	{
		private int removedActivityIndex = -1;

		private Activity originalRemovedActivity;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
		public int RemovedActivityIndex
		{
			get
			{
				return removedActivityIndex;
			}
			internal set
			{
				removedActivityIndex = value;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public Activity OriginalRemovedActivity
		{
			get
			{
				return originalRemovedActivity;
			}
			internal set
			{
				originalRemovedActivity = value;
			}
		}

		public RemovedActivityAction()
		{
		}

		public RemovedActivityAction(int removedActivityIndex, Activity originalActivity, CompositeActivity clonedParentActivity)
			: base(clonedParentActivity)
		{
			if (originalActivity == null)
			{
				throw new ArgumentNullException("originalActivity");
			}
			if (clonedParentActivity == null)
			{
				throw new ArgumentNullException("clonedParentActivity");
			}
			originalRemovedActivity = originalActivity;
			this.removedActivityIndex = removedActivityIndex;
		}

		protected internal override ValidationErrorCollection ValidateChanges(Activity contextActivity)
		{
			ValidationErrorCollection validationErrorCollection = base.ValidateChanges(contextActivity);
			Activity activity = contextActivity.TraverseDottedPathFromRoot(originalRemovedActivity.DottedPath);
			if (WorkflowChanges.IsActivityExecutable(activity) && activity.ExecutionStatus == ActivityExecutionStatus.Executing)
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Error_RemoveExecutingActivity", originalRemovedActivity.QualifiedName), 285));
			}
			return validationErrorCollection;
		}

		protected internal override bool ApplyTo(Activity rootActivity)
		{
			if (rootActivity == null)
			{
				throw new ArgumentNullException("rootActivity");
			}
			if (!(rootActivity is CompositeActivity))
			{
				throw new ArgumentException(SR.GetString("Error_RootActivityTypeInvalid"), "rootActivity");
			}
			if (!(rootActivity.TraverseDottedPathFromRoot(base.OwnerActivityDottedPath) is CompositeActivity compositeActivity))
			{
				return false;
			}
			if (removedActivityIndex >= compositeActivity.Activities.Count)
			{
				return false;
			}
			compositeActivity.DynamicUpdateMode = true;
			try
			{
				originalRemovedActivity = compositeActivity.Activities[removedActivityIndex];
				compositeActivity.Activities.RemoveAt(removedActivityIndex);
			}
			finally
			{
				compositeActivity.DynamicUpdateMode = false;
			}
			return true;
		}
	}
	internal sealed class ActivityChangeActionMarkupSerializer : WorkflowMarkupSerializer
	{
		protected internal override PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			List<PropertyInfo> list = new List<PropertyInfo>(base.GetProperties(serializationManager, obj));
			PropertyInfo[] properties = obj.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy);
			foreach (PropertyInfo propertyInfo in properties)
			{
				if (Helpers.GetSerializationVisibility(propertyInfo) != 0 && propertyInfo.GetSetMethod() == null && propertyInfo.GetSetMethod(nonPublic: true) != null)
				{
					list.Add(propertyInfo);
				}
			}
			return list.ToArray();
		}
	}
	[DesignerSerializer(typeof(WorkflowMarkupSerializer), typeof(WorkflowMarkupSerializer))]
	[DesignerSerializer(typeof(DependencyObjectCodeDomSerializer), typeof(CodeDomSerializer))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public abstract class DependencyObject : IComponent, IDisposable, IDependencyObjectAccessor
	{
		private static DependencyProperty SiteProperty = DependencyProperty.Register("Site", typeof(ISite), typeof(DependencyObject), new PropertyMetadata(DependencyPropertyOptions.Metadata, new BrowsableAttribute(browsable: false), new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));

		private static DependencyProperty ReadonlyProperty = DependencyProperty.Register("Readonly", typeof(bool), typeof(DependencyObject), new PropertyMetadata(DependencyPropertyOptions.ReadOnly | DependencyPropertyOptions.Metadata, new BrowsableAttribute(browsable: false), new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));

		private static DependencyProperty ParentDependencyObjectProperty = DependencyProperty.Register("ParentDependencyObject", typeof(DependencyObject), typeof(DependencyObject), new PropertyMetadata(null, new Attribute[2]
		{
			new BrowsableAttribute(browsable: false),
			new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)
		}));

		private static DependencyProperty UserDataProperty = DependencyProperty.Register("UserData", typeof(IDictionary), typeof(DependencyObject), new PropertyMetadata(DependencyPropertyOptions.ReadOnly | DependencyPropertyOptions.Metadata, new BrowsableAttribute(browsable: false), new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));

		[NonSerialized]
		private IDictionary<DependencyProperty, object> metaProperties = new Dictionary<DependencyProperty, object>();

		[NonSerialized]
		private bool readonlyPropertyValue;

		private IDictionary<DependencyProperty, object> dependencyPropertyValues;

		internal bool Readonly
		{
			get
			{
				return (bool)GetValue(ReadonlyProperty);
			}
			set
			{
				SetReadOnlyPropertyValue(ReadonlyProperty, value);
				readonlyPropertyValue = value;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public IDictionary UserData => (IDictionary)GetValue(UserDataProperty);

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		protected internal bool DesignMode => !readonlyPropertyValue;

		protected DependencyObject ParentDependencyObject => (DependencyObject)GetValue(ParentDependencyObjectProperty);

		internal IList<DependencyProperty> MetaDependencyProperties => new List<DependencyProperty>(metaProperties.Keys).AsReadOnly();

		internal IDictionary<DependencyProperty, object> DependencyPropertyValues
		{
			get
			{
				if (dependencyPropertyValues == null)
				{
					dependencyPropertyValues = new Dictionary<DependencyProperty, object>();
				}
				return dependencyPropertyValues;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public ISite Site
		{
			get
			{
				return (ISite)GetValue(SiteProperty);
			}
			set
			{
				SetValue(SiteProperty, value);
			}
		}

		private event EventHandler disposed;

		event EventHandler IComponent.Disposed
		{
			add
			{
				disposed += value;
			}
			remove
			{
				disposed -= value;
			}
		}

		protected DependencyObject()
		{
			SetReadOnlyPropertyValue(ReadonlyProperty, false);
			readonlyPropertyValue = false;
			SetReadOnlyPropertyValue(UserDataProperty, Hashtable.Synchronized(new Hashtable()));
		}

		~DependencyObject()
		{
			if (DesignMode)
			{
				try
				{
					Dispose(disposing: false);
					return;
				}
				catch (TypeInitializationException)
				{
					return;
				}
				catch (FileNotFoundException)
				{
					return;
				}
			}
			Dispose(disposing: false);
		}

		public void SetBinding(DependencyProperty dependencyProperty, ActivityBind bind)
		{
			if (dependencyProperty == null)
			{
				throw new ArgumentNullException("dependencyProperty");
			}
			if (dependencyProperty.DefaultMetadata != null && dependencyProperty.DefaultMetadata.IsReadOnly)
			{
				throw new ArgumentException(SR.GetString("Error_DPReadOnly"), "dependencyProperty");
			}
			if (dependencyProperty.OwnerType == null)
			{
				throw new ArgumentException(SR.GetString("Error_MissingOwnerTypeProperty"), "dependencyProperty");
			}
			if (!dependencyProperty.IsAttached && !dependencyProperty.OwnerType.IsAssignableFrom(GetType()))
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidDependencyProperty", GetType().FullName, dependencyProperty.Name, dependencyProperty.OwnerType.FullName));
			}
			if (!DesignMode)
			{
				throw new InvalidOperationException(SR.GetString("Error_CanNotChangeAtRuntime"));
			}
			if (dependencyProperty.DefaultMetadata != null && dependencyProperty.DefaultMetadata.IsMetaProperty && !typeof(ActivityBind).IsAssignableFrom(dependencyProperty.PropertyType))
			{
				throw new ArgumentException(SR.GetString("Error_DPMetaPropertyBinding"), "dependencyProperty");
			}
			if (metaProperties.ContainsKey(dependencyProperty))
			{
				metaProperties[dependencyProperty] = bind;
			}
			else
			{
				metaProperties.Add(dependencyProperty, bind);
			}
			if (DependencyPropertyValues.ContainsKey(dependencyProperty))
			{
				DependencyPropertyValues.Remove(dependencyProperty);
			}
		}

		public ActivityBind GetBinding(DependencyProperty dependencyProperty)
		{
			if (dependencyProperty == null)
			{
				throw new ArgumentNullException("dependencyProperty");
			}
			if (!metaProperties.ContainsKey(dependencyProperty))
			{
				return null;
			}
			return metaProperties[dependencyProperty] as ActivityBind;
		}

		public object GetValue(DependencyProperty dependencyProperty)
		{
			if (dependencyProperty == null)
			{
				throw new ArgumentNullException("dependencyProperty");
			}
			if (dependencyProperty.IsEvent)
			{
				throw new ArgumentException(SR.GetString("Error_DPGetValueHandler"), "dependencyProperty");
			}
			PropertyMetadata defaultMetadata = dependencyProperty.DefaultMetadata;
			if (defaultMetadata.GetValueOverride != null)
			{
				return defaultMetadata.GetValueOverride(this);
			}
			return GetValueCommon(dependencyProperty, defaultMetadata);
		}

		private object GetValueCommon(DependencyProperty dependencyProperty, PropertyMetadata metadata)
		{
			if (!DependencyPropertyValues.TryGetValue(dependencyProperty, out var value) && (metaProperties == null || !metaProperties.TryGetValue(dependencyProperty, out value)))
			{
				return dependencyProperty.DefaultMetadata.DefaultValue;
			}
			if (metaProperties != null && !DesignMode && value is ActivityBind && !typeof(ActivityBind).IsAssignableFrom(dependencyProperty.PropertyType))
			{
				value = GetBoundValue((ActivityBind)value, dependencyProperty.PropertyType);
			}
			if (value == null || value is ActivityBind)
			{
				return dependencyProperty.DefaultMetadata.DefaultValue;
			}
			if (!dependencyProperty.PropertyType.IsAssignableFrom(value.GetType()))
			{
				throw new InvalidOperationException(SR.GetString("Error_DynamicPropertyTypeValueMismatch", dependencyProperty.PropertyType.FullName, dependencyProperty.Name, value.GetType().FullName));
			}
			return value;
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		public object GetValueBase(DependencyProperty dependencyProperty)
		{
			if (dependencyProperty == null)
			{
				throw new ArgumentNullException("dependencyProperty");
			}
			return GetValueCommon(dependencyProperty, dependencyProperty.DefaultMetadata);
		}

		protected internal void SetReadOnlyPropertyValue(DependencyProperty dependencyProperty, object value)
		{
			if (dependencyProperty == null)
			{
				throw new ArgumentNullException("dependencyProperty");
			}
			if (!dependencyProperty.DefaultMetadata.IsReadOnly)
			{
				throw new InvalidOperationException(SR.GetString("Error_NotReadOnlyProperty", dependencyProperty.Name, dependencyProperty.OwnerType.FullName));
			}
			if (!dependencyProperty.IsAttached && !dependencyProperty.OwnerType.IsAssignableFrom(GetType()))
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidDependencyProperty", GetType().FullName, dependencyProperty.Name, dependencyProperty.OwnerType.FullName));
			}
			IDictionary<DependencyProperty, object> dictionary = null;
			dictionary = ((!dependencyProperty.DefaultMetadata.IsMetaProperty) ? DependencyPropertyValues : metaProperties);
			if (dictionary.ContainsKey(dependencyProperty))
			{
				dictionary[dependencyProperty] = value;
			}
			else
			{
				dictionary.Add(dependencyProperty, value);
			}
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		public void SetValueBase(DependencyProperty dependencyProperty, object value)
		{
			if (dependencyProperty == null)
			{
				throw new ArgumentNullException("dependencyProperty");
			}
			PropertyMetadata defaultMetadata = dependencyProperty.DefaultMetadata;
			SetValueCommon(dependencyProperty, value, defaultMetadata, defaultMetadata.ShouldAlwaysCallOverride);
		}

		public void SetValue(DependencyProperty dependencyProperty, object value)
		{
			if (dependencyProperty == null)
			{
				throw new ArgumentNullException("dependencyProperty");
			}
			PropertyMetadata defaultMetadata = dependencyProperty.DefaultMetadata;
			SetValueCommon(dependencyProperty, value, defaultMetadata, shouldCallSetValueOverrideIfExists: true);
		}

		internal void SetValueCommon(DependencyProperty dependencyProperty, object value, PropertyMetadata metadata, bool shouldCallSetValueOverrideIfExists)
		{
			if (dependencyProperty.DefaultMetadata.IsReadOnly)
			{
				throw new ArgumentException(SR.GetString("Error_DPReadOnly"), "dependencyProperty");
			}
			if (value is ActivityBind)
			{
				throw new ArgumentException(SR.GetString("Error_DPSetValueBind"), "value");
			}
			if (dependencyProperty.IsEvent)
			{
				throw new ArgumentException(SR.GetString("Error_DPSetValueHandler"), "dependencyProperty");
			}
			if (!dependencyProperty.IsAttached && !dependencyProperty.OwnerType.IsAssignableFrom(GetType()))
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidDependencyProperty", GetType().FullName, dependencyProperty.Name, dependencyProperty.OwnerType.FullName));
			}
			if (!DesignMode && dependencyProperty.DefaultMetadata.IsMetaProperty && dependencyProperty != ConditionTypeConverter.DeclarativeConditionDynamicProp)
			{
				throw new InvalidOperationException(SR.GetString("Error_CanNotChangeAtRuntime"));
			}
			if (value != null && !dependencyProperty.PropertyType.IsAssignableFrom(value.GetType()))
			{
				throw new ArgumentException(SR.GetString("Error_DynamicPropertyTypeValueMismatch", dependencyProperty.PropertyType.FullName, dependencyProperty.Name, value.GetType().FullName), "value");
			}
			if (shouldCallSetValueOverrideIfExists && metadata.SetValueOverride != null)
			{
				metadata.SetValueOverride(this, value);
				return;
			}
			IDictionary<DependencyProperty, object> dictionary = null;
			dictionary = ((!dependencyProperty.DefaultMetadata.IsMetaProperty) ? DependencyPropertyValues : metaProperties);
			object obj = null;
			if (metaProperties != null && metaProperties.ContainsKey(dependencyProperty))
			{
				obj = metaProperties[dependencyProperty];
				if (DesignMode)
				{
					metaProperties.Remove(dependencyProperty);
				}
			}
			if (!DesignMode && obj is ActivityBind)
			{
				SetBoundValue((ActivityBind)obj, value);
			}
			else if (dictionary.ContainsKey(dependencyProperty))
			{
				dictionary[dependencyProperty] = value;
			}
			else
			{
				dictionary.Add(dependencyProperty, value);
			}
		}

		public bool RemoveProperty(DependencyProperty dependencyProperty)
		{
			if (dependencyProperty == null)
			{
				throw new ArgumentNullException("dependencyProperty");
			}
			bool flag = false;
			if (dependencyProperty.DefaultMetadata != null && dependencyProperty.DefaultMetadata.IsMetaProperty)
			{
				if (!DesignMode)
				{
					throw new InvalidOperationException(SR.GetString("Error_CanNotChangeAtRuntime"));
				}
				return metaProperties.Remove(dependencyProperty);
			}
			flag = metaProperties.Remove(dependencyProperty);
			return flag | DependencyPropertyValues.Remove(dependencyProperty);
		}

		public void AddHandler(DependencyProperty dependencyEvent, object value)
		{
			if (dependencyEvent == null)
			{
				throw new ArgumentNullException("dependencyEvent");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			if (value is ActivityBind)
			{
				throw new ArgumentException(SR.GetString("Error_DPSetValueBind"), "value");
			}
			if (dependencyEvent.DefaultMetadata != null && dependencyEvent.DefaultMetadata.IsMetaProperty)
			{
				throw new ArgumentException(SR.GetString("Error_DPAddHandlerMetaProperty"), "dependencyEvent");
			}
			if (!dependencyEvent.IsEvent)
			{
				throw new ArgumentException(SR.GetString("Error_DPAddHandlerNonEvent"), "dependencyEvent");
			}
			if (dependencyEvent.PropertyType == null)
			{
				throw new ArgumentException(SR.GetString("Error_DPPropertyTypeMissing"), "dependencyEvent");
			}
			if (dependencyEvent.OwnerType == null)
			{
				throw new ArgumentException(SR.GetString("Error_MissingOwnerTypeProperty"), "dependencyEvent");
			}
			if (!dependencyEvent.IsAttached && !dependencyEvent.OwnerType.IsAssignableFrom(GetType()))
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidDependencyProperty", GetType().FullName, dependencyEvent.Name, dependencyEvent.OwnerType.FullName));
			}
			if (value != null && !dependencyEvent.PropertyType.IsAssignableFrom(value.GetType()))
			{
				throw new ArgumentException(SR.GetString("Error_DynamicPropertyTypeValueMismatch", dependencyEvent.PropertyType.FullName, dependencyEvent.Name, value.GetType().FullName), "value");
			}
			IDictionary<DependencyProperty, object> dictionary = DependencyPropertyValues;
			ArrayList arrayList = null;
			if (dictionary.ContainsKey(dependencyEvent))
			{
				arrayList = (ArrayList)dictionary[dependencyEvent];
			}
			else
			{
				arrayList = new ArrayList();
				dictionary.Add(dependencyEvent, arrayList);
			}
			arrayList.Add(value);
			if (DesignMode && metaProperties.ContainsKey(dependencyEvent))
			{
				metaProperties.Remove(dependencyEvent);
			}
		}

		public void RemoveHandler(DependencyProperty dependencyEvent, object value)
		{
			if (dependencyEvent == null)
			{
				throw new ArgumentNullException("dependencyEvent");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			if (value is ActivityBind)
			{
				throw new ArgumentException(SR.GetString("Error_DPRemoveHandlerBind"), "value");
			}
			if (dependencyEvent.DefaultMetadata != null && dependencyEvent.DefaultMetadata.IsMetaProperty)
			{
				throw new ArgumentException(SR.GetString("Error_DPAddHandlerMetaProperty"), "dependencyEvent");
			}
			if (!dependencyEvent.IsEvent)
			{
				throw new ArgumentException(SR.GetString("Error_DPAddHandlerNonEvent"), "dependencyEvent");
			}
			IDictionary<DependencyProperty, object> dictionary = DependencyPropertyValues;
			if (dictionary.ContainsKey(dependencyEvent))
			{
				ArrayList arrayList = (ArrayList)dictionary[dependencyEvent];
				if (arrayList.Contains(value))
				{
					arrayList.Remove(value);
				}
				if (arrayList.Count == 0)
				{
					dictionary.Remove(dependencyEvent);
				}
			}
		}

		internal object GetHandler(DependencyProperty dependencyEvent)
		{
			if (dependencyEvent == null)
			{
				throw new ArgumentNullException("dependencyEvent");
			}
			if (!dependencyEvent.IsEvent)
			{
				throw new ArgumentException("dependencyEvent");
			}
			IDictionary<DependencyProperty, object> dictionary = DependencyPropertyValues;
			if (dictionary.ContainsKey(dependencyEvent) && dictionary[dependencyEvent] is ArrayList { Count: not 0 } arrayList)
			{
				if (arrayList.Count == 1)
				{
					return arrayList[0];
				}
				Delegate @delegate = arrayList[0] as Delegate;
				for (int i = 1; i < arrayList.Count; i++)
				{
					@delegate = Delegate.Combine(@delegate, arrayList[i] as Delegate);
				}
				return @delegate;
			}
			return null;
		}

		public bool IsBindingSet(DependencyProperty dependencyProperty)
		{
			if (dependencyProperty == null)
			{
				throw new ArgumentNullException("dependencyProperty");
			}
			if (!DependencyPropertyValues.ContainsKey(dependencyProperty) && metaProperties.ContainsKey(dependencyProperty))
			{
				return metaProperties[dependencyProperty] is ActivityBind;
			}
			return false;
		}

		public bool MetaEquals(DependencyObject dependencyObject)
		{
			if (dependencyObject != null)
			{
				return dependencyObject.metaProperties == metaProperties;
			}
			return false;
		}

		void IDependencyObjectAccessor.InitializeInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime)
		{
			OnInitializeInstanceForRuntime(workflowCoreRuntime);
		}

		internal virtual void OnInitializeInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime)
		{
		}

		void IDependencyObjectAccessor.InitializeActivatingInstanceForRuntime(DependencyObject parentDependencyObject, IWorkflowCoreRuntime workflowCoreRuntime)
		{
			if (parentDependencyObject != null)
			{
				DependencyPropertyValues[ParentDependencyObjectProperty] = parentDependencyObject;
			}
			foreach (DependencyProperty metaDependencyProperty in MetaDependencyProperties)
			{
				object obj = metaProperties[metaDependencyProperty];
				if (obj is DependencyObject)
				{
					((IDependencyObjectAccessor)obj).InitializeActivatingInstanceForRuntime(this, workflowCoreRuntime);
					DependencyPropertyValues[metaDependencyProperty] = obj;
				}
				else if (obj is WorkflowParameterBindingCollection)
				{
					IList list = obj as IList;
					for (int i = 0; i < list.Count; i++)
					{
						((IDependencyObjectAccessor)list[i]).InitializeActivatingInstanceForRuntime(this, workflowCoreRuntime);
					}
					DependencyPropertyValues[metaDependencyProperty] = obj;
				}
			}
			OnInitializeActivatingInstanceForRuntime(workflowCoreRuntime);
			Readonly = true;
		}

		internal virtual void OnInitializeActivatingInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime)
		{
			InitializeProperties();
		}

		void IDependencyObjectAccessor.InitializeDefinitionForRuntime(DependencyObject parentDependencyObject)
		{
			if (parentDependencyObject != null)
			{
				DependencyPropertyValues[ParentDependencyObjectProperty] = parentDependencyObject;
			}
			foreach (DependencyProperty metaDependencyProperty in MetaDependencyProperties)
			{
				object obj = metaProperties[metaDependencyProperty];
				if (obj is DependencyObject)
				{
					((IDependencyObjectAccessor)obj).InitializeDefinitionForRuntime(this);
					DependencyPropertyValues[metaDependencyProperty] = obj;
				}
				else if (obj is WorkflowParameterBindingCollection)
				{
					IList list = obj as IList;
					for (int i = 0; i < list.Count; i++)
					{
						((IDependencyObjectAccessor)list[i]).InitializeDefinitionForRuntime(this);
					}
					DependencyPropertyValues[metaDependencyProperty] = obj;
				}
				else if (obj is ActivityBind)
				{
					Activity activity = ResolveOwnerActivity();
					if (activity != null)
					{
						((ActivityBind)obj).SetContext(activity);
					}
				}
			}
			OnInitializeDefinitionForRuntime();
			InitializeProperties();
			Readonly = true;
		}

		internal virtual void OnInitializeDefinitionForRuntime()
		{
		}

		protected virtual void InitializeProperties()
		{
		}

		internal virtual void FixUpMetaProperties(DependencyObject originalObject)
		{
			if (originalObject == null)
			{
				throw new ArgumentNullException();
			}
			metaProperties = originalObject.metaProperties;
			readonlyPropertyValue = true;
			foreach (KeyValuePair<DependencyProperty, object> dependencyPropertyValue in DependencyPropertyValues)
			{
				if (dependencyPropertyValue.Key == ParentDependencyObjectProperty || !originalObject.DependencyPropertyValues.ContainsKey(dependencyPropertyValue.Key))
				{
					continue;
				}
				object obj = originalObject.DependencyPropertyValues[dependencyPropertyValue.Key];
				if (dependencyPropertyValue.Value is DependencyObject)
				{
					((DependencyObject)dependencyPropertyValue.Value).FixUpMetaProperties(obj as DependencyObject);
				}
				else if (dependencyPropertyValue.Value is WorkflowParameterBindingCollection)
				{
					IList list = dependencyPropertyValue.Value as IList;
					IList list2 = obj as IList;
					for (int i = 0; i < list.Count; i++)
					{
						((DependencyObject)list[i]).FixUpMetaProperties(list2[i] as DependencyObject);
					}
				}
			}
		}

		T[] IDependencyObjectAccessor.GetInvocationList<T>(DependencyProperty dependencyEvent)
		{
			return GetInvocationList<T>(dependencyEvent);
		}

		protected T[] GetInvocationList<T>(DependencyProperty dependencyEvent)
		{
			if (dependencyEvent == null)
			{
				throw new ArgumentNullException("dependencyEvent");
			}
			if (!dependencyEvent.IsEvent)
			{
				throw new ArgumentException(SR.GetString("Error_DPAddHandlerNonEvent"), "dependencyEvent");
			}
			IDictionary<DependencyProperty, object> dictionary = null;
			dictionary = ((!DependencyPropertyValues.ContainsKey(dependencyEvent)) ? metaProperties : DependencyPropertyValues);
			List<T> list = new List<T>();
			if (dictionary.ContainsKey(dependencyEvent))
			{
				if (dictionary[dependencyEvent] is ActivityBind)
				{
					if (!DesignMode)
					{
						T val = default(T);
						val = (T)GetBoundValue((ActivityBind)dictionary[dependencyEvent], typeof(T));
						if (val != null)
						{
							list.Add(val);
						}
					}
				}
				else
				{
					foreach (object item in (ArrayList)dictionary[dependencyEvent])
					{
						if (item is T)
						{
							list.Add((T)item);
						}
					}
				}
			}
			return list.ToArray();
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		protected virtual object GetBoundValue(ActivityBind bind, Type targetType)
		{
			if (bind == null)
			{
				throw new ArgumentNullException("bind");
			}
			if (targetType == null)
			{
				throw new ArgumentNullException("targetType");
			}
			object result = bind;
			Activity activity = ResolveOwnerActivity();
			if (activity != null)
			{
				result = bind.GetRuntimeValue(activity, targetType);
			}
			return result;
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		protected virtual void SetBoundValue(ActivityBind bind, object value)
		{
			if (bind == null)
			{
				throw new ArgumentNullException("bind");
			}
			Activity activity = ResolveOwnerActivity();
			if (activity != null)
			{
				bind.SetRuntimeValue(activity, value);
			}
		}

		private Activity ResolveOwnerActivity()
		{
			DependencyObject dependencyObject = this;
			while (dependencyObject != null && !(dependencyObject is Activity))
			{
				dependencyObject = dependencyObject.ParentDependencyObject;
			}
			return dependencyObject as Activity;
		}

		public void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				if (Site != null && Site.Container != null)
				{
					Site.Container.Remove(this);
				}
				if (this.disposed != null)
				{
					this.disposed(this, EventArgs.Empty);
				}
			}
		}
	}
	internal delegate Activity ActivityResolveEventHandler(object sender, ActivityResolveEventArgs e);
	internal delegate ArrayList WorkflowChangeActionsResolveEventHandler(object sender, WorkflowChangeActionsResolveEventArgs e);
	internal sealed class ActivityResolveEventArgs : EventArgs
	{
		private Type activityType;

		private string activityDefinition;

		private string rulesDefinition;

		private bool createNew;

		private bool initForRuntime = true;

		private IServiceProvider serviceProvider;

		public Type Type => activityType;

		public string WorkflowMarkup => activityDefinition;

		public string RulesMarkup => rulesDefinition;

		public bool CreateNewDefinition => createNew;

		public bool InitializeForRuntime => initForRuntime;

		public IServiceProvider ServiceProvider => serviceProvider;

		internal ActivityResolveEventArgs(Type activityType, string workflowMarkup, string rulesMarkup, bool createNew, bool initForRuntime, IServiceProvider serviceProvider)
		{
			if (!(string.IsNullOrEmpty(workflowMarkup) ^ (activityType == null)))
			{
				throw new ArgumentException(SR.GetString("Error_WrongParamForActivityResolveEventArgs"));
			}
			this.activityType = activityType;
			activityDefinition = workflowMarkup;
			rulesDefinition = rulesMarkup;
			this.createNew = createNew;
			this.initForRuntime = initForRuntime;
			this.serviceProvider = serviceProvider;
		}
	}
	internal sealed class WorkflowChangeActionsResolveEventArgs : EventArgs
	{
		private string workflowChangesMarkup;

		public string WorkflowChangesMarkup => workflowChangesMarkup;

		public WorkflowChangeActionsResolveEventArgs(string workflowChangesMarkup)
		{
			this.workflowChangesMarkup = workflowChangesMarkup;
		}
	}
	[ActivityCodeGenerator(typeof(ActivityCodeGenerator))]
	[ActivityValidator(typeof(ActivityValidator))]
	[ToolboxBitmap(typeof(Activity), "Design.Resources.Activity.png")]
	[ToolboxItemFilter("Microsoft.Workflow.VSDesigner", ToolboxItemFilterType.Require)]
	[ToolboxItemFilter("System.Workflow.ComponentModel.Design.ActivitySet", ToolboxItemFilterType.Allow)]
	[DesignerSerializer(typeof(ActivityMarkupSerializer), typeof(WorkflowMarkupSerializer))]
	[DesignerSerializer(typeof(ActivityCodeDomSerializer), typeof(CodeDomSerializer))]
	[DesignerSerializer(typeof(ActivityTypeCodeDomSerializer), typeof(TypeCodeDomSerializer))]
	[DesignerCategory("Component")]
	[ActivityExecutor(typeof(ActivityExecutor<Activity>))]
	[Designer(typeof(ActivityDesigner), typeof(IDesigner))]
	[Designer(typeof(ActivityDesigner), typeof(IRootDesigner))]
	[ToolboxItem(typeof(ActivityToolboxItem))]
	[RuntimeNameProperty("Name")]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class Activity : DependencyObject
	{
		private static DependencyProperty NameProperty;

		private static DependencyProperty DescriptionProperty;

		private static DependencyProperty EnabledProperty;

		private static DependencyProperty QualifiedNameProperty;

		private static DependencyProperty DottedPathProperty;

		internal static readonly DependencyProperty WorkflowXamlMarkupProperty;

		internal static readonly DependencyProperty WorkflowRulesMarkupProperty;

		internal static readonly DependencyProperty SynchronizationHandlesProperty;

		internal static readonly DependencyProperty ActivityExecutionContextInfoProperty;

		public static readonly DependencyProperty ActivityContextGuidProperty;

		internal static readonly DependencyProperty CompletedExecutionContextsProperty;

		internal static readonly DependencyProperty ActiveExecutionContextsProperty;

		internal static readonly DependencyProperty CompletedOrderIdProperty;

		private static readonly DependencyProperty SerializedStreamLengthProperty;

		internal static readonly DependencyProperty ExecutionStatusProperty;

		internal static readonly DependencyProperty ExecutionResultProperty;

		internal static readonly DependencyProperty WasExecutingProperty;

		private static readonly DependencyProperty LockCountOnStatusChangeProperty;

		internal static readonly DependencyProperty HasPrimaryClosedProperty;

		private static readonly DependencyProperty NestedActivitiesProperty;

		internal static readonly DependencyProperty WorkflowDefinitionProperty;

		internal static readonly DependencyProperty WorkflowRuntimeProperty;

		[ThreadStatic]
		internal static Hashtable ContextIdToActivityMap;

		[ThreadStatic]
		internal static Activity DefinitionActivity;

		[ThreadStatic]
		internal static ArrayList ActivityRoots;

		private static readonly BinaryFormatter binaryFormatter;

		private static ActivityResolveEventHandler activityDefinitionResolve;

		private static WorkflowChangeActionsResolveEventHandler workflowChangeActionsResolve;

		[NonSerialized]
		private string cachedDottedPath;

		[NonSerialized]
		private IWorkflowCoreRuntime workflowCoreRuntime;

		[NonSerialized]
		internal CompositeActivity parent;

		private static object staticSyncRoot;

		internal static readonly DependencyProperty CustomActivityProperty;

		internal static Type ActivityType;

		public static readonly DependencyProperty StatusChangedEvent;

		internal static readonly DependencyProperty LockCountOnStatusChangeChangedEvent;

		internal static readonly DependencyProperty StatusChangedLockedEvent;

		public static readonly DependencyProperty CancelingEvent;

		public static readonly DependencyProperty FaultingEvent;

		public static readonly DependencyProperty ClosedEvent;

		public static readonly DependencyProperty ExecutingEvent;

		public static readonly DependencyProperty CompensatingEvent;

		protected Guid WorkflowInstanceId
		{
			get
			{
				if (WorkflowCoreRuntime == null)
				{
					throw new InvalidOperationException(SR.GetString("Error_NoRuntimeAvailable"));
				}
				return WorkflowCoreRuntime.InstanceID;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public CompositeActivity Parent => parent;

		[Browsable(true)]
		[SRCategory("Activity")]
		[ParenthesizePropertyName(true)]
		[SRDescription("NameDescr")]
		[MergableProperty(false)]
		[DefaultValue("")]
		public string Name
		{
			get
			{
				return (string)GetValue(NameProperty);
			}
			set
			{
				SetValue(NameProperty, value);
			}
		}

		[Browsable(true)]
		[SRCategory("Activity")]
		[SRDescription("EnabledDescr")]
		[DefaultValue(true)]
		public bool Enabled
		{
			get
			{
				return (bool)GetValue(EnabledProperty);
			}
			set
			{
				SetValue(EnabledProperty, value);
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public string QualifiedName
		{
			get
			{
				if (!base.DesignMode && !DynamicUpdateMode)
				{
					string text = (string)GetValue(QualifiedNameProperty);
					if (text != null)
					{
						return text;
					}
				}
				string text2 = null;
				if (Helpers.IsActivityLocked(this))
				{
					return InternalHelpers.GenerateQualifiedNameForLockedActivity(this, null);
				}
				return (string)GetValue(NameProperty);
			}
		}

		[Browsable(true)]
		[SRCategory("Activity")]
		[SRDescription("DescriptionDescr")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		[DefaultValue("")]
		public string Description
		{
			get
			{
				return (string)GetValue(DescriptionProperty);
			}
			set
			{
				SetValue(DescriptionProperty, value);
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		internal int LockCountOnStatusChange => (int)GetValue(LockCountOnStatusChangeProperty);

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		internal bool HasPrimaryClosed => (bool)GetValue(HasPrimaryClosedProperty);

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public ActivityExecutionStatus ExecutionStatus => (ActivityExecutionStatus)GetValue(ExecutionStatusProperty);

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public ActivityExecutionResult ExecutionResult => (ActivityExecutionResult)GetValue(ExecutionResultProperty);

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public bool IsDynamicActivity
		{
			get
			{
				if (base.DesignMode)
				{
					return false;
				}
				return ContextActivity != RootActivity;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		internal bool WasExecuting => (bool)GetValue(WasExecutingProperty);

		internal string DottedPath
		{
			get
			{
				if (!base.DesignMode && !DynamicUpdateMode)
				{
					string text = (string)GetValue(DottedPathProperty);
					if (text != null)
					{
						return text;
					}
				}
				StringBuilder stringBuilder = new StringBuilder();
				Activity activity = this;
				while (activity.parent != null)
				{
					stringBuilder.Insert(0, activity.parent.Activities.IndexOf(activity).ToString(CultureInfo.InvariantCulture));
					stringBuilder.Insert(0, '.');
					activity = activity.parent;
				}
				if (stringBuilder.Length > 0)
				{
					stringBuilder.Remove(0, 1);
				}
				return stringBuilder.ToString();
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		internal IWorkflowCoreRuntime WorkflowCoreRuntime => workflowCoreRuntime;

		internal bool DynamicUpdateMode
		{
			get
			{
				return cachedDottedPath != null;
			}
			set
			{
				if (value)
				{
					cachedDottedPath = DottedPath;
				}
				else
				{
					cachedDottedPath = null;
				}
			}
		}

		internal string CachedDottedPath => cachedDottedPath;

		internal bool IsContextActivity => GetValue(ActivityExecutionContextInfoProperty) != null;

		internal int ContextId => ((ActivityExecutionContextInfo)ContextActivity.GetValue(ActivityExecutionContextInfoProperty)).ContextId;

		internal Guid ContextGuid => ((ActivityExecutionContextInfo)ContextActivity.GetValue(ActivityExecutionContextInfoProperty)).ContextGuid;

		internal Activity ContextActivity
		{
			get
			{
				Activity activity = this;
				while (activity != null && activity.GetValue(ActivityExecutionContextInfoProperty) == null)
				{
					activity = activity.parent;
				}
				return activity;
			}
		}

		internal Activity ParentContextActivity
		{
			get
			{
				Activity contextActivity = ContextActivity;
				ActivityExecutionContextInfo activityExecutionContextInfo = (ActivityExecutionContextInfo)contextActivity.GetValue(ActivityExecutionContextInfoProperty);
				if (activityExecutionContextInfo.ParentContextId == -1)
				{
					return null;
				}
				return WorkflowCoreRuntime.GetContextActivityForId(activityExecutionContextInfo.ParentContextId);
			}
		}

		internal Activity RootContextActivity => WorkflowCoreRuntime.RootActivity;

		internal Activity RootActivity
		{
			get
			{
				Activity activity = this;
				while (activity.parent != null)
				{
					activity = activity.parent;
				}
				return activity;
			}
		}

		internal bool CanUninitializeNow
		{
			get
			{
				if (NeedsCompensation)
				{
					return false;
				}
				Activity contextActivity = ContextActivity;
				if (contextActivity != this && contextActivity.GetValue(CompletedExecutionContextsProperty) is IList<ActivityExecutionContextInfo> { Count: >0 } list)
				{
					foreach (ActivityExecutionContextInfo item in list)
					{
						if ((item.Flags & PersistFlags.NeedsCompensation) != 0 && GetActivityByName(item.ActivityQualifiedName, withinThisActivityOnly: true) != null)
						{
							return false;
						}
					}
				}
				return true;
			}
		}

		internal bool NeedsCompensation
		{
			get
			{
				if (GetValue(CompletedExecutionContextsProperty) is IList<ActivityExecutionContextInfo> { Count: >0 } list)
				{
					foreach (ActivityExecutionContextInfo item in list)
					{
						if ((item.Flags & PersistFlags.NeedsCompensation) != 0 && GetActivityByName(item.ActivityQualifiedName, withinThisActivityOnly: true) != null)
						{
							return true;
						}
					}
				}
				Queue<Activity> queue = new Queue<Activity>();
				queue.Enqueue(this);
				while (queue.Count > 0)
				{
					Activity activity = queue.Dequeue();
					if (activity is ICompensatableActivity && activity.ExecutionStatus == ActivityExecutionStatus.Closed && activity.ExecutionResult == ActivityExecutionResult.Succeeded)
					{
						return true;
					}
					if (!(activity is CompositeActivity))
					{
						continue;
					}
					foreach (Activity activity2 in ((CompositeActivity)activity).Activities)
					{
						if (activity2.Enabled)
						{
							queue.Enqueue(activity2);
						}
					}
				}
				return false;
			}
		}

		internal bool SupportsTransaction
		{
			get
			{
				if (!(this is CompensatableTransactionScopeActivity))
				{
					return this is TransactionScopeActivity;
				}
				return true;
			}
		}

		internal bool SupportsSynchronization => this is SynchronizationScopeActivity;

		internal bool PersistOnClose
		{
			get
			{
				if (base.UserData.Contains(typeof(PersistOnCloseAttribute)))
				{
					return (bool)base.UserData[typeof(PersistOnCloseAttribute)];
				}
				object[] customAttributes = GetType().GetCustomAttributes(typeof(PersistOnCloseAttribute), inherit: true);
				if (customAttributes != null)
				{
					return customAttributes.Length != 0;
				}
				return false;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public event EventHandler<ActivityExecutionStatusChangedEventArgs> StatusChanged
		{
			add
			{
				AddStatusChangeHandler(StatusChangedEvent, value);
			}
			remove
			{
				RemoveStatusChangeHandler(StatusChangedEvent, value);
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public event EventHandler<ActivityExecutionStatusChangedEventArgs> Canceling
		{
			add
			{
				AddStatusChangeHandler(CancelingEvent, value);
			}
			remove
			{
				RemoveStatusChangeHandler(CancelingEvent, value);
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public event EventHandler<ActivityExecutionStatusChangedEventArgs> Faulting
		{
			add
			{
				AddStatusChangeHandler(FaultingEvent, value);
			}
			remove
			{
				RemoveStatusChangeHandler(FaultingEvent, value);
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public event EventHandler<ActivityExecutionStatusChangedEventArgs> Closed
		{
			add
			{
				AddStatusChangeHandler(ClosedEvent, value);
			}
			remove
			{
				RemoveStatusChangeHandler(ClosedEvent, value);
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public event EventHandler<ActivityExecutionStatusChangedEventArgs> Executing
		{
			add
			{
				AddStatusChangeHandler(ExecutingEvent, value);
			}
			remove
			{
				RemoveStatusChangeHandler(ExecutingEvent, value);
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public event EventHandler<ActivityExecutionStatusChangedEventArgs> Compensating
		{
			add
			{
				AddStatusChangeHandler(CompensatingEvent, value);
			}
			remove
			{
				RemoveStatusChangeHandler(CompensatingEvent, value);
			}
		}

		internal static event ActivityResolveEventHandler ActivityResolve
		{
			add
			{
				lock (staticSyncRoot)
				{
					activityDefinitionResolve = (ActivityResolveEventHandler)Delegate.Combine(activityDefinitionResolve, value);
				}
			}
			remove
			{
				lock (staticSyncRoot)
				{
					activityDefinitionResolve = (ActivityResolveEventHandler)Delegate.Remove(activityDefinitionResolve, value);
				}
			}
		}

		internal static event WorkflowChangeActionsResolveEventHandler WorkflowChangeActionsResolve
		{
			add
			{
				lock (staticSyncRoot)
				{
					workflowChangeActionsResolve = (WorkflowChangeActionsResolveEventHandler)Delegate.Combine(workflowChangeActionsResolve, value);
				}
			}
			remove
			{
				lock (staticSyncRoot)
				{
					workflowChangeActionsResolve = (WorkflowChangeActionsResolveEventHandler)Delegate.Remove(workflowChangeActionsResolve, value);
				}
			}
		}

		static Activity()
		{
			NameProperty = DependencyProperty.Register("Name", typeof(string), typeof(Activity), new PropertyMetadata("", DependencyPropertyOptions.Metadata, new ValidationOptionAttribute(ValidationOption.Required)));
			DescriptionProperty = DependencyProperty.Register("Description", typeof(string), typeof(Activity), new PropertyMetadata("", DependencyPropertyOptions.Metadata));
			EnabledProperty = DependencyProperty.Register("Enabled", typeof(bool), typeof(Activity), new PropertyMetadata(true, DependencyPropertyOptions.Metadata));
			QualifiedNameProperty = DependencyProperty.Register("QualifiedName", typeof(string), typeof(Activity), new PropertyMetadata(DependencyPropertyOptions.ReadOnly | DependencyPropertyOptions.Metadata));
			DottedPathProperty = DependencyProperty.Register("DottedPath", typeof(string), typeof(Activity), new PropertyMetadata(DependencyPropertyOptions.ReadOnly | DependencyPropertyOptions.Metadata));
			WorkflowXamlMarkupProperty = DependencyProperty.Register("WorkflowXamlMarkup", typeof(string), typeof(Activity));
			WorkflowRulesMarkupProperty = DependencyProperty.Register("WorkflowRulesMarkup", typeof(string), typeof(Activity));
			SynchronizationHandlesProperty = DependencyProperty.Register("SynchronizationHandles", typeof(ICollection<string>), typeof(Activity), new PropertyMetadata(DependencyPropertyOptions.Metadata));
			ActivityExecutionContextInfoProperty = DependencyProperty.RegisterAttached("ActivityExecutionContextInfo", typeof(ActivityExecutionContextInfo), typeof(Activity));
			ActivityContextGuidProperty = DependencyProperty.RegisterAttached("ActivityContextGuid", typeof(Guid), typeof(Activity), new PropertyMetadata(Guid.Empty));
			CompletedExecutionContextsProperty = DependencyProperty.RegisterAttached("CompletedExecutionContexts", typeof(IList), typeof(Activity));
			ActiveExecutionContextsProperty = DependencyProperty.RegisterAttached("ActiveExecutionContexts", typeof(IList), typeof(Activity));
			CompletedOrderIdProperty = DependencyProperty.Register("CompletedOrderId", typeof(int), typeof(Activity), new PropertyMetadata((DependencyPropertyOptions)0));
			SerializedStreamLengthProperty = DependencyProperty.RegisterAttached("SerializedStreamLength", typeof(long), typeof(Activity), new PropertyMetadata(DependencyPropertyOptions.NonSerialized));
			ExecutionStatusProperty = DependencyProperty.RegisterAttached("ExecutionStatus", typeof(ActivityExecutionStatus), typeof(Activity), new PropertyMetadata(ActivityExecutionStatus.Initialized, new BrowsableAttribute(browsable: false), new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));
			ExecutionResultProperty = DependencyProperty.RegisterAttached("ExecutionResult", typeof(ActivityExecutionResult), typeof(Activity), new PropertyMetadata(ActivityExecutionResult.None, new BrowsableAttribute(browsable: false), new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));
			WasExecutingProperty = DependencyProperty.RegisterAttached("WasExecuting", typeof(bool), typeof(Activity), new PropertyMetadata(false, new BrowsableAttribute(browsable: false), new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));
			LockCountOnStatusChangeProperty = DependencyProperty.RegisterAttached("LockCountOnStatusChange", typeof(int), typeof(Activity), new PropertyMetadata((DependencyPropertyOptions)0));
			HasPrimaryClosedProperty = DependencyProperty.RegisterAttached("HasPrimaryClosed", typeof(bool), typeof(Activity), new PropertyMetadata(false));
			NestedActivitiesProperty = DependencyProperty.RegisterAttached("NestedActivities", typeof(IList<Activity>), typeof(Activity));
			WorkflowDefinitionProperty = DependencyProperty.RegisterAttached("WorkflowDefinition", typeof(Activity), typeof(Activity), new PropertyMetadata(DependencyPropertyOptions.NonSerialized));
			WorkflowRuntimeProperty = DependencyProperty.RegisterAttached("WorkflowRuntime", typeof(IServiceProvider), typeof(Activity), new PropertyMetadata(DependencyPropertyOptions.NonSerialized));
			ContextIdToActivityMap = null;
			DefinitionActivity = null;
			ActivityRoots = null;
			binaryFormatter = null;
			activityDefinitionResolve = null;
			workflowChangeActionsResolve = null;
			staticSyncRoot = new object();
			CustomActivityProperty = DependencyProperty.Register("CustomActivity", typeof(bool), typeof(Activity), new PropertyMetadata(DependencyPropertyOptions.Metadata));
			ActivityType = null;
			StatusChanged = DependencyProperty.Register("StatusChanged", typeof(EventHandler<ActivityExecutionStatusChangedEventArgs>), typeof(Activity));
			LockCountOnStatusChangeChangedEvent = DependencyProperty.Register("LockCountOnStatusChangeChanged", typeof(EventHandler<ActivityExecutionStatusChangedEventArgs>), typeof(Activity));
			StatusChangedLockedEvent = DependencyProperty.Register("StatusChangedLocked", typeof(EventHandler<ActivityExecutionStatusChangedEventArgs>), typeof(Activity));
			Canceling = DependencyProperty.Register("Canceling", typeof(EventHandler<ActivityExecutionStatusChangedEventArgs>), typeof(Activity));
			Faulting = DependencyProperty.Register("Faulting", typeof(EventHandler<ActivityExecutionStatusChangedEventArgs>), typeof(Activity));
			Closed = DependencyProperty.Register("Closed", typeof(EventHandler<ActivityExecutionStatusChangedEventArgs>), typeof(Activity));
			Executing = DependencyProperty.Register("Executing", typeof(EventHandler<ActivityExecutionStatusChangedEventArgs>), typeof(Activity));
			Compensating = DependencyProperty.Register("Compensating", typeof(EventHandler<ActivityExecutionStatusChangedEventArgs>), typeof(Activity));
			binaryFormatter = new BinaryFormatter();
			binaryFormatter.SurrogateSelector = ActivitySurrogateSelector.Default;
			DependencyProperty.RegisterAsKnown(ActivityExecutionContextInfoProperty, 1, DependencyProperty.PropertyValidity.Reexecute);
			DependencyProperty.RegisterAsKnown(CompletedExecutionContextsProperty, 2, DependencyProperty.PropertyValidity.Reexecute);
			DependencyProperty.RegisterAsKnown(ActiveExecutionContextsProperty, 3, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(CompletedOrderIdProperty, 4, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(ExecutionStatusProperty, 5, DependencyProperty.PropertyValidity.Reexecute);
			DependencyProperty.RegisterAsKnown(ExecutionResultProperty, 6, DependencyProperty.PropertyValidity.Reexecute);
			DependencyProperty.RegisterAsKnown(WasExecutingProperty, 7, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(LockCountOnStatusChangeProperty, 8, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(HasPrimaryClosedProperty, 9, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(NestedActivitiesProperty, 10, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(ActivityContextGuidProperty, 11, DependencyProperty.PropertyValidity.Reexecute);
			DependencyProperty.RegisterAsKnown(WorkflowXamlMarkupProperty, 12, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(WorkflowRulesMarkupProperty, 13, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(ActivityExecutionContext.CurrentExceptionProperty, 23, DependencyProperty.PropertyValidity.Reexecute);
			DependencyProperty.RegisterAsKnown(ActivityExecutionContext.GrantedLocksProperty, 24, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(ActivityExecutionContext.LockAcquiredCallbackProperty, 25, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(Executing, 31, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(Canceling, 32, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(Closed, 33, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(Compensating, 34, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(StatusChanged, 35, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(StatusChangedLockedEvent, 36, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(LockCountOnStatusChangeChangedEvent, 37, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(Faulting, 38, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(FaultAndCancellationHandlingFilter.FaultProcessedProperty, 41, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(CompensationHandlingFilter.CompensateProcessedProperty, 43, DependencyProperty.PropertyValidity.Uninitialize);
			DependencyProperty.RegisterAsKnown(CompensationHandlingFilter.LastCompensatedOrderIdProperty, 44, DependencyProperty.PropertyValidity.Uninitialize);
		}

		public Activity()
		{
			SetValue(CustomActivityProperty, false);
			SetValue(NameProperty, GetType().Name);
		}

		public Activity(string name)
		{
			if (name == null)
			{
				throw new ArgumentNullException("name");
			}
			SetValue(CustomActivityProperty, false);
			SetValue(NameProperty, name);
		}

		protected internal virtual void Initialize(IServiceProvider provider)
		{
			if (provider == null)
			{
				throw new ArgumentNullException("provider");
			}
		}

		protected internal virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			return ActivityExecutionStatus.Closed;
		}

		protected internal virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			return ActivityExecutionStatus.Closed;
		}

		protected internal virtual ActivityExecutionStatus HandleFault(ActivityExecutionContext executionContext, Exception exception)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			return ActivityExecutionStatus.Closed;
		}

		protected virtual void OnClosed(IServiceProvider provider)
		{
		}

		protected internal virtual void Uninitialize(IServiceProvider provider)
		{
			if (provider == null)
			{
				throw new ArgumentNullException("provider");
			}
			ResetKnownDependencyProperties(forReexecute: false);
		}

		protected internal virtual void OnActivityExecutionContextLoad(IServiceProvider provider)
		{
			if (provider == null)
			{
				throw new ArgumentNullException("provider");
			}
		}

		protected internal virtual void OnActivityExecutionContextUnload(IServiceProvider provider)
		{
			if (provider == null)
			{
				throw new ArgumentNullException("provider");
			}
		}

		protected internal void RaiseGenericEvent<T>(DependencyProperty dependencyEvent, object sender, T e) where T : EventArgs
		{
			if (dependencyEvent == null)
			{
				throw new ArgumentNullException("dependencyEvent");
			}
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (WorkflowCoreRuntime == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_NoRuntimeAvailable"));
			}
			EventHandler<T>[] invocationList = ((IDependencyObjectAccessor)this).GetInvocationList<EventHandler<T>>(dependencyEvent);
			if (invocationList == null)
			{
				return;
			}
			EventHandler<T>[] array = invocationList;
			foreach (EventHandler<T> eventHandler in array)
			{
				WorkflowCoreRuntime.RaiseHandlerInvoking(eventHandler);
				try
				{
					eventHandler(sender, e);
				}
				finally
				{
					WorkflowCoreRuntime.RaiseHandlerInvoked();
				}
			}
		}

		protected internal void RaiseEvent(DependencyProperty dependencyEvent, object sender, EventArgs e)
		{
			if (sender == null)
			{
				throw new ArgumentNullException("sender");
			}
			if (dependencyEvent == null)
			{
				throw new ArgumentNullException("dependencyEvent");
			}
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (WorkflowCoreRuntime == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_NoRuntimeAvailable"));
			}
			EventHandler[] invocationList = ((IDependencyObjectAccessor)this).GetInvocationList<EventHandler>(dependencyEvent);
			if (invocationList == null)
			{
				return;
			}
			EventHandler[] array = invocationList;
			foreach (EventHandler eventHandler in array)
			{
				WorkflowCoreRuntime.RaiseHandlerInvoking(eventHandler);
				try
				{
					eventHandler(sender, e);
				}
				finally
				{
					WorkflowCoreRuntime.RaiseHandlerInvoked();
				}
			}
		}

		protected void TrackData(object userData)
		{
			if (userData == null)
			{
				throw new ArgumentNullException("userData");
			}
			if (WorkflowCoreRuntime == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_NoRuntimeAvailable"));
			}
			WorkflowCoreRuntime.Track(null, userData);
		}

		protected void TrackData(string userDataKey, object userData)
		{
			if (userData == null)
			{
				throw new ArgumentNullException("userData");
			}
			if (WorkflowCoreRuntime == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_NoRuntimeAvailable"));
			}
			WorkflowCoreRuntime.Track(userDataKey, userData);
		}

		protected internal void Invoke<T>(EventHandler<T> handler, T e) where T : EventArgs
		{
			if (handler == null)
			{
				throw new ArgumentNullException("handler");
			}
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (WorkflowCoreRuntime == null)
			{
				throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_NoRuntimeAvailable"));
			}
			if (ExecutionStatus == ActivityExecutionStatus.Initialized || ExecutionStatus == ActivityExecutionStatus.Closed)
			{
				throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_InvalidInvokingState"));
			}
			ActivityExecutorDelegateInfo<T> activityExecutorDelegateInfo = null;
			using (WorkflowCoreRuntime.SetCurrentActivity(this))
			{
				activityExecutorDelegateInfo = new ActivityExecutorDelegateInfo<T>(handler, ContextActivity);
			}
			activityExecutorDelegateInfo.InvokeDelegate(WorkflowCoreRuntime.CurrentActivity.ContextActivity, e, transacted: false);
		}

		protected internal void Invoke<T>(IActivityEventListener<T> eventListener, T e) where T : EventArgs
		{
			if (eventListener == null)
			{
				throw new ArgumentNullException("eventListener");
			}
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (WorkflowCoreRuntime == null)
			{
				throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_NoRuntimeAvailable"));
			}
			if (ExecutionStatus == ActivityExecutionStatus.Initialized || ExecutionStatus == ActivityExecutionStatus.Closed)
			{
				throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_InvalidInvokingState"));
			}
			ActivityExecutorDelegateInfo<T> activityExecutorDelegateInfo = null;
			using (WorkflowCoreRuntime.SetCurrentActivity(this))
			{
				activityExecutorDelegateInfo = new ActivityExecutorDelegateInfo<T>(eventListener, ContextActivity);
			}
			activityExecutorDelegateInfo.InvokeDelegate(WorkflowCoreRuntime.CurrentActivity.ContextActivity, e, transacted: false);
		}

		internal void SetParent(CompositeActivity compositeActivity)
		{
			parent = compositeActivity;
		}

		internal void HoldLockOnStatusChange(IActivityEventListener<ActivityExecutionStatusChangedEventArgs> eventListener)
		{
			RegisterForStatusChange(StatusChangedLockedEvent, eventListener);
			SetValue(LockCountOnStatusChangeProperty, LockCountOnStatusChange + 1);
		}

		internal void ReleaseLockOnStatusChange(IActivityEventListener<ActivityExecutionStatusChangedEventArgs> eventListener)
		{
			UnregisterForStatusChange(StatusChangedLockedEvent, eventListener);
			int lockCountOnStatusChange = LockCountOnStatusChange;
			SetValue(LockCountOnStatusChangeProperty, --lockCountOnStatusChange);
			if (lockCountOnStatusChange == 0)
			{
				if (!HasPrimaryClosed)
				{
					SetValue(ExecutionResultProperty, ActivityExecutionResult.Canceled);
				}
				try
				{
					MarkClosed();
					return;
				}
				catch
				{
					SetValue(LockCountOnStatusChangeProperty, ++lockCountOnStatusChange);
					RegisterForStatusChange(StatusChangedLockedEvent, eventListener);
					throw;
				}
			}
			FireStatusChangedEvents(LockCountOnStatusChangeChangedEvent, transacted: false);
		}

		private void AddStatusChangeHandler(DependencyProperty dependencyProp, EventHandler<ActivityExecutionStatusChangedEventArgs> delegateValue)
		{
			IList list = null;
			if (base.DependencyPropertyValues.ContainsKey(dependencyProp))
			{
				list = base.DependencyPropertyValues[dependencyProp] as IList;
			}
			else
			{
				list = new ArrayList();
				base.DependencyPropertyValues[dependencyProp] = list;
			}
			list.Add(new ActivityExecutorDelegateInfo<ActivityExecutionStatusChangedEventArgs>(useCurrentContext: true, delegateValue, ContextActivity ?? RootActivity));
		}

		private void RemoveStatusChangeHandler(DependencyProperty dependencyProp, EventHandler<ActivityExecutionStatusChangedEventArgs> delegateValue)
		{
			if (base.DependencyPropertyValues.ContainsKey(dependencyProp) && base.DependencyPropertyValues[dependencyProp] is IList list)
			{
				list.Remove(new ActivityExecutorDelegateInfo<ActivityExecutionStatusChangedEventArgs>(useCurrentContext: true, delegateValue, ContextActivity));
				if (list.Count == 0)
				{
					base.DependencyPropertyValues.Remove(dependencyProp);
				}
			}
		}

		private IList GetStatusChangeHandlers(DependencyProperty dependencyProp)
		{
			IList result = null;
			if (base.DependencyPropertyValues.ContainsKey(dependencyProp))
			{
				result = base.DependencyPropertyValues[dependencyProp] as IList;
			}
			return result;
		}

		public void RegisterForStatusChange(DependencyProperty dependencyProp, IActivityEventListener<ActivityExecutionStatusChangedEventArgs> activityStatusChangeListener)
		{
			if (dependencyProp == null)
			{
				throw new ArgumentNullException("dependencyProp");
			}
			if (activityStatusChangeListener == null)
			{
				throw new ArgumentNullException("activityStatusChangeListener");
			}
			if (dependencyProp != Executing && dependencyProp != Canceling && dependencyProp != Closed && dependencyProp != Compensating && dependencyProp != Faulting && dependencyProp != StatusChanged && dependencyProp != StatusChangedLockedEvent && dependencyProp != LockCountOnStatusChangeChangedEvent)
			{
				throw new ArgumentException();
			}
			IList list = null;
			if (base.DependencyPropertyValues.ContainsKey(dependencyProp))
			{
				list = base.DependencyPropertyValues[dependencyProp] as IList;
			}
			else
			{
				list = new ArrayList();
				base.DependencyPropertyValues[dependencyProp] = list;
			}
			list.Add(new ActivityExecutorDelegateInfo<ActivityExecutionStatusChangedEventArgs>(useCurrentContext: true, activityStatusChangeListener, ContextActivity));
		}

		public void UnregisterForStatusChange(DependencyProperty dependencyProp, IActivityEventListener<ActivityExecutionStatusChangedEventArgs> activityStatusChangeListener)
		{
			if (dependencyProp == null)
			{
				throw new ArgumentNullException("dependencyProp");
			}
			if (activityStatusChangeListener == null)
			{
				throw new ArgumentNullException("activityStatusChangeListener");
			}
			if (dependencyProp != Executing && dependencyProp != Canceling && dependencyProp != Closed && dependencyProp != Compensating && dependencyProp != Faulting && dependencyProp != StatusChanged && dependencyProp != StatusChangedLockedEvent && dependencyProp != LockCountOnStatusChangeChangedEvent)
			{
				throw new ArgumentException();
			}
			if (base.DependencyPropertyValues.ContainsKey(dependencyProp) && base.DependencyPropertyValues[dependencyProp] is IList list)
			{
				list.Remove(new ActivityExecutorDelegateInfo<ActivityExecutionStatusChangedEventArgs>(useCurrentContext: true, activityStatusChangeListener, ContextActivity));
				if (list.Count == 0)
				{
					base.DependencyPropertyValues.Remove(dependencyProp);
				}
			}
		}

		public Activity GetActivityByName(string activityQualifiedName)
		{
			return GetActivityByName(activityQualifiedName, withinThisActivityOnly: false);
		}

		public Activity GetActivityByName(string activityQualifiedName, bool withinThisActivityOnly)
		{
			if (activityQualifiedName == null)
			{
				throw new ArgumentNullException("activityQualifiedName");
			}
			if (QualifiedName == activityQualifiedName)
			{
				return this;
			}
			Activity activity = null;
			activity = ResolveActivityByName(activityQualifiedName, withinThisActivityOnly);
			if (activity == null && this is CompositeActivity && Helpers.IsCustomActivity(this as CompositeActivity))
			{
				activity = ResolveActivityByName(QualifiedName + "." + activityQualifiedName, withinThisActivityOnly);
			}
			return activity;
		}

		private Activity ResolveActivityByName(string activityQualifiedName, bool withinThisActivityOnly)
		{
			Activity activity = null;
			if (!base.DesignMode && !DynamicUpdateMode)
			{
				Activity rootActivity = RootActivity;
				Hashtable hashtable = (Hashtable)rootActivity.UserData[UserDataKeys.LookupPaths];
				if (hashtable != null)
				{
					string text = (string)hashtable[activityQualifiedName];
					if (text != null)
					{
						if (text.Length != 0)
						{
							string text2 = (string)hashtable[QualifiedName];
							if (text.StartsWith(text2, StringComparison.Ordinal))
							{
								if (text.Length == text2.Length)
								{
									activity = this;
								}
								else if (text2.Length == 0 || text[text2.Length] == '.')
								{
									activity = TraverseDottedPath(text.Substring((text2.Length > 0) ? (text2.Length + 1) : 0));
								}
							}
							else if (!withinThisActivityOnly)
							{
								activity = rootActivity.TraverseDottedPath(text);
							}
						}
						else if (!withinThisActivityOnly)
						{
							activity = rootActivity;
						}
					}
				}
			}
			else if (!base.DesignMode)
			{
				if ((withinThisActivityOnly ? this : RootActivity) is CompositeActivity compositeActivity)
				{
					Activity[] nestedActivities = Helpers.GetNestedActivities(compositeActivity);
					foreach (Activity activity2 in nestedActivities)
					{
						if (activity2.QualifiedName == activityQualifiedName)
						{
							activity = activity2;
							break;
						}
					}
				}
			}
			else
			{
				activity = Helpers.ParseActivity(this, activityQualifiedName);
				if (activity == null && !withinThisActivityOnly)
				{
					activity = Helpers.ParseActivity(RootActivity, activityQualifiedName);
				}
			}
			return activity;
		}

		internal void ResetAllKnownDependencyProperties()
		{
			ResetKnownDependencyProperties(forReexecute: true);
		}

		private void ResetKnownDependencyProperties(bool forReexecute)
		{
			DependencyProperty[] array = new DependencyProperty[base.DependencyPropertyValues.Keys.Count];
			base.DependencyPropertyValues.Keys.CopyTo(array, 0);
			DependencyProperty[] array2 = array;
			foreach (DependencyProperty dependencyProperty in array2)
			{
				if (dependencyProperty.IsKnown && (dependencyProperty.Validity == DependencyProperty.PropertyValidity.Uninitialize || (forReexecute && dependencyProperty.Validity == DependencyProperty.PropertyValidity.Reexecute)))
				{
					RemoveProperty(dependencyProperty);
				}
			}
		}

		internal virtual Activity TraverseDottedPath(string dottedPath)
		{
			return null;
		}

		internal Activity TraverseDottedPathFromRoot(string dottedPathFromRoot)
		{
			string dottedPath = DottedPath;
			if (dottedPathFromRoot == dottedPath)
			{
				return this;
			}
			if (!dottedPathFromRoot.StartsWith(dottedPath, StringComparison.Ordinal))
			{
				return null;
			}
			string dottedPath2 = dottedPathFromRoot;
			if (dottedPath.Length > 0)
			{
				dottedPath2 = dottedPathFromRoot.Substring(dottedPath.Length + 1);
			}
			return TraverseDottedPath(dottedPath2);
		}

		public Activity Clone()
		{
			if (base.DesignMode)
			{
				throw new InvalidOperationException(SR.GetString("Error_NoRuntimeAvailable"));
			}
			long num = (long)GetValue(SerializedStreamLengthProperty);
			if (num == 0L)
			{
				num = 10240L;
			}
			MemoryStream memoryStream = new MemoryStream((int)num);
			Save(memoryStream);
			memoryStream.Position = 0L;
			SetValue(SerializedStreamLengthProperty, (memoryStream.Length > num) ? memoryStream.Length : num);
			return Load(memoryStream, this);
		}

		public void Save(Stream stream)
		{
			Save(stream, binaryFormatter);
		}

		public void Save(Stream stream, IFormatter formatter)
		{
			if (stream == null)
			{
				throw new ArgumentNullException("stream");
			}
			if (formatter == null)
			{
				throw new ArgumentNullException("formatter");
			}
			if (base.DesignMode)
			{
				throw new InvalidOperationException(SR.GetString("Error_NoRuntimeAvailable"));
			}
			Hashtable contextIdToActivityMap = ContextIdToActivityMap;
			ContextIdToActivityMap = new Hashtable();
			try
			{
				FillContextIdToActivityMap(this);
				foreach (Activity value in ContextIdToActivityMap.Values)
				{
					IList<Activity> list = value.CollectNestedActivities();
					if (list != null && list.Count > 0)
					{
						value.SetValue(NestedActivitiesProperty, list);
					}
				}
				formatter.Serialize(stream, this);
			}
			finally
			{
				foreach (Activity value2 in ContextIdToActivityMap.Values)
				{
					value2.RemoveProperty(NestedActivitiesProperty);
				}
				ContextIdToActivityMap = contextIdToActivityMap;
				ActivityRoots = null;
			}
		}

		public static Activity Load(Stream stream, Activity outerActivity)
		{
			return Load(stream, outerActivity, binaryFormatter);
		}

		public static Activity Load(Stream stream, Activity outerActivity, IFormatter formatter)
		{
			if (stream == null)
			{
				throw new ArgumentNullException("stream");
			}
			if (formatter == null)
			{
				throw new ArgumentNullException("formatter");
			}
			if (outerActivity != null && outerActivity.DesignMode)
			{
				throw new InvalidOperationException(SR.GetString("Error_NoRuntimeAvailable"));
			}
			Activity activity = null;
			Hashtable contextIdToActivityMap = ContextIdToActivityMap;
			Activity definitionActivity = DefinitionActivity;
			ContextIdToActivityMap = new Hashtable();
			DefinitionActivity = outerActivity;
			try
			{
				if (outerActivity != null)
				{
					FillContextIdToActivityMap(outerActivity.RootActivity);
				}
				activity = (Activity)formatter.Deserialize(stream);
				Queue<Activity> queue = new Queue<Activity>();
				queue.Enqueue(activity);
				while (queue.Count > 0)
				{
					Activity activity2 = queue.Dequeue();
					Activity activity3 = DefinitionActivity;
					Activity parentActivity = outerActivity?.parent;
					if (activity2.IsContextActivity)
					{
						ActivityExecutionContextInfo activityExecutionContextInfo = (ActivityExecutionContextInfo)activity2.GetValue(ActivityExecutionContextInfoProperty);
						activity3 = activity3.GetActivityByName(activityExecutionContextInfo.ActivityQualifiedName);
						Activity activity4 = (Activity)ContextIdToActivityMap[activityExecutionContextInfo.ParentContextId];
						if (activity4 != null)
						{
							parentActivity = activity4.GetActivityByName(activityExecutionContextInfo.ActivityQualifiedName).parent;
						}
						ContextIdToActivityMap[activity2.ContextId] = activity2;
						IList<Activity> list = (IList<Activity>)activity2.GetValue(ActiveExecutionContextsProperty);
						if (list != null)
						{
							foreach (Activity item in list)
							{
								queue.Enqueue(item);
							}
						}
					}
					Hashtable hashtable = new Hashtable();
					IList<Activity> list2 = (IList<Activity>)activity2.GetValue(NestedActivitiesProperty);
					if (list2 != null)
					{
						foreach (Activity item2 in list2)
						{
							hashtable.Add(item2.DottedPath, item2);
						}
					}
					activity2.FixUpParentChildRelationship(activity3, parentActivity, hashtable);
					activity2.FixUpMetaProperties(activity3);
					activity2.RemoveProperty(NestedActivitiesProperty);
				}
				if (activity.Parent == null)
				{
					activity.SetValue(WorkflowDefinitionProperty, DefinitionActivity);
				}
			}
			finally
			{
				ContextIdToActivityMap = contextIdToActivityMap;
				DefinitionActivity = definitionActivity;
				ActivityRoots = null;
			}
			return activity;
		}

		private static void FillContextIdToActivityMap(Activity seedActivity)
		{
			Queue<Activity> queue = new Queue<Activity>();
			queue.Enqueue(seedActivity);
			while (queue.Count > 0)
			{
				Activity activity = queue.Dequeue();
				if (activity.IsContextActivity)
				{
					ContextIdToActivityMap[activity.ContextId] = activity;
					IList<Activity> list = (IList<Activity>)activity.GetValue(ActiveExecutionContextsProperty);
					if (list == null)
					{
						continue;
					}
					foreach (Activity item in list)
					{
						queue.Enqueue(item);
					}
				}
				else
				{
					ContextIdToActivityMap[0] = activity;
				}
			}
			ActivityRoots = new ArrayList(ContextIdToActivityMap.Values);
		}

		internal static Activity OnResolveActivityDefinition(Type type, string workflowMarkup, string rulesMarkup, bool createNew, bool initForRuntime, IServiceProvider serviceProvider)
		{
			Delegate[] array = null;
			lock (staticSyncRoot)
			{
				if (activityDefinitionResolve != null)
				{
					array = activityDefinitionResolve.GetInvocationList();
				}
			}
			Activity activity = null;
			if (array != null)
			{
				Delegate[] array2 = array;
				for (int i = 0; i < array2.Length; i++)
				{
					ActivityResolveEventHandler activityResolveEventHandler = (ActivityResolveEventHandler)array2[i];
					activity = activityResolveEventHandler(null, new ActivityResolveEventArgs(type, workflowMarkup, rulesMarkup, createNew, initForRuntime, serviceProvider));
					if (activity != null)
					{
						return activity;
					}
				}
			}
			return null;
		}

		internal static ArrayList OnResolveWorkflowChangeActions(string workflowChangesMarkup, Activity root)
		{
			Delegate[] array = null;
			lock (staticSyncRoot)
			{
				if (workflowChangeActionsResolve != null)
				{
					array = workflowChangeActionsResolve.GetInvocationList();
				}
			}
			ArrayList arrayList = null;
			if (array != null)
			{
				Delegate[] array2 = array;
				for (int i = 0; i < array2.Length; i++)
				{
					WorkflowChangeActionsResolveEventHandler workflowChangeActionsResolveEventHandler = (WorkflowChangeActionsResolveEventHandler)array2[i];
					arrayList = workflowChangeActionsResolveEventHandler(root, new WorkflowChangeActionsResolveEventArgs(workflowChangesMarkup));
					if (arrayList != null)
					{
						return arrayList;
					}
				}
			}
			return null;
		}

		internal override void OnInitializeDefinitionForRuntime()
		{
			if (!base.DesignMode)
			{
				return;
			}
			base.OnInitializeDefinitionForRuntime();
			base.UserData[UserDataKeys.CustomActivity] = GetValue(CustomActivityProperty);
			ICollection<string> collection = (ICollection<string>)GetValue(SynchronizationHandlesProperty);
			if (SupportsTransaction)
			{
				if (collection == null)
				{
					collection = new List<string>();
				}
				collection.Add(TransactionScopeActivity.TransactionScopeActivityIsolationHandle);
			}
			if (collection != null)
			{
				SetValue(SynchronizationHandlesProperty, new ReadOnlyCollection<string>(new List<string>(collection)));
			}
			if (Parent == null)
			{
				Hashtable hashtable = new Hashtable();
				base.UserData[UserDataKeys.LookupPaths] = hashtable;
				hashtable.Add(QualifiedName, string.Empty);
			}
			SetReadOnlyPropertyValue(QualifiedNameProperty, QualifiedName);
			SetReadOnlyPropertyValue(DottedPathProperty, DottedPath);
			base.UserData[typeof(PersistOnCloseAttribute)] = GetType().GetCustomAttributes(typeof(PersistOnCloseAttribute), inherit: true).Length != 0;
		}

		internal override void OnInitializeInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime)
		{
			base.OnInitializeInstanceForRuntime(workflowCoreRuntime);
			this.workflowCoreRuntime = workflowCoreRuntime;
		}

		internal override void OnInitializeActivatingInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime)
		{
			base.OnInitializeActivatingInstanceForRuntime(workflowCoreRuntime);
			this.workflowCoreRuntime = workflowCoreRuntime;
		}

		internal override void FixUpMetaProperties(DependencyObject originalObject)
		{
			if (originalObject == null)
			{
				throw new ArgumentNullException();
			}
			base.FixUpMetaProperties(originalObject);
		}

		internal virtual void FixUpParentChildRelationship(Activity definitionActivity, Activity parentActivity, Hashtable deserializedActivities)
		{
			if (parentActivity != null)
			{
				SetParent((CompositeActivity)parentActivity);
			}
		}

		internal virtual IList<Activity> CollectNestedActivities()
		{
			return null;
		}

		internal void SetStatus(ActivityExecutionStatus newStatus, bool transacted)
		{
			WorkflowTrace.Runtime.TraceEvent(TraceEventType.Information, 0, "Activity Status Change - Activity: {0} Old:{1}; New:{2}", QualifiedName, ActivityExecutionStatusEnumToString(ExecutionStatus), ActivityExecutionStatusEnumToString(newStatus));
			if (newStatus == ActivityExecutionStatus.Faulting && ExecutionStatus == ActivityExecutionStatus.Executing)
			{
				SetValue(WasExecutingProperty, true);
			}
			SetValue(ExecutionStatusProperty, newStatus);
			FireStatusChangedEvents(StatusChanged, transacted);
			switch (newStatus)
			{
			default:
				return;
			case ActivityExecutionStatus.Closed:
				FireStatusChangedEvents(Closed, transacted);
				break;
			case ActivityExecutionStatus.Executing:
				FireStatusChangedEvents(Executing, transacted);
				break;
			case ActivityExecutionStatus.Canceling:
				FireStatusChangedEvents(Canceling, transacted);
				break;
			case ActivityExecutionStatus.Faulting:
				FireStatusChangedEvents(Faulting, transacted);
				break;
			case ActivityExecutionStatus.Compensating:
				FireStatusChangedEvents(Compensating, transacted);
				break;
			}
			WorkflowCoreRuntime.ActivityStatusChanged(this, transacted, committed: false);
			if (newStatus == ActivityExecutionStatus.Closed)
			{
				RemoveProperty(LockCountOnStatusChangeProperty);
				RemoveProperty(HasPrimaryClosedProperty);
				RemoveProperty(WasExecutingProperty);
			}
		}

		private void FireStatusChangedEvents(DependencyProperty dependencyProperty, bool transacted)
		{
			IList statusChangeHandlers = GetStatusChangeHandlers(dependencyProperty);
			if (statusChangeHandlers == null)
			{
				return;
			}
			ActivityExecutionStatusChangedEventArgs e = new ActivityExecutionStatusChangedEventArgs(ExecutionStatus, ExecutionResult, this);
			foreach (ActivityExecutorDelegateInfo<ActivityExecutionStatusChangedEventArgs> item in statusChangeHandlers)
			{
				item.InvokeDelegate(ContextActivity, e, item.ActivityQualifiedName == null, transacted);
			}
		}

		internal void MarkCanceled()
		{
			if (ExecutionStatus != ActivityExecutionStatus.Closed)
			{
				if (ExecutionStatus != ActivityExecutionStatus.Canceling)
				{
					throw new InvalidOperationException(SR.GetString("Error_InvalidCancelActivityState"));
				}
				SetValue(ExecutionResultProperty, ActivityExecutionResult.Canceled);
				MarkClosed();
			}
		}

		internal void MarkCompleted()
		{
			SetValue(ExecutionResultProperty, ActivityExecutionResult.Succeeded);
			MarkClosed();
		}

		internal void MarkCompensated()
		{
			if (ExecutionStatus != ActivityExecutionStatus.Compensating)
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidCompensateActivityState"));
			}
			SetValue(ExecutionResultProperty, ActivityExecutionResult.Compensated);
			MarkClosed();
		}

		internal void MarkFaulted()
		{
			SetValue(ExecutionResultProperty, ActivityExecutionResult.Faulted);
			MarkClosed();
		}

		private void MarkClosed()
		{
			ActivityExecutionStatus executionStatus = ExecutionStatus;
			if (executionStatus - 1 > ActivityExecutionStatus.Executing && executionStatus - 4 > ActivityExecutionStatus.Executing)
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidCloseActivityState"));
			}
			if (this is CompositeActivity)
			{
				foreach (Activity activity3 in ((CompositeActivity)this).Activities)
				{
					if (activity3.Enabled && activity3.ExecutionStatus != 0 && activity3.ExecutionStatus != ActivityExecutionStatus.Closed)
					{
						throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_ActiveChildExist"));
					}
				}
				ActivityExecutionContext activityExecutionContext = new ActivityExecutionContext(this);
				foreach (ActivityExecutionContext executionContext in activityExecutionContext.ExecutionContextManager.ExecutionContexts)
				{
					if (GetActivityByName(executionContext.Activity.QualifiedName, withinThisActivityOnly: true) != null)
					{
						throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_ActiveChildContextExist"));
					}
				}
			}
			if (LockCountOnStatusChange > 0)
			{
				SetValue(HasPrimaryClosedProperty, true);
				FireStatusChangedEvents(StatusChangedLockedEvent, transacted: false);
				return;
			}
			if (parent == null || (ExecutionResult == ActivityExecutionResult.Succeeded && (this is ICompensatableActivity || PersistOnClose)))
			{
				ActivityExecutionStatus executionStatus2 = ExecutionStatus;
				ActivityExecutionResult executionResult = ExecutionResult;
				SetStatus(ActivityExecutionStatus.Closed, transacted: true);
				try
				{
					OnClosed(RootActivity.WorkflowCoreRuntime);
				}
				catch (Exception value)
				{
					SetValue(ExecutionResultProperty, ActivityExecutionResult.Faulted);
					SetValueCommon(ActivityExecutionContext.CurrentExceptionProperty, value, ActivityExecutionContext.CurrentExceptionProperty.DefaultMetadata, shouldCallSetValueOverrideIfExists: false);
				}
				if (parent != null && this is ICompensatableActivity)
				{
					SetValue(CompletedOrderIdProperty, IncrementCompletedOrderId());
				}
				if (CanUninitializeNow)
				{
					Uninitialize(RootActivity.WorkflowCoreRuntime);
					SetValue(ExecutionResultProperty, ActivityExecutionResult.Uninitialized);
				}
				else if (parent == null)
				{
					UninitializeCompletedContext(this, new ActivityExecutionContext(this));
				}
				try
				{
					Exception ex = (Exception)GetValue(ActivityExecutionContext.CurrentExceptionProperty);
					if (ex != null && parent == null)
					{
						WorkflowCoreRuntime.ActivityStatusChanged(this, transacted: false, committed: true);
						string message = "Uncaught exception escaped to the root of the workflow.\n" + string.Format(CultureInfo.CurrentCulture, "    In instance {0} in activity {1}\n", new object[2]
						{
							WorkflowInstanceId,
							string.Empty
						}) + string.Format(CultureInfo.CurrentCulture, "Inner exception: {0}", new object[1] { ex });
						WorkflowTrace.Runtime.TraceEvent(TraceEventType.Critical, 0, message);
						WorkflowCoreRuntime.TerminateInstance(ex);
					}
					else if (ex != null && parent != null)
					{
						WorkflowCoreRuntime.RaiseException(ex, Parent, string.Empty);
						RemoveProperty(ActivityExecutionContext.CurrentExceptionProperty);
					}
					else if (parent == null || PersistOnClose)
					{
						WorkflowCoreRuntime.PersistInstanceState(this);
						WorkflowCoreRuntime.ActivityStatusChanged(this, transacted: false, committed: true);
						if (ex != null)
						{
							WorkflowCoreRuntime.RaiseException(ex, Parent, string.Empty);
							RemoveProperty(ActivityExecutionContext.CurrentExceptionProperty);
						}
					}
					for (Activity activity = parent; activity != null; activity = activity.parent)
					{
						if (activity.SupportsSynchronization || activity.Parent == null)
						{
							activity.RemoveProperty(ActivityExecutionContext.CachedGrantedLocksProperty);
						}
					}
					return;
				}
				catch
				{
					if (parent != null && this is ICompensatableActivity)
					{
						RemoveProperty(CompletedOrderIdProperty);
						DecrementCompletedOrderId();
					}
					SetValue(ExecutionResultProperty, executionResult);
					SetStatus(executionStatus2, transacted: true);
					for (Activity activity2 = parent; activity2 != null; activity2 = activity2.parent)
					{
						if (activity2.SupportsSynchronization || activity2.Parent == null)
						{
							object value2 = activity2.GetValue(ActivityExecutionContext.CachedGrantedLocksProperty);
							if (value2 != null)
							{
								activity2.SetValue(ActivityExecutionContext.GrantedLocksProperty, value2);
							}
							activity2.RemoveProperty(ActivityExecutionContext.CachedGrantedLocksProperty);
						}
					}
					throw;
				}
			}
			SetStatus(ActivityExecutionStatus.Closed, transacted: false);
			try
			{
				OnClosed(RootActivity.WorkflowCoreRuntime);
			}
			catch (Exception value3)
			{
				SetValue(ExecutionResultProperty, ActivityExecutionResult.Faulted);
				SetValueCommon(ActivityExecutionContext.CurrentExceptionProperty, value3, ActivityExecutionContext.CurrentExceptionProperty.DefaultMetadata, shouldCallSetValueOverrideIfExists: false);
			}
			if (CanUninitializeNow)
			{
				Uninitialize(RootActivity.WorkflowCoreRuntime);
				SetValue(ExecutionResultProperty, ActivityExecutionResult.Uninitialized);
			}
			Exception ex2 = (Exception)GetValue(ActivityExecutionContext.CurrentExceptionProperty);
			if (ex2 != null)
			{
				WorkflowCoreRuntime.RaiseException(ex2, Parent, string.Empty);
				RemoveProperty(ActivityExecutionContext.CurrentExceptionProperty);
			}
		}

		private static void UninitializeCompletedContext(Activity activity, ActivityExecutionContext executionContext)
		{
			if (activity.GetValue(CompletedExecutionContextsProperty) is IList<ActivityExecutionContextInfo> { Count: >0 } list)
			{
				IList<ActivityExecutionContextInfo> list2 = new List<ActivityExecutionContextInfo>(list);
				foreach (ActivityExecutionContextInfo item in list2)
				{
					if ((item.Flags & PersistFlags.NeedsCompensation) != 0 && activity.GetActivityByName(item.ActivityQualifiedName, withinThisActivityOnly: true) != null)
					{
						ActivityExecutionContext activityExecutionContext = executionContext.ExecutionContextManager.DiscardPersistedExecutionContext(item);
						UninitializeCompletedContext(activityExecutionContext.Activity, activityExecutionContext);
						executionContext.ExecutionContextManager.CompleteExecutionContext(activityExecutionContext);
					}
				}
			}
			if (activity is CompositeActivity compositeActivity)
			{
				Activity[] compensatableChildren = CompensationUtils.GetCompensatableChildren(compositeActivity);
				for (int num = compensatableChildren.Length - 1; num >= 0; num--)
				{
					Activity activity2 = (Activity)compensatableChildren.GetValue(num);
					activity2.Uninitialize(activity.RootActivity.WorkflowCoreRuntime);
					activity2.SetValue(ExecutionResultProperty, ActivityExecutionResult.Uninitialized);
				}
			}
			activity.Uninitialize(activity.RootActivity.WorkflowCoreRuntime);
			activity.SetValue(ExecutionResultProperty, ActivityExecutionResult.Uninitialized);
		}

		internal int IncrementCompletedOrderId()
		{
			int num = (int)RootActivity.GetValue(CompletedOrderIdProperty);
			RootActivity.SetValue(CompletedOrderIdProperty, num + 1);
			return num + 1;
		}

		internal void DecrementCompletedOrderId()
		{
			int num = (int)RootActivity.GetValue(CompletedOrderIdProperty);
			RootActivity.SetValue(CompletedOrderIdProperty, num - 1);
		}

		internal static string ActivityExecutionStatusEnumToString(ActivityExecutionStatus status)
		{
			string result = string.Empty;
			switch (status)
			{
			case ActivityExecutionStatus.Initialized:
				result = "Initialized";
				break;
			case ActivityExecutionStatus.Executing:
				result = "Executing";
				break;
			case ActivityExecutionStatus.Canceling:
				result = "Canceling";
				break;
			case ActivityExecutionStatus.Faulting:
				result = "Faulting";
				break;
			case ActivityExecutionStatus.Compensating:
				result = "Compensating";
				break;
			case ActivityExecutionStatus.Closed:
				result = "Closed";
				break;
			}
			return result;
		}

		internal static string ActivityExecutionResultEnumToString(ActivityExecutionResult activityExecutionResult)
		{
			string result = string.Empty;
			switch (activityExecutionResult)
			{
			case ActivityExecutionResult.None:
				result = "None";
				break;
			case ActivityExecutionResult.Succeeded:
				result = "Succeeded";
				break;
			case ActivityExecutionResult.Canceled:
				result = "Canceled";
				break;
			case ActivityExecutionResult.Faulted:
				result = "Faulted";
				break;
			case ActivityExecutionResult.Compensated:
				result = "Compensated";
				break;
			}
			return result;
		}

		public override string ToString()
		{
			return QualifiedName + " [" + GetType().FullName + "]";
		}
	}
	[ContentProperty("Activities")]
	[DesignerSerializer(typeof(CompositeActivityMarkupSerializer), typeof(WorkflowMarkupSerializer))]
	[ActivityCodeGenerator(typeof(CompositeActivityCodeGenerator))]
	[ActivityValidator(typeof(CompositeActivityValidator))]
	[ActivityExecutor(typeof(CompositeActivityExecutor<CompositeActivity>))]
	[TypeDescriptionProvider(typeof(CompositeActivityTypeDescriptorProvider))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class CompositeActivity : Activity, ISupportAlternateFlow
	{
		private static DependencyProperty CanModifyActivitiesProperty = DependencyProperty.Register("CanModifyActivities", typeof(bool), typeof(CompositeActivity), new PropertyMetadata(DependencyPropertyOptions.Metadata, new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));

		[NonSerialized]
		private ActivityCollection activities;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[Browsable(false)]
		public ActivityCollection Activities => activities;

		protected internal bool CanModifyActivities
		{
			get
			{
				return (bool)GetValue(CanModifyActivitiesProperty);
			}
			set
			{
				SetValue(CanModifyActivitiesProperty, value);
				if (Activities.Count > 0)
				{
					SetValue(Activity.CustomActivityProperty, true);
				}
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public ReadOnlyCollection<Activity> EnabledActivities
		{
			get
			{
				List<Activity> list = new List<Activity>();
				foreach (Activity activity in activities)
				{
					if (activity.Enabled && !Helpers.IsFrameworkActivity(activity))
					{
						list.Add(activity);
					}
				}
				return list.AsReadOnly();
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		IList<Activity> ISupportAlternateFlow.AlternateFlowActivities
		{
			get
			{
				List<Activity> list = new List<Activity>();
				foreach (Activity activity in activities)
				{
					if (activity.Enabled && Helpers.IsFrameworkActivity(activity))
					{
						list.Add(activity);
					}
				}
				return list.AsReadOnly();
			}
		}

		public CompositeActivity()
		{
			activities = new ActivityCollection(this);
			activities.ListChanging += OnListChangingEventHandler;
			activities.ListChanged += OnListChangedEventHandler;
			SetValue(CanModifyActivitiesProperty, false);
		}

		public CompositeActivity(IEnumerable<Activity> children)
			: this()
		{
			if (children == null)
			{
				throw new ArgumentNullException("children");
			}
			foreach (Activity child in children)
			{
				activities.Add(child);
			}
		}

		public CompositeActivity(string name)
			: base(name)
		{
			activities = new ActivityCollection(this);
			activities.ListChanging += OnListChangingEventHandler;
			activities.ListChanged += OnListChangedEventHandler;
			SetValue(CanModifyActivitiesProperty, false);
		}

		protected Activity[] GetDynamicActivities(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (activity.parent != this)
			{
				throw new ArgumentException(SR.GetString("GetDynamicActivities_InvalidActivity"), "activity");
			}
			Activity contextActivity = base.ContextActivity;
			List<Activity> list = new List<Activity>();
			if (contextActivity != null)
			{
				IList<Activity> list2 = (IList<Activity>)contextActivity.GetValue(Activity.ActiveExecutionContextsProperty);
				if (list2 != null)
				{
					foreach (Activity item in list2)
					{
						if (item.MetaEquals(activity))
						{
							list.Add(item);
						}
					}
				}
			}
			return list.ToArray();
		}

		protected internal override void Initialize(IServiceProvider provider)
		{
			if (provider == null)
			{
				throw new ArgumentNullException("provider");
			}
			if (!(provider is ActivityExecutionContext))
			{
				throw new ArgumentException(SR.GetString("Error_InvalidServiceProvider", "provider"));
			}
			foreach (Activity allEnabledActivity in Helpers.GetAllEnabledActivities(this))
			{
				ActivityExecutionContext activityExecutionContext = provider as ActivityExecutionContext;
				activityExecutionContext.InitializeActivity(allEnabledActivity);
			}
		}

		protected internal override void Uninitialize(IServiceProvider provider)
		{
			if (provider == null)
			{
				throw new ArgumentNullException("provider");
			}
			foreach (Activity allEnabledActivity in Helpers.GetAllEnabledActivities(this))
			{
				if (allEnabledActivity.ExecutionResult != ActivityExecutionResult.Uninitialized)
				{
					allEnabledActivity.Uninitialize(provider);
					allEnabledActivity.SetValue(Activity.ExecutionResultProperty, ActivityExecutionResult.Uninitialized);
				}
			}
			base.Uninitialize(provider);
		}

		protected internal override void OnActivityExecutionContextLoad(IServiceProvider provider)
		{
			if (provider == null)
			{
				throw new ArgumentNullException("provider");
			}
			base.OnActivityExecutionContextLoad(provider);
			foreach (Activity allEnabledActivity in Helpers.GetAllEnabledActivities(this))
			{
				allEnabledActivity.OnActivityExecutionContextLoad(provider);
			}
		}

		protected internal override void OnActivityExecutionContextUnload(IServiceProvider provider)
		{
			if (provider == null)
			{
				throw new ArgumentNullException("provider");
			}
			base.OnActivityExecutionContextUnload(provider);
			foreach (Activity allEnabledActivity in Helpers.GetAllEnabledActivities(this))
			{
				allEnabledActivity.OnActivityExecutionContextUnload(provider);
			}
		}

		protected internal override ActivityExecutionStatus HandleFault(ActivityExecutionContext executionContext, Exception exception)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (exception == null)
			{
				throw new ArgumentNullException("exception");
			}
			ActivityExecutionStatus activityExecutionStatus = Cancel(executionContext);
			if (activityExecutionStatus == ActivityExecutionStatus.Canceling)
			{
				return ActivityExecutionStatus.Faulting;
			}
			return activityExecutionStatus;
		}

		protected void ApplyWorkflowChanges(WorkflowChanges workflowChanges)
		{
			if (workflowChanges == null)
			{
				throw new ArgumentNullException("workflowChanges");
			}
			if (base.Parent != null)
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidActivityForWorkflowChanges"));
			}
			if (base.RootActivity == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_MissingRootActivity"));
			}
			if (base.WorkflowCoreRuntime == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_NoRuntimeAvailable"));
			}
			workflowChanges.ApplyTo(this);
		}

		protected internal virtual void OnActivityChangeAdd(ActivityExecutionContext executionContext, Activity addedActivity)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (addedActivity == null)
			{
				throw new ArgumentNullException("addedActivity");
			}
		}

		protected internal virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity)
		{
		}

		protected internal virtual void OnWorkflowChangesCompleted(ActivityExecutionContext rootContext)
		{
		}

		internal override Activity TraverseDottedPath(string dottedPath)
		{
			string value = dottedPath;
			string text = string.Empty;
			int num = dottedPath.IndexOf('.');
			if (num != -1)
			{
				value = dottedPath.Substring(0, num);
				text = dottedPath.Substring(num + 1);
			}
			int num2 = Convert.ToInt32(value, CultureInfo.InvariantCulture);
			if (num2 >= activities.Count)
			{
				return null;
			}
			Activity activity = activities[num2];
			if (!string.IsNullOrEmpty(text))
			{
				return activity.TraverseDottedPath(text);
			}
			return activity;
		}

		internal override void OnInitializeDefinitionForRuntime()
		{
			if (!base.DesignMode)
			{
				return;
			}
			base.OnInitializeDefinitionForRuntime();
			Activity rootActivity = base.RootActivity;
			Hashtable hashtable = (Hashtable)rootActivity.UserData[UserDataKeys.LookupPaths];
			string text = (string)hashtable[base.QualifiedName];
			foreach (Activity item in (IEnumerable)activities)
			{
				if (item.Enabled)
				{
					string text2 = text;
					if (!string.IsNullOrEmpty(text))
					{
						text2 += ".";
					}
					text2 += activities.IndexOf(item).ToString(CultureInfo.InvariantCulture);
					hashtable.Add(item.QualifiedName, text2);
					((IDependencyObjectAccessor)item).InitializeDefinitionForRuntime((DependencyObject)null);
				}
				else
				{
					item.OnInitializeDefinitionForRuntime();
					item.Readonly = true;
				}
			}
		}

		internal override void OnInitializeInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime)
		{
			base.OnInitializeInstanceForRuntime(workflowCoreRuntime);
			foreach (Activity activity in activities)
			{
				if (activity.Enabled)
				{
					((IDependencyObjectAccessor)activity).InitializeInstanceForRuntime(workflowCoreRuntime);
				}
			}
		}

		internal override void OnInitializeActivatingInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime)
		{
			base.OnInitializeActivatingInstanceForRuntime(workflowCoreRuntime);
			foreach (Activity activity in activities)
			{
				if (activity.Enabled)
				{
					((IDependencyObjectAccessor)activity).InitializeActivatingInstanceForRuntime((DependencyObject)null, workflowCoreRuntime);
				}
				else
				{
					base.Readonly = true;
				}
			}
		}

		internal override void FixUpMetaProperties(DependencyObject originalObject)
		{
			if (originalObject == null)
			{
				throw new ArgumentNullException();
			}
			if (!(originalObject is CompositeActivity))
			{
				throw new ArgumentException();
			}
			base.FixUpMetaProperties(originalObject);
			if (activities == null || !(originalObject is CompositeActivity compositeActivity))
			{
				return;
			}
			int num = 0;
			foreach (Activity activity in activities)
			{
				activity.FixUpMetaProperties(compositeActivity.activities[num++]);
			}
		}

		internal override void FixUpParentChildRelationship(Activity definitionActivity, Activity parentActivity, Hashtable deserializedActivities)
		{
			if (!(definitionActivity is CompositeActivity compositeActivity))
			{
				throw new ArgumentException("definitionActivity");
			}
			base.FixUpParentChildRelationship(definitionActivity, parentActivity, deserializedActivities);
			activities = new ActivityCollection(this);
			activities.ListChanging += OnListChangingEventHandler;
			activities.ListChanged += OnListChangedEventHandler;
			string dottedPath = base.DottedPath;
			int num = 0;
			foreach (Activity activity2 in compositeActivity.activities)
			{
				Activity activity = (Activity)deserializedActivities[(dottedPath.Length == 0) ? num.ToString(CultureInfo.InvariantCulture) : (dottedPath + "." + num.ToString(CultureInfo.InvariantCulture))];
				activities.InnerAdd(activity);
				activity.FixUpParentChildRelationship(activity2, this, deserializedActivities);
				num++;
			}
		}

		internal override IList<Activity> CollectNestedActivities()
		{
			List<Activity> list = new List<Activity>();
			Queue<Activity> queue = new Queue<Activity>(activities);
			while (queue.Count > 0)
			{
				Activity activity = queue.Dequeue();
				list.Add(activity);
				if (!(activity is CompositeActivity))
				{
					continue;
				}
				foreach (Activity activity2 in ((CompositeActivity)activity).activities)
				{
					queue.Enqueue(activity2);
				}
			}
			return list;
		}

		private void OnListChangingEventHandler(object sender, ActivityCollectionChangeEventArgs e)
		{
			if (!base.DesignMode && !base.DynamicUpdateMode)
			{
				throw new InvalidOperationException(SR.GetString("Error_CanNotChangeAtRuntime"));
			}
			if (!CanModifyActivities)
			{
				if (base.DesignMode && Activity.ActivityType != null && GetType() == Activity.ActivityType)
				{
					throw new InvalidOperationException(SR.GetString("Error_Missing_CanModifyProperties_True", GetType().FullName));
				}
				if (!IsDynamicMode(this) && CannotModifyChildren(this, parent: false))
				{
					throw new InvalidOperationException(SR.GetString("Error_CannotAddRemoveChildActivities"));
				}
				if (IsDynamicMode(this) && CannotModifyChildren(this, parent: true))
				{
					throw new InvalidOperationException(SR.GetString("Error_CannotAddRemoveChildActivities"));
				}
			}
			if (e.Action == ActivityCollectionChangeAction.Add && e.AddedItems != null)
			{
				for (Activity activity = this; activity != null; activity = activity.Parent)
				{
					if (e.AddedItems.Contains(activity))
					{
						throw new InvalidOperationException(SR.GetString("Error_ActivityCircularReference"));
					}
				}
			}
			OnListChanging(e);
		}

		protected virtual void OnListChanging(ActivityCollectionChangeEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (e.Action == ActivityCollectionChangeAction.Add && e.AddedItems != null)
			{
				foreach (Activity addedItem in e.AddedItems)
				{
					if (addedItem.Parent != null)
					{
						throw new InvalidOperationException(SR.GetString("Error_ActivityHasParent", addedItem.QualifiedName, addedItem.Parent.QualifiedName));
					}
					if (addedItem == this)
					{
						throw new InvalidOperationException(SR.GetString("Error_Recursion", addedItem.QualifiedName));
					}
				}
			}
			if (((IComponent)this).Site != null && ((IComponent)this).Site.GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
			{
				componentChangeService.OnComponentChanging(this, null);
			}
		}

		private void OnListChangedEventHandler(object sender, ActivityCollectionChangeEventArgs e)
		{
			OnListChanged(e);
		}

		protected virtual void OnListChanged(ActivityCollectionChangeEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if ((e.Action == ActivityCollectionChangeAction.Replace || e.Action == ActivityCollectionChangeAction.Remove) && e.RemovedItems != null)
			{
				foreach (Activity removedItem in e.RemovedItems)
				{
					removedItem.SetParent(null);
				}
			}
			if ((e.Action == ActivityCollectionChangeAction.Replace || e.Action == ActivityCollectionChangeAction.Add) && e.AddedItems != null)
			{
				foreach (Activity addedItem in e.AddedItems)
				{
					addedItem.SetParent(this);
				}
				Queue<Activity> queue = new Queue<Activity>(e.AddedItems);
				while (queue.Count > 0)
				{
					Activity activity = queue.Dequeue();
					if (activity != null && (activity.Name == null || activity.Name.Length == 0 || activity.Name == activity.GetType().Name))
					{
						Activity rootActivity = Helpers.GetRootActivity(activity);
						string value = rootActivity.GetValue(WorkflowMarkupSerializer.XClassProperty) as string;
						if (rootActivity.Parent == null || !string.IsNullOrEmpty(value))
						{
							ArrayList arrayList = new ArrayList();
							arrayList.AddRange(Helpers.GetIdentifiersInCompositeActivity(rootActivity as CompositeActivity));
							activity.Name = DesignerHelpers.GenerateUniqueIdentifier(((IComponent)this).Site, Helpers.GetBaseIdentifier(activity), (string[])arrayList.ToArray(typeof(string)));
						}
					}
					if (!(activity is CompositeActivity))
					{
						continue;
					}
					foreach (Activity activity2 in ((CompositeActivity)activity).Activities)
					{
						queue.Enqueue(activity2);
					}
				}
			}
			if (((IComponent)this).Site != null && ((IComponent)this).Site.GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
			{
				componentChangeService.OnComponentChanged(this, null, e, null);
			}
		}

		private static bool IsDynamicMode(CompositeActivity compositeActivity)
		{
			if (compositeActivity == null)
			{
				throw new ArgumentNullException("compositeActivity");
			}
			while (compositeActivity.Parent != null)
			{
				if (compositeActivity.DynamicUpdateMode)
				{
					return true;
				}
				compositeActivity = compositeActivity.Parent;
			}
			return compositeActivity.DynamicUpdateMode;
		}

		private static bool CannotModifyChildren(CompositeActivity compositeActivity, bool parent)
		{
			if (compositeActivity == null)
			{
				throw new ArgumentNullException("compositeActivity");
			}
			if (parent && compositeActivity.Parent == null)
			{
				return false;
			}
			if ((bool)compositeActivity.GetValue(Activity.CustomActivityProperty))
			{
				return true;
			}
			if (compositeActivity.Parent != null)
			{
				return CannotModifyChildren(compositeActivity.Parent, parent);
			}
			return false;
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				foreach (Activity activity in Activities)
				{
					activity.Dispose();
				}
			}
			base.Dispose(disposing);
		}
	}
	internal abstract class ActivityExecutor
	{
		public abstract ActivityExecutionStatus Execute(Activity activity, ActivityExecutionContext executionContext);

		public abstract ActivityExecutionStatus Cancel(Activity activity, ActivityExecutionContext executionContext);

		public abstract ActivityExecutionStatus HandleFault(Activity activity, ActivityExecutionContext executionContext, Exception exception);

		public abstract ActivityExecutionStatus Compensate(Activity activity, ActivityExecutionContext executionContext);
	}
	internal class ActivityExecutor<T> : ActivityExecutor where T : Activity
	{
		public sealed override ActivityExecutionStatus Execute(Activity activity, ActivityExecutionContext executionContext)
		{
			return Execute((T)activity, executionContext);
		}

		public sealed override ActivityExecutionStatus Cancel(Activity activity, ActivityExecutionContext executionContext)
		{
			return Cancel((T)activity, executionContext);
		}

		public sealed override ActivityExecutionStatus HandleFault(Activity activity, ActivityExecutionContext executionContext, Exception exception)
		{
			return HandleFault((T)activity, executionContext, exception);
		}

		public sealed override ActivityExecutionStatus Compensate(Activity activity, ActivityExecutionContext executionContext)
		{
			return Compensate((T)activity, executionContext);
		}

		protected virtual ActivityExecutionStatus Execute(T activity, ActivityExecutionContext executionContext)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			return activity.Execute(executionContext);
		}

		protected virtual ActivityExecutionStatus Cancel(T activity, ActivityExecutionContext executionContext)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			return activity.Cancel(executionContext);
		}

		protected virtual ActivityExecutionStatus HandleFault(T activity, ActivityExecutionContext executionContext, Exception exception)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			return activity.HandleFault(executionContext, exception);
		}

		protected virtual ActivityExecutionStatus Compensate(T activity, ActivityExecutionContext executionContext)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			return ((ICompensatableActivity)activity).Compensate(executionContext);
		}
	}
	internal class CompositeActivityExecutor<T> : ActivityExecutor<T>, ISupportWorkflowChanges where T : CompositeActivity
	{
		void ISupportWorkflowChanges.OnActivityAdded(ActivityExecutionContext executionContext, Activity addedActivity)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (addedActivity == null)
			{
				throw new ArgumentNullException("addedActivity");
			}
			if (!(executionContext.Activity is CompositeActivity compositeActivity))
			{
				throw new ArgumentException("Error_InvalidActivityExecutionContext", "executionContext");
			}
			compositeActivity.OnActivityChangeAdd(executionContext, addedActivity);
		}

		void ISupportWorkflowChanges.OnActivityRemoved(ActivityExecutionContext executionContext, Activity removedActivity)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (removedActivity == null)
			{
				throw new ArgumentNullException("removedActivity");
			}
			if (!(executionContext.Activity is CompositeActivity compositeActivity))
			{
				throw new ArgumentException("Error_InvalidActivityExecutionContext", "executionContext");
			}
			compositeActivity.OnActivityChangeRemove(executionContext, removedActivity);
		}

		void ISupportWorkflowChanges.OnWorkflowChangesCompleted(ActivityExecutionContext executionContext)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (!(executionContext.Activity is CompositeActivity compositeActivity))
			{
				throw new ArgumentException("Error_InvalidActivityExecutionContext", "executionContext");
			}
			compositeActivity.OnWorkflowChangesCompleted(executionContext);
		}

		protected override ActivityExecutionStatus Execute(T activity, ActivityExecutionContext executionContext)
		{
			return base.Execute(activity, executionContext);
		}

		protected override ActivityExecutionStatus Cancel(T activity, ActivityExecutionContext executionContext)
		{
			return base.Cancel(activity, executionContext);
		}
	}
	internal static class ActivityExecutors
	{
		private static Hashtable typeToExecutorMapping = new Hashtable();

		private static Hashtable executors = new Hashtable();

		internal static ActivityExecutor[] GetActivityExecutors(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			Type type = activity.GetType();
			if (executors[type] is ActivityExecutor[] result)
			{
				return result;
			}
			lock (executors.SyncRoot)
			{
				if (executors[type] is ActivityExecutor[] result2)
				{
					return result2;
				}
				object[] array = null;
				try
				{
					object[] array2 = ComponentDispenser.CreateActivityExecutors(activity);
					array = array2;
				}
				catch (Exception innerException)
				{
					throw new InvalidOperationException(SR.GetString("ExecutorCreationFailedErrorMessage", type.FullName), innerException);
				}
				if (array == null || array.Length == 0)
				{
					throw new InvalidOperationException(SR.GetString("ExecutorCreationFailedErrorMessage", type.FullName));
				}
				ActivityExecutor[] array3 = new ActivityExecutor[array.Length];
				for (int i = 0; i < array.Length; i++)
				{
					if (!typeToExecutorMapping.Contains(array[i].GetType()))
					{
						lock (typeToExecutorMapping.SyncRoot)
						{
							if (!typeToExecutorMapping.Contains(array[i].GetType()))
							{
								Thread.MemoryBarrier();
								typeToExecutorMapping[array[i].GetType()] = array[i];
							}
						}
					}
					array3[i] = (ActivityExecutor)typeToExecutorMapping[array[i].GetType()];
				}
				Thread.MemoryBarrier();
				executors[type] = array3;
				return array3;
			}
		}

		public static ActivityExecutor GetActivityExecutorFromType(Type executorType)
		{
			if (executorType == null)
			{
				throw new ArgumentNullException("executorType");
			}
			if (!typeof(ActivityExecutor).IsAssignableFrom(executorType))
			{
				throw new ArgumentException(SR.GetString("Error_NonActivityExecutor", executorType.FullName), "executorType");
			}
			if (typeToExecutorMapping[executorType] is ActivityExecutor result)
			{
				return result;
			}
			lock (typeToExecutorMapping.SyncRoot)
			{
				if (typeToExecutorMapping[executorType] is ActivityExecutor result2)
				{
					return result2;
				}
				Thread.MemoryBarrier();
				typeToExecutorMapping[executorType] = Activator.CreateInstance(executorType);
			}
			return (ActivityExecutor)typeToExecutorMapping[executorType];
		}

		public static ActivityExecutor GetActivityExecutor(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			return GetActivityExecutors(activity)[0];
		}
	}
	[Serializable]
	internal abstract class SchedulableItem
	{
		private int contextId = -1;

		private string activityId;

		public int ContextId => contextId;

		public string ActivityId => activityId;

		protected SchedulableItem(int contextId, string activityId)
		{
			this.contextId = contextId;
			this.activityId = activityId;
		}

		public abstract bool Run(IWorkflowCoreRuntime workflowCoreRuntime);
	}
	internal enum ActivityOperationType : byte
	{
		Execute,
		Cancel,
		Compensate,
		HandleFault
	}
	[Serializable]
	internal sealed class ActivityExecutorOperation : SchedulableItem
	{
		private string activityName;

		private ActivityOperationType operation;

		private Exception exceptionToDeliver;

		public ActivityExecutorOperation(Activity activity, ActivityOperationType opt, int contextId)
			: base(contextId, activity.QualifiedName)
		{
			activityName = activity.QualifiedName;
			operation = opt;
		}

		public ActivityExecutorOperation(Activity activity, ActivityOperationType opt, int contextId, Exception e)
			: this(activity, opt, contextId)
		{
			exceptionToDeliver = e;
		}

		public override bool Run(IWorkflowCoreRuntime workflowCoreRuntime)
		{
			Activity contextActivityForId = workflowCoreRuntime.GetContextActivityForId(base.ContextId);
			Activity activityByName = contextActivityForId.GetActivityByName(activityName);
			using (workflowCoreRuntime.SetCurrentActivity(activityByName))
			{
				using ActivityExecutionContext activityExecutionContext = new ActivityExecutionContext(activityByName);
				ActivityExecutor activityExecutor = ActivityExecutors.GetActivityExecutor(activityByName);
				switch (operation)
				{
				case ActivityOperationType.Execute:
					if (activityByName.ExecutionStatus != ActivityExecutionStatus.Executing)
					{
						break;
					}
					try
					{
						workflowCoreRuntime.RaiseActivityExecuting(activityByName);
						ActivityExecutionStatus activityExecutionStatus4 = activityExecutor.Execute(activityByName, activityExecutionContext);
						switch (activityExecutionStatus4)
						{
						case ActivityExecutionStatus.Closed:
							activityExecutionContext.CloseActivity();
							break;
						default:
							throw new InvalidOperationException(SR.GetString("InvalidExecutionStatus", activityByName.QualifiedName, activityExecutionStatus4.ToString(), ActivityExecutionStatus.Executing.ToString()));
						case ActivityExecutionStatus.Executing:
							break;
						}
					}
					catch (Exception ex4)
					{
						WorkflowTrace.Runtime.TraceEvent(TraceEventType.Error, 1, "Execute of Activity {0} threw {1}", activityByName.QualifiedName, ex4.ToString());
						throw;
					}
					break;
				case ActivityOperationType.Cancel:
					if (activityByName.ExecutionStatus != ActivityExecutionStatus.Canceling)
					{
						break;
					}
					try
					{
						ActivityExecutionStatus activityExecutionStatus2 = activityExecutor.Cancel(activityByName, activityExecutionContext);
						switch (activityExecutionStatus2)
						{
						case ActivityExecutionStatus.Closed:
							activityExecutionContext.CloseActivity();
							break;
						default:
							throw new InvalidOperationException(SR.GetString("InvalidExecutionStatus", activityByName.QualifiedName, activityExecutionStatus2.ToString(), ActivityExecutionStatus.Canceling.ToString()));
						case ActivityExecutionStatus.Canceling:
							break;
						}
					}
					catch (Exception ex2)
					{
						WorkflowTrace.Runtime.TraceEvent(TraceEventType.Error, 1, "Cancel of Activity {0} threw {1}", activityByName.QualifiedName, ex2.ToString());
						throw;
					}
					break;
				case ActivityOperationType.Compensate:
					if (activityByName.ExecutionStatus != ActivityExecutionStatus.Compensating)
					{
						break;
					}
					try
					{
						ActivityExecutionStatus activityExecutionStatus3 = activityExecutor.Compensate(activityByName, activityExecutionContext);
						switch (activityExecutionStatus3)
						{
						case ActivityExecutionStatus.Closed:
							activityExecutionContext.CloseActivity();
							break;
						default:
							throw new InvalidOperationException(SR.GetString("InvalidExecutionStatus", activityByName.QualifiedName, activityExecutionStatus3.ToString(), ActivityExecutionStatus.Compensating.ToString()));
						case ActivityExecutionStatus.Compensating:
							break;
						}
					}
					catch (Exception ex3)
					{
						WorkflowTrace.Runtime.TraceEvent(TraceEventType.Error, 1, "Compensate of Activity {0} threw {1}", activityByName.QualifiedName, ex3.ToString());
						throw;
					}
					break;
				case ActivityOperationType.HandleFault:
					if (activityByName.ExecutionStatus != ActivityExecutionStatus.Faulting)
					{
						break;
					}
					try
					{
						ActivityExecutionStatus activityExecutionStatus = activityExecutor.HandleFault(activityByName, activityExecutionContext, exceptionToDeliver);
						switch (activityExecutionStatus)
						{
						case ActivityExecutionStatus.Closed:
							activityExecutionContext.CloseActivity();
							break;
						default:
							throw new InvalidOperationException(SR.GetString("InvalidExecutionStatus", activityByName.QualifiedName, activityExecutionStatus.ToString(), ActivityExecutionStatus.Faulting.ToString()));
						case ActivityExecutionStatus.Faulting:
							break;
						}
					}
					catch (Exception ex)
					{
						WorkflowTrace.Runtime.TraceEvent(TraceEventType.Error, 1, "Compensate of Activity {0} threw {1}", activityByName.QualifiedName, ex.ToString());
						throw;
					}
					break;
				}
			}
			return true;
		}

		public override string ToString()
		{
			return "ActivityOperation((" + base.ContextId.ToString(CultureInfo.CurrentCulture) + ")" + activityName + ", " + ActivityOperationToString(operation) + ")";
		}

		private string ActivityOperationToString(ActivityOperationType operationType)
		{
			string result = string.Empty;
			switch (operationType)
			{
			case ActivityOperationType.Execute:
				result = "Execute";
				break;
			case ActivityOperationType.Cancel:
				result = "Cancel";
				break;
			case ActivityOperationType.HandleFault:
				result = "HandleFault";
				break;
			case ActivityOperationType.Compensate:
				result = "Compensate";
				break;
			}
			return result;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IActivityEventListener<T> where T : EventArgs
	{
		void OnEvent(object sender, T e);
	}
	[Serializable]
	internal sealed class ActivityExecutorDelegateInfo<T> where T : EventArgs
	{
		[Serializable]
		private sealed class ActivityExecutorDelegateOperation : SchedulableItem
		{
			private string activityQualifiedName;

			private IActivityEventListener<T> eventListener;

			private EventHandler<T> delegateValue;

			private T args;

			[NonSerialized]
			private bool synchronousInvoke;

			internal bool SynchronousInvoke
			{
				get
				{
					return synchronousInvoke;
				}
				set
				{
					synchronousInvoke = value;
				}
			}

			public ActivityExecutorDelegateOperation(string activityQualifiedName, EventHandler<T> delegateValue, T e, int contextId)
				: base(contextId, activityQualifiedName)
			{
				this.activityQualifiedName = activityQualifiedName;
				this.delegateValue = delegateValue;
				args = e;
			}

			public ActivityExecutorDelegateOperation(string activityQualifiedName, IActivityEventListener<T> eventListener, T e, int contextId)
				: base(contextId, activityQualifiedName)
			{
				this.activityQualifiedName = activityQualifiedName;
				this.eventListener = eventListener;
				args = e;
			}

			public override bool Run(IWorkflowCoreRuntime workflowCoreRuntime)
			{
				Activity contextActivityForId = workflowCoreRuntime.GetContextActivityForId(base.ContextId);
				ActivityExecutionStatusChangedEventArgs activityExecutionStatusChangedEventArgs = args as ActivityExecutionStatusChangedEventArgs;
				if (activityExecutionStatusChangedEventArgs != null)
				{
					activityExecutionStatusChangedEventArgs.BaseExecutor = workflowCoreRuntime;
					if (activityExecutionStatusChangedEventArgs.Activity == null)
					{
						activityExecutionStatusChangedEventArgs.BaseExecutor = null;
						return false;
					}
				}
				Activity activityByName = contextActivityForId.GetActivityByName(activityQualifiedName);
				if (activityByName == null || ((activityByName.ExecutionStatus == ActivityExecutionStatus.Closed || activityByName.ExecutionStatus == ActivityExecutionStatus.Initialized) && !synchronousInvoke) || (activityByName.HasPrimaryClosed && !(eventListener is ActivityExecutionFilter)))
				{
					return false;
				}
				try
				{
					using (workflowCoreRuntime.SetCurrentActivity(activityByName))
					{
						using ActivityExecutionContext sender = new ActivityExecutionContext(activityByName);
						if (delegateValue != null)
						{
							delegateValue(sender, args);
						}
						else
						{
							eventListener.OnEvent(sender, args);
						}
					}
				}
				catch (Exception ex)
				{
					if (activityByName != null)
					{
						WorkflowTrace.Runtime.TraceEvent(TraceEventType.Error, 1, "Subscription handler of Activity {0} threw {1}", activityByName.QualifiedName, ex.ToString());
					}
					else
					{
						WorkflowTrace.Runtime.TraceEvent(TraceEventType.Error, 1, "Subscription handler threw {0}", ex.ToString());
					}
					throw;
				}
				finally
				{
					if (activityExecutionStatusChangedEventArgs != null)
					{
						activityExecutionStatusChangedEventArgs.BaseExecutor = null;
					}
				}
				return true;
			}

			public override string ToString()
			{
				return "SubscriptionEvent((" + base.ContextId.ToString(CultureInfo.CurrentCulture) + ")" + activityQualifiedName + ", " + args.ToString() + ")";
			}
		}

		private string activityQualifiedName;

		private IActivityEventListener<T> eventListener;

		private EventHandler<T> delegateValue;

		private int contextId = -1;

		private bool wantInTransact;

		private string subscribedActivityQualifiedName;

		public string ActivityQualifiedName => activityQualifiedName;

		public string SubscribedActivityQualifiedName
		{
			get
			{
				return subscribedActivityQualifiedName;
			}
			set
			{
				subscribedActivityQualifiedName = value;
			}
		}

		public int ContextId => contextId;

		public EventHandler<T> HandlerDelegate => delegateValue;

		public IActivityEventListener<T> EventListener => eventListener;

		public ActivityExecutorDelegateInfo(EventHandler<T> delegateValue, Activity contextActivity)
			: this(useCurrentContext: false, delegateValue, contextActivity)
		{
		}

		public ActivityExecutorDelegateInfo(IActivityEventListener<T> eventListener, Activity contextActivity)
			: this(useCurrentContext: false, eventListener, contextActivity)
		{
		}

		public ActivityExecutorDelegateInfo(EventHandler<T> delegateValue, Activity contextActivity, bool wantInTransact)
			: this(delegateValue, contextActivity)
		{
			this.wantInTransact = wantInTransact;
		}

		public ActivityExecutorDelegateInfo(IActivityEventListener<T> eventListener, Activity contextActivity, bool wantInTransact)
			: this(eventListener, contextActivity)
		{
			this.wantInTransact = wantInTransact;
		}

		internal ActivityExecutorDelegateInfo(bool useCurrentContext, EventHandler<T> delegateValue, Activity contextActivity)
		{
			this.delegateValue = delegateValue;
			Activity activity = delegateValue.Target as Activity;
			if (contextActivity.WorkflowCoreRuntime != null)
			{
				if (useCurrentContext)
				{
					contextId = contextActivity.WorkflowCoreRuntime.CurrentActivity.ContextActivity.ContextId;
				}
				else
				{
					contextId = contextActivity.ContextId;
				}
				activityQualifiedName = (activity ?? contextActivity.WorkflowCoreRuntime.CurrentActivity).QualifiedName;
			}
			else
			{
				contextId = 1;
				activityQualifiedName = (activity ?? contextActivity.RootActivity).QualifiedName;
			}
		}

		internal ActivityExecutorDelegateInfo(bool useCurrentContext, IActivityEventListener<T> eventListener, Activity contextActivity)
		{
			this.eventListener = eventListener;
			Activity activity = eventListener as Activity;
			if (contextActivity.WorkflowCoreRuntime != null)
			{
				if (useCurrentContext)
				{
					contextId = contextActivity.WorkflowCoreRuntime.CurrentActivity.ContextActivity.ContextId;
				}
				else
				{
					contextId = contextActivity.ContextId;
				}
				activityQualifiedName = (activity ?? contextActivity.WorkflowCoreRuntime.CurrentActivity).QualifiedName;
			}
			else
			{
				contextId = 1;
				activityQualifiedName = (activity ?? contextActivity.RootActivity).QualifiedName;
			}
		}

		internal void InvokeDelegate(Activity currentContextActivity, T e, bool sync, bool transacted)
		{
			Activity activity = currentContextActivity.WorkflowCoreRuntime.GetContextActivityForId(contextId);
			if (activity == null)
			{
				activity = FindExecutorForActivityUp(currentContextActivity, activityQualifiedName);
				if (activity == null)
				{
					activity = FindExecutorForActivityDown(currentContextActivity, activityQualifiedName);
				}
			}
			if (activity != null)
			{
				InvokeDelegate(currentContextActivity, activity, e, sync, transacted);
			}
		}

		public void InvokeDelegate(Activity currentContextActivity, T e, bool transacted)
		{
			Activity activity = FindExecutorForActivityUp(currentContextActivity, activityQualifiedName);
			if (activity == null)
			{
				activity = FindExecutorForActivityDown(currentContextActivity, activityQualifiedName);
			}
			if (activity != null)
			{
				InvokeDelegate(currentContextActivity, activity, e, sync: false, transacted);
			}
		}

		private void InvokeDelegate(Activity currentContextActivity, Activity targetContextActivity, T e, bool sync, bool transacted)
		{
			ActivityExecutorDelegateOperation activityExecutorDelegateOperation = null;
			activityExecutorDelegateOperation = ((delegateValue == null) ? new ActivityExecutorDelegateOperation(activityQualifiedName, eventListener, e, ContextId) : new ActivityExecutorDelegateOperation(activityQualifiedName, delegateValue, e, ContextId));
			bool flag = MayInvokeDelegateNow(currentContextActivity);
			if (flag && sync)
			{
				Activity activityByName = targetContextActivity.GetActivityByName(activityQualifiedName);
				using (currentContextActivity.WorkflowCoreRuntime.SetCurrentActivity(activityByName))
				{
					activityExecutorDelegateOperation.SynchronousInvoke = true;
					activityExecutorDelegateOperation.Run(currentContextActivity.WorkflowCoreRuntime);
					return;
				}
			}
			Activity activityByName2 = targetContextActivity.GetActivityByName(activityQualifiedName);
			currentContextActivity.WorkflowCoreRuntime.ScheduleItem(activityExecutorDelegateOperation, ActivityExecutionContext.IsInAtomicTransaction(activityByName2), transacted, !flag);
		}

		private bool MayInvokeDelegateNow(Activity currentContextActivity)
		{
			if (activityQualifiedName == null || wantInTransact)
			{
				return true;
			}
			if (!ActivityExecutionContext.IsInAtomicTransaction(currentContextActivity.WorkflowCoreRuntime.CurrentActivity))
			{
				return true;
			}
			Activity contextActivityForId = currentContextActivity.WorkflowCoreRuntime.GetContextActivityForId(contextId);
			if (contextActivityForId == null)
			{
				return false;
			}
			Activity activityByName = contextActivityForId.GetActivityByName(activityQualifiedName, withinThisActivityOnly: true);
			if (activityByName == null)
			{
				return false;
			}
			if (ActivityExecutionContext.IsInAtomicTransaction(activityByName) && ActivityExecutionContext.IsInAtomicTransaction(currentContextActivity.WorkflowCoreRuntime.CurrentActivity))
			{
				return true;
			}
			if (activityByName.MetaEquals(currentContextActivity))
			{
				return true;
			}
			return false;
		}

		private Activity FindExecutorForActivityUp(Activity contextActivity, string activityQualifiedName)
		{
			while (contextActivity != null)
			{
				Activity activityByName = contextActivity.GetActivityByName(activityQualifiedName, withinThisActivityOnly: true);
				if (activityByName != null && activityByName.ExecutionStatus != 0)
				{
					return contextActivity;
				}
				contextActivity = contextActivity.ParentContextActivity;
			}
			return contextActivity;
		}

		private Activity FindExecutorForActivityDown(Activity contextActivity, string activityQualifiedName)
		{
			Queue<Activity> queue = new Queue<Activity>();
			queue.Enqueue(contextActivity);
			while (queue.Count > 0)
			{
				Activity activity = queue.Dequeue();
				Activity activityByName = activity.GetActivityByName(activityQualifiedName, withinThisActivityOnly: true);
				if (activityByName != null && activityByName.ExecutionStatus != 0)
				{
					return activity;
				}
				IList<Activity> list = (IList<Activity>)activity.GetValue(Activity.ActiveExecutionContextsProperty);
				if (list == null)
				{
					continue;
				}
				foreach (Activity item in list)
				{
					queue.Enqueue(item);
				}
			}
			return null;
		}

		public override bool Equals(object obj)
		{
			if (!(obj is ActivityExecutorDelegateInfo<T> activityExecutorDelegateInfo))
			{
				return false;
			}
			if (((activityExecutorDelegateInfo.delegateValue == null && delegateValue == null) || (activityExecutorDelegateInfo.delegateValue != null && activityExecutorDelegateInfo.delegateValue.Equals(delegateValue))) && ((activityExecutorDelegateInfo.eventListener == null && eventListener == null) || (activityExecutorDelegateInfo.eventListener != null && activityExecutorDelegateInfo.eventListener.Equals(eventListener))) && activityExecutorDelegateInfo.activityQualifiedName == activityQualifiedName && activityExecutorDelegateInfo.contextId == contextId)
			{
				return activityExecutorDelegateInfo.wantInTransact == wantInTransact;
			}
			return false;
		}

		public override int GetHashCode()
		{
			if (delegateValue == null)
			{
				return eventListener.GetHashCode() ^ activityQualifiedName.GetHashCode();
			}
			return delegateValue.GetHashCode();
		}
	}
	[Serializable]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class QueueEventArgs : EventArgs
	{
		private IComparable queueName;

		public IComparable QueueName => queueName;

		internal QueueEventArgs(IComparable queueName)
		{
			this.queueName = queueName;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ActivityExecutionContext : IServiceProvider, IDisposable
	{
		internal sealed class StartWorkflow : IStartWorkflow
		{
			private ActivityExecutionContext executionContext;

			internal StartWorkflow(ActivityExecutionContext executionContext)
			{
				this.executionContext = executionContext;
			}

			Guid IStartWorkflow.StartWorkflow(Type workflowType, Dictionary<string, object> namedArgumentValues)
			{
				return executionContext.WorkflowCoreRuntime.StartWorkflow(workflowType, namedArgumentValues);
			}
		}

		public static readonly DependencyProperty CurrentExceptionProperty = DependencyProperty.RegisterAttached("CurrentException", typeof(Exception), typeof(ActivityExecutionContext), new PropertyMetadata(null, DependencyPropertyOptions.Default, null, EnforceExceptionSemantics, true));

		internal static readonly DependencyProperty GrantedLocksProperty = DependencyProperty.RegisterAttached("GrantedLocks", typeof(Dictionary<string, GrantedLock>), typeof(ActivityExecutionContext));

		internal static readonly DependencyProperty CachedGrantedLocksProperty = DependencyProperty.RegisterAttached("CachedGrantedLocks", typeof(Dictionary<string, GrantedLock>), typeof(ActivityExecutionContext), new PropertyMetadata(DependencyPropertyOptions.NonSerialized));

		internal static readonly DependencyProperty LockAcquiredCallbackProperty = DependencyProperty.RegisterAttached("LockAcquiredCallback", typeof(ActivityExecutorDelegateInfo<EventArgs>), typeof(ActivityExecutionContext));

		private Activity currentActivity;

		private ActivityExecutionContextManager contextManager;

		private IStartWorkflow startWorkflowService;

		private bool allowSignalsOnCurrentActivity;

		private static Type schedulerServiceType = Type.GetType("System.Workflow.Runtime.Hosting.WorkflowSchedulerService, System.Workflow.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=MSIL");

		private static Type persistenceServiceType = Type.GetType("System.Workflow.Runtime.Hosting.WorkflowPersistenceService, System.Workflow.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=MSIL");

		private static Type trackingServiceType = Type.GetType("System.Workflow.Runtime.Tracking.TrackingService, System.Workflow.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=MSIL");

		private static Type transactionServiceType = Type.GetType("System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService, System.Workflow.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=MSIL");

		private static Type loaderServiceType = Type.GetType("System.Workflow.Runtime.Hosting.WorkflowLoaderService, System.Workflow.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=MSIL");

		public Activity Activity
		{
			get
			{
				if (currentActivity == null)
				{
					throw new ObjectDisposedException("ActivityExecutionContext");
				}
				return currentActivity;
			}
		}

		public ActivityExecutionContextManager ExecutionContextManager
		{
			get
			{
				if (currentActivity == null)
				{
					throw new ObjectDisposedException("ActivityExecutionContext");
				}
				if (contextManager == null)
				{
					contextManager = new ActivityExecutionContextManager(this);
				}
				return contextManager;
			}
		}

		public Guid ContextGuid
		{
			get
			{
				if (currentActivity == null)
				{
					throw new ObjectDisposedException("ActivityExecutionContext");
				}
				return currentActivity.ContextActivity.ContextGuid;
			}
		}

		internal int ContextId
		{
			get
			{
				if (currentActivity == null)
				{
					throw new ObjectDisposedException("ActivityExecutionContext");
				}
				return currentActivity.ContextActivity.ContextId;
			}
		}

		internal IWorkflowCoreRuntime WorkflowCoreRuntime
		{
			get
			{
				if (currentActivity == null)
				{
					throw new ObjectDisposedException("ActivityExecutionContext");
				}
				return GetService<IWorkflowCoreRuntime>();
			}
		}

		internal ActivityExecutionContext(Activity activity)
		{
			currentActivity = activity;
		}

		internal ActivityExecutionContext(Activity activity, bool allowSignalsOnCurrentActivity)
			: this(activity)
		{
			this.allowSignalsOnCurrentActivity = allowSignalsOnCurrentActivity;
		}

		public T GetService<T>()
		{
			return (T)GetService(typeof(T));
		}

		public object GetService(Type serviceType)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			if (serviceType == typeof(IStartWorkflow))
			{
				if (startWorkflowService == null)
				{
					startWorkflowService = new StartWorkflow(this);
				}
				return startWorkflowService;
			}
			if (schedulerServiceType != null && schedulerServiceType.IsAssignableFrom(serviceType))
			{
				return null;
			}
			if (persistenceServiceType != null && persistenceServiceType.IsAssignableFrom(serviceType))
			{
				return null;
			}
			if (trackingServiceType != null && trackingServiceType.IsAssignableFrom(serviceType))
			{
				return null;
			}
			if (transactionServiceType != null && transactionServiceType.IsAssignableFrom(serviceType))
			{
				return null;
			}
			if (loaderServiceType != null && loaderServiceType.IsAssignableFrom(serviceType))
			{
				return null;
			}
			return currentActivity.WorkflowCoreRuntime.GetService(currentActivity, serviceType);
		}

		internal void InitializeActivity(Activity activity)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (!IsValidChild(activity, allowContextVariance: false))
			{
				throw new ArgumentException(SR.GetString("AEC_InvalidActivity"), "activity");
			}
			if (activity.ExecutionStatus != 0)
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidInitializingState"));
			}
			using ActivityExecutionContext provider = new ActivityExecutionContext(activity);
			using (currentActivity.WorkflowCoreRuntime.SetCurrentActivity(activity))
			{
				activity.Initialize(provider);
			}
		}

		public void ExecuteActivity(Activity activity)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (!allowSignalsOnCurrentActivity && (currentActivity.WorkflowCoreRuntime.CurrentActivity.ExecutionStatus == ActivityExecutionStatus.Initialized || currentActivity.WorkflowCoreRuntime.CurrentActivity.ExecutionStatus == ActivityExecutionStatus.Closed))
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidStateToExecuteChild"));
			}
			if (!IsValidChild(activity, allowContextVariance: false))
			{
				throw new ArgumentException(SR.GetString("AEC_InvalidActivity"), "activity");
			}
			if (activity.ExecutionStatus != 0)
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidExecutionState"));
			}
			try
			{
				activity.SetStatus(ActivityExecutionStatus.Executing, transacted: false);
			}
			finally
			{
				currentActivity.WorkflowCoreRuntime.ScheduleItem(new ActivityExecutorOperation(activity, ActivityOperationType.Execute, ContextId), IsInAtomicTransaction(activity), transacted: false, queueInTransaction: false);
			}
		}

		public void CancelActivity(Activity activity)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (!allowSignalsOnCurrentActivity && (currentActivity.WorkflowCoreRuntime.CurrentActivity.ExecutionStatus == ActivityExecutionStatus.Initialized || currentActivity.WorkflowCoreRuntime.CurrentActivity.ExecutionStatus == ActivityExecutionStatus.Closed))
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidStateToExecuteChild"));
			}
			if (!IsValidChild(activity, allowContextVariance: false))
			{
				throw new ArgumentException(SR.GetString("AEC_InvalidActivity"), "activity");
			}
			if (activity.ExecutionStatus != ActivityExecutionStatus.Executing)
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidCancelingState"));
			}
			try
			{
				activity.SetStatus(ActivityExecutionStatus.Canceling, transacted: false);
			}
			finally
			{
				currentActivity.WorkflowCoreRuntime.ScheduleItem(new ActivityExecutorOperation(activity, ActivityOperationType.Cancel, ContextId), IsInAtomicTransaction(activity), transacted: false, queueInTransaction: false);
			}
		}

		internal void CompensateActivity(Activity activity)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (!IsValidNestedChild(activity))
			{
				throw new ArgumentException(SR.GetString("AEC_InvalidNestedActivity"), "activity");
			}
			if (activity.ExecutionStatus != ActivityExecutionStatus.Closed)
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidCompensatingState"));
			}
			try
			{
				activity.SetStatus(ActivityExecutionStatus.Compensating, transacted: false);
			}
			finally
			{
				currentActivity.WorkflowCoreRuntime.ScheduleItem(new ActivityExecutorOperation(activity, ActivityOperationType.Compensate, ContextId), IsInAtomicTransaction(activity), transacted: false, queueInTransaction: false);
			}
		}

		internal void FaultActivity(Exception e)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			if (currentActivity.ExecutionStatus == ActivityExecutionStatus.Closed)
			{
				if (currentActivity.Parent == null)
				{
					currentActivity.WorkflowCoreRuntime.TerminateInstance(e);
				}
				else
				{
					currentActivity.WorkflowCoreRuntime.RaiseException(e, currentActivity.Parent, string.Empty);
				}
				return;
			}
			try
			{
				currentActivity.SetValueCommon(CurrentExceptionProperty, e, CurrentExceptionProperty.DefaultMetadata, shouldCallSetValueOverrideIfExists: false);
				currentActivity.SetStatus(ActivityExecutionStatus.Faulting, transacted: false);
			}
			finally
			{
				currentActivity.WorkflowCoreRuntime.ScheduleItem(new ActivityExecutorOperation(currentActivity, ActivityOperationType.HandleFault, ContextId, e), IsInAtomicTransaction(currentActivity), transacted: false, queueInTransaction: false);
			}
		}

		public void CloseActivity()
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			switch (currentActivity.ExecutionStatus)
			{
			case ActivityExecutionStatus.Executing:
				currentActivity.MarkCompleted();
				break;
			case ActivityExecutionStatus.Canceling:
				currentActivity.MarkCanceled();
				break;
			case ActivityExecutionStatus.Compensating:
				currentActivity.MarkCompensated();
				break;
			case ActivityExecutionStatus.Faulting:
				currentActivity.MarkFaulted();
				break;
			default:
				throw new InvalidOperationException(SR.GetString("Error_InvalidClosingState"));
			case ActivityExecutionStatus.Closed:
				break;
			}
		}

		internal void Invoke<T>(EventHandler<T> handler, T e) where T : EventArgs
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			currentActivity.Invoke(handler, e);
		}

		public void TrackData(object userData)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			if (userData == null)
			{
				throw new ArgumentNullException("userData");
			}
			currentActivity.WorkflowCoreRuntime.Track(null, userData);
		}

		public void TrackData(string userDataKey, object userData)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			if (userData == null)
			{
				throw new ArgumentNullException("userData");
			}
			currentActivity.WorkflowCoreRuntime.Track(userDataKey, userData);
		}

		internal bool AcquireLocks(IActivityEventListener<EventArgs> locksAcquiredCallback)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			Activity.SetValue(LockAcquiredCallbackProperty, new ActivityExecutorDelegateInfo<EventArgs>(useCurrentContext: true, locksAcquiredCallback, Activity.ContextActivity));
			return AcquireLocks(Activity);
		}

		private bool AcquireLocks(Activity activity)
		{
			ICollection<string> allSynchronizationHandles = GetAllSynchronizationHandles(activity);
			if (allSynchronizationHandles == null || allSynchronizationHandles.Count == 0)
			{
				return true;
			}
			for (Activity parent = activity.Parent; parent != null; parent = parent.Parent)
			{
				if (parent.SupportsSynchronization || parent.Parent == null)
				{
					Dictionary<string, GrantedLock> dictionary = (Dictionary<string, GrantedLock>)parent.GetValue(GrantedLocksProperty);
					if (dictionary == null)
					{
						dictionary = new Dictionary<string, GrantedLock>();
						parent.SetValue(GrantedLocksProperty, dictionary);
					}
					foreach (string item in allSynchronizationHandles)
					{
						bool flag = true;
						if (!dictionary.ContainsKey(item))
						{
							dictionary[item] = new GrantedLock(activity);
						}
						else if (dictionary[item].Holder != activity)
						{
							dictionary[item].WaitList.Add(activity);
							flag = false;
						}
						if (!flag)
						{
							return false;
						}
					}
				}
				ICollection<string> collection = (ICollection<string>)parent.GetValue(Activity.SynchronizationHandlesProperty);
				if (collection != null && collection.Count != 0)
				{
					break;
				}
			}
			return true;
		}

		internal void ReleaseLocks(bool transactional)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			Activity.RemoveProperty(LockAcquiredCallbackProperty);
			ICollection<string> allSynchronizationHandles = GetAllSynchronizationHandles(Activity);
			if (allSynchronizationHandles == null || allSynchronizationHandles.Count == 0)
			{
				return;
			}
			List<Activity> list = new List<Activity>();
			for (Activity parent = Activity.Parent; parent != null; parent = parent.Parent)
			{
				if (parent.SupportsSynchronization || parent.Parent == null)
				{
					Dictionary<string, GrantedLock> dictionary = (Dictionary<string, GrantedLock>)parent.GetValue(GrantedLocksProperty);
					if (transactional)
					{
						Dictionary<string, GrantedLock> dictionary2 = new Dictionary<string, GrantedLock>();
						if (dictionary != null)
						{
							foreach (KeyValuePair<string, GrantedLock> item in dictionary)
							{
								dictionary2.Add(item.Key, (GrantedLock)item.Value.Clone());
							}
						}
						parent.SetValue(CachedGrantedLocksProperty, dictionary2);
					}
					if (dictionary != null)
					{
						foreach (string item2 in allSynchronizationHandles)
						{
							if (!dictionary.ContainsKey(item2))
							{
								continue;
							}
							if (dictionary[item2].WaitList.Count == 0)
							{
								dictionary.Remove(item2);
								continue;
							}
							if (dictionary[item2].Holder != Activity)
							{
								dictionary[item2].WaitList.Remove(Activity);
								continue;
							}
							Activity activity = dictionary[item2].WaitList[0];
							dictionary[item2].WaitList.RemoveAt(0);
							dictionary[item2].Holder = activity;
							if (!list.Contains(activity))
							{
								list.Add(activity);
							}
						}
						if (dictionary.Count == 0)
						{
							parent.RemoveProperty(GrantedLocksProperty);
						}
					}
				}
				ICollection<string> collection = (ICollection<string>)parent.GetValue(Activity.SynchronizationHandlesProperty);
				if (collection != null && collection.Count != 0)
				{
					break;
				}
			}
			foreach (Activity item3 in list)
			{
				if (AcquireLocks(item3))
				{
					ActivityExecutorDelegateInfo<EventArgs> activityExecutorDelegateInfo = (ActivityExecutorDelegateInfo<EventArgs>)item3.GetValue(LockAcquiredCallbackProperty);
					activityExecutorDelegateInfo.InvokeDelegate(Activity.ContextActivity, EventArgs.Empty, sync: false, transactional);
				}
			}
		}

		private ICollection<string> GetAllSynchronizationHandles(Activity activity)
		{
			ICollection<string> collection = (ICollection<string>)activity.GetValue(Activity.SynchronizationHandlesProperty);
			if (collection == null || collection.Count == 0)
			{
				return collection;
			}
			List<string> handles = new List<string>(collection);
			if (activity is CompositeActivity)
			{
				Walker walker = new Walker();
				walker.FoundActivity += delegate(Walker w, WalkerEventArgs e)
				{
					if (e.CurrentActivity != activity)
					{
						ICollection<string> collection2 = (ICollection<string>)e.CurrentActivity.GetValue(Activity.SynchronizationHandlesProperty);
						if (collection2 != null)
						{
							handles.AddRange(collection2);
						}
					}
				};
				walker.Walk(activity);
			}
			handles.Sort();
			for (int i = 1; i < handles.Count; i++)
			{
				if (handles[i] == handles[i - 1])
				{
					handles.RemoveAt(--i);
				}
			}
			handles.TrimExcess();
			return handles;
		}

		internal void SuspendWorkflowInstance(string suspendDescription)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			currentActivity.WorkflowCoreRuntime.SuspendInstance(suspendDescription);
		}

		internal void TerminateWorkflowInstance(Exception e)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			currentActivity.WorkflowCoreRuntime.TerminateInstance(e);
		}

		internal void CheckpointInstanceState()
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			currentActivity.WorkflowCoreRuntime.CheckpointInstanceState(currentActivity);
		}

		internal void RequestRevertToCheckpointState(EventHandler<EventArgs> handler, EventArgs data, bool suspendOnRevert, string suspendOnRevertInfo)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			currentActivity.WorkflowCoreRuntime.RequestRevertToCheckpointState(currentActivity, handler, data, suspendOnRevert, suspendOnRevertInfo);
		}

		internal void DisposeCheckpointState()
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			currentActivity.WorkflowCoreRuntime.DisposeCheckpointState();
		}

		internal bool IsValidChild(Activity activity, bool allowContextVariance)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			if (activity == currentActivity.WorkflowCoreRuntime.CurrentActivity && allowSignalsOnCurrentActivity)
			{
				return true;
			}
			if (activity.Enabled && activity.Parent == currentActivity.WorkflowCoreRuntime.CurrentActivity && (allowContextVariance || activity.Equals(Activity.GetActivityByName(activity.QualifiedName, withinThisActivityOnly: true))))
			{
				return true;
			}
			return false;
		}

		internal bool IsValidNestedChild(Activity activity)
		{
			if (currentActivity == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContext");
			}
			if (activity == currentActivity)
			{
				return true;
			}
			Activity activity2 = activity;
			while (activity2 != null && activity2.Enabled && activity2.Parent != currentActivity.ContextActivity)
			{
				activity2 = activity2.Parent;
			}
			return activity2?.Enabled ?? false;
		}

		internal static bool IsInAtomicTransaction(Activity activity)
		{
			bool result = false;
			while (activity != null)
			{
				if (activity == activity.WorkflowCoreRuntime.CurrentAtomicActivity)
				{
					result = true;
					break;
				}
				activity = activity.Parent;
			}
			return result;
		}

		private static void EnforceExceptionSemantics(DependencyObject d, object value)
		{
			if (!(d is Activity))
			{
				throw new ArgumentException(SR.GetString(CultureInfo.CurrentCulture, "Error_DOIsNotAnActivity"));
			}
			if (value != null)
			{
				throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_PropertyCanBeOnlyCleared"));
			}
			d.SetValueCommon(CurrentExceptionProperty, null, CurrentExceptionProperty.DefaultMetadata, shouldCallSetValueOverrideIfExists: false);
		}

		void IDisposable.Dispose()
		{
			if (currentActivity != null)
			{
				if (contextManager != null)
				{
					contextManager.Dispose();
					contextManager = null;
				}
				currentActivity = null;
			}
		}
	}
	[Serializable]
	internal class GrantedLock : ICloneable
	{
		private Activity holder;

		private List<Activity> waitList;

		public Activity Holder
		{
			get
			{
				return holder;
			}
			set
			{
				holder = value;
			}
		}

		public IList<Activity> WaitList => waitList;

		public GrantedLock(Activity holder)
		{
			this.holder = holder;
			waitList = new List<Activity>();
		}

		public object Clone()
		{
			GrantedLock grantedLock = new GrantedLock(holder);
			grantedLock.waitList.InsertRange(0, waitList);
			return grantedLock;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ActivityExecutionContextManager
	{
		private ActivityExecutionContext ownerContext;

		private List<ActivityExecutionContext> executionContexts = new List<ActivityExecutionContext>();

		public ReadOnlyCollection<ActivityExecutionContext> ExecutionContexts
		{
			get
			{
				if (ownerContext == null)
				{
					throw new ObjectDisposedException("ActivityExecutionContextManager");
				}
				return new ReadOnlyCollection<ActivityExecutionContext>(executionContexts);
			}
		}

		public IEnumerable<Guid> PersistedExecutionContexts
		{
			get
			{
				if (ownerContext == null)
				{
					throw new ObjectDisposedException("ActivityExecutionContextManager");
				}
				List<ActivityExecutionContextInfo> list2 = ((!(ownerContext.Activity.ContextActivity.GetValue(Activity.CompletedExecutionContextsProperty) is List<ActivityExecutionContextInfo> list)) ? new List<ActivityExecutionContextInfo>() : list);
				List<Guid> list3 = new List<Guid>();
				foreach (ActivityExecutionContextInfo item in list2)
				{
					if ((item.Flags & PersistFlags.ForcePersist) != 0)
					{
						list3.Add(item.ContextGuid);
					}
				}
				return list3;
			}
		}

		internal ReadOnlyCollection<ActivityExecutionContextInfo> CompletedExecutionContexts
		{
			get
			{
				List<ActivityExecutionContextInfo> list2 = ((!(ownerContext.Activity.ContextActivity.GetValue(Activity.CompletedExecutionContextsProperty) is List<ActivityExecutionContextInfo> list)) ? new List<ActivityExecutionContextInfo>() : list);
				return list2.AsReadOnly();
			}
		}

		internal ActivityExecutionContextManager(ActivityExecutionContext ownerContext)
		{
			this.ownerContext = ownerContext;
			IList<Activity> list = (IList<Activity>)this.ownerContext.Activity.ContextActivity.GetValue(Activity.ActiveExecutionContextsProperty);
			if (list == null)
			{
				return;
			}
			foreach (Activity item in list)
			{
				executionContexts.Add(new ActivityExecutionContext(item));
			}
		}

		public ActivityExecutionContext CreateExecutionContext(Activity activity)
		{
			if (ownerContext == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContextManager");
			}
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (!ownerContext.IsValidChild(activity, allowContextVariance: true))
			{
				throw new ArgumentException(SR.GetString("AEC_InvalidActivity"), "activity");
			}
			Activity activity2 = activity.Clone();
			((IDependencyObjectAccessor)activity2).InitializeInstanceForRuntime(ownerContext.Activity.WorkflowCoreRuntime);
			Queue<Activity> queue = new Queue<Activity>();
			queue.Enqueue(activity2);
			while (queue.Count != 0)
			{
				Activity activity3 = queue.Dequeue();
				if (activity3.ExecutionStatus == ActivityExecutionStatus.Initialized)
				{
					continue;
				}
				activity3.ResetAllKnownDependencyProperties();
				if (!(activity3 is CompositeActivity compositeActivity))
				{
					continue;
				}
				for (int i = 0; i < compositeActivity.EnabledActivities.Count; i++)
				{
					queue.Enqueue(compositeActivity.EnabledActivities[i]);
				}
				ISupportAlternateFlow supportAlternateFlow = compositeActivity;
				if (supportAlternateFlow != null)
				{
					for (int j = 0; j < supportAlternateFlow.AlternateFlowActivities.Count; j++)
					{
						queue.Enqueue(supportAlternateFlow.AlternateFlowActivities[j]);
					}
				}
			}
			IList<Activity> list = (IList<Activity>)ownerContext.Activity.ContextActivity.GetValue(Activity.ActiveExecutionContextsProperty);
			if (list == null)
			{
				list = new List<Activity>();
				ownerContext.Activity.ContextActivity.SetValue(Activity.ActiveExecutionContextsProperty, list);
			}
			list.Add(activity2);
			ActivityExecutionContextInfo activityExecutionContextInfo = new ActivityExecutionContextInfo(activity.QualifiedName, ownerContext.WorkflowCoreRuntime.GetNewContextActivityId(), Guid.NewGuid(), ownerContext.ContextId);
			activity2.SetValue(Activity.ActivityExecutionContextInfoProperty, activityExecutionContextInfo);
			activity2.SetValue(Activity.ActivityContextGuidProperty, activityExecutionContextInfo.ContextGuid);
			ActivityExecutionContext activityExecutionContext = null;
			try
			{
				ownerContext.Activity.WorkflowCoreRuntime.RegisterContextActivity(activity2);
				activityExecutionContext = new ActivityExecutionContext(activity2);
				executionContexts.Add(activityExecutionContext);
				activityExecutionContext.InitializeActivity(activityExecutionContext.Activity);
				return activityExecutionContext;
			}
			catch (Exception)
			{
				if (activityExecutionContext != null)
				{
					CompleteExecutionContext(activityExecutionContext);
				}
				else
				{
					list.Remove(activity2);
				}
				throw;
			}
		}

		public void CompleteExecutionContext(ActivityExecutionContext childContext)
		{
			if (ownerContext == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContextManager");
			}
			CompleteExecutionContext(childContext, forcePersist: false);
		}

		public void CompleteExecutionContext(ActivityExecutionContext childContext, bool forcePersist)
		{
			if (ownerContext == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContextManager");
			}
			if (childContext == null)
			{
				throw new ArgumentNullException("childContext");
			}
			if (childContext.Activity == null)
			{
				throw new ArgumentException("childContext", SR.GetString("Error_MissingActivityProperty"));
			}
			if (childContext.Activity.ContextActivity == null)
			{
				throw new ArgumentException("childContext", SR.GetString("Error_MissingContextActivityProperty"));
			}
			if (!executionContexts.Contains(childContext))
			{
				throw new ArgumentException();
			}
			if (childContext.Activity.ContextActivity.ExecutionStatus != ActivityExecutionStatus.Closed && childContext.Activity.ContextActivity.ExecutionStatus != 0)
			{
				throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_CannotCompleteContext"));
			}
			ActivityExecutionContextInfo activityExecutionContextInfo = childContext.Activity.ContextActivity.GetValue(Activity.ActivityExecutionContextInfoProperty) as ActivityExecutionContextInfo;
			IList<Activity> list = (IList<Activity>)ownerContext.Activity.ContextActivity.GetValue(Activity.ActiveExecutionContextsProperty);
			if (list == null || !list.Contains(childContext.Activity.ContextActivity))
			{
				throw new ArgumentException();
			}
			bool needsCompensation = childContext.Activity.NeedsCompensation;
			if (needsCompensation || forcePersist)
			{
				List<ActivityExecutionContextInfo> list2 = ownerContext.Activity.ContextActivity.GetValue(Activity.CompletedExecutionContextsProperty) as List<ActivityExecutionContextInfo>;
				if (list2 == null)
				{
					list2 = new List<ActivityExecutionContextInfo>();
					ownerContext.Activity.ContextActivity.SetValue(Activity.CompletedExecutionContextsProperty, list2);
				}
				if (needsCompensation)
				{
					activityExecutionContextInfo.Flags = PersistFlags.NeedsCompensation;
				}
				if (forcePersist)
				{
					activityExecutionContextInfo.Flags |= PersistFlags.ForcePersist;
				}
				activityExecutionContextInfo.SetCompletedOrderId(ownerContext.Activity.IncrementCompletedOrderId());
				list2.Add(activityExecutionContextInfo);
				ownerContext.Activity.WorkflowCoreRuntime.SaveContextActivity(childContext.Activity);
			}
			list.Remove(childContext.Activity.ContextActivity);
			executionContexts.Remove(childContext);
			if (childContext.Activity.ContextActivity.CanUninitializeNow && childContext.Activity.ContextActivity.ExecutionResult != ActivityExecutionResult.Uninitialized)
			{
				childContext.Activity.ContextActivity.Uninitialize(ownerContext.Activity.RootActivity.WorkflowCoreRuntime);
				childContext.Activity.ContextActivity.SetValue(Activity.ExecutionResultProperty, ActivityExecutionResult.Uninitialized);
			}
			ownerContext.Activity.WorkflowCoreRuntime.UnregisterContextActivity(childContext.Activity);
			if (!(needsCompensation || forcePersist))
			{
				childContext.Activity.Dispose();
			}
		}

		public ActivityExecutionContext GetExecutionContext(Activity activity)
		{
			if (ownerContext == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContextManager");
			}
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			ActivityExecutionContextInfo activityExecutionContextInfo = activity.GetValue(Activity.ActivityExecutionContextInfoProperty) as ActivityExecutionContextInfo;
			foreach (ActivityExecutionContext executionContext in ExecutionContexts)
			{
				if (activityExecutionContextInfo == null)
				{
					if (executionContext.Activity.ContextActivity.QualifiedName == activity.QualifiedName)
					{
						return executionContext;
					}
				}
				else if (executionContext.ContextGuid.Equals(activityExecutionContextInfo.ContextGuid))
				{
					return executionContext;
				}
			}
			return null;
		}

		public ActivityExecutionContext GetPersistedExecutionContext(Guid contextGuid)
		{
			if (ownerContext == null)
			{
				throw new ObjectDisposedException("ActivityExecutionContextManager");
			}
			if (!(ownerContext.Activity.ContextActivity.GetValue(Activity.CompletedExecutionContextsProperty) is IList<ActivityExecutionContextInfo> list))
			{
				throw new ArgumentException();
			}
			ActivityExecutionContextInfo activityExecutionContextInfo = null;
			foreach (ActivityExecutionContextInfo item in list)
			{
				if (item.ContextGuid == contextGuid && (item.Flags & PersistFlags.ForcePersist) != 0)
				{
					activityExecutionContextInfo = item;
					break;
				}
			}
			if (activityExecutionContextInfo == null)
			{
				throw new ArgumentException();
			}
			activityExecutionContextInfo.Flags &= ~PersistFlags.ForcePersist;
			return DiscardPersistedExecutionContext(activityExecutionContextInfo);
		}

		internal void Dispose()
		{
			if (ownerContext == null)
			{
				return;
			}
			foreach (ActivityExecutionContext executionContext in ExecutionContexts)
			{
				((IDisposable)executionContext).Dispose();
			}
			ownerContext = null;
		}

		internal ActivityExecutionContext DiscardPersistedExecutionContext(ActivityExecutionContextInfo contextInfo)
		{
			if (contextInfo == null)
			{
				throw new ArgumentNullException("contextInfo");
			}
			if (!(ownerContext.Activity.ContextActivity.GetValue(Activity.CompletedExecutionContextsProperty) is IList<ActivityExecutionContextInfo> list) || !list.Contains(contextInfo))
			{
				throw new ArgumentException();
			}
			Activity activity = ownerContext.WorkflowCoreRuntime.LoadContextActivity(contextInfo, ownerContext.Activity.ContextActivity.GetActivityByName(contextInfo.ActivityQualifiedName));
			((IDependencyObjectAccessor)activity).InitializeInstanceForRuntime(ownerContext.Activity.WorkflowCoreRuntime);
			IList<Activity> list2 = (IList<Activity>)ownerContext.Activity.ContextActivity.GetValue(Activity.ActiveExecutionContextsProperty);
			if (list2 == null)
			{
				list2 = new List<Activity>();
				ownerContext.Activity.ContextActivity.SetValue(Activity.ActiveExecutionContextsProperty, list2);
			}
			list2.Add(activity);
			ownerContext.Activity.WorkflowCoreRuntime.RegisterContextActivity(activity);
			ActivityExecutionContext activityExecutionContext = new ActivityExecutionContext(activity);
			executionContexts.Add(activityExecutionContext);
			WorkflowTrace.Runtime.TraceEvent(TraceEventType.Information, 0, "Revoking context {0}:{1}", activityExecutionContext.ContextId, activityExecutionContext.Activity.ContextActivity.QualifiedName);
			list.Remove(contextInfo);
			return activityExecutionContext;
		}
	}
	[Serializable]
	[Flags]
	internal enum PersistFlags : byte
	{
		NeedsCompensation = 1,
		ForcePersist = 2
	}
	[Serializable]
	internal sealed class ActivityExecutionContextInfo
	{
		private string qualifiedID = string.Empty;

		private int contextId = -1;

		private Guid contextGuid = Guid.Empty;

		private int parentContextId = -1;

		private int completedOrderId = -1;

		private PersistFlags flags;

		internal int ContextId => contextId;

		public Guid ContextGuid => contextGuid;

		public string ActivityQualifiedName => qualifiedID;

		public int CompletedOrderId => completedOrderId;

		internal int ParentContextId => parentContextId;

		internal PersistFlags Flags
		{
			get
			{
				return flags;
			}
			set
			{
				flags = value;
			}
		}

		internal ActivityExecutionContextInfo(string qualifiedName, int contextId, Guid contextGuid, int parentContextId)
		{
			qualifiedID = qualifiedName;
			this.contextId = contextId;
			this.contextGuid = contextGuid;
			this.parentContextId = parentContextId;
		}

		internal void SetCompletedOrderId(int completedOrderId)
		{
			this.completedOrderId = completedOrderId;
		}

		public override int GetHashCode()
		{
			return contextGuid.GetHashCode();
		}

		public override bool Equals(object obj)
		{
			if (obj is ActivityExecutionContextInfo activityExecutionContextInfo)
			{
				return ContextGuid.Equals(activityExecutionContextInfo.ContextGuid);
			}
			return false;
		}
	}
	[Serializable]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ActivityExecutionStatusChangedEventArgs : EventArgs
	{
		private ActivityExecutionStatus status;

		private ActivityExecutionResult activityExecutionResult;

		private string activityQualifiedName;

		private int stateId = -1;

		[NonSerialized]
		private IWorkflowCoreRuntime workflowCoreRuntime;

		public ActivityExecutionStatus ExecutionStatus => status;

		public ActivityExecutionResult ExecutionResult => activityExecutionResult;

		public Activity Activity
		{
			get
			{
				Activity result = null;
				if (workflowCoreRuntime != null)
				{
					Activity contextActivityForId = workflowCoreRuntime.GetContextActivityForId(stateId);
					if (contextActivityForId != null)
					{
						result = contextActivityForId.GetActivityByName(activityQualifiedName);
					}
				}
				return result;
			}
		}

		internal IWorkflowCoreRuntime BaseExecutor
		{
			set
			{
				workflowCoreRuntime = value;
			}
		}

		internal ActivityExecutionStatusChangedEventArgs(ActivityExecutionStatus executionStatus, ActivityExecutionResult executionResult, Activity activity)
		{
			status = executionStatus;
			activityExecutionResult = executionResult;
			activityQualifiedName = activity.QualifiedName;
			stateId = activity.ContextActivity.ContextId;
		}

		public override string ToString()
		{
			return "ActivityStatusChange('(" + stateId.ToString(CultureInfo.CurrentCulture) + ")" + activityQualifiedName + "', " + Activity.ActivityExecutionStatusEnumToString(ExecutionStatus) + ", " + Activity.ActivityExecutionResultEnumToString(ExecutionResult) + ")";
		}
	}
	[DesignerSerializer(typeof(ActivityCollectionMarkupSerializer), typeof(WorkflowMarkupSerializer))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ActivityCollection : List<Activity>, IList<Activity>, ICollection<Activity>, IEnumerable<Activity>, IEnumerable, IList, ICollection
	{
		private Activity owner;

		internal Activity Owner => owner;

		Activity IList<Activity>.this[int index]
		{
			get
			{
				return base[index];
			}
			set
			{
				if (value == null)
				{
					throw new ArgumentNullException("item");
				}
				Activity removedActivity = base[index];
				ActivityCollectionChangeEventArgs eventArgs = new ActivityCollectionChangeEventArgs(index, removedActivity, value, owner, ActivityCollectionChangeAction.Replace);
				FireListChanging(eventArgs);
				base[index] = value;
				FireListChanged(eventArgs);
			}
		}

		bool ICollection<Activity>.IsReadOnly => false;

		int ICollection<Activity>.Count => base.Count;

		public new int Count => ((ICollection<Activity>)this).Count;

		public new Activity this[int index]
		{
			get
			{
				return ((IList<Activity>)this)[index];
			}
			set
			{
				((IList<Activity>)this)[index] = value;
			}
		}

		public Activity this[string key]
		{
			get
			{
				for (int i = 0; i < Count; i++)
				{
					if (this[i].Name.Equals(key) || this[i].QualifiedName.Equals(key))
					{
						return this[i];
					}
				}
				return null;
			}
		}

		bool IList.IsFixedSize => false;

		bool IList.IsReadOnly => ((ICollection<Activity>)this).IsReadOnly;

		object IList.this[int index]
		{
			get
			{
				return ((IList<Activity>)this)[index];
			}
			set
			{
				if (!(value is Activity))
				{
					throw new Exception(SR.GetString("Error_InvalidListItem", GetType().GetGenericArguments()[0].FullName));
				}
				((IList<Activity>)this)[index] = (Activity)value;
			}
		}

		bool ICollection.IsSynchronized => false;

		object ICollection.SyncRoot => this;

		internal event EventHandler<ActivityCollectionChangeEventArgs> ListChanging;

		public event EventHandler<ActivityCollectionChangeEventArgs> ListChanged;

		public ActivityCollection(Activity owner)
		{
			if (owner == null)
			{
				throw new ArgumentNullException("owner");
			}
			if (owner == null)
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(Activity).FullName), "owner");
			}
			this.owner = owner;
		}

		private void FireListChanging(ActivityCollectionChangeEventArgs eventArgs)
		{
			if (this.ListChanging != null)
			{
				this.ListChanging(this, eventArgs);
			}
		}

		private void FireListChanged(ActivityCollectionChangeEventArgs eventArgs)
		{
			if (this.ListChanged != null)
			{
				this.ListChanged(this, eventArgs);
			}
		}

		internal void InnerAdd(Activity activity)
		{
			base.Add(activity);
		}

		void IList<Activity>.RemoveAt(int index)
		{
			if (index < 0 || index >= base.Count)
			{
				throw new ArgumentOutOfRangeException("Index");
			}
			Activity removedActivity = base[index];
			ActivityCollectionChangeEventArgs eventArgs = new ActivityCollectionChangeEventArgs(index, removedActivity, null, owner, ActivityCollectionChangeAction.Remove);
			FireListChanging(eventArgs);
			base.RemoveAt(index);
			FireListChanged(eventArgs);
		}

		void IList<Activity>.Insert(int index, Activity item)
		{
			if (index < 0 || index > base.Count)
			{
				throw new ArgumentOutOfRangeException("index");
			}
			if (item == null)
			{
				throw new ArgumentNullException("item");
			}
			ActivityCollectionChangeEventArgs eventArgs = new ActivityCollectionChangeEventArgs(index, null, item, owner, ActivityCollectionChangeAction.Add);
			FireListChanging(eventArgs);
			base.Insert(index, item);
			FireListChanged(eventArgs);
		}

		int IList<Activity>.IndexOf(Activity item)
		{
			return base.IndexOf(item);
		}

		bool ICollection<Activity>.Contains(Activity item)
		{
			return base.Contains(item);
		}

		bool ICollection<Activity>.Remove(Activity item)
		{
			if (!base.Contains(item))
			{
				return false;
			}
			int num = base.IndexOf(item);
			if (num >= 0)
			{
				ActivityCollectionChangeEventArgs eventArgs = new ActivityCollectionChangeEventArgs(num, item, null, owner, ActivityCollectionChangeAction.Remove);
				FireListChanging(eventArgs);
				base.Remove(item);
				FireListChanged(eventArgs);
				return true;
			}
			return false;
		}

		void ICollection<Activity>.Clear()
		{
			ICollection<Activity> range = GetRange(0, base.Count);
			ActivityCollectionChangeEventArgs eventArgs = new ActivityCollectionChangeEventArgs(-1, range, null, owner, ActivityCollectionChangeAction.Remove);
			FireListChanging(eventArgs);
			base.Clear();
			FireListChanged(eventArgs);
		}

		void ICollection<Activity>.Add(Activity item)
		{
			if (item == null)
			{
				throw new ArgumentNullException("item");
			}
			ActivityCollectionChangeEventArgs eventArgs = new ActivityCollectionChangeEventArgs(base.Count, null, item, owner, ActivityCollectionChangeAction.Add);
			FireListChanging(eventArgs);
			base.Add(item);
			FireListChanged(eventArgs);
		}

		void ICollection<Activity>.CopyTo(Activity[] array, int arrayIndex)
		{
			CopyTo(array, arrayIndex);
		}

		IEnumerator<Activity> IEnumerable<Activity>.GetEnumerator()
		{
			return base.GetEnumerator();
		}

		public new void Add(Activity item)
		{
			((ICollection<Activity>)this).Add(item);
		}

		public new void Clear()
		{
			((ICollection<Activity>)this).Clear();
		}

		public new void Insert(int index, Activity item)
		{
			((IList<Activity>)this).Insert(index, item);
		}

		public new bool Remove(Activity item)
		{
			return ((ICollection<Activity>)this).Remove(item);
		}

		public new void RemoveAt(int index)
		{
			((IList<Activity>)this).RemoveAt(index);
		}

		public new int IndexOf(Activity item)
		{
			return ((IList<Activity>)this).IndexOf(item);
		}

		public new bool Contains(Activity item)
		{
			return ((ICollection<Activity>)this).Contains(item);
		}

		public new IEnumerator<Activity> GetEnumerator()
		{
			return ((IEnumerable<Activity>)this).GetEnumerator();
		}

		int IList.Add(object value)
		{
			if (!(value is Activity))
			{
				throw new Exception(SR.GetString("Error_InvalidListItem", GetType().GetGenericArguments()[0].FullName));
			}
			((ICollection<Activity>)this).Add((Activity)value);
			return Count - 1;
		}

		void IList.Clear()
		{
			((ICollection<Activity>)this).Clear();
		}

		bool IList.Contains(object value)
		{
			if (!(value is Activity))
			{
				throw new Exception(SR.GetString("Error_InvalidListItem", GetType().GetGenericArguments()[0].FullName));
			}
			return ((ICollection<Activity>)this).Contains((Activity)value);
		}

		int IList.IndexOf(object value)
		{
			if (!(value is Activity))
			{
				throw new Exception(SR.GetString("Error_InvalidListItem", GetType().GetGenericArguments()[0].FullName));
			}
			return ((IList<Activity>)this).IndexOf((Activity)value);
		}

		void IList.Insert(int index, object value)
		{
			if (!(value is Activity))
			{
				throw new Exception(SR.GetString("Error_InvalidListItem", GetType().GetGenericArguments()[0].FullName));
			}
			((IList<Activity>)this).Insert(index, (Activity)value);
		}

		void IList.Remove(object value)
		{
			if (!(value is Activity))
			{
				throw new Exception(SR.GetString("Error_InvalidListItem", GetType().GetGenericArguments()[0].FullName));
			}
			((ICollection<Activity>)this).Remove((Activity)value);
		}

		void ICollection.CopyTo(Array array, int index)
		{
			for (int i = 0; i < Count; i++)
			{
				array.SetValue(this[i], i + index);
			}
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return ((IEnumerable<Activity>)this).GetEnumerator();
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum ActivityCollectionChangeAction
	{
		Add,
		Remove,
		Replace
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ActivityCollectionChangeEventArgs : EventArgs
	{
		private int index;

		private ICollection<Activity> addedItems;

		private ICollection<Activity> removedItems;

		private object owner;

		private ActivityCollectionChangeAction action;

		public IList<Activity> RemovedItems
		{
			get
			{
				if (removedItems == null)
				{
					return new List<Activity>().AsReadOnly();
				}
				return new List<Activity>(removedItems).AsReadOnly();
			}
		}

		public IList<Activity> AddedItems
		{
			get
			{
				if (addedItems == null)
				{
					return new List<Activity>().AsReadOnly();
				}
				return new List<Activity>(addedItems).AsReadOnly();
			}
		}

		public object Owner => owner;

		public int Index => index;

		public ActivityCollectionChangeAction Action => action;

		public ActivityCollectionChangeEventArgs(int index, ICollection<Activity> removedItems, ICollection<Activity> addedItems, object owner, ActivityCollectionChangeAction action)
		{
			this.index = index;
			this.removedItems = removedItems;
			this.addedItems = addedItems;
			this.action = action;
			this.owner = owner;
		}

		public ActivityCollectionChangeEventArgs(int index, Activity removedActivity, Activity addedActivity, object owner, ActivityCollectionChangeAction action)
		{
			this.index = index;
			if (removedActivity != null)
			{
				removedItems = new List<Activity>();
				((List<Activity>)removedItems).Add(removedActivity);
			}
			if (addedActivity != null)
			{
				addedItems = new List<Activity>();
				((List<Activity>)addedItems).Add(addedActivity);
			}
			this.action = action;
			this.owner = owner;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IDynamicPropertyTypeProvider
	{
		Type GetPropertyType(IServiceProvider serviceProvider, string propertyName);

		AccessTypes GetAccessType(IServiceProvider serviceProvider, string propertyName);
	}
	internal interface ISupportWorkflowChanges
	{
		void OnActivityAdded(ActivityExecutionContext rootContext, Activity addedActivity);

		void OnActivityRemoved(ActivityExecutionContext rootContext, Activity removedActivity);

		void OnWorkflowChangesCompleted(ActivityExecutionContext rootContext);
	}
	internal interface ISupportAlternateFlow
	{
		IList<Activity> AlternateFlowActivities { get; }
	}
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = false)]
	internal sealed class ActivityExecutorAttribute : Attribute
	{
		private string executorTypeName = string.Empty;

		public string ExecutorTypeName => executorTypeName;

		public ActivityExecutorAttribute(Type executorType)
		{
			if (executorType != null)
			{
				executorTypeName = executorType.AssemblyQualifiedName;
			}
		}

		public ActivityExecutorAttribute(string executorTypeName)
		{
			this.executorTypeName = executorTypeName;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum ActivityExecutionStatus : byte
	{
		Initialized,
		Executing,
		Canceling,
		Closed,
		Compensating,
		Faulting
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum ActivityExecutionResult : byte
	{
		None,
		Succeeded,
		Canceled,
		Compensated,
		Faulted,
		Uninitialized
	}
	internal interface IDependencyObjectAccessor
	{
		void InitializeDefinitionForRuntime(DependencyObject parentDependencyObject);

		void InitializeInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime);

		void InitializeActivatingInstanceForRuntime(DependencyObject parentDependencyObject, IWorkflowCoreRuntime workflowCoreRuntime);

		T[] GetInvocationList<T>(DependencyProperty dependencyEvent);
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IStartWorkflow
	{
		Guid StartWorkflow(Type workflowType, Dictionary<string, object> namedArgumentValues);
	}
	internal interface IWorkflowCoreRuntime : IServiceProvider
	{
		Activity RootActivity { get; }

		Activity CurrentActivity { get; }

		Activity CurrentAtomicActivity { get; }

		bool IsDynamicallyUpdated { get; }

		Guid InstanceID { get; }

		WaitCallback ProcessTimersCallback { get; }

		IDisposable SetCurrentActivity(Activity activity);

		void ScheduleItem(SchedulableItem item, bool isInAtomicTransaction, bool transacted, bool queueInTransaction);

		void ActivityStatusChanged(Activity activity, bool transacted, bool committed);

		void RaiseException(Exception e, Activity activity, string responsibleActivity);

		void RaiseActivityExecuting(Activity activity);

		void RaiseHandlerInvoking(Delegate delegateHandler);

		void RaiseHandlerInvoked();

		Guid StartWorkflow(Type workflowType, Dictionary<string, object> namedArgumentValues);

		int GetNewContextActivityId();

		void RegisterContextActivity(Activity activity);

		void UnregisterContextActivity(Activity activity);

		Activity LoadContextActivity(ActivityExecutionContextInfo contextInfo, Activity outerContextActivity);

		void SaveContextActivity(Activity contextActivity);

		Activity GetContextActivityForId(int id);

		object GetService(Activity currentActivity, Type serviceType);

		void PersistInstanceState(Activity activity);

		bool OnBeforeDynamicChange(IList<WorkflowChangeAction> changes);

		void OnAfterDynamicChange(bool updateSucceeded, IList<WorkflowChangeAction> changes);

		bool SuspendInstance(string suspendDescription);

		void TerminateInstance(Exception e);

		bool Resume();

		void CheckpointInstanceState(Activity currentActivity);

		void RequestRevertToCheckpointState(Activity currentActivity, EventHandler<EventArgs> callbackHandler, EventArgs callbackData, bool suspendOnRevert, string suspendReason);

		void DisposeCheckpointState();

		void Track(string key, object data);
	}
	internal interface ITimerService
	{
		void ScheduleTimer(WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);

		void CancelTimer(Guid timerId);
	}
	[Serializable]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowTerminatedException : Exception
	{
		private WorkflowTerminatedException(SerializationInfo info, StreamingContext context)
			: base(info, context)
		{
		}

		public WorkflowTerminatedException()
			: base(SR.GetString("Error_WorkflowTerminated"))
		{
		}

		public WorkflowTerminatedException(string message)
			: base(message)
		{
		}

		public WorkflowTerminatedException(string message, Exception exception)
			: base(message, exception)
		{
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface ICompensatableActivity
	{
		ActivityExecutionStatus Compensate(ActivityExecutionContext executionContext);
	}
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class AlternateFlowActivityAttribute : Attribute
	{
	}
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
	internal sealed class SupportsTransactionAttribute : Attribute
	{
	}
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
	internal sealed class SupportsSynchronizationAttribute : Attribute
	{
	}
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class PersistOnCloseAttribute : Attribute
	{
	}
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IWorkflowChangeDiff
	{
		IList<WorkflowChangeAction> Diff(object originalDefinition, object changedDefinition);
	}
	[DesignerSerializer(typeof(WorkflowMarkupSerializer), typeof(WorkflowMarkupSerializer))]
	[DesignerSerializer(typeof(DependencyObjectCodeDomSerializer), typeof(CodeDomSerializer))]
	[TypeConverter(typeof(ConditionTypeConverter))]
	[ActivityValidator(typeof(ConditionValidator))]
	[MergableProperty(false)]
	[Browsable(true)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public abstract class ActivityCondition : DependencyObject
	{
		public abstract bool Evaluate(Activity activity, IServiceProvider provider);
	}
	[Flags]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum DependencyPropertyOptions : byte
	{
		Default = 1,
		ReadOnly = 2,
		Optional = 4,
		Metadata = 8,
		NonSerialized = 0x10,
		DelegateProperty = 0x20
	}
	public delegate object GetValueOverride(DependencyObject d);
	public delegate void SetValueOverride(DependencyObject d, object value);
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class PropertyMetadata
	{
		private Attribute[] attributes;

		private object defaultValue;

		private DependencyPropertyOptions options = DependencyPropertyOptions.Default;

		private bool propertySealed;

		private GetValueOverride getValueOverride;

		private SetValueOverride setValueOverride;

		private bool shouldAlwaysCallOverride;

		public object DefaultValue
		{
			get
			{
				return defaultValue;
			}
			set
			{
				if (propertySealed)
				{
					throw new InvalidOperationException(SR.GetString("Error_SealedPropertyMetadata"));
				}
				defaultValue = value;
			}
		}

		public DependencyPropertyOptions Options
		{
			get
			{
				return options;
			}
			set
			{
				if (propertySealed)
				{
					throw new InvalidOperationException(SR.GetString("Error_SealedPropertyMetadata"));
				}
				options = value;
			}
		}

		public bool IsMetaProperty => (int)(options & DependencyPropertyOptions.Metadata) > 0;

		public bool IsNonSerialized => (int)(options & DependencyPropertyOptions.NonSerialized) > 0;

		public bool IsReadOnly => (int)(options & DependencyPropertyOptions.ReadOnly) > 0;

		public GetValueOverride GetValueOverride
		{
			get
			{
				return getValueOverride;
			}
			set
			{
				if (propertySealed)
				{
					throw new InvalidOperationException(SR.GetString("Error_SealedPropertyMetadata"));
				}
				getValueOverride = value;
			}
		}

		public SetValueOverride SetValueOverride
		{
			get
			{
				return setValueOverride;
			}
			set
			{
				if (propertySealed)
				{
					throw new InvalidOperationException(SR.GetString("Error_SealedPropertyMetadata"));
				}
				setValueOverride = value;
			}
		}

		protected bool IsSealed => propertySealed;

		internal bool ShouldAlwaysCallOverride => shouldAlwaysCallOverride;

		public PropertyMetadata()
		{
		}

		public PropertyMetadata(object defaultValue)
			: this(defaultValue, (DependencyPropertyOptions)0)
		{
		}

		public PropertyMetadata(DependencyPropertyOptions options)
			: this(null, options)
		{
		}

		public PropertyMetadata(object defaultValue, DependencyPropertyOptions options)
			: this(defaultValue, options, null, null, new Attribute[0])
		{
		}

		public PropertyMetadata(object defaultValue, params Attribute[] attributes)
			: this(defaultValue, (DependencyPropertyOptions)0, null, null, attributes)
		{
		}

		public PropertyMetadata(object defaultValue, DependencyPropertyOptions options, params Attribute[] attributes)
			: this(defaultValue, options, null, null, attributes)
		{
		}

		public PropertyMetadata(DependencyPropertyOptions options, params Attribute[] attributes)
			: this(null, options, null, null, attributes)
		{
		}

		public PropertyMetadata(params Attribute[] attributes)
			: this(null, (DependencyPropertyOptions)0, null, null, attributes)
		{
		}

		public PropertyMetadata(object defaultValue, DependencyPropertyOptions options, GetValueOverride getValueOverride, SetValueOverride setValueOverride)
			: this(defaultValue, options, getValueOverride, setValueOverride, new Attribute[0])
		{
		}

		public PropertyMetadata(object defaultValue, DependencyPropertyOptions options, GetValueOverride getValueOverride, SetValueOverride setValueOverride, params Attribute[] attributes)
			: this(defaultValue, options, getValueOverride, setValueOverride, shouldAlwaysCallOverride: false, attributes)
		{
		}

		internal PropertyMetadata(object defaultValue, DependencyPropertyOptions options, GetValueOverride getValueOverride, SetValueOverride setValueOverride, bool shouldAlwaysCallOverride, params Attribute[] attributes)
		{
			this.defaultValue = defaultValue;
			this.options = options;
			this.getValueOverride = getValueOverride;
			this.setValueOverride = setValueOverride;
			this.shouldAlwaysCallOverride = shouldAlwaysCallOverride;
			this.attributes = attributes;
		}

		public Attribute[] GetAttributes()
		{
			return GetAttributes(null);
		}

		public Attribute[] GetAttributes(Type attributeType)
		{
			List<Attribute> list = new List<Attribute>();
			if (attributes != null)
			{
				Attribute[] array = attributes;
				foreach (Attribute attribute in array)
				{
					if (attribute != null && (attributeType == null || attribute.GetType() == attributeType))
					{
						list.Add(attribute);
					}
				}
			}
			return list.ToArray();
		}

		protected virtual void OnApply(DependencyProperty dependencyProperty, Type targetType)
		{
		}

		internal void Seal(DependencyProperty dependencyProperty, Type targetType)
		{
			OnApply(dependencyProperty, targetType);
			propertySealed = true;
		}
	}
	[Serializable]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class DependencyProperty : ISerializable
	{
		internal enum PropertyValidity
		{
			Uninitialize,
			Reexecute,
			Always
		}

		private class KnownDependencyProperty
		{
			internal DependencyProperty dependencyProperty;

			internal PropertyValidity propertyValidity;

			internal KnownDependencyProperty(DependencyProperty dependencyProperty, PropertyValidity propertyValidity)
			{
				this.dependencyProperty = dependencyProperty;
				this.propertyValidity = propertyValidity;
			}
		}

		[Serializable]
		private sealed class DependencyPropertyReference : IObjectReference
		{
			private Type type;

			private string name;

			public object GetRealObject(StreamingContext context)
			{
				return FromName(name, type);
			}
		}

		private static IDictionary<int, DependencyProperty> dependencyProperties = new Dictionary<int, DependencyProperty>();

		private static KnownDependencyProperty[] knownProperties = new KnownDependencyProperty[256];

		private bool isRegistered;

		private string name = string.Empty;

		private Type propertyType;

		private Type ownerType;

		private Type validatorType;

		private PropertyMetadata defaultMetadata;

		private byte knownIndex;

		[NonSerialized]
		private bool isEvent;

		public bool IsEvent => isEvent;

		public bool IsAttached => !isRegistered;

		public string Name => name;

		public Type PropertyType => propertyType;

		public Type OwnerType => ownerType;

		public PropertyMetadata DefaultMetadata => defaultMetadata;

		public Type ValidatorType => validatorType;

		internal byte KnownIndex
		{
			get
			{
				return knownIndex;
			}
			set
			{
				knownIndex = value;
			}
		}

		internal bool IsKnown => knownIndex != 0;

		internal PropertyValidity Validity
		{
			get
			{
				if (!IsKnown)
				{
					return PropertyValidity.Always;
				}
				return knownProperties[knownIndex].propertyValidity;
			}
		}

		public static DependencyProperty Register(string name, Type propertyType, Type ownerType)
		{
			return ValidateAndRegister(name, propertyType, ownerType, null, null, isRegistered: true);
		}

		public static DependencyProperty Register(string name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata)
		{
			return ValidateAndRegister(name, propertyType, ownerType, defaultMetadata, null, isRegistered: true);
		}

		public static DependencyProperty RegisterAttached(string name, Type propertyType, Type ownerType)
		{
			return ValidateAndRegister(name, propertyType, ownerType, null, null, isRegistered: false);
		}

		public static DependencyProperty RegisterAttached(string name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata)
		{
			return ValidateAndRegister(name, propertyType, ownerType, defaultMetadata, null, isRegistered: false);
		}

		internal static void RegisterAsKnown(DependencyProperty dependencyProperty, byte byteVal, PropertyValidity propertyValidity)
		{
			if (dependencyProperty == null)
			{
				throw new ArgumentNullException("dependencyProperty");
			}
			if (knownProperties[byteVal] != null)
			{
				throw new InvalidOperationException(SR.GetString("Error_AlreadyRegisteredAs", knownProperties[byteVal].dependencyProperty.ToString()));
			}
			dependencyProperty.KnownIndex = byteVal;
			knownProperties[byteVal] = new KnownDependencyProperty(dependencyProperty, propertyValidity);
		}

		internal static DependencyProperty FromKnown(byte byteVal)
		{
			if (knownProperties[byteVal] == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_NotRegisteredAs", knownProperties[byteVal].dependencyProperty.ToString()));
			}
			return knownProperties[byteVal].dependencyProperty;
		}

		public static DependencyProperty RegisterAttached(string name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata, Type validatorType)
		{
			if (validatorType == null)
			{
				throw new ArgumentNullException("validatorType");
			}
			if (!typeof(Validator).IsAssignableFrom(validatorType))
			{
				throw new ArgumentException(SR.GetString("Error_ValidatorTypeIsInvalid"), "validatorType");
			}
			return ValidateAndRegister(name, propertyType, ownerType, defaultMetadata, validatorType, isRegistered: false);
		}

		public static DependencyProperty FromName(string propertyName, Type ownerType)
		{
			if (propertyName == null)
			{
				throw new ArgumentNullException("propertyName");
			}
			if (ownerType == null)
			{
				throw new ArgumentNullException("ownerType");
			}
			DependencyProperty dependencyProperty = null;
			while (dependencyProperty == null && ownerType != null)
			{
				RuntimeHelpers.RunClassConstructor(ownerType.TypeHandle);
				int key = propertyName.GetHashCode() ^ ownerType.GetHashCode();
				lock (((ICollection)dependencyProperties).SyncRoot)
				{
					if (dependencyProperties.ContainsKey(key))
					{
						dependencyProperty = dependencyProperties[key];
					}
				}
				ownerType = ownerType.BaseType;
			}
			return dependencyProperty;
		}

		public static IList<DependencyProperty> FromType(Type ownerType)
		{
			if (ownerType == null)
			{
				throw new ArgumentNullException("ownerType");
			}
			RuntimeHelpers.RunClassConstructor(ownerType.TypeHandle);
			List<DependencyProperty> list = new List<DependencyProperty>();
			lock (((ICollection)dependencyProperties).SyncRoot)
			{
				foreach (DependencyProperty value in dependencyProperties.Values)
				{
					if (TypeProvider.IsSubclassOf(ownerType, value.ownerType) || ownerType == value.ownerType)
					{
						list.Add(value);
					}
				}
			}
			return list.AsReadOnly();
		}

		private static DependencyProperty ValidateAndRegister(string name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata, Type validatorType, bool isRegistered)
		{
			if (name == null)
			{
				throw new ArgumentNullException("name");
			}
			if (name.Length == 0)
			{
				throw new ArgumentException(SR.GetString("Error_EmptyArgument"), "name");
			}
			if (propertyType == null)
			{
				throw new ArgumentNullException("propertyType");
			}
			if (ownerType == null)
			{
				throw new ArgumentNullException("ownerType");
			}
			FieldInfo fieldInfo = null;
			bool flag = typeof(Delegate).IsAssignableFrom(propertyType) && (defaultMetadata == null || (defaultMetadata.Options & DependencyPropertyOptions.DelegateProperty) == 0);
			if (flag && defaultMetadata != null && defaultMetadata.IsMetaProperty)
			{
				throw new ArgumentException(SR.GetString("Error_DPAddHandlerMetaProperty"), "defaultMetadata");
			}
			fieldInfo = ((!flag) ? ownerType.GetField(name + "Property", BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.GetProperty) : ownerType.GetField(name + "Event", BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.GetProperty));
			if (fieldInfo == null)
			{
				string @string = SR.GetString(flag ? "Error_DynamicEventNotSupported" : "Error_DynamicPropertyNotSupported", ownerType.FullName, name);
				throw new ArgumentException(@string, "ownerType");
			}
			PropertyMetadata propertyMetadata = null;
			object obj = null;
			if (defaultMetadata == null)
			{
				obj = GetDefaultValue(name, propertyType, ownerType);
				propertyMetadata = new PropertyMetadata(obj);
			}
			else
			{
				propertyMetadata = defaultMetadata;
				if (propertyMetadata.DefaultValue == null)
				{
					propertyMetadata.DefaultValue = GetDefaultValue(name, propertyType, ownerType);
				}
			}
			DependencyProperty dependencyProperty = new DependencyProperty(name, propertyType, ownerType, propertyMetadata, validatorType, isRegistered);
			lock (((ICollection)dependencyProperties).SyncRoot)
			{
				if (dependencyProperties.ContainsKey(dependencyProperty.GetHashCode()))
				{
					throw new InvalidOperationException(SR.GetString("Error_DPAlreadyExist", name, ownerType.FullName));
				}
				dependencyProperties.Add(dependencyProperty.GetHashCode(), dependencyProperty);
				return dependencyProperty;
			}
		}

		private static object GetDefaultValue(string name, Type propertyType, Type ownerType)
		{
			if (name == null)
			{
				throw new ArgumentNullException("name");
			}
			if (name.Length == 0)
			{
				throw new ArgumentException(SR.GetString("Error_EmptyArgument"), "name");
			}
			if (propertyType == null)
			{
				throw new ArgumentNullException("propertyType");
			}
			if (ownerType == null)
			{
				throw new ArgumentNullException("ownerType");
			}
			object result = null;
			if (propertyType.IsValueType)
			{
				try
				{
					if (propertyType.IsEnum)
					{
						Array values = Enum.GetValues(propertyType);
						result = ((values.Length <= 0) ? Activator.CreateInstance(propertyType) : values.GetValue(0));
					}
					else
					{
						result = Activator.CreateInstance(propertyType);
					}
				}
				catch
				{
				}
			}
			return result;
		}

		private DependencyProperty(string name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata, Type validatorType, bool isRegistered)
		{
			this.name = name;
			this.propertyType = propertyType;
			this.ownerType = ownerType;
			this.validatorType = validatorType;
			this.isRegistered = isRegistered;
			this.defaultMetadata = defaultMetadata;
			this.defaultMetadata.Seal(this, propertyType);
			isEvent = typeof(Delegate).IsAssignableFrom(this.propertyType) && (this.defaultMetadata == null || (this.defaultMetadata.Options & DependencyPropertyOptions.DelegateProperty) == 0);
		}

		public override string ToString()
		{
			return name;
		}

		public override int GetHashCode()
		{
			return name.GetHashCode() ^ ownerType.GetHashCode();
		}

		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
		{
			info.AddValue("type", ownerType);
			info.AddValue("name", name);
			info.SetType(typeof(DependencyPropertyReference));
		}
	}
	[Browsable(true)]
	[DesignerSerializer(typeof(DependencyObjectCodeDomSerializer), typeof(CodeDomSerializer))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowParameterBinding : DependencyObject
	{
		public static readonly DependencyProperty ParameterNameProperty = DependencyProperty.Register("ParameterName", typeof(string), typeof(WorkflowParameterBinding), new PropertyMetadata(DependencyPropertyOptions.Metadata));

		public static readonly DependencyProperty ValueProperty = DependencyProperty.Register("Value", typeof(object), typeof(WorkflowParameterBinding));

		[DefaultValue(null)]
		public object Value
		{
			get
			{
				return GetValue(ValueProperty);
			}
			set
			{
				SetValue(ValueProperty, value);
			}
		}

		public string ParameterName
		{
			get
			{
				return (string)GetValue(ParameterNameProperty);
			}
			set
			{
				SetValue(ParameterNameProperty, value);
			}
		}

		public WorkflowParameterBinding()
		{
		}

		public WorkflowParameterBinding(string parameterName)
		{
			SetValue(ParameterNameProperty, parameterName);
		}
	}
	[Serializable]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowParameterBindingCollection : KeyedCollection<string, WorkflowParameterBinding>
	{
		private Activity ownerActivity;

		public WorkflowParameterBindingCollection(Activity ownerActivity)
		{
			if (ownerActivity == null)
			{
				throw new ArgumentNullException("ownerActivity");
			}
			this.ownerActivity = ownerActivity;
		}

		public WorkflowParameterBinding GetItem(string key)
		{
			return base[key];
		}

		protected override string GetKeyForItem(WorkflowParameterBinding item)
		{
			return item.ParameterName;
		}

		protected override void ClearItems()
		{
			if (!ownerActivity.DesignMode)
			{
				throw new InvalidOperationException(SR.GetString("Error_CanNotChangeAtRuntime"));
			}
			base.ClearItems();
		}

		protected override void InsertItem(int index, WorkflowParameterBinding item)
		{
			if (item == null)
			{
				throw new ArgumentNullException("item");
			}
			if (!ownerActivity.DesignMode)
			{
				throw new InvalidOperationException(SR.GetString("Error_CanNotChangeAtRuntime"));
			}
			if (Contains(item.ParameterName))
			{
				WorkflowParameterBinding item2 = base[item.ParameterName];
				index = IndexOf(item2);
				RemoveItem(index);
			}
			base.InsertItem(index, item);
		}

		protected override void RemoveItem(int index)
		{
			if (!ownerActivity.DesignMode)
			{
				throw new InvalidOperationException(SR.GetString("Error_CanNotChangeAtRuntime"));
			}
			base.RemoveItem(index);
		}

		protected override void SetItem(int index, WorkflowParameterBinding item)
		{
			if (item == null)
			{
				throw new ArgumentNullException("item");
			}
			if (!ownerActivity.DesignMode)
			{
				throw new InvalidOperationException(SR.GetString("Error_CanNotChangeAtRuntime"));
			}
			base.SetItem(index, item);
		}
	}
	[Flags]
	internal enum ItemListChangeAction
	{
		Add = 1,
		Remove = 2,
		Replace = 3
	}
	internal class ItemListChangeEventArgs<T> : EventArgs
	{
		private int index;

		private ICollection<T> addedItems;

		private ICollection<T> removedItems;

		private object owner;

		private ItemListChangeAction action = ItemListChangeAction.Add;

		public IList<T> RemovedItems
		{
			get
			{
				if (removedItems == null)
				{
					return new List<T>().AsReadOnly();
				}
				return new List<T>(removedItems).AsReadOnly();
			}
		}

		public IList<T> AddedItems
		{
			get
			{
				if (addedItems == null)
				{
					return new List<T>().AsReadOnly();
				}
				return new List<T>(addedItems).AsReadOnly();
			}
		}

		public object Owner => owner;

		public int Index => index;

		public ItemListChangeAction Action => action;

		public ItemListChangeEventArgs(int index, ICollection<T> removedItems, ICollection<T> addedItems, object owner, ItemListChangeAction action)
		{
			this.index = index;
			this.removedItems = removedItems;
			this.addedItems = addedItems;
			this.action = action;
			this.owner = owner;
		}

		public ItemListChangeEventArgs(int index, T removedActivity, T addedActivity, object owner, ItemListChangeAction action)
		{
			this.index = index;
			if (removedActivity != null)
			{
				removedItems = new List<T>();
				((List<T>)removedItems).Add(removedActivity);
			}
			if (addedActivity != null)
			{
				addedItems = new List<T>();
				((List<T>)addedItems).Add(addedActivity);
			}
			this.action = action;
			this.owner = owner;
		}
	}
	internal delegate void ItemListChangeEventHandler<T>(object sender, ItemListChangeEventArgs<T> e);
	internal class ItemList<T> : List<T>, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IList, ICollection
	{
		private object owner;

		protected object Owner => owner;

		private bool IsFixedSize => false;

		T IList<T>.this[int index]
		{
			get
			{
				return base[index];
			}
			set
			{
				if (value == null)
				{
					throw new ArgumentNullException("item");
				}
				T removedActivity = base[index];
				FireListChanging(new ItemListChangeEventArgs<T>(index, removedActivity, value, owner, ItemListChangeAction.Replace));
				base[index] = value;
				FireListChanged(new ItemListChangeEventArgs<T>(index, removedActivity, value, owner, ItemListChangeAction.Replace));
			}
		}

		bool ICollection<T>.IsReadOnly => false;

		int ICollection<T>.Count => base.Count;

		public new T this[int index]
		{
			get
			{
				return ((IList<T>)this)[index];
			}
			set
			{
				((IList<T>)this)[index] = value;
			}
		}

		bool IList.IsFixedSize => false;

		bool IList.IsReadOnly => ((ICollection<T>)this).IsReadOnly;

		object IList.this[int index]
		{
			get
			{
				return ((IList<T>)this)[index];
			}
			set
			{
				if (!(value is T))
				{
					throw new Exception(SR.GetString("Error_InvalidListItem", GetType().GetGenericArguments()[0].FullName));
				}
				((IList<T>)this)[index] = (T)value;
			}
		}

		bool ICollection.IsSynchronized => false;

		object ICollection.SyncRoot => this;

		internal event ItemListChangeEventHandler<T> ListChanging;

		public event ItemListChangeEventHandler<T> ListChanged;

		internal ItemList(object owner)
		{
			this.owner = owner;
		}

		void IList<T>.RemoveAt(int index)
		{
			if (index < 0 || index > base.Count)
			{
				throw new ArgumentOutOfRangeException();
			}
			T removedActivity = base[index];
			FireListChanging(new ItemListChangeEventArgs<T>(index, removedActivity, default(T), owner, ItemListChangeAction.Remove));
			base.RemoveAt(index);
			FireListChanged(new ItemListChangeEventArgs<T>(index, removedActivity, default(T), owner, ItemListChangeAction.Remove));
		}

		void IList<T>.Insert(int index, T item)
		{
			if (index < 0 || index > base.Count)
			{
				throw new ArgumentOutOfRangeException();
			}
			if (item == null)
			{
				throw new ArgumentNullException("item");
			}
			FireListChanging(new ItemListChangeEventArgs<T>(index, default(T), item, owner, ItemListChangeAction.Add));
			base.Insert(index, item);
			FireListChanged(new ItemListChangeEventArgs<T>(index, default(T), item, owner, ItemListChangeAction.Add));
		}

		int IList<T>.IndexOf(T item)
		{
			return IndexOf(item);
		}

		bool ICollection<T>.Contains(T item)
		{
			return Contains(item);
		}

		bool ICollection<T>.Remove(T item)
		{
			if (!Contains(item))
			{
				return false;
			}
			int num = IndexOf(item);
			if (num >= 0)
			{
				FireListChanging(new ItemListChangeEventArgs<T>(num, item, default(T), owner, ItemListChangeAction.Remove));
				base.Remove(item);
				FireListChanged(new ItemListChangeEventArgs<T>(num, item, default(T), owner, ItemListChangeAction.Remove));
				return true;
			}
			return false;
		}

		void ICollection<T>.Clear()
		{
			ICollection<T> range = GetRange(0, base.Count);
			FireListChanging(new ItemListChangeEventArgs<T>(-1, range, null, owner, ItemListChangeAction.Remove));
			base.Clear();
			FireListChanged(new ItemListChangeEventArgs<T>(-1, range, null, owner, ItemListChangeAction.Remove));
		}

		void ICollection<T>.Add(T item)
		{
			if (item == null)
			{
				throw new ArgumentNullException("item");
			}
			FireListChanging(new ItemListChangeEventArgs<T>(base.Count, default(T), item, owner, ItemListChangeAction.Add));
			base.Add(item);
			FireListChanged(new ItemListChangeEventArgs<T>(base.Count, default(T), item, owner, ItemListChangeAction.Add));
		}

		void ICollection<T>.CopyTo(T[] array, int arrayIndex)
		{
			CopyTo(array, arrayIndex);
		}

		IEnumerator<T> IEnumerable<T>.GetEnumerator()
		{
			return GetEnumerator();
		}

		public new void Add(T item)
		{
			((ICollection<T>)this).Add(item);
		}

		public new void AddRange(IEnumerable<T> collection)
		{
			if (collection == null)
			{
				throw new ArgumentNullException("collection");
			}
			FireListChanging(new ItemListChangeEventArgs<T>(-1, null, new List<T>(collection), owner, ItemListChangeAction.Add));
			base.AddRange(collection);
			FireListChanged(new ItemListChangeEventArgs<T>(base.Count, null, new List<T>(collection), owner, ItemListChangeAction.Add));
		}

		public new void InsertRange(int index, IEnumerable<T> collection)
		{
			if (index < 0 || index > base.Count)
			{
				throw new ArgumentOutOfRangeException();
			}
			if (collection == null)
			{
				throw new ArgumentNullException("collection");
			}
			FireListChanging(new ItemListChangeEventArgs<T>(index, null, new List<T>(collection), owner, ItemListChangeAction.Add));
			base.InsertRange(index, collection);
			FireListChanged(new ItemListChangeEventArgs<T>(index, null, new List<T>(collection), owner, ItemListChangeAction.Add));
		}

		public new void Clear()
		{
			((ICollection<T>)this).Clear();
		}

		public new void Insert(int index, T item)
		{
			((IList<T>)this).Insert(index, item);
		}

		public new bool Remove(T item)
		{
			return ((ICollection<T>)this).Remove(item);
		}

		public new void RemoveAt(int index)
		{
			((IList<T>)this).RemoveAt(index);
		}

		protected virtual void FireListChanging(ItemListChangeEventArgs<T> eventArgs)
		{
			if (this.ListChanging != null)
			{
				this.ListChanging(this, eventArgs);
			}
		}

		protected virtual void FireListChanged(ItemListChangeEventArgs<T> eventArgs)
		{
			if (this.ListChanged != null)
			{
				this.ListChanged(this, eventArgs);
			}
		}

		int IList.Add(object value)
		{
			if (!(value is T))
			{
				throw new Exception(SR.GetString("Error_InvalidListItem", GetType().GetGenericArguments()[0].FullName));
			}
			((ICollection<T>)this).Add((T)value);
			return base.Count - 1;
		}

		void IList.Clear()
		{
			((ICollection<T>)this).Clear();
		}

		bool IList.Contains(object value)
		{
			if (!(value is T))
			{
				throw new Exception(SR.GetString("Error_InvalidListItem", GetType().GetGenericArguments()[0].FullName));
			}
			return ((ICollection<T>)this).Contains((T)value);
		}

		int IList.IndexOf(object value)
		{
			if (!(value is T))
			{
				throw new Exception(SR.GetString("Error_InvalidListItem", GetType().GetGenericArguments()[0].FullName));
			}
			return ((IList<T>)this).IndexOf((T)value);
		}

		void IList.Insert(int index, object value)
		{
			if (!(value is T))
			{
				throw new Exception(SR.GetString("Error_InvalidListItem", GetType().GetGenericArguments()[0].FullName));
			}
			((IList<T>)this).Insert(index, (T)value);
		}

		void IList.Remove(object value)
		{
			if (!(value is T))
			{
				throw new Exception(SR.GetString("Error_InvalidListItem", GetType().GetGenericArguments()[0].FullName));
			}
			((ICollection<T>)this).Remove((T)value);
		}

		void ICollection.CopyTo(Array array, int index)
		{
			for (int i = 0; i < base.Count; i++)
			{
				array.SetValue(this[i], i + index);
			}
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return GetEnumerator();
		}
	}
	internal static class InternalHelpers
	{
		internal static string GenerateQualifiedNameForLockedActivity(Activity activity, string id)
		{
			StringBuilder stringBuilder = new StringBuilder();
			string value = (string.IsNullOrEmpty(id) ? activity.Name : id);
			CompositeActivity declaringActivity = Helpers.GetDeclaringActivity(activity);
			if (declaringActivity != null)
			{
				stringBuilder.Append(declaringActivity.QualifiedName).Append(".").Append(value);
			}
			else
			{
				stringBuilder.Append(value);
			}
			return stringBuilder.ToString();
		}
	}
	internal static class ComponentDispenser
	{
		private static IDictionary<Type, List<IExtenderProvider>> componentExtenderMap = new Dictionary<Type, List<IExtenderProvider>>();

		internal static IList<IExtenderProvider> Extenders
		{
			get
			{
				List<IExtenderProvider> list = new List<IExtenderProvider>();
				foreach (List<IExtenderProvider> value in componentExtenderMap.Values)
				{
					list.AddRange(value);
				}
				return list.AsReadOnly();
			}
		}

		internal static ActivityExecutor[] CreateActivityExecutors(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			List<ActivityExecutor> list = new List<ActivityExecutor>();
			if (activity.SupportsSynchronization)
			{
				list.Add(new SynchronizationFilter());
			}
			if (activity.SupportsTransaction)
			{
				list.Add(new TransactedContextFilter());
			}
			if (activity is CompositeActivity)
			{
				if (activity is ICompensatableActivity)
				{
					list.Add(new CompensationHandlingFilter());
				}
				list.Add(new FaultAndCancellationHandlingFilter());
				list.Add(new CompositeActivityExecutor<CompositeActivity>());
			}
			else
			{
				list.Add(new ActivityExecutor<Activity>());
			}
			return list.ToArray();
		}

		internal static object[] CreateComponents(Type objectType, Type componentTypeAttribute)
		{
			Dictionary<Type, object> dictionary = new Dictionary<Type, object>();
			ArrayList arrayList = new ArrayList();
			ArrayList arrayList2 = new ArrayList();
			ArrayList arrayList3 = new ArrayList();
			ArrayList arrayList4 = new ArrayList();
			GetCustomAttributes(objectType, typeof(ActivityCodeGeneratorAttribute), inherit: true);
			GetCustomAttributes(objectType, typeof(ActivityValidatorAttribute), inherit: true);
			GetCustomAttributes(objectType, typeof(DesignerAttribute), inherit: true);
			GetCustomAttributes(objectType, typeof(DesignerSerializerAttribute), inherit: true);
			if (objectType.GetCustomAttributes(typeof(SupportsTransactionAttribute), inherit: true).Length != 0 && componentTypeAttribute == typeof(ActivityValidatorAttribute))
			{
				arrayList.Add(new TransactionContextValidator());
			}
			if (objectType.GetCustomAttributes(typeof(SupportsSynchronizationAttribute), inherit: true).Length != 0 && componentTypeAttribute == typeof(ActivityValidatorAttribute))
			{
				arrayList3.Add(new SynchronizationValidator());
			}
			AddComponents(dictionary, arrayList3.ToArray());
			AddComponents(dictionary, arrayList.ToArray());
			AddComponents(dictionary, arrayList4.ToArray());
			AddComponents(dictionary, arrayList2.ToArray());
			ArrayList arrayList5 = new ArrayList();
			Type[] interfaces = objectType.GetInterfaces();
			foreach (Type objectType2 in interfaces)
			{
				arrayList5.AddRange(GetCustomAttributes(objectType2, componentTypeAttribute, inherit: true));
			}
			arrayList5.AddRange(GetCustomAttributes(objectType, componentTypeAttribute, inherit: true));
			string text = null;
			foreach (Attribute item in arrayList5)
			{
				Type type = null;
				if (componentTypeAttribute == typeof(ActivityCodeGeneratorAttribute))
				{
					text = ((ActivityCodeGeneratorAttribute)item).CodeGeneratorTypeName;
					type = typeof(ActivityCodeGenerator);
				}
				else if (componentTypeAttribute == typeof(ActivityValidatorAttribute))
				{
					text = ((ActivityValidatorAttribute)item).ValidatorTypeName;
					type = typeof(Validator);
				}
				object obj = null;
				try
				{
					if (!string.IsNullOrEmpty(text))
					{
						obj = CreateComponentInstance(text, objectType);
					}
				}
				catch
				{
				}
				if (obj != null && type != null && type.IsAssignableFrom(obj.GetType()))
				{
					if (!dictionary.ContainsKey(obj.GetType()))
					{
						dictionary.Add(obj.GetType(), obj);
					}
					continue;
				}
				throw new InvalidOperationException(SR.GetString("Error_InvalidAttribute", componentTypeAttribute.Name, objectType.FullName));
			}
			return new ArrayList(dictionary.Values).ToArray();
		}

		private static void AddComponents(Dictionary<Type, object> components, object[] attribComponents)
		{
			foreach (object obj in attribComponents)
			{
				if (!components.ContainsKey(obj.GetType()))
				{
					components.Add(obj.GetType(), obj);
				}
			}
		}

		internal static void RegisterComponentExtenders(Type extendingType, IExtenderProvider[] extenders)
		{
			List<IExtenderProvider> list = null;
			if (!componentExtenderMap.ContainsKey(extendingType))
			{
				list = new List<IExtenderProvider>();
				componentExtenderMap.Add(extendingType, list);
			}
			else
			{
				list = componentExtenderMap[extendingType];
			}
			list.AddRange(extenders);
		}

		private static object CreateComponentInstance(string typeName, Type referenceType)
		{
			object obj = null;
			Type type = null;
			try
			{
				string name = typeName;
				int num = typeName.LastIndexOf(']');
				if (num != -1)
				{
					name = typeName.Substring(0, num + 1);
				}
				else
				{
					int num2 = typeName.IndexOf(',');
					if (num2 != -1)
					{
						name = typeName.Substring(0, num2);
					}
				}
				type = referenceType.Assembly.GetType(name, throwOnError: false);
			}
			catch
			{
			}
			if (type == null)
			{
				try
				{
					type = Type.GetType(typeName, throwOnError: false);
				}
				catch
				{
				}
			}
			string text = null;
			if (type != null)
			{
				try
				{
					obj = Activator.CreateInstance(type);
				}
				catch (Exception ex)
				{
					text = ex.Message;
				}
			}
			if (obj == null)
			{
				ResourceManager resourceManager = new ResourceManager("System.Workflow.ComponentModel.StringResources", typeof(Activity).Assembly);
				if (resourceManager != null)
				{
					text = string.Format(CultureInfo.CurrentCulture, resourceManager.GetString("Error_CantCreateInstanceOfComponent"), new object[2] { typeName, text });
				}
				throw new Exception(text);
			}
			return obj;
		}

		private static object[] GetCustomAttributes(Type objectType, Type attributeType, bool inherit)
		{
			object[] array = null;
			try
			{
				if (attributeType == null)
				{
					return objectType.GetCustomAttributes(inherit);
				}
				return objectType.GetCustomAttributes(attributeType, inherit);
			}
			catch (Exception innerException)
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidAttributes", objectType.FullName), innerException);
			}
		}
	}
	[Browsable(false)]
	internal abstract class BindBase
	{
		[NonSerialized]
		protected bool designMode = true;

		[NonSerialized]
		private object syncRoot = new object();

		public abstract object GetRuntimeValue(Activity activity);

		public abstract object GetRuntimeValue(Activity activity, Type targetType);

		public abstract void SetRuntimeValue(Activity activity, object value);

		protected virtual void OnRuntimeInitialized(Activity activity)
		{
		}
	}
	internal abstract class MemberBind : BindBase
	{
		private string name = string.Empty;

		[DefaultValue("")]
		public string Name => name;

		protected MemberBind()
		{
		}

		protected MemberBind(string name)
		{
			this.name = name;
		}

		internal static object GetValue(MemberInfo memberInfo, object dataContext, string path)
		{
			if (memberInfo == null)
			{
				throw new ArgumentNullException("memberInfo");
			}
			if (dataContext == null)
			{
				throw new ArgumentNullException("dataContext");
			}
			if (path == null)
			{
				path = string.Empty;
			}
			if (string.IsNullOrEmpty(path))
			{
				return null;
			}
			object targetObject = dataContext;
			Type memberType = dataContext.GetType();
			PathWalker pathWalker = new PathWalker();
			pathWalker.MemberFound = (EventHandler<PathMemberInfoEventArgs>)Delegate.Combine(pathWalker.MemberFound, (EventHandler<PathMemberInfoEventArgs>)delegate(object sender, PathMemberInfoEventArgs eventArgs)
			{
				if (targetObject == null)
				{
					eventArgs.Action = PathWalkAction.Cancel;
				}
				else
				{
					switch (eventArgs.MemberKind)
					{
					case PathMemberKind.Field:
						memberType = (eventArgs.MemberInfo as FieldInfo).FieldType;
						targetObject = (eventArgs.MemberInfo as FieldInfo).GetValue(targetObject);
						break;
					case PathMemberKind.Event:
					{
						EventInfo eventInfo = eventArgs.MemberInfo as EventInfo;
						memberType = eventInfo.EventHandlerType;
						DependencyObject dependencyObject = targetObject as DependencyObject;
						DependencyProperty dependencyProperty = DependencyProperty.FromName(eventInfo.Name, dependencyObject.GetType());
						if (dependencyProperty != null && dependencyObject != null)
						{
							if (dependencyObject.IsBindingSet(dependencyProperty))
							{
								targetObject = dependencyObject.GetBinding(dependencyProperty);
							}
							else
							{
								targetObject = dependencyObject.GetHandler(dependencyProperty);
							}
						}
						else
						{
							targetObject = null;
						}
						eventArgs.Action = PathWalkAction.Stop;
						break;
					}
					case PathMemberKind.Property:
						memberType = (eventArgs.MemberInfo as PropertyInfo).PropertyType;
						if (!(eventArgs.MemberInfo as PropertyInfo).CanRead)
						{
							eventArgs.Action = PathWalkAction.Cancel;
							return;
						}
						targetObject = (eventArgs.MemberInfo as PropertyInfo).GetValue(targetObject, null);
						break;
					case PathMemberKind.IndexedProperty:
						memberType = (eventArgs.MemberInfo as PropertyInfo).PropertyType;
						if (!(eventArgs.MemberInfo as PropertyInfo).CanRead)
						{
							eventArgs.Action = PathWalkAction.Cancel;
							return;
						}
						targetObject = (eventArgs.MemberInfo as PropertyInfo).GetValue(targetObject, eventArgs.IndexParameters);
						break;
					case PathMemberKind.Index:
						memberType = (eventArgs.MemberInfo as PropertyInfo).PropertyType;
						targetObject = (eventArgs.MemberInfo as PropertyInfo).GetValue(targetObject, BindingFlags.GetProperty, null, eventArgs.IndexParameters, CultureInfo.InvariantCulture);
						break;
					}
					if (targetObject == null)
					{
						if (!eventArgs.LastMemberInThePath)
						{
							throw new InvalidOperationException(SR.GetString("Error_BindPathNullValue", eventArgs.Path));
						}
						eventArgs.Action = PathWalkAction.Cancel;
					}
				}
			});
			if (pathWalker.TryWalkPropertyPath(memberType, path))
			{
				if (targetObject == dataContext)
				{
					return null;
				}
				return targetObject;
			}
			return null;
		}

		internal static void SetValue(object dataContext, string path, object value)
		{
			if (dataContext == null)
			{
				throw new ArgumentNullException("dataContext");
			}
			if (string.IsNullOrEmpty(path))
			{
				throw new ArgumentNullException("path");
			}
			object parentObj = null;
			object obj = dataContext;
			object[] args = null;
			MemberInfo memberInfo = null;
			PathWalker pathWalker = new PathWalker();
			pathWalker.MemberFound = (EventHandler<PathMemberInfoEventArgs>)Delegate.Combine(pathWalker.MemberFound, (EventHandler<PathMemberInfoEventArgs>)delegate(object sender, PathMemberInfoEventArgs eventArgs)
			{
				if (obj == null)
				{
					eventArgs.Action = PathWalkAction.Cancel;
				}
				else
				{
					parentObj = obj;
					memberInfo = eventArgs.MemberInfo;
					switch (eventArgs.MemberKind)
					{
					case PathMemberKind.Field:
						obj = (eventArgs.MemberInfo as FieldInfo).GetValue(parentObj);
						args = null;
						break;
					case PathMemberKind.Event:
						eventArgs.Action = PathWalkAction.Cancel;
						break;
					case PathMemberKind.Property:
						obj = (eventArgs.MemberInfo as PropertyInfo).GetValue(parentObj, null);
						args = null;
						break;
					case PathMemberKind.IndexedProperty:
					case PathMemberKind.Index:
						obj = (eventArgs.MemberInfo as PropertyInfo).GetValue(parentObj, eventArgs.IndexParameters);
						args = eventArgs.IndexParameters;
						break;
					}
				}
			});
			if (!pathWalker.TryWalkPropertyPath(dataContext.GetType(), path))
			{
				return;
			}
			if (memberInfo is FieldInfo)
			{
				(memberInfo as FieldInfo).SetValue(parentObj, value);
			}
			else if (memberInfo is PropertyInfo)
			{
				if (!(memberInfo as PropertyInfo).CanWrite)
				{
					throw new InvalidOperationException(SR.GetString("Error_ReadOnlyField", memberInfo.Name));
				}
				(memberInfo as PropertyInfo).SetValue(parentObj, value, args);
			}
		}

		internal static ValidationError ValidateTypesInPath(Type srcType, string path)
		{
			ValidationError error = null;
			if (srcType == null)
			{
				throw new ArgumentNullException("srcType");
			}
			if (path == null)
			{
				throw new ArgumentNullException("path");
			}
			if (path.Length == 0)
			{
				throw new ArgumentException(SR.GetString("Error_EmptyPathValue"), "path");
			}
			IList<AuthorizedType> authorizedTypes = WorkflowCompilationContext.Current.GetAuthorizedTypes();
			if (authorizedTypes == null)
			{
				return new ValidationError(SR.GetString("Error_ConfigFileMissingOrInvalid"), 376);
			}
			MemberInfo memberInfo = null;
			PathWalker pathWalker = new PathWalker();
			pathWalker.MemberFound = (EventHandler<PathMemberInfoEventArgs>)Delegate.Combine(pathWalker.MemberFound, (EventHandler<PathMemberInfoEventArgs>)delegate(object sender, PathMemberInfoEventArgs eventArgs)
			{
				Type type = null;
				memberInfo = eventArgs.MemberInfo;
				if (memberInfo is FieldInfo)
				{
					type = ((FieldInfo)memberInfo).FieldType;
				}
				if (memberInfo is PropertyInfo)
				{
					type = ((PropertyInfo)memberInfo).PropertyType;
				}
				if (type != null && !SafeType(authorizedTypes, type))
				{
					error = new ValidationError(SR.GetString("Error_TypeNotAuthorized", type), 363);
					eventArgs.Action = PathWalkAction.Stop;
				}
			});
			pathWalker.TryWalkPropertyPath(srcType, path);
			return error;
		}

		private static bool SafeType(IList<AuthorizedType> authorizedTypes, Type referenceType)
		{
			bool flag = false;
			foreach (AuthorizedType authorizedType in authorizedTypes)
			{
				if (authorizedType.RegularExpression.IsMatch(referenceType.AssemblyQualifiedName))
				{
					flag = string.Compare(bool.TrueString, authorizedType.Authorized, StringComparison.OrdinalIgnoreCase) == 0;
					if (!flag)
					{
						return false;
					}
				}
			}
			return flag;
		}

		internal static MemberInfo GetMemberInfo(Type srcType, string path)
		{
			if (srcType == null)
			{
				throw new ArgumentNullException("srcType");
			}
			if (path == null)
			{
				throw new ArgumentNullException("path");
			}
			if (path.Length == 0)
			{
				throw new ArgumentException(SR.GetString("Error_EmptyPathValue"), "path");
			}
			MemberInfo memberInfo = null;
			PathWalker pathWalker = new PathWalker();
			pathWalker.MemberFound = (EventHandler<PathMemberInfoEventArgs>)Delegate.Combine(pathWalker.MemberFound, (EventHandler<PathMemberInfoEventArgs>)delegate(object sender, PathMemberInfoEventArgs eventArgs)
			{
				memberInfo = eventArgs.MemberInfo;
				if (eventArgs.MemberKind == PathMemberKind.Event)
				{
					eventArgs.Action = PathWalkAction.Stop;
				}
			});
			if (pathWalker.TryWalkPropertyPath(srcType, path))
			{
				return memberInfo;
			}
			return null;
		}
	}
	[ActivityValidator(typeof(FieldBindValidator))]
	internal sealed class FieldBind : MemberBind
	{
		private string path = string.Empty;

		public string Path
		{
			get
			{
				return path;
			}
			set
			{
				if (!designMode)
				{
					throw new InvalidOperationException(SR.GetString("Error_CanNotChangeAtRuntime"));
				}
				path = value;
			}
		}

		public FieldBind()
		{
		}

		public FieldBind(string name)
			: base(name)
		{
		}

		public FieldBind(string name, string path)
			: base(name)
		{
			this.path = path;
		}

		public override object GetRuntimeValue(Activity activity, Type targetType)
		{
			throw new NotImplementedException();
		}

		public override object GetRuntimeValue(Activity activity)
		{
			throw new NotImplementedException();
		}

		public override void SetRuntimeValue(Activity activity, object value)
		{
			throw new NotImplementedException();
		}

		protected override void OnRuntimeInitialized(Activity activity)
		{
			throw new NotImplementedException();
		}
	}
	[ActivityValidator(typeof(PropertyBindValidator))]
	internal sealed class PropertyBind : MemberBind
	{
		private string path = string.Empty;

		public string Path
		{
			get
			{
				return path;
			}
			set
			{
				if (!designMode)
				{
					throw new InvalidOperationException(SR.GetString("Error_CanNotChangeAtRuntime"));
				}
				path = value;
			}
		}

		public PropertyBind()
		{
		}

		public PropertyBind(string name)
			: base(name)
		{
		}

		public PropertyBind(string name, string path)
			: base(name)
		{
			this.path = path;
		}

		public override object GetRuntimeValue(Activity activity, Type targetType)
		{
			throw new NotImplementedException();
		}

		public override object GetRuntimeValue(Activity activity)
		{
			throw new NotImplementedException();
		}

		public override void SetRuntimeValue(Activity activity, object value)
		{
			throw new NotImplementedException();
		}
	}
	[ActivityValidator(typeof(MethodBindValidator))]
	internal sealed class MethodBind : MemberBind
	{
		public MethodBind()
		{
		}

		public MethodBind(string name)
			: base(name)
		{
		}

		public override object GetRuntimeValue(Activity activity, Type targetType)
		{
			throw new NotImplementedException();
		}

		public override object GetRuntimeValue(Activity activity)
		{
			throw new Exception(SR.GetString("Error_NoTargetTypeForMethod"));
		}

		public override void SetRuntimeValue(Activity activity, object value)
		{
			throw new Exception(SR.GetString("Error_MethodDataSourceIsReadOnly"));
		}
	}
	internal enum ActivityBindTypes
	{
		Field = 1,
		Property,
		Method
	}
	[Browsable(true)]
	[TypeConverter(typeof(ActivityBindTypeConverter))]
	[ActivityValidator(typeof(ActivityBindValidator))]
	[DesignerSerializer(typeof(BindMarkupExtensionSerializer), typeof(WorkflowMarkupSerializer))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ActivityBind : MarkupExtension, IPropertyValueProvider
	{
		[NonSerialized]
		private bool designMode = true;

		[NonSerialized]
		private bool dynamicUpdateMode;

		[NonSerialized]
		private IDictionary userData;

		[NonSerialized]
		private object syncRoot = new object();

		private string id = string.Empty;

		private string path = string.Empty;

		internal bool DynamicUpdateMode
		{
			get
			{
				return dynamicUpdateMode;
			}
			set
			{
				dynamicUpdateMode = false;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		private bool DesignMode
		{
			get
			{
				if (designMode)
				{
					return !dynamicUpdateMode;
				}
				return false;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public IDictionary UserData
		{
			get
			{
				if (userData == null)
				{
					lock (syncRoot)
					{
						if (userData == null)
						{
							userData = Hashtable.Synchronized(new Hashtable());
						}
					}
				}
				return userData;
			}
		}

		[DefaultValue("")]
		[SRDescription("ActivityBindIDDescription")]
		[ConstructorArgument("name")]
		public string Name
		{
			get
			{
				return id;
			}
			set
			{
				if (!DesignMode)
				{
					throw new InvalidOperationException(SR.GetString("Error_CanNotChangeAtRuntime"));
				}
				id = value;
			}
		}

		[DefaultValue("")]
		[SRDescription("ActivityBindPathDescription")]
		[TypeConverter(typeof(ActivityBindPathTypeConverter))]
		public string Path
		{
			get
			{
				return path;
			}
			set
			{
				if (!DesignMode)
				{
					throw new InvalidOperationException(SR.GetString("Error_CanNotChangeAtRuntime"));
				}
				path = value;
			}
		}

		internal void SetContext(Activity activity)
		{
			designMode = false;
			OnRuntimeInitialized(activity);
		}

		internal static object GetDataSourceObject(Activity activity, string inputName, out string name)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (string.IsNullOrEmpty(inputName))
			{
				throw new ArgumentNullException("inputName");
			}
			return Helpers.GetDataSourceActivity(activity, inputName, out name);
		}

		public ActivityBind()
		{
		}

		public ActivityBind(string name)
		{
			id = name;
		}

		public ActivityBind(string name, string path)
		{
			id = name;
			this.path = path;
		}

		public override object ProvideValue(IServiceProvider provider)
		{
			return this;
		}

		public object GetRuntimeValue(Activity activity, Type targetType)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (targetType == null)
			{
				throw new ArgumentNullException("targetType");
			}
			return InternalGetRuntimeValue(activity, targetType);
		}

		public object GetRuntimeValue(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			return InternalGetRuntimeValue(activity, null);
		}

		private object InternalGetRuntimeValue(Activity activity, Type targetType)
		{
			object obj = null;
			Activity activity2 = Helpers.ParseActivityForBind(activity, Name);
			if (activity2 != null)
			{
				MemberInfo memberInfo = GetMemberInfo(activity2.GetType(), Path, targetType);
				if (memberInfo != null)
				{
					obj = GetMemberValue(activity2, memberInfo, Path, targetType);
					if (obj is ActivityBind && BindHelpers.GetMemberType(memberInfo) != typeof(ActivityBind))
					{
						obj = ((ActivityBind)obj).GetRuntimeValue(activity2, targetType);
					}
				}
				else
				{
					Activity rootActivity = Helpers.GetRootActivity(activity);
					DependencyProperty dependencyProperty = DependencyProperty.FromName(Path, rootActivity.GetType());
				}
			}
			return obj;
		}

		public void SetRuntimeValue(Activity activity, object value)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			Activity activity2 = Helpers.ParseActivityForBind(activity, Name);
			if (activity2 == null)
			{
				return;
			}
			MemberInfo memberInfo = GetMemberInfo(activity2.GetType(), Path, null);
			if (memberInfo != null)
			{
				if (GetMemberValue(activity2, memberInfo, Path, null) is ActivityBind activityBind)
				{
					activityBind.SetRuntimeValue(activity2, value);
				}
				else
				{
					MemberBind.SetValue(activity2, Path, value);
				}
			}
		}

		private void OnRuntimeInitialized(Activity activity)
		{
			Activity contextActivity = null;
			ActivityBind contextBind = GetContextBind(this, activity, out contextActivity);
			if (contextBind == null || contextActivity == null)
			{
				return;
			}
			Type type = contextActivity.GetType();
			if (!(type != null))
			{
				return;
			}
			MemberInfo memberInfo = GetMemberInfo(type, contextBind.Path, null);
			if (!(memberInfo != null) || (!(memberInfo is FieldInfo) && !(memberInfo is PropertyInfo) && !(memberInfo is EventInfo)))
			{
				return;
			}
			if (contextBind.UserData[UserDataKeys.BindDataSource] == null)
			{
				contextBind.UserData[UserDataKeys.BindDataSource] = new Hashtable();
			}
			((Hashtable)contextBind.UserData[UserDataKeys.BindDataSource])[activity.QualifiedName] = memberInfo;
			if (contextActivity != null)
			{
				if (contextBind.UserData[UserDataKeys.BindDataContextActivity] == null)
				{
					contextBind.UserData[UserDataKeys.BindDataContextActivity] = new Hashtable();
				}
				((Hashtable)contextBind.UserData[UserDataKeys.BindDataContextActivity])[activity.QualifiedName] = contextActivity.QualifiedName;
			}
		}

		public override string ToString()
		{
			if (UserData[UserDataKeys.BindDataContextActivity] is Activity context)
			{
				string text = string.Empty;
				if (!string.IsNullOrEmpty(Name))
				{
					text = Helpers.ParseActivityForBind(context, Name).QualifiedName;
				}
				if (!string.IsNullOrEmpty(Path))
				{
					string text2 = Path;
					int num = text2.IndexOfAny(new char[3] { '.', '/', '[' });
					text2 = ((num != -1) ? text2.Substring(0, num) : text2);
					text += ((!string.IsNullOrEmpty(text)) ? ("." + text2) : text2);
				}
				return text;
			}
			return base.ToString();
		}

		internal static MemberInfo GetMemberInfo(Type dataSourceType, string path, Type targetType)
		{
			MemberInfo memberInfo = MemberBind.GetMemberInfo(dataSourceType, path);
			if (targetType != null && typeof(Delegate).IsAssignableFrom(targetType) && (memberInfo == null || !(memberInfo is EventInfo)))
			{
				MethodInfo method = targetType.GetMethod("Invoke");
				List<Type> list = new List<Type>();
				ParameterInfo[] parameters = method.GetParameters();
				foreach (ParameterInfo parameterInfo in parameters)
				{
					list.Add(parameterInfo.ParameterType);
				}
				memberInfo = dataSourceType.GetMethod(path, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy, null, list.ToArray(), null);
			}
			return memberInfo;
		}

		private static object GetMemberValue(object dataSourceObject, MemberInfo memberInfo, string path, Type targetType)
		{
			object obj = null;
			if (memberInfo is FieldInfo || memberInfo is PropertyInfo || memberInfo is EventInfo)
			{
				return MemberBind.GetValue(memberInfo, dataSourceObject, path);
			}
			if (targetType != null && memberInfo is MethodInfo)
			{
				return Delegate.CreateDelegate(targetType, dataSourceObject, (MethodInfo)memberInfo);
			}
			throw new InvalidOperationException(SR.GetString("Error_MemberNotFound"));
		}

		private static ActivityBind GetContextBind(ActivityBind activityBind, Activity activity, out Activity contextActivity)
		{
			if (activityBind == null)
			{
				throw new ArgumentNullException("activityBind");
			}
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			BindRecursionContext bindRecursionContext = new BindRecursionContext();
			ActivityBind activityBind2 = activityBind;
			contextActivity = activity;
			while (activityBind2 != null)
			{
				Activity activity2 = Helpers.ParseActivityForBind(contextActivity, activityBind2.Name);
				if (activity2 == null)
				{
					return null;
				}
				object obj = activity2;
				MemberInfo memberInfo = GetMemberInfo(obj.GetType(), activityBind2.Path, null);
				if (memberInfo == null)
				{
					contextActivity = activity2;
					return activityBind2;
				}
				if (memberInfo is FieldInfo)
				{
					contextActivity = activity2;
					return activityBind2;
				}
				if (memberInfo is PropertyInfo && (memberInfo as PropertyInfo).PropertyType == typeof(ActivityBind) && obj != null)
				{
					object value = MemberBind.GetValue(memberInfo, obj, activityBind2.Path);
					if (value is ActivityBind)
					{
						if (bindRecursionContext.Contains(contextActivity, activityBind2))
						{
							return null;
						}
						bindRecursionContext.Add(contextActivity, activityBind2);
						contextActivity = activity2;
						activityBind2 = value as ActivityBind;
						continue;
					}
					return null;
				}
				return null;
			}
			return activityBind2;
		}

		internal static string GetRelativePathExpression(Activity parentActivity, Activity childActivity)
		{
			string empty = string.Empty;
			Activity rootActivity = Helpers.GetRootActivity(childActivity);
			if (rootActivity == childActivity)
			{
				return "/Self";
			}
			return parentActivity.QualifiedName;
		}

		ICollection IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context)
		{
			ArrayList arrayList = new ArrayList();
			if (string.Equals(context.PropertyDescriptor.Name, "Path", StringComparison.Ordinal) && !string.IsNullOrEmpty(Name) && context.PropertyDescriptor is ActivityBindPathPropertyDescriptor)
			{
				ITypeDescriptorContext outerPropertyContext = ((ActivityBindPathPropertyDescriptor)context.PropertyDescriptor).OuterPropertyContext;
				if (outerPropertyContext != null && PropertyDescriptorUtils.GetComponent(outerPropertyContext) is Activity context2)
				{
					Activity activity = Helpers.ParseActivityForBind(context2, Name);
					if (activity != null)
					{
						foreach (MemberInfo bindableMember in ActivityBindPropertyDescriptor.GetBindableMembers(activity, outerPropertyContext))
						{
							arrayList.Add(bindableMember.Name);
						}
					}
				}
			}
			return arrayList;
		}
	}
	internal sealed class BindRecursionContext
	{
		private Hashtable activityBinds = new Hashtable();

		public bool Contains(Activity activity, ActivityBind bind)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (bind == null)
			{
				throw new ArgumentNullException("bind");
			}
			if (activityBinds[activity] != null)
			{
				List<ActivityBind> list = activityBinds[activity] as List<ActivityBind>;
				foreach (ActivityBind item in list)
				{
					if (item.Path == bind.Path)
					{
						return true;
					}
				}
			}
			return false;
		}

		public void Add(Activity activity, ActivityBind bind)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (bind == null)
			{
				throw new ArgumentNullException("bind");
			}
			if (activityBinds[activity] == null)
			{
				activityBinds[activity] = new List<ActivityBind>();
			}
			((List<ActivityBind>)activityBinds[activity]).Add(bind);
		}
	}
	internal static class BindHelpers
	{
		internal static Type GetBaseType(IServiceProvider serviceProvider, PropertyValidationContext validationContext)
		{
			Type type = null;
			if (validationContext.Property is PropertyInfo)
			{
				type = Helpers.GetBaseType(validationContext.Property as PropertyInfo, validationContext.PropertyOwner, serviceProvider);
			}
			else if (validationContext.Property is DependencyProperty && validationContext.Property is DependencyProperty dependencyProperty)
			{
				if (type == null && validationContext.PropertyOwner is IDynamicPropertyTypeProvider dynamicPropertyTypeProvider)
				{
					type = dynamicPropertyTypeProvider.GetPropertyType(serviceProvider, dependencyProperty.Name);
				}
				if (type == null)
				{
					type = dependencyProperty.PropertyType;
				}
			}
			return type;
		}

		internal static AccessTypes GetAccessType(IServiceProvider serviceProvider, PropertyValidationContext validationContext)
		{
			AccessTypes result = AccessTypes.Read;
			if (validationContext.Property is PropertyInfo)
			{
				result = Helpers.GetAccessType(validationContext.Property as PropertyInfo, validationContext.PropertyOwner, serviceProvider);
			}
			else if (validationContext.Property is DependencyProperty && validationContext.PropertyOwner is IDynamicPropertyTypeProvider dynamicPropertyTypeProvider)
			{
				result = dynamicPropertyTypeProvider.GetAccessType(serviceProvider, ((DependencyProperty)validationContext.Property).Name);
			}
			return result;
		}

		internal static object ResolveActivityPath(Activity refActivity, string path)
		{
			if (refActivity == null)
			{
				throw new ArgumentNullException("refActivity");
			}
			if (path == null)
			{
				throw new ArgumentNullException("path");
			}
			if (path.Length == 0)
			{
				throw new ArgumentException(SR.GetString("Error_EmptyPathValue"), "path");
			}
			object value = refActivity;
			BindRecursionContext recursionContext = new BindRecursionContext();
			PathWalker pathWalker = new PathWalker();
			pathWalker.MemberFound = (EventHandler<PathMemberInfoEventArgs>)Delegate.Combine(pathWalker.MemberFound, (EventHandler<PathMemberInfoEventArgs>)delegate(object sender, PathMemberInfoEventArgs eventArgs)
			{
				if (value == null)
				{
					eventArgs.Action = PathWalkAction.Cancel;
				}
				else
				{
					switch (eventArgs.MemberKind)
					{
					case PathMemberKind.Field:
						try
						{
							value = (eventArgs.MemberInfo as FieldInfo).GetValue(value);
						}
						catch (Exception ex5)
						{
							value = null;
							eventArgs.Action = PathWalkAction.Cancel;
							if (!refActivity.DesignMode)
							{
								throw (ex5 is TargetInvocationException ex6) ? ex6.InnerException : ex5;
							}
						}
						break;
					case PathMemberKind.Event:
					{
						EventInfo eventInfo = eventArgs.MemberInfo as EventInfo;
						DependencyProperty dependencyProperty2 = DependencyProperty.FromName(eventInfo.Name, value.GetType());
						if (dependencyProperty2 != null && value is DependencyObject)
						{
							if ((value as DependencyObject).IsBindingSet(dependencyProperty2))
							{
								value = (value as DependencyObject).GetBinding(dependencyProperty2);
							}
							else
							{
								value = (value as DependencyObject).GetHandler(dependencyProperty2);
							}
						}
						break;
					}
					case PathMemberKind.Property:
					{
						if (!(eventArgs.MemberInfo as PropertyInfo).CanRead)
						{
							eventArgs.Action = PathWalkAction.Cancel;
							return;
						}
						DependencyProperty dependencyProperty = DependencyProperty.FromName(eventArgs.MemberInfo.Name, value.GetType());
						if (dependencyProperty != null && value is DependencyObject && (value as DependencyObject).IsBindingSet(dependencyProperty))
						{
							value = (value as DependencyObject).GetBinding(dependencyProperty);
						}
						else
						{
							try
							{
								value = (eventArgs.MemberInfo as PropertyInfo).GetValue(value, null);
							}
							catch (Exception ex3)
							{
								value = null;
								eventArgs.Action = PathWalkAction.Cancel;
								if (!refActivity.DesignMode)
								{
									throw (ex3 is TargetInvocationException ex4) ? ex4.InnerException : ex3;
								}
							}
						}
						break;
					}
					case PathMemberKind.IndexedProperty:
					case PathMemberKind.Index:
						try
						{
							value = (eventArgs.MemberInfo as PropertyInfo).GetValue(value, BindingFlags.GetProperty, null, eventArgs.IndexParameters, CultureInfo.InvariantCulture);
						}
						catch (Exception ex)
						{
							value = null;
							eventArgs.Action = PathWalkAction.Cancel;
							if (!refActivity.DesignMode)
							{
								throw (ex is TargetInvocationException ex2) ? ex2.InnerException : ex;
							}
						}
						break;
					}
					if (value is ActivityBind && !eventArgs.LastMemberInThePath && GetMemberType(eventArgs.MemberInfo) != typeof(ActivityBind))
					{
						while (value is ActivityBind)
						{
							ActivityBind activityBind = value as ActivityBind;
							if (recursionContext.Contains(refActivity, activityBind))
							{
								throw new InvalidOperationException(SR.GetString("Bind_ActivityDataSourceRecursionDetected"));
							}
							recursionContext.Add(refActivity, activityBind);
							value = activityBind.GetRuntimeValue(refActivity);
						}
					}
				}
			});
			if (pathWalker.TryWalkPropertyPath(refActivity.GetType(), path))
			{
				return value;
			}
			return null;
		}

		internal static PropertyInfo GetMatchedPropertyInfo(Type memberType, string[] aryArgName, object[] args)
		{
			if (memberType == null)
			{
				throw new ArgumentNullException("memberType");
			}
			if (aryArgName == null)
			{
				throw new ArgumentNullException("aryArgName");
			}
			if (args == null)
			{
				throw new ArgumentNullException("args");
			}
			MemberInfo[][] array = new MemberInfo[2][]
			{
				memberType.GetDefaultMembers(),
				null
			};
			if (memberType.IsArray)
			{
				MemberInfo[] member = memberType.GetMember("Get");
				MemberInfo[] member2 = memberType.GetMember("Set");
				PropertyInfo propertyInfo = new ActivityBindPropertyInfo(memberType, member[0] as MethodInfo, member2[0] as MethodInfo, string.Empty, null);
				array[1] = new MemberInfo[1] { propertyInfo };
			}
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i] == null)
				{
					continue;
				}
				MemberInfo[] array2 = array[i];
				MemberInfo[] array3 = array2;
				foreach (MemberInfo memberInfo in array3)
				{
					PropertyInfo propertyInfo2 = memberInfo as PropertyInfo;
					if (propertyInfo2 != null && MatchIndexerParameters(propertyInfo2, aryArgName, args))
					{
						return propertyInfo2;
					}
				}
			}
			return null;
		}

		internal static bool MatchIndexerParameters(PropertyInfo propertyInfo, string[] argNames, object[] args)
		{
			if (propertyInfo == null)
			{
				throw new ArgumentNullException("propertyInfo");
			}
			if (argNames == null)
			{
				throw new ArgumentNullException("argNames");
			}
			if (args == null)
			{
				throw new ArgumentNullException("args");
			}
			ParameterInfo[] indexParameters = propertyInfo.GetIndexParameters();
			if (indexParameters.Length != argNames.Length)
			{
				return false;
			}
			for (int i = 0; i < args.Length; i++)
			{
				Type parameterType = indexParameters[i].ParameterType;
				if (parameterType != typeof(string) && parameterType != typeof(int))
				{
					return false;
				}
				try
				{
					object obj = null;
					string text = argNames[i].Trim();
					if (parameterType == typeof(string) && text.StartsWith("\"", StringComparison.Ordinal) && text.EndsWith("\"", StringComparison.Ordinal))
					{
						obj = text.Substring(1, text.Length - 2).Trim();
					}
					else if (parameterType == typeof(int))
					{
						obj = Convert.ChangeType(text, typeof(int), CultureInfo.InvariantCulture);
					}
					if (obj != null)
					{
						args.SetValue(obj, i);
						continue;
					}
					return false;
				}
				catch
				{
					return false;
				}
			}
			return true;
		}

		internal static Type GetMemberType(MemberInfo memberInfo)
		{
			FieldInfo fieldInfo = memberInfo as FieldInfo;
			if (fieldInfo != null)
			{
				return fieldInfo.FieldType;
			}
			PropertyInfo propertyInfo = memberInfo as PropertyInfo;
			if (propertyInfo != null)
			{
				if (propertyInfo.PropertyType != null)
				{
					return propertyInfo.PropertyType;
				}
				MethodInfo getMethod = propertyInfo.GetGetMethod();
				return getMethod.ReturnType;
			}
			EventInfo eventInfo = memberInfo as EventInfo;
			if (eventInfo != null)
			{
				return eventInfo.EventHandlerType;
			}
			return null;
		}
	}
	internal enum PathMemberKind
	{
		Field,
		Event,
		Property,
		IndexedProperty,
		Index
	}
	internal enum PathWalkAction
	{
		Continue,
		Stop,
		Cancel
	}
	internal class PathMemberInfoEventArgs : EventArgs
	{
		private string path;

		private Type parentType;

		private PathMemberKind memberKind;

		private MemberInfo memberInfo;

		private object[] indexParameters = new object[0];

		private PathWalkAction action;

		private bool lastMemberInThePath;

		public string Path => path;

		public MemberInfo MemberInfo => memberInfo;

		public PathMemberKind MemberKind => memberKind;

		public object[] IndexParameters => indexParameters;

		public bool LastMemberInThePath => lastMemberInThePath;

		public PathWalkAction Action
		{
			get
			{
				return action;
			}
			set
			{
				action = value;
			}
		}

		public PathMemberInfoEventArgs(string path, Type parentType, MemberInfo memberInfo, PathMemberKind memberKind, bool lastMemberInThePath)
		{
			if (string.IsNullOrEmpty(path))
			{
				throw new ArgumentNullException("path");
			}
			if (parentType == null)
			{
				throw new ArgumentNullException("parentType");
			}
			if (memberInfo == null)
			{
				throw new ArgumentNullException("memberInfo");
			}
			this.path = path;
			this.parentType = parentType;
			this.memberInfo = memberInfo;
			this.memberKind = memberKind;
			this.lastMemberInThePath = lastMemberInThePath;
		}

		public PathMemberInfoEventArgs(string path, Type parentType, MemberInfo memberInfo, PathMemberKind memberKind, bool lastMemberInThePath, object[] indexParameters)
			: this(path, parentType, memberInfo, memberKind, lastMemberInThePath)
		{
			this.indexParameters = indexParameters;
		}
	}
	internal class PathErrorInfoEventArgs : EventArgs
	{
		private SourceValueInfo info;

		private string currentPath;

		public PathErrorInfoEventArgs(SourceValueInfo info, string currentPath)
		{
			if (currentPath == null)
			{
				throw new ArgumentNullException("currentPath");
			}
			this.info = info;
			this.currentPath = currentPath;
		}
	}
	internal class PathWalker
	{
		public EventHandler<PathMemberInfoEventArgs> MemberFound;

		public EventHandler<PathErrorInfoEventArgs> PathErrorFound;

		private static MemberInfo[] PopulateMembers(Type type, string memberName)
		{
			List<MemberInfo> list = new List<MemberInfo>();
			list.AddRange(type.GetMember(memberName, MemberTypes.Event | MemberTypes.Field | MemberTypes.Method | MemberTypes.Property, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy));
			if (type.IsInterface)
			{
				Type[] interfaces = type.GetInterfaces();
				Type[] array = interfaces;
				foreach (Type type2 in array)
				{
					list.AddRange(type2.GetMember(memberName, MemberTypes.Event | MemberTypes.Field | MemberTypes.Method | MemberTypes.Property, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy));
				}
			}
			return list.ToArray();
		}

		public bool TryWalkPropertyPath(Type rootType, string path)
		{
			if (rootType == null)
			{
				throw new ArgumentNullException("rootType");
			}
			if (string.IsNullOrEmpty(path))
			{
				throw new ArgumentNullException("path");
			}
			Type type = rootType;
			string text = string.Empty;
			PathParser pathParser = new PathParser();
			List<SourceValueInfo> list = pathParser.Parse(path, returnResultBeforeError: true);
			string error = pathParser.Error;
			for (int i = 0; i < list.Count; i++)
			{
				SourceValueInfo info = list[i];
				if (string.IsNullOrEmpty(info.name))
				{
					if (PathErrorFound != null)
					{
						PathErrorFound(this, new PathErrorInfoEventArgs(info, text));
					}
					return false;
				}
				string text2 = ((info.type == SourceValueType.Property) ? info.name : ("[" + info.name + "]"));
				string text3 = (string.IsNullOrEmpty(text) ? text2 : (text + ((info.type == SourceValueType.Property) ? "." : string.Empty) + text2));
				Type type2 = null;
				MemberInfo memberInfo = null;
				switch (info.type)
				{
				case SourceValueType.Property:
				{
					MemberInfo[] array3 = PopulateMembers(type, info.name);
					if (array3 == null || array3.Length == 0 || array3[0] == null)
					{
						if (PathErrorFound != null)
						{
							PathErrorFound(this, new PathErrorInfoEventArgs(info, text));
						}
						return false;
					}
					memberInfo = array3[0];
					if (memberInfo is EventInfo || memberInfo is MethodInfo)
					{
						if (MemberFound != null)
						{
							PathMemberInfoEventArgs pathMemberInfoEventArgs2 = new PathMemberInfoEventArgs(text3, type, memberInfo, PathMemberKind.Event, i == list.Count - 1);
							MemberFound(this, pathMemberInfoEventArgs2);
							if (pathMemberInfoEventArgs2.Action == PathWalkAction.Cancel)
							{
								return false;
							}
							if (pathMemberInfoEventArgs2.Action == PathWalkAction.Stop)
							{
								return true;
							}
						}
						return string.IsNullOrEmpty(error);
					}
					if (memberInfo is PropertyInfo)
					{
						PropertyInfo propertyInfo = memberInfo as PropertyInfo;
						MethodInfo getMethod = propertyInfo.GetGetMethod();
						MethodInfo setMethod = propertyInfo.GetSetMethod();
						ActivityBindPropertyInfo activityBindPropertyInfo = new ActivityBindPropertyInfo(type, getMethod, setMethod, propertyInfo.Name, propertyInfo);
						type2 = activityBindPropertyInfo.PropertyType;
						ParameterInfo[] indexParameters = activityBindPropertyInfo.GetIndexParameters();
						if (indexParameters.Length != 0)
						{
							if (i >= list.Count - 1 || list[i + 1].type != SourceValueType.Indexer || string.IsNullOrEmpty(list[i + 1].name))
							{
								if (PathErrorFound != null)
								{
									PathErrorFound(this, new PathErrorInfoEventArgs(info, text));
								}
								return false;
							}
							string[] array4 = list[i + 1].name.Split(',');
							object[] array5 = new object[array4.Length];
							if (!BindHelpers.MatchIndexerParameters(activityBindPropertyInfo, array4, array5))
							{
								if (PathErrorFound != null)
								{
									PathErrorFound(this, new PathErrorInfoEventArgs(info, text));
								}
								return false;
							}
							text3 = text3 + "[" + list[i + 1].name + "]";
							if (MemberFound != null)
							{
								PathMemberInfoEventArgs pathMemberInfoEventArgs3 = new PathMemberInfoEventArgs(text3, type, activityBindPropertyInfo, PathMemberKind.IndexedProperty, i == list.Count - 2, array5);
								MemberFound(this, pathMemberInfoEventArgs3);
								if (pathMemberInfoEventArgs3.Action == PathWalkAction.Cancel)
								{
									return false;
								}
								if (pathMemberInfoEventArgs3.Action == PathWalkAction.Stop)
								{
									return true;
								}
							}
							i++;
						}
						else if (MemberFound != null)
						{
							PathMemberInfoEventArgs pathMemberInfoEventArgs4 = new PathMemberInfoEventArgs(text3, type, activityBindPropertyInfo, PathMemberKind.Property, i == list.Count - 1);
							MemberFound(this, pathMemberInfoEventArgs4);
							if (pathMemberInfoEventArgs4.Action == PathWalkAction.Cancel)
							{
								return false;
							}
							if (pathMemberInfoEventArgs4.Action == PathWalkAction.Stop)
							{
								return true;
							}
						}
						break;
					}
					if (MemberFound != null)
					{
						PathMemberInfoEventArgs pathMemberInfoEventArgs5 = new PathMemberInfoEventArgs(text3, type, memberInfo, PathMemberKind.Field, i == list.Count - 1);
						MemberFound(this, pathMemberInfoEventArgs5);
						if (pathMemberInfoEventArgs5.Action == PathWalkAction.Cancel)
						{
							return false;
						}
						if (pathMemberInfoEventArgs5.Action == PathWalkAction.Stop)
						{
							return true;
						}
					}
					type2 = (memberInfo as FieldInfo).FieldType;
					break;
				}
				case SourceValueType.Indexer:
					if (!string.IsNullOrEmpty(info.name))
					{
						string[] array = info.name.Split(',');
						object[] array2 = new object[array.Length];
						PropertyInfo matchedPropertyInfo = BindHelpers.GetMatchedPropertyInfo(type, array, array2);
						if (matchedPropertyInfo != null)
						{
							if (MemberFound != null)
							{
								PathMemberInfoEventArgs pathMemberInfoEventArgs = new PathMemberInfoEventArgs(text3, type, matchedPropertyInfo, PathMemberKind.Index, i == list.Count - 1, array2);
								MemberFound(this, pathMemberInfoEventArgs);
								if (pathMemberInfoEventArgs.Action == PathWalkAction.Cancel)
								{
									return false;
								}
								if (pathMemberInfoEventArgs.Action == PathWalkAction.Stop)
								{
									return true;
								}
							}
							type2 = matchedPropertyInfo.PropertyType;
							if (type2 == null)
							{
								type2 = matchedPropertyInfo.GetGetMethod().ReturnType;
							}
							break;
						}
						if (PathErrorFound != null)
						{
							PathErrorFound(this, new PathErrorInfoEventArgs(info, text));
						}
						return false;
					}
					if (PathErrorFound != null)
					{
						PathErrorFound(this, new PathErrorInfoEventArgs(info, text));
					}
					return false;
				}
				type = type2;
				text = text3;
			}
			return string.IsNullOrEmpty(error);
		}
	}
	internal class ActivityBindPropertyInfo : PropertyInfo
	{
		private MethodInfo getMethod;

		private MethodInfo setMethod;

		private Type declaringType;

		private string propertyName;

		private PropertyInfo originalPropertyInfo;

		public override string Name => propertyName;

		public override Type PropertyType
		{
			get
			{
				if (getMethod != null)
				{
					return getMethod.ReturnType;
				}
				if (originalPropertyInfo != null)
				{
					return originalPropertyInfo.PropertyType;
				}
				return typeof(object);
			}
		}

		public override PropertyAttributes Attributes => PropertyAttributes.None;

		public override bool CanRead
		{
			get
			{
				if (getMethod != null)
				{
					return true;
				}
				if (originalPropertyInfo != null)
				{
					return originalPropertyInfo.CanRead;
				}
				return false;
			}
		}

		public override bool CanWrite
		{
			get
			{
				if (setMethod != null)
				{
					return true;
				}
				if (originalPropertyInfo != null)
				{
					return originalPropertyInfo.CanWrite;
				}
				return false;
			}
		}

		public override Type DeclaringType => declaringType;

		public override Type ReflectedType => declaringType;

		public ActivityBindPropertyInfo(Type declaringType, MethodInfo getMethod, MethodInfo setMethod, string propertyName, PropertyInfo originalPropertyInfo)
		{
			if (declaringType == null)
			{
				throw new ArgumentNullException("declaringType");
			}
			if (propertyName == null)
			{
				throw new ArgumentNullException("propertyName");
			}
			this.declaringType = declaringType;
			this.getMethod = getMethod;
			this.setMethod = setMethod;
			this.propertyName = propertyName;
			this.originalPropertyInfo = originalPropertyInfo;
		}

		public override MethodInfo GetGetMethod(bool nonPublic)
		{
			return getMethod;
		}

		public override MethodInfo GetSetMethod(bool nonPublic)
		{
			return setMethod;
		}

		public override ParameterInfo[] GetIndexParameters()
		{
			if (getMethod != null)
			{
				return getMethod.GetParameters();
			}
			if (originalPropertyInfo != null)
			{
				return originalPropertyInfo.GetIndexParameters();
			}
			return new ParameterInfo[0];
		}

		public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)
		{
			if (getMethod == null && (originalPropertyInfo == null || !originalPropertyInfo.CanRead))
			{
				throw new InvalidOperationException(SR.GetString("Error_PropertyHasNoGetterDefined", propertyName));
			}
			if (getMethod != null)
			{
				return getMethod.Invoke(obj, invokeAttr, binder, index, culture);
			}
			return originalPropertyInfo.GetValue(obj, invokeAttr, binder, index, culture);
		}

		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)
		{
			if (setMethod == null && (originalPropertyInfo == null || !originalPropertyInfo.CanWrite))
			{
				throw new InvalidOperationException(SR.GetString("Error_PropertyHasNoSetterDefined", propertyName));
			}
			if (setMethod != null)
			{
				object[] array = new object[((index != null) ? index.Length : 0) + 1];
				array[(index != null) ? index.Length : 0] = value;
				index?.CopyTo(array, 0);
				setMethod.Invoke(obj, invokeAttr, binder, array, culture);
			}
			else
			{
				originalPropertyInfo.SetValue(obj, value, invokeAttr, binder, index, culture);
			}
		}

		public override MethodInfo[] GetAccessors(bool nonPublic)
		{
			return new MethodInfo[2] { getMethod, setMethod };
		}

		public override object[] GetCustomAttributes(bool inherit)
		{
			return new object[0];
		}

		public override object[] GetCustomAttributes(Type attributeType, bool inherit)
		{
			return new object[0];
		}

		public override bool IsDefined(Type attributeType, bool inherit)
		{
			throw new NotSupportedException();
		}
	}
	internal enum SourceValueType
	{
		Property,
		Indexer
	}
	internal enum DrillIn
	{
		Never,
		IfNeeded
	}
	internal struct SourceValueInfo
	{
		internal SourceValueType type;

		internal DrillIn drillIn;

		internal string name;

		internal SourceValueInfo(SourceValueType t, DrillIn d, string n)
		{
			type = t;
			drillIn = d;
			name = n;
		}
	}
	internal sealed class PathParser
	{
		private enum State
		{
			Init,
			Prop,
			Done
		}

		private string error = string.Empty;

		private State state;

		private string pathValue;

		private int index;

		private int pathLength;

		private DrillIn drillIn;

		private List<SourceValueInfo> al = new List<SourceValueInfo>();

		private const char NullChar = '\0';

		private static List<SourceValueInfo> EmptyInfo = new List<SourceValueInfo>(1);

		private static string SpecialChars = ".[]";

		internal string Error => error;

		internal List<SourceValueInfo> Parse(string path, bool returnResultBeforeError)
		{
			pathValue = ((path != null) ? path.Trim() : string.Empty);
			pathLength = pathValue.Length;
			index = 0;
			drillIn = DrillIn.IfNeeded;
			al.Clear();
			error = null;
			state = State.Init;
			if (pathLength > 0 && pathValue[0] == '.')
			{
				SourceValueInfo item = new SourceValueInfo(SourceValueType.Property, drillIn, string.Empty);
				al.Add(item);
			}
			while (state != State.Done)
			{
				char c = ((index < pathLength) ? pathValue[index] : '\0');
				switch (state)
				{
				case State.Init:
					switch (c)
					{
					case '\0':
					case '.':
					case '/':
					case '[':
						state = State.Prop;
						break;
					case ']':
						error = "path[" + index + "] = " + c;
						if (!returnResultBeforeError)
						{
							return EmptyInfo;
						}
						return al;
					default:
						AddProperty();
						break;
					}
					break;
				case State.Prop:
				{
					bool flag = false;
					switch (c)
					{
					case '.':
						drillIn = DrillIn.Never;
						break;
					case '[':
						flag = true;
						break;
					case '\0':
						index--;
						break;
					default:
						error = "path[" + index + "] = " + c;
						if (!returnResultBeforeError)
						{
							return EmptyInfo;
						}
						return al;
					}
					index++;
					if (flag)
					{
						AddIndexer();
					}
					else
					{
						AddProperty();
					}
					break;
				}
				}
			}
			if (!(error == null || returnResultBeforeError))
			{
				return EmptyInfo;
			}
			return al;
		}

		private void AddProperty()
		{
			int num = index;
			while (index < pathLength && SpecialChars.IndexOf(pathValue[index]) < 0)
			{
				index++;
			}
			string n = pathValue.Substring(num, index - num).Trim();
			SourceValueInfo item = new SourceValueInfo(SourceValueType.Property, drillIn, n);
			al.Add(item);
			StartNewLevel();
		}

		private void AddIndexer()
		{
			int num = index;
			int num2 = 1;
			while (num2 > 0)
			{
				if (index >= pathLength)
				{
					return;
				}
				if (pathValue[index] == '[')
				{
					num2++;
				}
				else if (pathValue[index] == ']')
				{
					num2--;
				}
				index++;
			}
			string n = pathValue.Substring(num, index - num - 1).Trim();
			SourceValueInfo item = new SourceValueInfo(SourceValueType.Indexer, drillIn, n);
			al.Add(item);
			StartNewLevel();
		}

		private void StartNewLevel()
		{
			if (index >= pathLength)
			{
				state = State.Done;
			}
			drillIn = DrillIn.Never;
		}
	}
	internal static class SequenceHelper
	{
		private static DependencyProperty ActiveChildQualifiedNameProperty = DependencyProperty.RegisterAttached("ActiveChildQualifiedName", typeof(string), typeof(SequenceHelper));

		private static DependencyProperty ActiveChildRemovedProperty = DependencyProperty.RegisterAttached("ActiveChildRemoved", typeof(bool), typeof(SequenceHelper), new PropertyMetadata(DependencyPropertyOptions.NonSerialized));

		public static ActivityExecutionStatus Execute(CompositeActivity activity, ActivityExecutionContext executionContext)
		{
			if (activity.EnabledActivities.Count == 0)
			{
				return ActivityExecutionStatus.Closed;
			}
			activity.EnabledActivities[0].RegisterForStatusChange(Activity.Closed, (IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)activity);
			executionContext.ExecuteActivity(activity.EnabledActivities[0]);
			activity.SetValue(ActiveChildQualifiedNameProperty, activity.EnabledActivities[0].QualifiedName);
			return ActivityExecutionStatus.Executing;
		}

		public static ActivityExecutionStatus Cancel(CompositeActivity activity, ActivityExecutionContext executionContext)
		{
			for (int num = activity.EnabledActivities.Count - 1; num >= 0; num--)
			{
				Activity activity2 = activity.EnabledActivities[num];
				if (activity2.ExecutionStatus == ActivityExecutionStatus.Executing)
				{
					executionContext.CancelActivity(activity2);
					return activity.ExecutionStatus;
				}
				if (activity2.ExecutionStatus == ActivityExecutionStatus.Canceling || activity2.ExecutionStatus == ActivityExecutionStatus.Faulting)
				{
					return activity.ExecutionStatus;
				}
				if (activity2.ExecutionStatus == ActivityExecutionStatus.Closed)
				{
					activity.RemoveProperty(ActiveChildQualifiedNameProperty);
					return ActivityExecutionStatus.Closed;
				}
			}
			return ActivityExecutionStatus.Closed;
		}

		public static void OnEvent(CompositeActivity activity, object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			ActivityExecutionContext activityExecutionContext = sender as ActivityExecutionContext;
			e.Activity.UnregisterForStatusChange(Activity.Closed, (IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)activity);
			if (activity.ExecutionStatus == ActivityExecutionStatus.Canceling || activity.ExecutionStatus == ActivityExecutionStatus.Faulting || (activity.ExecutionStatus == ActivityExecutionStatus.Executing && !TryScheduleNextChild(activity, activityExecutionContext)))
			{
				activity.RemoveProperty(ActiveChildQualifiedNameProperty);
				activityExecutionContext.CloseActivity();
			}
		}

		private static bool TryScheduleNextChild(CompositeActivity activity, ActivityExecutionContext executionContext)
		{
			IList<Activity> enabledActivities = activity.EnabledActivities;
			int index = 0;
			for (int num = enabledActivities.Count - 1; num >= 0; num--)
			{
				if (enabledActivities[num].ExecutionStatus == ActivityExecutionStatus.Closed)
				{
					if (num == enabledActivities.Count - 1)
					{
						return false;
					}
					index = num + 1;
					break;
				}
			}
			enabledActivities[index].RegisterForStatusChange(Activity.Closed, (IActivityEventListener<ActivityExecutionStatusChangedEventArgs>)activity);
			executionContext.ExecuteActivity(enabledActivities[index]);
			activity.SetValue(ActiveChildQualifiedNameProperty, enabledActivities[index].QualifiedName);
			return true;
		}

		public static void OnActivityChangeRemove(CompositeActivity activity, ActivityExecutionContext executionContext, Activity removedActivity)
		{
			string value = activity.GetValue(ActiveChildQualifiedNameProperty) as string;
			if (removedActivity.QualifiedName.Equals(value))
			{
				activity.SetValue(ActiveChildRemovedProperty, true);
			}
		}

		public static void OnWorkflowChangesCompleted(CompositeActivity activity, ActivityExecutionContext executionContext)
		{
			string text = activity.GetValue(ActiveChildQualifiedNameProperty) as string;
			bool flag = (bool)activity.GetValue(ActiveChildRemovedProperty);
			if (text != null && flag && (activity.ExecutionStatus == ActivityExecutionStatus.Canceling || activity.ExecutionStatus == ActivityExecutionStatus.Faulting || (activity.ExecutionStatus == ActivityExecutionStatus.Executing && !TryScheduleNextChild(activity, executionContext))))
			{
				activity.RemoveProperty(ActiveChildQualifiedNameProperty);
				executionContext.CloseActivity();
			}
			activity.RemoveProperty(ActiveChildRemovedProperty);
		}
	}
	[SRDescription("SuspendActivityDescription")]
	[ToolboxItem(typeof(ActivityToolboxItem))]
	[Designer(typeof(SuspendDesigner), typeof(IDesigner))]
	[ToolboxBitmap(typeof(SuspendActivity), "Resources.Suspend.png")]
	[ActivityValidator(typeof(SuspendValidator))]
	[SRCategory("Standard")]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class SuspendActivity : Activity
	{
		public static readonly DependencyProperty ErrorProperty = DependencyProperty.Register("Error", typeof(string), typeof(SuspendActivity));

		[Browsable(true)]
		[SRCategory("Activity")]
		[SRDescription("SuspendErrorMessageDescr")]
		[MergableProperty(false)]
		[DefaultValue(null)]
		public string Error
		{
			get
			{
				return GetValue(ErrorProperty) as string;
			}
			set
			{
				SetValue(ErrorProperty, value);
			}
		}

		public SuspendActivity()
		{
		}

		public SuspendActivity(string name)
			: base(name)
		{
		}

		protected internal override void Initialize(IServiceProvider provider)
		{
			if (base.Parent == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_MustHaveParent"));
			}
			base.Initialize(provider);
		}

		protected internal sealed override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)
		{
			executionContext.CloseActivity();
			string error = Error;
			executionContext.SuspendWorkflowInstance(error);
			return ActivityExecutionStatus.Closed;
		}
	}
	internal sealed class SuspendValidator : ActivityValidator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is SuspendActivity { Parent: var parent }))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(SuspendActivity).FullName), "obj");
			}
			while (parent != null)
			{
				if (parent.SupportsTransaction)
				{
					validationErrorCollection.Add(new ValidationError(SR.GetString("Error_SuspendInAtomicScope"), 1317));
					break;
				}
				parent = parent.Parent;
			}
			return validationErrorCollection;
		}
	}
	[SRDescription("TerminateActivityDescription")]
	[ToolboxItem(typeof(ActivityToolboxItem))]
	[Designer(typeof(TerminateDesigner), typeof(IDesigner))]
	[ToolboxBitmap(typeof(TerminateActivity), "Resources.Terminate.png")]
	[SRCategory("Standard")]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class TerminateActivity : Activity
	{
		public static readonly DependencyProperty ErrorProperty = DependencyProperty.Register("Error", typeof(string), typeof(TerminateActivity));

		[Browsable(true)]
		[SRCategory("Activity")]
		[SRDescription("TerminateErrorMessageDescr")]
		[MergableProperty(false)]
		[DefaultValue(null)]
		public string Error
		{
			get
			{
				return (string)GetValue(ErrorProperty);
			}
			set
			{
				SetValue(ErrorProperty, value);
			}
		}

		public TerminateActivity()
		{
		}

		public TerminateActivity(string name)
			: base(name)
		{
		}

		protected internal override void Initialize(IServiceProvider provider)
		{
			if (base.Parent == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_MustHaveParent"));
			}
			base.Initialize(provider);
		}

		protected internal sealed override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)
		{
			executionContext.CloseActivity();
			string error = Error;
			executionContext.TerminateWorkflowInstance(new WorkflowTerminatedException(error));
			return ActivityExecutionStatus.Closed;
		}
	}
	[SRDescription("FaultActivityDescription")]
	[ToolboxItem(typeof(ActivityToolboxItem))]
	[Designer(typeof(ThrowDesigner), typeof(IDesigner))]
	[ToolboxBitmap(typeof(ThrowActivity), "Resources.Throw.png")]
	[SRCategory("Standard")]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ThrowActivity : Activity, ITypeFilterProvider, IDynamicPropertyTypeProvider
	{
		private sealed class FaultConverter : TypeConverter
		{
			public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
			{
				if (sourceType == typeof(string))
				{
					return false;
				}
				return base.CanConvertFrom(context, sourceType);
			}
		}

		private sealed class FaultTypeConverter : TypeConverter
		{
			public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
			{
				if (sourceType == typeof(string))
				{
					return true;
				}
				return base.CanConvertFrom(context, sourceType);
			}

			public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
			{
				object result = value;
				string text = value as string;
				ITypeProvider typeProvider = context.GetService(typeof(ITypeProvider)) as ITypeProvider;
				if (context != null && typeProvider != null && !string.IsNullOrEmpty(text))
				{
					Type type = typeProvider.GetType(text, throwOnError: false);
					if (type != null)
					{
						if (context.Instance is ITypeFilterProvider typeFilterProvider)
						{
							typeFilterProvider.CanFilterType(type, throwOnError: true);
						}
						result = type;
					}
				}
				else if (text != null && text.Length == 0)
				{
					result = null;
				}
				return result;
			}

			public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
			{
				if (destinationType == typeof(string))
				{
					return true;
				}
				return base.CanConvertTo(context, destinationType);
			}

			public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
			{
				if (destinationType == typeof(string))
				{
					Type type = value as Type;
					if (type != null)
					{
						return type.FullName;
					}
				}
				return base.ConvertTo(context, culture, value, destinationType);
			}
		}

		[Browsable(false)]
		public static readonly DependencyProperty FaultProperty = DependencyProperty.Register("Fault", typeof(Exception), typeof(ThrowActivity));

		[Browsable(false)]
		public static readonly DependencyProperty FaultTypeProperty = DependencyProperty.Register("FaultType", typeof(Type), typeof(ThrowActivity));

		[TypeConverter(typeof(FaultConverter))]
		[SRCategory("Handlers")]
		[SRDescription("FaultDescription")]
		[MergableProperty(false)]
		[DefaultValue(null)]
		public Exception Fault
		{
			get
			{
				return GetValue(FaultProperty) as Exception;
			}
			set
			{
				SetValue(FaultProperty, value);
			}
		}

		[Editor(typeof(TypeBrowserEditor), typeof(UITypeEditor))]
		[SRCategory("Handlers")]
		[SRDescription("FaultTypeDescription")]
		[MergableProperty(false)]
		[DefaultValue(null)]
		[TypeConverter(typeof(FaultTypeConverter))]
		public Type FaultType
		{
			get
			{
				return GetValue(FaultTypeProperty) as Type;
			}
			set
			{
				SetValue(FaultTypeProperty, value);
			}
		}

		string ITypeFilterProvider.FilterDescription => SR.GetString("FilterDescription_FaultHandlerActivity");

		public ThrowActivity()
		{
		}

		public ThrowActivity(string name)
			: base(name)
		{
		}

		protected internal override void Initialize(IServiceProvider provider)
		{
			if (base.Parent == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_MustHaveParent"));
			}
			base.Initialize(provider);
		}

		protected internal sealed override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)
		{
			if (Fault == null && FaultType == null)
			{
				throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_PropertyNotSet", FaultProperty.Name));
			}
			if (FaultType != null && !typeof(Exception).IsAssignableFrom(FaultType))
			{
				throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_ExceptionTypeNotException", FaultType, FaultTypeProperty.Name));
			}
			if (Fault != null && FaultType != null && !FaultType.IsInstanceOfType(Fault))
			{
				throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_FaultIsNotOfFaultType"));
			}
			if (Fault != null)
			{
				throw Fault;
			}
			ConstructorInfo constructor = FaultType.GetConstructor(new Type[0]);
			if (constructor != null)
			{
				throw (Exception)constructor.Invoke(null);
			}
			throw new InvalidOperationException(SR.GetString(CultureInfo.CurrentCulture, "Error_FaultTypeNoDefaultConstructor", FaultType));
		}

		bool ITypeFilterProvider.CanFilterType(Type type, bool throwOnError)
		{
			bool flag = TypeProvider.IsAssignable(typeof(Exception), type);
			if (throwOnError && !flag)
			{
				throw new Exception(SR.GetString("Error_ExceptionTypeNotException", type, "Type"));
			}
			return flag;
		}

		Type IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider serviceProvider, string propertyName)
		{
			if (!string.IsNullOrEmpty(propertyName) && propertyName.Equals("Fault", StringComparison.Ordinal))
			{
				return FaultType;
			}
			return null;
		}

		AccessTypes IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider serviceProvider, string propertyName)
		{
			return AccessTypes.Read;
		}
	}
	internal static class LocalAppContextSwitches
	{
		private static int useLegacyHashForXomlFileChecksum;

		public static bool UseLegacyHashForXomlFileChecksum
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return System.LocalAppContext.GetCachedSwitchValue("Switch.System.Workflow.ComponentModel.UseLegacyHashForXomlFileChecksum", ref useLegacyHashForXomlFileChecksum);
			}
		}
	}
	internal static class AppSettings
	{
		private const int DefaultXOMLMaximumNestedObjectDepth = 300;

		private static volatile bool settingsInitialized = false;

		private static object appSettingsLock = new object();

		private static bool allowXCode;

		private static int xomlMaximumNestedObjectDepth;

		private static bool disableActivitySurrogateSelectorTypeCheck;

		private static bool disableXOMLSerializerDefaultUnauthorizedTypes;

		private static bool disableXOMLSerializerTypeChecking;

		private static bool disableXOMLCompilerIdentifierValidation;

		internal static bool AllowXCode
		{
			get
			{
				EnsureSettingsLoaded();
				return allowXCode;
			}
		}

		internal static int XOMLMaximumNestedObjectDepth
		{
			get
			{
				EnsureSettingsLoaded();
				return xomlMaximumNestedObjectDepth;
			}
		}

		internal static bool DisableActivitySurrogateSelectorTypeCheck
		{
			get
			{
				if (NativeMethods.IsDynamicCodePolicyEnabled())
				{
					return false;
				}
				EnsureSettingsLoaded();
				return disableActivitySurrogateSelectorTypeCheck;
			}
		}

		internal static bool DisableXOMLSerializerDefaultUnauthorizedTypes
		{
			get
			{
				if (NativeMethods.IsDynamicCodePolicyEnabled())
				{
					return false;
				}
				EnsureSettingsLoaded();
				return disableXOMLSerializerDefaultUnauthorizedTypes;
			}
		}

		internal static bool DisableXOMLSerializerTypeChecking
		{
			get
			{
				if (NativeMethods.IsDynamicCodePolicyEnabled())
				{
					return false;
				}
				EnsureSettingsLoaded();
				return disableXOMLSerializerTypeChecking;
			}
		}

		internal static bool DisableXOMLCompilerIdentifierValidation
		{
			get
			{
				EnsureSettingsLoaded();
				return disableXOMLCompilerIdentifierValidation;
			}
		}

		private static void EnsureSettingsLoaded()
		{
			if (settingsInitialized)
			{
				return;
			}
			lock (appSettingsLock)
			{
				if (settingsInitialized)
				{
					return;
				}
				NameValueCollection nameValueCollection = null;
				try
				{
					nameValueCollection = ConfigurationManager.AppSettings;
				}
				finally
				{
					if (nameValueCollection == null || !bool.TryParse(nameValueCollection["microsoft:WorkflowComponentModel:XOMLAllowXCodeInDisabledActivities"], out allowXCode))
					{
						allowXCode = false;
					}
					if (nameValueCollection == null || !int.TryParse(nameValueCollection["microsoft:WorkflowComponentModel:XOMLMaximumNestedObjectDepth"], out xomlMaximumNestedObjectDepth))
					{
						xomlMaximumNestedObjectDepth = 300;
					}
					if (nameValueCollection == null || !bool.TryParse(nameValueCollection["microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck"], out disableActivitySurrogateSelectorTypeCheck))
					{
						disableActivitySurrogateSelectorTypeCheck = false;
					}
					if (nameValueCollection == null || !bool.TryParse(nameValueCollection["microsoft:WorkflowComponentModel:DisableXOMLSerializerDefaultUnauthorizedTypes"], out disableXOMLSerializerDefaultUnauthorizedTypes))
					{
						disableXOMLSerializerDefaultUnauthorizedTypes = false;
					}
					if (nameValueCollection == null || !bool.TryParse(nameValueCollection["microsoft:WorkflowComponentModel:DisableXOMLSerializerTypeChecking"], out disableXOMLSerializerTypeChecking))
					{
						disableXOMLSerializerTypeChecking = false;
					}
					if (nameValueCollection == null || !bool.TryParse(nameValueCollection["microsoft:WorkflowComponentModel:DisableXOMLCompilerIdentifierValidation"], out disableXOMLCompilerIdentifierValidation))
					{
						disableXOMLCompilerIdentifierValidation = false;
					}
					settingsInitialized = true;
				}
			}
		}
	}
	internal abstract class ActivityExecutionFilter : ActivityExecutor, ISupportWorkflowChanges
	{
		public virtual void OnActivityAdded(ActivityExecutionContext executionContext, Activity addedActivity)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (addedActivity == null)
			{
				throw new ArgumentNullException("addedActivity");
			}
			NextDynamicChangeExecutorInChain(executionContext.Activity).OnActivityAdded(executionContext, addedActivity);
		}

		public virtual void OnActivityRemoved(ActivityExecutionContext executionContext, Activity removedActivity)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (removedActivity == null)
			{
				throw new ArgumentNullException("removedActivity");
			}
			NextDynamicChangeExecutorInChain(executionContext.Activity).OnActivityRemoved(executionContext, removedActivity);
		}

		public virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			NextDynamicChangeExecutorInChain(executionContext.Activity).OnWorkflowChangesCompleted(executionContext);
		}

		public override ActivityExecutionStatus Execute(Activity activity, ActivityExecutionContext executionContext)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			return NextActivityExecutorInChain(executionContext.Activity).Execute(activity, executionContext);
		}

		public override ActivityExecutionStatus Cancel(Activity activity, ActivityExecutionContext executionContext)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			ActivityExecutor activityExecutor = NextActivityExecutorInChain(executionContext.Activity);
			if (!(activityExecutor is ActivityExecutionFilter) && executionContext.Activity.HasPrimaryClosed)
			{
				return ActivityExecutionStatus.Closed;
			}
			return activityExecutor.Cancel(activity, executionContext);
		}

		public override ActivityExecutionStatus HandleFault(Activity activity, ActivityExecutionContext executionContext, Exception exception)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (exception == null)
			{
				throw new ArgumentNullException("exception");
			}
			ActivityExecutor activityExecutor = NextActivityExecutorInChain(executionContext.Activity);
			if (!(activityExecutor is ActivityExecutionFilter) && executionContext.Activity.HasPrimaryClosed)
			{
				return ActivityExecutionStatus.Closed;
			}
			return activityExecutor.HandleFault(activity, executionContext, exception);
		}

		public override ActivityExecutionStatus Compensate(Activity activity, ActivityExecutionContext executionContext)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			return NextActivityExecutorInChain(executionContext.Activity).Compensate(activity, executionContext);
		}

		protected ActivityExecutor NextActivityExecutorInChain(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			ActivityExecutor result = null;
			IList activityExecutors = ActivityExecutors.GetActivityExecutors(activity);
			int num = activityExecutors.IndexOf(this);
			if (num < activityExecutors.Count - 1)
			{
				result = (ActivityExecutor)activityExecutors[num + 1];
			}
			return result;
		}

		protected ISupportWorkflowChanges NextDynamicChangeExecutorInChain(Activity activity)
		{
			return NextActivityExecutorInChain(activity) as ISupportWorkflowChanges;
		}
	}
	internal class CompensationHandlingFilter : ActivityExecutionFilter, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>
	{
		public static DependencyProperty CompensateProcessedProperty = DependencyProperty.RegisterAttached("CompensateProcessed", typeof(bool), typeof(CompensationHandlingFilter), new PropertyMetadata(false));

		internal static DependencyProperty LastCompensatedOrderIdProperty = DependencyProperty.RegisterAttached("LastCompensatedOrderId", typeof(int), typeof(CompensationHandlingFilter), new PropertyMetadata(false));

		public override ActivityExecutionStatus Compensate(Activity activity, ActivityExecutionContext executionContext)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			executionContext.Activity.HoldLockOnStatusChange(this);
			return NextActivityExecutorInChain(activity).Compensate(activity, executionContext);
		}

		void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			if (!(sender is ActivityExecutionContext activityExecutionContext))
			{
				throw new ArgumentException("sender");
			}
			if (e.Activity == activityExecutionContext.Activity)
			{
				if (!activityExecutionContext.Activity.HasPrimaryClosed || (bool)activityExecutionContext.Activity.GetValue(CompensateProcessedProperty))
				{
					return;
				}
				activityExecutionContext.Activity.SetValue(CompensateProcessedProperty, true);
				if (activityExecutionContext.Activity.ExecutionResult == ActivityExecutionResult.Compensated)
				{
					Activity compensationHandler = GetCompensationHandler(activityExecutionContext.Activity);
					if (compensationHandler != null)
					{
						compensationHandler.RegisterForStatusChange(Activity.Closed, this);
						activityExecutionContext.ExecuteActivity(compensationHandler);
					}
					else if (!CompensationUtils.TryCompensateLastCompletedChildActivity(activityExecutionContext, activityExecutionContext.Activity, this))
					{
						activityExecutionContext.Activity.ReleaseLockOnStatusChange(this);
					}
				}
				else
				{
					activityExecutionContext.Activity.ReleaseLockOnStatusChange(this);
				}
			}
			else if (e.Activity is CompensationHandlerActivity && e.ExecutionStatus == ActivityExecutionStatus.Closed)
			{
				e.Activity.UnregisterForStatusChange(Activity.Closed, this);
				activityExecutionContext.Activity.ReleaseLockOnStatusChange(this);
			}
			else if (e.ExecutionStatus == ActivityExecutionStatus.Closed)
			{
				e.Activity.UnregisterForStatusChange(Activity.Closed, this);
				if (!CompensationUtils.TryCompensateLastCompletedChildActivity(activityExecutionContext, activityExecutionContext.Activity, this))
				{
					activityExecutionContext.Activity.ReleaseLockOnStatusChange(this);
				}
			}
		}

		internal static Activity GetCompensationHandler(Activity activityWithCompensation)
		{
			Activity result = null;
			if (activityWithCompensation is CompositeActivity compositeActivity)
			{
				foreach (Activity alternateFlowActivity in ((ISupportAlternateFlow)compositeActivity).AlternateFlowActivities)
				{
					if (alternateFlowActivity is CompensationHandlerActivity)
					{
						result = alternateFlowActivity;
						break;
					}
				}
			}
			return result;
		}
	}
	internal static class CompensationUtils
	{
		private sealed class CompensationInfo
		{
			private Activity targetActivity;

			private ActivityExecutionContext targetExecutionContext;

			private ActivityExecutionContextInfo targetExecutionInfo;

			private ActivityExecutionContextManager targetExecutionContextManager;

			internal Activity TargetActivity => targetActivity;

			internal ActivityExecutionContext TargetExecutionContext => targetExecutionContext;

			internal ActivityExecutionContextInfo TargetExecutionInfo => targetExecutionInfo;

			internal ActivityExecutionContextManager TargetExecutionContextManager => targetExecutionContextManager;

			internal CompensationInfo(ActivityExecutionContextInfo targetExecutionInfo, ActivityExecutionContextManager targetExecutionContextManager)
			{
				this.targetExecutionInfo = targetExecutionInfo;
				this.targetExecutionContextManager = targetExecutionContextManager;
			}

			internal CompensationInfo(Activity targetActivity)
			{
				this.targetActivity = targetActivity;
			}

			internal CompensationInfo(ActivityExecutionContext targetExecutionContext)
			{
				this.targetExecutionContext = targetExecutionContext;
			}
		}

		internal static bool TryCompensateLastCompletedChildActivity(ActivityExecutionContext context, Activity targetActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs> statusChangeHandler)
		{
			try
			{
				return TryCompensateLastCompletedChildActivity(context, targetActivity, statusChangeHandler, isimmediateCompensation: true);
			}
			catch (Exception)
			{
				if (targetActivity.Parent == null)
				{
					CompleteRevokedExecutionContext(targetActivity, context);
				}
				throw;
			}
		}

		private static bool TryCompensateLastCompletedChildActivity(ActivityExecutionContext context, Activity targetActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs> statusChangeHandler, bool isimmediateCompensation)
		{
			SortedDictionary<int, CompensationInfo> sortedDictionary = new SortedDictionary<int, CompensationInfo>();
			if (!(targetActivity is CompositeActivity))
			{
				return false;
			}
			if (CollectCompensatableTargetActivities(targetActivity as CompositeActivity, sortedDictionary, isimmediateCompensation))
			{
				return true;
			}
			if (CollectCompensatableActiveContexts(context, targetActivity, sortedDictionary, isimmediateCompensation))
			{
				return true;
			}
			CollectCompensatableCompletedContexts(context, targetActivity, sortedDictionary, isimmediateCompensation);
			if (sortedDictionary.Count == 0)
			{
				CompleteRevokedExecutionContext(targetActivity, context);
				return false;
			}
			int? num = targetActivity.GetValue(CompensationHandlingFilter.LastCompensatedOrderIdProperty) as int?;
			int num2 = -1;
			CompensationInfo compensationInfo = null;
			foreach (int key in sortedDictionary.Keys)
			{
				if (num.HasValue && num < key)
				{
					break;
				}
				compensationInfo = sortedDictionary[key];
				num2 = key;
			}
			if (compensationInfo == null)
			{
				CompleteRevokedExecutionContext(targetActivity, context);
				return false;
			}
			targetActivity.SetValue(CompensationHandlingFilter.LastCompensatedOrderIdProperty, num2);
			if (compensationInfo.TargetActivity != null && compensationInfo.TargetActivity is ICompensatableActivity)
			{
				compensationInfo.TargetActivity.RegisterForStatusChange(Activity.StatusChanged, statusChangeHandler);
				context.CompensateActivity(compensationInfo.TargetActivity);
				return true;
			}
			if (compensationInfo.TargetExecutionInfo != null && compensationInfo.TargetExecutionContextManager != null)
			{
				ActivityExecutionContext activityExecutionContext = compensationInfo.TargetExecutionContextManager.DiscardPersistedExecutionContext(compensationInfo.TargetExecutionInfo);
				if (activityExecutionContext.Activity is ICompensatableActivity)
				{
					activityExecutionContext.Activity.RegisterForStatusChange(Activity.StatusChanged, statusChangeHandler);
					activityExecutionContext.CompensateActivity(activityExecutionContext.Activity);
					return true;
				}
				if (activityExecutionContext.Activity is CompositeActivity)
				{
					Activity lastCompensatableChild = GetLastCompensatableChild(activityExecutionContext.Activity as CompositeActivity);
					if (lastCompensatableChild != null)
					{
						lastCompensatableChild.RegisterForStatusChange(Activity.StatusChanged, statusChangeHandler);
						activityExecutionContext.CompensateActivity(lastCompensatableChild);
						return true;
					}
					return TryCompensateLastCompletedChildActivity(activityExecutionContext, activityExecutionContext.Activity, statusChangeHandler, isimmediateCompensation: false);
				}
			}
			else if (compensationInfo.TargetExecutionContext != null && compensationInfo.TargetExecutionContext.Activity is CompositeActivity)
			{
				Activity lastCompensatableChild2 = GetLastCompensatableChild(compensationInfo.TargetExecutionContext.Activity as CompositeActivity);
				if (lastCompensatableChild2 != null)
				{
					lastCompensatableChild2.RegisterForStatusChange(Activity.StatusChanged, statusChangeHandler);
					compensationInfo.TargetExecutionContext.CompensateActivity(lastCompensatableChild2);
					return true;
				}
				return TryCompensateLastCompletedChildActivity(compensationInfo.TargetExecutionContext, compensationInfo.TargetExecutionContext.Activity, statusChangeHandler, isimmediateCompensation: false);
			}
			return false;
		}

		private static void CompleteRevokedExecutionContext(Activity targetActivity, ActivityExecutionContext context)
		{
			ActivityExecutionContext[] array = new ActivityExecutionContext[context.ExecutionContextManager.ExecutionContexts.Count];
			context.ExecutionContextManager.ExecutionContexts.CopyTo(array, 0);
			ActivityExecutionContext[] array2 = array;
			foreach (ActivityExecutionContext activityExecutionContext in array2)
			{
				if (targetActivity.GetActivityByName(activityExecutionContext.Activity.QualifiedName, withinThisActivityOnly: true) != null)
				{
					if (activityExecutionContext.Activity.ExecutionStatus == ActivityExecutionStatus.Closed)
					{
						CompleteRevokedExecutionContext(activityExecutionContext.Activity, activityExecutionContext);
					}
					context.ExecutionContextManager.CompleteExecutionContext(activityExecutionContext);
				}
			}
		}

		private static bool CollectCompensatableTargetActivities(CompositeActivity compositeActivity, SortedDictionary<int, CompensationInfo> sortedListOfCompensatableTargets, bool immediateCompensation)
		{
			Queue<Activity> queue = new Queue<Activity>(Helpers.GetAllEnabledActivities(compositeActivity));
			while (queue.Count > 0)
			{
				Activity activity = queue.Dequeue();
				if (activity.ExecutionStatus == ActivityExecutionStatus.Compensating || activity.ExecutionStatus == ActivityExecutionStatus.Faulting || activity.ExecutionStatus == ActivityExecutionStatus.Canceling)
				{
					return true;
				}
				if (immediateCompensation && IsActivityInBackWorkBranch(compositeActivity, activity))
				{
					continue;
				}
				if (activity is ICompensatableActivity && activity.ExecutionStatus == ActivityExecutionStatus.Closed && activity.ExecutionResult == ActivityExecutionResult.Succeeded)
				{
					sortedListOfCompensatableTargets.Add((int)activity.GetValue(Activity.CompletedOrderIdProperty), new CompensationInfo(activity));
				}
				else
				{
					if (!(activity is CompositeActivity))
					{
						continue;
					}
					foreach (Activity allEnabledActivity in Helpers.GetAllEnabledActivities((CompositeActivity)activity))
					{
						queue.Enqueue(allEnabledActivity);
					}
				}
			}
			return false;
		}

		private static bool CollectCompensatableActiveContexts(ActivityExecutionContext context, Activity targetActivity, SortedDictionary<int, CompensationInfo> sortedListOfCompensatableTargets, bool immediateCompensation)
		{
			ActivityExecutionContextManager executionContextManager = context.ExecutionContextManager;
			foreach (ActivityExecutionContext executionContext in executionContextManager.ExecutionContexts)
			{
				if (targetActivity.GetActivityByName(executionContext.Activity.QualifiedName, withinThisActivityOnly: true) == null || (immediateCompensation && IsActivityInBackWorkBranch(targetActivity, executionContext.Activity)))
				{
					continue;
				}
				if (executionContext.Activity is ICompensatableActivity && (executionContext.Activity.ExecutionStatus == ActivityExecutionStatus.Compensating || executionContext.Activity.ExecutionStatus == ActivityExecutionStatus.Faulting || executionContext.Activity.ExecutionStatus == ActivityExecutionStatus.Canceling))
				{
					return true;
				}
				if (!(executionContext.Activity is CompositeActivity))
				{
					continue;
				}
				Activity[] compensatableChildren = GetCompensatableChildren(executionContext.Activity as CompositeActivity);
				if (compensatableChildren != null)
				{
					int num = 0;
					Activity[] array = compensatableChildren;
					foreach (Activity activity in array)
					{
						int num2 = (int)activity.GetValue(Activity.CompletedOrderIdProperty);
						if (num < num2)
						{
							num = num2;
						}
					}
					if (num != 0)
					{
						sortedListOfCompensatableTargets.Add(num, new CompensationInfo(executionContext));
					}
				}
				CollectCompensatableActiveContexts(executionContext, targetActivity, sortedListOfCompensatableTargets, immediateCompensation);
				CollectCompensatableCompletedContexts(executionContext, targetActivity, sortedListOfCompensatableTargets, immediateCompensation);
			}
			return false;
		}

		private static bool IsActivityInBackWorkBranch(Activity targetParent, Activity childActivity)
		{
			Activity activity = childActivity;
			while (activity.Parent != targetParent)
			{
				activity = activity.Parent;
			}
			return Helpers.IsFrameworkActivity(activity);
		}

		private static void CollectCompensatableCompletedContexts(ActivityExecutionContext context, Activity targetActivity, SortedDictionary<int, CompensationInfo> sortedListOfCompensatableTargets, bool immediateCompensation)
		{
			ActivityExecutionContextManager executionContextManager = context.ExecutionContextManager;
			for (int num = executionContextManager.CompletedExecutionContexts.Count - 1; num >= 0; num--)
			{
				ActivityExecutionContextInfo activityExecutionContextInfo = executionContextManager.CompletedExecutionContexts[num];
				if ((activityExecutionContextInfo.Flags & PersistFlags.NeedsCompensation) != 0)
				{
					Activity activityByName = targetActivity.GetActivityByName(activityExecutionContextInfo.ActivityQualifiedName, withinThisActivityOnly: true);
					if (activityByName != null && (!immediateCompensation || !IsActivityInBackWorkBranch(targetActivity, activityByName)))
					{
						sortedListOfCompensatableTargets.Add(activityExecutionContextInfo.CompletedOrderId, new CompensationInfo(activityExecutionContextInfo, executionContextManager));
					}
				}
			}
		}

		internal static Activity[] GetCompensatableChildren(CompositeActivity compositeActivity)
		{
			SortedDictionary<int, Activity> sortedDictionary = new SortedDictionary<int, Activity>();
			Queue<Activity> queue = new Queue<Activity>(Helpers.GetAllEnabledActivities(compositeActivity));
			while (queue.Count > 0)
			{
				Activity activity = queue.Dequeue();
				if (activity is ICompensatableActivity && activity.ExecutionStatus == ActivityExecutionStatus.Closed && activity.ExecutionResult == ActivityExecutionResult.Succeeded)
				{
					sortedDictionary.Add((int)activity.GetValue(Activity.CompletedOrderIdProperty), activity);
				}
				else
				{
					if (!(activity is CompositeActivity))
					{
						continue;
					}
					foreach (Activity allEnabledActivity in Helpers.GetAllEnabledActivities((CompositeActivity)activity))
					{
						queue.Enqueue(allEnabledActivity);
					}
				}
			}
			Activity[] array = new Activity[sortedDictionary.Count];
			sortedDictionary.Values.CopyTo(array, 0);
			return array;
		}

		internal static Activity GetLastCompensatableChild(CompositeActivity compositeActivity)
		{
			Activity[] compensatableChildren = GetCompensatableChildren(compositeActivity);
			if (compensatableChildren != null && compensatableChildren.Length != 0 && compensatableChildren[compensatableChildren.Length - 1] != null)
			{
				return compensatableChildren[compensatableChildren.Length - 1];
			}
			return null;
		}
	}
	internal sealed class FaultAndCancellationHandlingFilter : ActivityExecutionFilter, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>
	{
		public static DependencyProperty FaultProcessedProperty = DependencyProperty.RegisterAttached("FaultProcessed", typeof(bool), typeof(FaultAndCancellationHandlingFilter), new PropertyMetadata(false));

		public override ActivityExecutionStatus Execute(Activity activity, ActivityExecutionContext executionContext)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (!(activity is CompositeActivity))
			{
				throw new InvalidOperationException("activity");
			}
			executionContext.Activity.HoldLockOnStatusChange(this);
			return base.Execute(activity, executionContext);
		}

		public override ActivityExecutionStatus HandleFault(Activity activity, ActivityExecutionContext executionContext, Exception exception)
		{
			if (!activity.HasPrimaryClosed)
			{
				return base.HandleFault(activity, executionContext, exception);
			}
			Activity faultHandlers = GetFaultHandlers(executionContext.Activity);
			if (faultHandlers != null && faultHandlers.ExecutionStatus != ActivityExecutionStatus.Closed && faultHandlers.ExecutionStatus != 0)
			{
				if (faultHandlers.ExecutionStatus == ActivityExecutionStatus.Executing)
				{
					executionContext.CancelActivity(faultHandlers);
				}
				return ActivityExecutionStatus.Faulting;
			}
			faultHandlers = GetCancellationHandler(executionContext.Activity);
			if (faultHandlers != null && faultHandlers.ExecutionStatus != ActivityExecutionStatus.Closed && faultHandlers.ExecutionStatus != 0)
			{
				if (faultHandlers.ExecutionStatus == ActivityExecutionStatus.Executing)
				{
					executionContext.CancelActivity(faultHandlers);
				}
				return ActivityExecutionStatus.Faulting;
			}
			if ((bool)activity.GetValue(FaultProcessedProperty))
			{
				SafeReleaseLockOnStatusChange(executionContext);
			}
			return base.HandleFault(activity, executionContext, exception);
		}

		public void OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			if (!(sender is ActivityExecutionContext activityExecutionContext))
			{
				throw new ArgumentException("sender");
			}
			if (e.Activity == activityExecutionContext.Activity)
			{
				if (!activityExecutionContext.Activity.HasPrimaryClosed || (bool)activityExecutionContext.Activity.GetValue(FaultProcessedProperty))
				{
					return;
				}
				activityExecutionContext.Activity.SetValue(FaultProcessedProperty, true);
				if (activityExecutionContext.Activity.WasExecuting && activityExecutionContext.Activity.ExecutionResult == ActivityExecutionResult.Faulted && activityExecutionContext.Activity.GetValue(ActivityExecutionContext.CurrentExceptionProperty) != null)
				{
					CompositeActivity faultHandlers = GetFaultHandlers(activityExecutionContext.Activity);
					if (faultHandlers != null)
					{
						faultHandlers.RegisterForStatusChange(Activity.Closed, this);
						activityExecutionContext.ExecuteActivity(faultHandlers);
					}
					else if (!CompensationUtils.TryCompensateLastCompletedChildActivity(activityExecutionContext, activityExecutionContext.Activity, this))
					{
						SafeReleaseLockOnStatusChange(activityExecutionContext);
					}
				}
				else if (activityExecutionContext.Activity.ExecutionResult == ActivityExecutionResult.Canceled)
				{
					Activity cancellationHandler = GetCancellationHandler(activityExecutionContext.Activity);
					if (cancellationHandler != null)
					{
						cancellationHandler.RegisterForStatusChange(Activity.Closed, this);
						activityExecutionContext.ExecuteActivity(cancellationHandler);
					}
					else if (!CompensationUtils.TryCompensateLastCompletedChildActivity(activityExecutionContext, activityExecutionContext.Activity, this))
					{
						SafeReleaseLockOnStatusChange(activityExecutionContext);
					}
				}
				else
				{
					SafeReleaseLockOnStatusChange(activityExecutionContext);
				}
			}
			else if ((e.Activity is FaultHandlersActivity || e.Activity is CancellationHandlerActivity) && e.ExecutionStatus == ActivityExecutionStatus.Closed)
			{
				e.Activity.UnregisterForStatusChange(Activity.Closed, this);
				if (activityExecutionContext.Activity.GetValue(ActivityExecutionContext.CurrentExceptionProperty) != null)
				{
					if (!CompensationUtils.TryCompensateLastCompletedChildActivity(activityExecutionContext, activityExecutionContext.Activity, this))
					{
						SafeReleaseLockOnStatusChange(activityExecutionContext);
					}
				}
				else
				{
					SafeReleaseLockOnStatusChange(activityExecutionContext);
				}
			}
			else if (e.ExecutionStatus == ActivityExecutionStatus.Closed)
			{
				e.Activity.UnregisterForStatusChange(Activity.Closed, this);
				if (!CompensationUtils.TryCompensateLastCompletedChildActivity(activityExecutionContext, activityExecutionContext.Activity, this))
				{
					SafeReleaseLockOnStatusChange(activityExecutionContext);
				}
			}
		}

		private void SafeReleaseLockOnStatusChange(ActivityExecutionContext context)
		{
			try
			{
				context.Activity.ReleaseLockOnStatusChange(this);
			}
			catch (Exception)
			{
				context.Activity.RemoveProperty(FaultProcessedProperty);
				throw;
			}
		}

		internal static CompositeActivity GetFaultHandlers(Activity activityWithExceptionHandlers)
		{
			CompositeActivity result = null;
			if (activityWithExceptionHandlers is CompositeActivity compositeActivity)
			{
				foreach (Activity alternateFlowActivity in ((ISupportAlternateFlow)compositeActivity).AlternateFlowActivities)
				{
					if (alternateFlowActivity is FaultHandlersActivity)
					{
						result = alternateFlowActivity as CompositeActivity;
						break;
					}
				}
			}
			return result;
		}

		internal static Activity GetCancellationHandler(Activity activityWithCancelHandler)
		{
			Activity result = null;
			if (activityWithCancelHandler is CompositeActivity compositeActivity)
			{
				foreach (Activity alternateFlowActivity in ((ISupportAlternateFlow)compositeActivity).AlternateFlowActivities)
				{
					if (alternateFlowActivity is CancellationHandlerActivity)
					{
						result = alternateFlowActivity;
						break;
					}
				}
			}
			return result;
		}
	}
	internal sealed class TransactedContextFilter : ActivityExecutionFilter, IActivityEventListener<EventArgs>, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>
	{
		public override ActivityExecutionStatus Execute(Activity activity, ActivityExecutionContext executionContext)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (!activity.SupportsTransaction)
			{
				throw new ArgumentException("activity");
			}
			activity.RegisterForStatusChange(Activity.LockCountOnStatusChangeChangedEvent, this);
			activity.HoldLockOnStatusChange(this);
			return ExecuteActivity(activity, executionContext, locksAcquired: false);
		}

		void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			if (!(sender is ActivityExecutionContext activityExecutionContext))
			{
				throw new ArgumentException("sender");
			}
			if (!activityExecutionContext.Activity.HasPrimaryClosed || activityExecutionContext.Activity.LockCountOnStatusChange != 1)
			{
				return;
			}
			Exception ex = (Exception)activityExecutionContext.Activity.GetValue(ActivityExecutionContext.CurrentExceptionProperty);
			if (ex != null)
			{
				WorkflowTransactionOptions transactionOptions = GetTransactionOptions(activityExecutionContext.Activity);
				if (transactionOptions != null)
				{
					activityExecutionContext.RequestRevertToCheckpointState(OnRevertInstanceState, new StateRevertedEventArgs(ex), suspendOnRevert: false, null);
					return;
				}
				activityExecutionContext.ReleaseLocks(transactional: false);
				activityExecutionContext.Activity.UnregisterForStatusChange(Activity.LockCountOnStatusChangeChangedEvent, this);
				activityExecutionContext.Activity.ReleaseLockOnStatusChange(this);
				return;
			}
			try
			{
				activityExecutionContext.ReleaseLocks(transactional: true);
				activityExecutionContext.Activity.UnregisterForStatusChange(Activity.LockCountOnStatusChangeChangedEvent, this);
				activityExecutionContext.Activity.ReleaseLockOnStatusChange(this);
				activityExecutionContext.DisposeCheckpointState();
			}
			catch
			{
				activityExecutionContext.Activity.RegisterForStatusChange(Activity.LockCountOnStatusChangeChangedEvent, this);
				throw;
			}
		}

		private void OnRevertInstanceState(object sender, EventArgs e)
		{
			if (sender == null)
			{
				throw new ArgumentNullException("sender");
			}
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			ActivityExecutionContext activityExecutionContext = sender as ActivityExecutionContext;
			StateRevertedEventArgs stateRevertedEventArgs = e as StateRevertedEventArgs;
			activityExecutionContext.Activity.SetValueCommon(ActivityExecutionContext.CurrentExceptionProperty, stateRevertedEventArgs.Exception, ActivityExecutionContext.CurrentExceptionProperty.DefaultMetadata, shouldCallSetValueOverrideIfExists: false);
			activityExecutionContext.ReleaseLocks(transactional: false);
			activityExecutionContext.Activity.UnregisterForStatusChange(Activity.LockCountOnStatusChangeChangedEvent, this);
			activityExecutionContext.Activity.ReleaseLockOnStatusChange(this);
		}

		void IActivityEventListener<EventArgs>.OnEvent(object sender, EventArgs e)
		{
			ActivityExecutionContext activityExecutionContext = (ActivityExecutionContext)sender;
			if (activityExecutionContext.Activity.ExecutionStatus == ActivityExecutionStatus.Executing)
			{
				ActivityExecutionStatus activityExecutionStatus = ExecuteActivity(activityExecutionContext.Activity, activityExecutionContext, locksAcquired: true);
				if (activityExecutionStatus == ActivityExecutionStatus.Closed)
				{
					activityExecutionContext.CloseActivity();
				}
			}
		}

		private static ActivityExecutionStatus ExecuteActivity(Activity activity, ActivityExecutionContext context, bool locksAcquired)
		{
			TransactedContextFilter transactedContextFilter = (TransactedContextFilter)ActivityExecutors.GetActivityExecutorFromType(typeof(TransactedContextFilter));
			if (!locksAcquired && !context.AcquireLocks(transactedContextFilter))
			{
				return activity.ExecutionStatus;
			}
			WorkflowTransactionOptions transactionOptions = GetTransactionOptions(activity);
			if (transactionOptions != null)
			{
				context.CheckpointInstanceState();
			}
			return transactedContextFilter.NextActivityExecutorInChain(activity).Execute(activity, context);
		}

		internal static WorkflowTransactionOptions GetTransactionOptions(Activity activity)
		{
			return activity.GetValue((activity is TransactionScopeActivity) ? TransactionScopeActivity.TransactionOptionsProperty : CompensatableTransactionScopeActivity.TransactionOptionsProperty) as WorkflowTransactionOptions;
		}
	}
	[Serializable]
	internal class StateRevertedEventArgs : EventArgs
	{
		public Exception Exception;

		public StateRevertedEventArgs(Exception exception)
		{
			Exception = exception;
		}
	}
	internal sealed class SynchronizationFilter : ActivityExecutionFilter, IActivityEventListener<EventArgs>, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>
	{
		public override ActivityExecutionStatus Execute(Activity activity, ActivityExecutionContext executionContext)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			activity.RegisterForStatusChange(Activity.LockCountOnStatusChangeChangedEvent, this);
			activity.HoldLockOnStatusChange(this);
			if (executionContext.AcquireLocks(this))
			{
				return ExecuteActivityNow(executionContext);
			}
			return activity.ExecutionStatus;
		}

		private ActivityExecutionStatus ExecuteActivityNow(ActivityExecutionContext context)
		{
			return NextActivityExecutorInChain(context.Activity).Execute(context.Activity, context);
		}

		public void OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			ActivityExecutionContext activityExecutionContext = sender as ActivityExecutionContext;
			if (activityExecutionContext.Activity.HasPrimaryClosed && activityExecutionContext.Activity.LockCountOnStatusChange == 1)
			{
				activityExecutionContext.ReleaseLocks(transactional: false);
				activityExecutionContext.Activity.UnregisterForStatusChange(Activity.LockCountOnStatusChangeChangedEvent, this);
				activityExecutionContext.Activity.ReleaseLockOnStatusChange(this);
			}
		}

		public void OnEvent(object sender, EventArgs e)
		{
			ActivityExecutionContext activityExecutionContext = (ActivityExecutionContext)sender;
			if (activityExecutionContext.Activity.ExecutionStatus == ActivityExecutionStatus.Executing)
			{
				ActivityExecutionStatus activityExecutionStatus = ExecuteActivityNow(activityExecutionContext);
				if (activityExecutionStatus == ActivityExecutionStatus.Closed)
				{
					activityExecutionContext.CloseActivity();
				}
			}
		}
	}
	[Browsable(true)]
	[DesignerSerializer(typeof(DependencyObjectCodeDomSerializer), typeof(CodeDomSerializer))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowTransactionOptions : DependencyObject
	{
		public static readonly DependencyProperty TimeoutDurationProperty = DependencyProperty.Register("TimeoutDuration", typeof(TimeSpan), typeof(WorkflowTransactionOptions), new PropertyMetadata(new TimeSpan(0, 0, 30), DependencyPropertyOptions.Metadata));

		public static readonly DependencyProperty IsolationLevelProperty = DependencyProperty.Register("IsolationLevel", typeof(IsolationLevel), typeof(WorkflowTransactionOptions), new PropertyMetadata(IsolationLevel.Serializable, DependencyPropertyOptions.Metadata));

		[SRDescription("TimeoutDescr")]
		[SRCategory("Activity")]
		[MergableProperty(false)]
		[DefaultValue(typeof(TimeSpan), "0:0:30")]
		[TypeConverter(typeof(TimeoutDurationConverter))]
		public TimeSpan TimeoutDuration
		{
			get
			{
				return (TimeSpan)GetValue(TimeoutDurationProperty);
			}
			set
			{
				SetValue(TimeoutDurationProperty, value);
			}
		}

		[SRDescription("IsolationLevelDescr")]
		[SRCategory("Activity")]
		[MergableProperty(false)]
		public IsolationLevel IsolationLevel
		{
			get
			{
				return (IsolationLevel)GetValue(IsolationLevelProperty);
			}
			set
			{
				SetValue(IsolationLevelProperty, value);
			}
		}
	}
	internal sealed class TimeoutDurationConverter : TypeConverter
	{
		public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
		{
			if (destinationType == typeof(string))
			{
				return true;
			}
			return base.CanConvertTo(context, destinationType);
		}

		public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
		{
			if (destinationType == typeof(string) && value is TimeSpan timeSpan)
			{
				return timeSpan.ToString();
			}
			return base.ConvertTo(context, culture, value, destinationType);
		}

		public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
		{
			if (sourceType == typeof(string))
			{
				return true;
			}
			return base.CanConvertFrom(context, sourceType);
		}

		public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
		{
			TimeSpan timeSpan = TimeSpan.Zero;
			string text = value as string;
			if (!string.IsNullOrEmpty(text))
			{
				try
				{
					timeSpan = TimeSpan.Parse(text, CultureInfo.InvariantCulture);
				}
				catch
				{
				}
				if (timeSpan.Ticks < 0)
				{
					throw new Exception(string.Format(CultureInfo.CurrentCulture, SR.GetString("Error_NegativeValue"), new object[2]
					{
						value.ToString(),
						"TimeoutDuration"
					}));
				}
			}
			return timeSpan;
		}

		public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
		{
			return true;
		}

		public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
		{
			ArrayList arrayList = new ArrayList();
			arrayList.Add(new TimeSpan(0, 0, 0));
			arrayList.Add(new TimeSpan(0, 0, 15));
			arrayList.Add(new TimeSpan(0, 1, 0));
			return new StandardValuesCollection(arrayList);
		}
	}
	[SRDescription("TransactionalContextActivityDescription")]
	[ToolboxItem(typeof(ActivityToolboxItem))]
	[ToolboxBitmap(typeof(TransactionScopeActivity), "Resources.Sequence.png")]
	[Designer(typeof(TransactionScopeActivityDesigner), typeof(IDesigner))]
	[PersistOnClose]
	[SupportsTransaction]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class TransactionScopeActivity : CompositeActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>
	{
		internal static readonly DependencyProperty TransactionOptionsProperty = DependencyProperty.Register("TransactionOptions", typeof(WorkflowTransactionOptions), typeof(TransactionScopeActivity), new PropertyMetadata(DependencyPropertyOptions.Metadata, new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)));

		internal static readonly string TransactionScopeActivityIsolationHandle = "A1DAF1E7-E9E7-4df2-B88F-3A92E1D744F2";

		[SRDescription("TransactionDesc")]
		[MergableProperty(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[ReadOnly(true)]
		public WorkflowTransactionOptions TransactionOptions
		{
			get
			{
				return (WorkflowTransactionOptions)GetValue(TransactionOptionsProperty);
			}
			set
			{
				SetValue(TransactionOptionsProperty, value);
			}
		}

		public TransactionScopeActivity()
		{
			SetValueBase(TransactionOptionsProperty, new WorkflowTransactionOptions());
		}

		public TransactionScopeActivity(string name)
			: base(name)
		{
			SetValueBase(TransactionOptionsProperty, new WorkflowTransactionOptions());
		}

		protected internal override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)
		{
			return SequenceHelper.Execute(this, executionContext);
		}

		protected internal override ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext)
		{
			return SequenceHelper.Cancel(this, executionContext);
		}

		void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			SequenceHelper.OnEvent(this, sender, e);
		}

		protected internal override void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity)
		{
			SequenceHelper.OnActivityChangeRemove(this, executionContext, removedActivity);
		}

		protected internal override void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext)
		{
			SequenceHelper.OnWorkflowChangesCompleted(this, executionContext);
		}
	}
	[SRDescription("SynchronizationScopeActivityDescription")]
	[ToolboxItem(typeof(ActivityToolboxItem))]
	[ToolboxBitmap(typeof(SynchronizationScopeActivity), "Resources.Sequence.png")]
	[SupportsSynchronization]
	[Designer(typeof(SequenceDesigner), typeof(IDesigner))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class SynchronizationScopeActivity : CompositeActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>
	{
		[SRDisplayName("SynchronizationHandles")]
		[SRDescription("SynchronizationHandlesDesc")]
		[TypeConverter(typeof(SynchronizationHandlesTypeConverter))]
		[Editor(typeof(SynchronizationHandlesEditor), typeof(UITypeEditor))]
		public ICollection<string> SynchronizationHandles
		{
			get
			{
				return GetValue(Activity.SynchronizationHandlesProperty) as ICollection<string>;
			}
			set
			{
				SetValue(Activity.SynchronizationHandlesProperty, value);
			}
		}

		public SynchronizationScopeActivity()
		{
		}

		public SynchronizationScopeActivity(string name)
			: base(name)
		{
		}

		protected internal override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)
		{
			return SequenceHelper.Execute(this, executionContext);
		}

		protected internal override ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext)
		{
			return SequenceHelper.Cancel(this, executionContext);
		}

		void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			SequenceHelper.OnEvent(this, sender, e);
		}

		protected internal override void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity)
		{
			SequenceHelper.OnActivityChangeRemove(this, executionContext, removedActivity);
		}

		protected internal override void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext)
		{
			SequenceHelper.OnWorkflowChangesCompleted(this, executionContext);
		}
	}
	internal sealed class SynchronizationHandlesTypeConverter : TypeConverter
	{
		public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
		{
			if (destinationType == typeof(string))
			{
				return true;
			}
			return base.CanConvertTo(context, destinationType);
		}

		public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
		{
			if (destinationType == typeof(string) && value is ICollection<string>)
			{
				return Stringify(value as ICollection<string>);
			}
			return base.ConvertTo(context, culture, value, destinationType);
		}

		public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
		{
			if (sourceType == typeof(string))
			{
				return true;
			}
			return base.CanConvertFrom(context, sourceType);
		}

		public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
		{
			if (value is string)
			{
				return UnStringify(value as string);
			}
			return base.ConvertFrom(context, culture, value);
		}

		internal static string Stringify(ICollection<string> synchronizationHandles)
		{
			string text = string.Empty;
			if (synchronizationHandles == null)
			{
				return text;
			}
			foreach (string synchronizationHandle in synchronizationHandles)
			{
				if (synchronizationHandle != null)
				{
					if (text != string.Empty)
					{
						text += ", ";
					}
					text += synchronizationHandle.Replace(",", "\\,");
				}
			}
			return text;
		}

		internal static ICollection<string> UnStringify(string stringifiedValue)
		{
			ICollection<string> collection = new List<string>();
			stringifiedValue = stringifiedValue.Replace("\\,", ">");
			string[] array = stringifiedValue.Split(new char[3] { ',', '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
			foreach (string text in array)
			{
				string text2 = text.Trim().Replace('>', ',');
				if (text2 != string.Empty && !collection.Contains(text2))
				{
					collection.Add(text2);
				}
			}
			return collection;
		}
	}
	internal sealed class SynchronizationHandlesEditor : UITypeEditor
	{
		private MultilineStringEditor stringEditor = new MultilineStringEditor();

		public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
		{
			string value2 = SynchronizationHandlesTypeConverter.Stringify(value as ICollection<string>);
			value2 = stringEditor.EditValue(context, provider, value2) as string;
			value = SynchronizationHandlesTypeConverter.UnStringify(value2);
			return value;
		}

		public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
		{
			return stringEditor.GetEditStyle(context);
		}

		public override bool GetPaintValueSupported(ITypeDescriptorContext context)
		{
			return stringEditor.GetPaintValueSupported(context);
		}
	}
	[SRDescription("CompensateActivityDescription")]
	[ToolboxItem(typeof(ActivityToolboxItem))]
	[Designer(typeof(CompensateDesigner), typeof(IDesigner))]
	[ToolboxBitmap(typeof(CompensateActivity), "Resources.Compensate.png")]
	[ActivityValidator(typeof(CompensateValidator))]
	[SRCategory("Standard")]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class CompensateActivity : Activity, IPropertyValueProvider, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>
	{
		public static readonly DependencyProperty TargetActivityNameProperty = DependencyProperty.Register("TargetActivityName", typeof(string), typeof(CompensateActivity), new PropertyMetadata("", DependencyPropertyOptions.Metadata));

		[SRCategory("Activity")]
		[SRDescription("CompensatableActivityDescr")]
		[TypeConverter(typeof(PropertyValueProviderTypeConverter))]
		[MergableProperty(false)]
		[DefaultValue("")]
		public string TargetActivityName
		{
			get
			{
				return GetValue(TargetActivityNameProperty) as string;
			}
			set
			{
				SetValue(TargetActivityNameProperty, value);
			}
		}

		public CompensateActivity()
		{
		}

		public CompensateActivity(string name)
			: base(name)
		{
		}

		protected internal override void Initialize(IServiceProvider provider)
		{
			if (base.Parent == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_MustHaveParent"));
			}
			base.Initialize(provider);
		}

		protected internal override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			return CompensateTargetActivity(executionContext);
		}

		void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			if (sender == null)
			{
				throw new ArgumentNullException("sender");
			}
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (!(sender is ActivityExecutionContext activityExecutionContext))
			{
				throw new ArgumentException("Error_SenderMustBeActivityExecutionContext", "sender");
			}
			if (e.ExecutionStatus == ActivityExecutionStatus.Closed)
			{
				e.Activity.UnregisterForStatusChange(Activity.Closed, this);
				ActivityExecutionStatus activityExecutionStatus = CompensateTargetActivity(activityExecutionContext);
				if (activityExecutionStatus == ActivityExecutionStatus.Closed)
				{
					activityExecutionContext.CloseActivity();
				}
			}
		}

		private ActivityExecutionStatus CompensateTargetActivity(ActivityExecutionContext context)
		{
			Activity activity = null;
			Activity activity2 = context.Activity;
			do
			{
				activity2 = activity2.Parent;
				activity = activity2.GetActivityByName(TargetActivityName, withinThisActivityOnly: true);
			}
			while (activity == null);
			if (activity is ICompensatableActivity && activity.ExecutionStatus == ActivityExecutionStatus.Closed && activity.ExecutionResult == ActivityExecutionResult.Succeeded)
			{
				activity.RegisterForStatusChange(Activity.Closed, this);
				context.CompensateActivity(activity);
				return context.Activity.ExecutionStatus;
			}
			if (activity.ExecutionStatus == ActivityExecutionStatus.Initialized)
			{
				ActivityExecutionContextManager executionContextManager = context.ExecutionContextManager;
				foreach (ActivityExecutionContext executionContext in executionContextManager.ExecutionContexts)
				{
					if (activity.GetActivityByName(executionContext.Activity.QualifiedName, withinThisActivityOnly: true) != null && (executionContext.Activity.ExecutionStatus == ActivityExecutionStatus.Compensating || executionContext.Activity.ExecutionStatus == ActivityExecutionStatus.Faulting || executionContext.Activity.ExecutionStatus == ActivityExecutionStatus.Canceling))
					{
						return context.Activity.ExecutionStatus;
					}
				}
				for (int num = executionContextManager.CompletedExecutionContexts.Count - 1; num >= 0; num--)
				{
					ActivityExecutionContextInfo activityExecutionContextInfo = executionContextManager.CompletedExecutionContexts[num];
					if ((activityExecutionContextInfo.Flags & PersistFlags.NeedsCompensation) != 0)
					{
						ActivityExecutionContext activityExecutionContext = executionContextManager.DiscardPersistedExecutionContext(activityExecutionContextInfo);
						if (activityExecutionContext.Activity is ICompensatableActivity)
						{
							activityExecutionContext.Activity.RegisterForStatusChange(Activity.Closed, this);
							activityExecutionContext.CompensateActivity(activityExecutionContext.Activity);
						}
						return context.Activity.ExecutionStatus;
					}
				}
			}
			else if (CompensationUtils.TryCompensateLastCompletedChildActivity(context, activity, this))
			{
				return context.Activity.ExecutionStatus;
			}
			return ActivityExecutionStatus.Closed;
		}

		ICollection IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context)
		{
			if (context == null)
			{
				throw new ArgumentNullException("context");
			}
			return GetCompensatableTargets(this);
		}

		internal static StringCollection GetCompensatableTargets(CompensateActivity compensate)
		{
			StringCollection stringCollection = new StringCollection();
			for (CompositeActivity compositeActivity = compensate.Parent; compositeActivity != null; compositeActivity = compositeActivity.Parent)
			{
				if (compositeActivity is CompensationHandlerActivity || compositeActivity is FaultHandlersActivity || compositeActivity is CancellationHandlerActivity)
				{
					compositeActivity = compositeActivity.Parent;
					if (compositeActivity == null)
					{
						break;
					}
					if (Helpers.IsCustomActivity(compositeActivity))
					{
						stringCollection.Add(compositeActivity.UserData[UserDataKeys.CustomActivityDefaultName] as string);
					}
					else
					{
						stringCollection.Add(compositeActivity.Name);
					}
					foreach (Activity enabledActivity in compositeActivity.EnabledActivities)
					{
						if (enabledActivity is ICompensatableActivity)
						{
							stringCollection.Add(enabledActivity.Name);
						}
					}
					break;
				}
			}
			return stringCollection;
		}
	}
	internal sealed class CompensateValidator : ActivityValidator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is CompensateActivity { Parent: var parent } compensateActivity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(CompensateActivity).FullName), "obj");
			}
			while (parent != null && !(parent is CompensationHandlerActivity) && !(parent is FaultHandlerActivity) && !(parent is CancellationHandlerActivity))
			{
				parent = parent.Parent;
			}
			if (parent == null)
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Error_CompensateBadNesting"), 1289));
			}
			ValidationError validationError = null;
			StringCollection compensatableTargets = CompensateActivity.GetCompensatableTargets(compensateActivity);
			if (string.IsNullOrEmpty(compensateActivity.TargetActivityName))
			{
				validationError = ValidationError.GetNotSetValidationError("TargetActivityName");
			}
			else if (!compensatableTargets.Contains(compensateActivity.TargetActivityName))
			{
				validationError = new ValidationError(SR.GetString("Error_CompensateBadTargetTX", "TargetActivityName", compensateActivity.TargetActivityName, compensateActivity.QualifiedName), 1379, isWarning: false, "TargetActivityName");
			}
			if (validationError != null)
			{
				validationErrorCollection.Add(validationError);
			}
			return validationErrorCollection;
		}
	}
	[ToolboxItem(false)]
	[Designer(typeof(CompensationHandlerActivityDesigner), typeof(IDesigner))]
	[ToolboxBitmap(typeof(CompensationHandlerActivity), "Resources.Compensation.png")]
	[ActivityValidator(typeof(CompensationValidator))]
	[AlternateFlowActivity]
	[SRCategory("Standard")]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class CompensationHandlerActivity : CompositeActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>
	{
		public CompensationHandlerActivity()
		{
		}

		public CompensationHandlerActivity(string name)
			: base(name)
		{
		}

		protected internal override void Initialize(IServiceProvider provider)
		{
			if (base.Parent == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_MustHaveParent"));
			}
			base.Initialize(provider);
		}

		protected internal override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)
		{
			return SequenceHelper.Execute(this, executionContext);
		}

		protected internal override ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext)
		{
			return SequenceHelper.Cancel(this, executionContext);
		}

		void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			SequenceHelper.OnEvent(this, sender, e);
		}

		protected internal override void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity)
		{
			SequenceHelper.OnActivityChangeRemove(this, executionContext, removedActivity);
		}

		protected internal override void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext)
		{
			SequenceHelper.OnWorkflowChangesCompleted(this, executionContext);
		}
	}
	internal sealed class CompensationValidator : CompositeActivityValidator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is CompensationHandlerActivity compensationHandlerActivity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(CompensationHandlerActivity).FullName), "obj");
			}
			if (!(compensationHandlerActivity.Parent is ICompensatableActivity))
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Error_ParentDoesNotSupportCompensation"), 1305));
			}
			if (compensationHandlerActivity.EnabledActivities.Count == 0)
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Warning_EmptyBehaviourActivity", typeof(CompensationHandlerActivity).FullName, compensationHandlerActivity.QualifiedName), 419, isWarning: true));
			}
			else if (((ISupportAlternateFlow)compensationHandlerActivity).AlternateFlowActivities.Count > 0)
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Error_ModelingConstructsCanNotContainModelingConstructs"), 1567));
			}
			return validationErrorCollection;
		}
	}
	[ToolboxItem(false)]
	[Designer(typeof(CancellationHandlerActivityDesigner), typeof(IDesigner))]
	[ToolboxBitmap(typeof(CancellationHandlerActivity), "Resources.CancellationHandler.bmp")]
	[ActivityValidator(typeof(CancellationHandlerValidator))]
	[AlternateFlowActivity]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class CancellationHandlerActivity : CompositeActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>
	{
		public CancellationHandlerActivity()
		{
		}

		public CancellationHandlerActivity(string name)
			: base(name)
		{
		}

		protected internal override void Initialize(IServiceProvider provider)
		{
			if (base.Parent == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_MustHaveParent"));
			}
			base.Initialize(provider);
		}

		protected internal override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)
		{
			return SequenceHelper.Execute(this, executionContext);
		}

		protected internal override ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext)
		{
			return SequenceHelper.Cancel(this, executionContext);
		}

		void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			SequenceHelper.OnEvent(this, sender, e);
		}

		protected internal override void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity)
		{
			SequenceHelper.OnActivityChangeRemove(this, executionContext, removedActivity);
		}

		protected internal override void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext)
		{
			SequenceHelper.OnWorkflowChangesCompleted(this, executionContext);
		}
	}
	internal sealed class CancellationHandlerValidator : CompositeActivityValidator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is CancellationHandlerActivity cancellationHandlerActivity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(CancellationHandlerActivity).FullName), "obj");
			}
			if (cancellationHandlerActivity.EnabledActivities.Count == 0)
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Warning_EmptyBehaviourActivity", typeof(CancellationHandlerActivity).FullName, cancellationHandlerActivity.QualifiedName), 419, isWarning: true));
			}
			if (((ISupportAlternateFlow)cancellationHandlerActivity).AlternateFlowActivities.Count > 0)
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Error_ModelingConstructsCanNotContainModelingConstructs"), 1567));
			}
			return validationErrorCollection;
		}
	}
	[SRDescription("FaultHandlerActivityDescription")]
	[ToolboxItem(typeof(ActivityToolboxItem))]
	[ToolboxBitmap(typeof(FaultHandlerActivity), "Resources.Exception.png")]
	[SRCategory("Standard")]
	[Designer(typeof(FaultHandlerActivityDesigner), typeof(IDesigner))]
	[ActivityValidator(typeof(FaultHandlerActivityValidator))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class FaultHandlerActivity : CompositeActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>, ITypeFilterProvider, IDynamicPropertyTypeProvider
	{
		public static readonly DependencyProperty FaultTypeProperty = DependencyProperty.Register("FaultType", typeof(Type), typeof(FaultHandlerActivity), new PropertyMetadata(DependencyPropertyOptions.Metadata));

		internal static readonly DependencyProperty FaultProperty = DependencyProperty.Register("Fault", typeof(Exception), typeof(FaultHandlerActivity));

		[Editor(typeof(TypeBrowserEditor), typeof(UITypeEditor))]
		[SRDescription("ExceptionTypeDescr")]
		[MergableProperty(false)]
		public Type FaultType
		{
			get
			{
				return (Type)GetValue(FaultTypeProperty);
			}
			set
			{
				SetValue(FaultTypeProperty, value);
			}
		}

		[SRDescription("FaultDescription")]
		[MergableProperty(false)]
		[ReadOnly(true)]
		public Exception Fault => GetValue(FaultProperty) as Exception;

		string ITypeFilterProvider.FilterDescription => SR.GetString("FilterDescription_FaultHandlerActivity");

		public FaultHandlerActivity()
		{
		}

		public FaultHandlerActivity(string name)
			: base(name)
		{
		}

		internal void SetException(Exception e)
		{
			SetValue(FaultProperty, e);
		}

		protected internal override void Initialize(IServiceProvider provider)
		{
			if (base.Parent == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_MustHaveParent"));
			}
			base.Initialize(provider);
		}

		protected internal override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)
		{
			return SequenceHelper.Execute(this, executionContext);
		}

		protected internal override ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext)
		{
			return SequenceHelper.Cancel(this, executionContext);
		}

		void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			SequenceHelper.OnEvent(this, sender, e);
		}

		protected internal override void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity)
		{
			SequenceHelper.OnActivityChangeRemove(this, executionContext, removedActivity);
		}

		protected internal override void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext)
		{
			SequenceHelper.OnWorkflowChangesCompleted(this, executionContext);
		}

		bool ITypeFilterProvider.CanFilterType(Type type, bool throwOnError)
		{
			bool flag = TypeProvider.IsAssignable(typeof(Exception), type);
			if (throwOnError && !flag)
			{
				throw new Exception(SR.GetString("Error_ExceptionTypeNotException", type, "Type"));
			}
			return flag;
		}

		Type IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider serviceProvider, string propertyName)
		{
			if (propertyName == null)
			{
				throw new ArgumentNullException("propertyName");
			}
			Type type = null;
			if (string.Equals(propertyName, "Fault", StringComparison.Ordinal))
			{
				type = FaultType;
				if (type == null)
				{
					type = typeof(Exception);
				}
			}
			return type;
		}

		AccessTypes IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider serviceProvider, string propertyName)
		{
			if (propertyName == null)
			{
				throw new ArgumentNullException("propertyName");
			}
			if (propertyName.Equals("Fault", StringComparison.Ordinal))
			{
				return AccessTypes.Write;
			}
			return AccessTypes.Read;
		}
	}
	internal sealed class FaultHandlerActivityValidator : CompositeActivityValidator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is FaultHandlerActivity faultHandlerActivity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(FaultHandlerActivity).FullName), "obj");
			}
			if (!(faultHandlerActivity.Parent is FaultHandlersActivity))
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Error_FaultHandlerActivityParentNotFaultHandlersActivity"), 1305));
			}
			if (!(manager.GetService(typeof(ITypeProvider)) is ITypeProvider))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(ITypeProvider).FullName));
			}
			ValidationError validationError = null;
			if (faultHandlerActivity.FaultType == null)
			{
				validationError = new ValidationError(SR.GetString("Error_TypePropertyInvalid", "FaultType"), 278);
				validationError.PropertyName = "FaultType";
				validationErrorCollection.Add(validationError);
			}
			else if (!TypeProvider.IsAssignable(typeof(Exception), faultHandlerActivity.FaultType))
			{
				validationError = new ValidationError(SR.GetString("Error_TypeTypeMismatch", "FaultType", typeof(Exception).FullName), 1306);
				validationError.PropertyName = "FaultType";
				validationErrorCollection.Add(validationError);
			}
			if (faultHandlerActivity.EnabledActivities.Count == 0)
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Warning_EmptyBehaviourActivity", typeof(FaultHandlerActivity).FullName, faultHandlerActivity.QualifiedName), 419, isWarning: true));
			}
			if (((ISupportAlternateFlow)faultHandlerActivity).AlternateFlowActivities.Count > 0)
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Error_ModelingConstructsCanNotContainModelingConstructs"), 1567));
			}
			return validationErrorCollection;
		}
	}
	[ToolboxItem(false)]
	[Designer(typeof(FaultHandlersActivityDesigner), typeof(IDesigner))]
	[ToolboxBitmap(typeof(FaultHandlersActivity), "Resources.Exceptions.png")]
	[ActivityValidator(typeof(FaultHandlersActivityValidator))]
	[AlternateFlowActivity]
	[SRCategory("Standard")]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class FaultHandlersActivity : CompositeActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>
	{
		[NonSerialized]
		private bool activeChildRemoved;

		public FaultHandlersActivity()
		{
		}

		public FaultHandlersActivity(string name)
			: base(name)
		{
		}

		protected internal override void Initialize(IServiceProvider provider)
		{
			if (base.Parent == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_MustHaveParent"));
			}
			base.Initialize(provider);
		}

		protected internal override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (base.Parent.GetValue(ActivityExecutionContext.CurrentExceptionProperty) is Exception ex)
			{
				Type type = ex.GetType();
				foreach (FaultHandlerActivity enabledActivity in base.EnabledActivities)
				{
					if (CanHandleException(enabledActivity, type))
					{
						base.Parent.RemoveProperty(ActivityExecutionContext.CurrentExceptionProperty);
						enabledActivity.SetException(ex);
						enabledActivity.RegisterForStatusChange(Activity.Closed, this);
						executionContext.ExecuteActivity(enabledActivity);
						return ActivityExecutionStatus.Executing;
					}
				}
			}
			return ActivityExecutionStatus.Closed;
		}

		protected internal override ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			for (int i = 0; i < base.EnabledActivities.Count; i++)
			{
				Activity activity = base.EnabledActivities[i];
				if (activity.ExecutionStatus == ActivityExecutionStatus.Executing)
				{
					executionContext.CancelActivity(activity);
				}
				if (activity.ExecutionStatus == ActivityExecutionStatus.Canceling || activity.ExecutionStatus == ActivityExecutionStatus.Faulting)
				{
					return base.ExecutionStatus;
				}
			}
			return ActivityExecutionStatus.Closed;
		}

		void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			if (sender == null)
			{
				throw new ArgumentNullException("sender");
			}
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (!(sender is ActivityExecutionContext activityExecutionContext))
			{
				throw new ArgumentException("Error_SenderMustBeActivityExecutionContext", "sender");
			}
			e.Activity.UnregisterForStatusChange(Activity.Closed, this);
			activityExecutionContext.CloseActivity();
		}

		protected internal override void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity)
		{
			if (removedActivity == null)
			{
				throw new ArgumentNullException("removedActivity");
			}
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (removedActivity.ExecutionStatus == ActivityExecutionStatus.Closed && base.ExecutionStatus != ActivityExecutionStatus.Closed)
			{
				activeChildRemoved = true;
			}
			base.OnActivityChangeRemove(executionContext, removedActivity);
		}

		protected internal override void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext)
		{
			if (executionContext == null)
			{
				throw new ArgumentNullException("executionContext");
			}
			if (activeChildRemoved)
			{
				executionContext.CloseActivity();
				activeChildRemoved = false;
			}
			base.OnWorkflowChangesCompleted(executionContext);
		}

		protected override void OnClosed(IServiceProvider provider)
		{
		}

		private bool CanHandleException(FaultHandlerActivity exceptionHandler, Type et)
		{
			Type faultType = exceptionHandler.FaultType;
			if (!(et == faultType))
			{
				return et.IsSubclassOf(faultType);
			}
			return true;
		}
	}
	internal sealed class FaultHandlersActivityValidator : CompositeActivityValidator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is FaultHandlersActivity faultHandlersActivity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(FaultHandlersActivity).FullName), "obj");
			}
			Hashtable hashtable = new Hashtable();
			ArrayList arrayList = new ArrayList();
			bool flag = false;
			foreach (Activity enabledActivity in faultHandlersActivity.EnabledActivities)
			{
				if (!(enabledActivity is FaultHandlerActivity))
				{
					if (!flag)
					{
						validationErrorCollection.Add(new ValidationError(SR.GetString("Error_FaultHandlersActivityDeclNotAllFaultHandlerActivityDecl"), 1310));
						flag = true;
					}
					continue;
				}
				FaultHandlerActivity faultHandlerActivity = (FaultHandlerActivity)enabledActivity;
				Type faultType = faultHandlerActivity.FaultType;
				if (!(faultType != null))
				{
					continue;
				}
				if (hashtable[faultType] == null)
				{
					hashtable[faultType] = 1;
					arrayList.Add(faultType);
				}
				else if ((int)hashtable[faultType] == 1)
				{
					validationErrorCollection.Add(new ValidationError(string.Format(CultureInfo.CurrentCulture, SR.GetString("Error_ScopeDuplicateFaultHandlerActivityFor"), new object[2]
					{
						Helpers.GetEnclosingActivity(faultHandlersActivity).GetType().Name,
						faultType.FullName
					}), 1312));
					hashtable[faultType] = 2;
				}
				foreach (Type item in arrayList)
				{
					if (item != faultType && item.IsAssignableFrom(faultType))
					{
						validationErrorCollection.Add(new ValidationError(SR.GetString("Error_FaultHandlerActivityWrongOrder", faultType.Name, item.Name), 1313));
					}
				}
			}
			if (((ISupportAlternateFlow)faultHandlersActivity).AlternateFlowActivities.Count > 0)
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Error_ModelingConstructsCanNotContainModelingConstructs"), 1567));
			}
			return validationErrorCollection;
		}
	}
	[SRDescription("CompensatableTransactionalContextActivityDescription")]
	[ToolboxItem(typeof(ActivityToolboxItem))]
	[ToolboxBitmap(typeof(CompensatableTransactionScopeActivity), "Resources.Sequence.png")]
	[Designer(typeof(CompensatableTransactionScopeActivityDesigner), typeof(IDesigner))]
	[PersistOnClose]
	[SupportsTransaction]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class CompensatableTransactionScopeActivity : CompositeActivity, IActivityEventListener<ActivityExecutionStatusChangedEventArgs>, ICompensatableActivity
	{
		internal static readonly DependencyProperty TransactionOptionsProperty = DependencyProperty.Register("TransactionOptions", typeof(WorkflowTransactionOptions), typeof(CompensatableTransactionScopeActivity), new PropertyMetadata(DependencyPropertyOptions.Metadata, new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)));

		[SRDescription("TransactionDesc")]
		[MergableProperty(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[ReadOnly(true)]
		public WorkflowTransactionOptions TransactionOptions
		{
			get
			{
				return (WorkflowTransactionOptions)GetValue(TransactionOptionsProperty);
			}
			set
			{
				SetValue(TransactionOptionsProperty, value);
			}
		}

		public CompensatableTransactionScopeActivity()
		{
			SetValueBase(TransactionOptionsProperty, new WorkflowTransactionOptions());
		}

		public CompensatableTransactionScopeActivity(string name)
			: base(name)
		{
			SetValueBase(TransactionOptionsProperty, new WorkflowTransactionOptions());
		}

		protected internal override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)
		{
			return SequenceHelper.Execute(this, executionContext);
		}

		protected internal override ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext)
		{
			return SequenceHelper.Cancel(this, executionContext);
		}

		void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e)
		{
			SequenceHelper.OnEvent(this, sender, e);
		}

		protected internal override void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity)
		{
			SequenceHelper.OnActivityChangeRemove(this, executionContext, removedActivity);
		}

		protected internal override void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext)
		{
			SequenceHelper.OnWorkflowChangesCompleted(this, executionContext);
		}

		ActivityExecutionStatus ICompensatableActivity.Compensate(ActivityExecutionContext executionContext)
		{
			return ActivityExecutionStatus.Closed;
		}
	}
	[ActivityDesignerTheme(typeof(CompensateDesignerTheme))]
	internal sealed class CompensateDesigner : ActivityDesigner
	{
		public override bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner)
		{
			for (Activity parent = parentActivityDesigner.Activity; parent != null; parent = parent.Parent)
			{
				if (parent is CancellationHandlerActivity || parent is CompensationHandlerActivity || parent is FaultHandlerActivity)
				{
					return true;
				}
			}
			return false;
		}
	}
	internal sealed class CompensateDesignerTheme : ActivityDesignerTheme
	{
		public CompensateDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
			ForeColor = Color.FromArgb(255, 0, 0, 0);
			BorderColor = Color.FromArgb(255, 115, 81, 8);
			BorderStyle = DashStyle.Solid;
			BackColorStart = Color.FromArgb(255, 247, 247, 156);
			BackColorEnd = Color.FromArgb(255, 222, 170, 0);
			BackgroundStyle = LinearGradientMode.Horizontal;
		}
	}
	internal class AssemblyRef
	{
		internal const string ActivitiesAssemblyRef = "System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";

		internal const string RuntimeAssemblyRef = "System.Workflow.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=MSIL";
	}
	internal delegate void WalkerEventHandler(Walker walker, WalkerEventArgs eventArgs);
	internal enum WalkerAction
	{
		Continue,
		Skip,
		Abort
	}
	internal sealed class WalkerEventArgs : EventArgs
	{
		private Activity currentActivity;

		private object currentPropertyOwner;

		private PropertyInfo currentProperty;

		private object currentValue;

		private WalkerAction action;

		public WalkerAction Action
		{
			get
			{
				return action;
			}
			set
			{
				action = value;
			}
		}

		public PropertyInfo CurrentProperty => currentProperty;

		public object CurrentPropertyOwner => currentPropertyOwner;

		public object CurrentValue => currentValue;

		public Activity CurrentActivity => currentActivity;

		internal WalkerEventArgs(Activity currentActivity)
		{
			this.currentActivity = currentActivity;
			currentPropertyOwner = null;
			currentProperty = null;
			currentValue = null;
		}

		internal WalkerEventArgs(Activity currentActivity, object currentValue, PropertyInfo currentProperty, object currentPropertyOwner)
			: this(currentActivity)
		{
			this.currentPropertyOwner = currentPropertyOwner;
			this.currentProperty = currentProperty;
			this.currentValue = currentValue;
		}
	}
	internal sealed class Walker
	{
		private bool useEnabledActivities;

		internal event WalkerEventHandler FoundActivity;

		internal event WalkerEventHandler FoundProperty;

		public Walker()
			: this(useEnabledActivities: false)
		{
		}

		public Walker(bool useEnabledActivities)
		{
			this.useEnabledActivities = useEnabledActivities;
		}

		public void Walk(Activity seedActivity)
		{
			Walk(seedActivity, walkChildren: true);
		}

		public void Walk(Activity seedActivity, bool walkChildren)
		{
			Queue queue = new Queue();
			queue.Enqueue(seedActivity);
			while (queue.Count > 0)
			{
				Activity activity = queue.Dequeue() as Activity;
				if (this.FoundActivity != null)
				{
					WalkerEventArgs walkerEventArgs = new WalkerEventArgs(activity);
					this.FoundActivity(this, walkerEventArgs);
					if (walkerEventArgs.Action == WalkerAction.Abort)
					{
						break;
					}
					if (walkerEventArgs.Action == WalkerAction.Skip)
					{
						continue;
					}
				}
				if (this.FoundProperty != null && !WalkProperties(activity))
				{
					break;
				}
				if (!walkChildren || !(activity is CompositeActivity))
				{
					continue;
				}
				if (useEnabledActivities)
				{
					foreach (Activity allEnabledActivity in Helpers.GetAllEnabledActivities((CompositeActivity)activity))
					{
						queue.Enqueue(allEnabledActivity);
					}
					continue;
				}
				foreach (Activity activity2 in ((CompositeActivity)activity).Activities)
				{
					queue.Enqueue(activity2);
				}
			}
		}

		private bool WalkProperties(Activity seedActivity)
		{
			return WalkProperties(seedActivity, seedActivity);
		}

		public bool WalkProperties(Activity activity, object obj)
		{
			Activity activity2 = obj as Activity;
			PropertyInfo[] properties = obj.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public);
			PropertyInfo[] array = properties;
			foreach (PropertyInfo propertyInfo in array)
			{
				if ((propertyInfo.GetIndexParameters() != null && propertyInfo.GetIndexParameters().Length != 0) || GetSerializationVisibility(propertyInfo) == DesignerSerializationVisibility.Hidden)
				{
					continue;
				}
				object obj2 = null;
				DependencyProperty dependencyProperty = DependencyProperty.FromName(propertyInfo.Name, obj.GetType());
				if (dependencyProperty != null && activity2 != null)
				{
					obj2 = ((!activity2.IsBindingSet(dependencyProperty)) ? activity2.GetValue(dependencyProperty) : activity2.GetBinding(dependencyProperty));
				}
				else
				{
					try
					{
						obj2 = (propertyInfo.CanRead ? propertyInfo.GetValue(obj, null) : null);
					}
					catch
					{
					}
				}
				if (this.FoundProperty != null)
				{
					WalkerEventArgs walkerEventArgs = new WalkerEventArgs(activity, obj2, propertyInfo, obj);
					this.FoundProperty(this, walkerEventArgs);
					if (walkerEventArgs.Action == WalkerAction.Skip)
					{
						continue;
					}
					if (walkerEventArgs.Action == WalkerAction.Abort)
					{
						return false;
					}
				}
				if (obj2 is IList)
				{
					foreach (object item in (IList)obj2)
					{
						if (this.FoundProperty != null)
						{
							WalkerEventArgs walkerEventArgs2 = new WalkerEventArgs(activity, item, null, obj2);
							this.FoundProperty(this, walkerEventArgs2);
							if (walkerEventArgs2.Action == WalkerAction.Skip)
							{
								continue;
							}
							if (walkerEventArgs2.Action == WalkerAction.Abort)
							{
								return false;
							}
						}
						if (item != null && IsBrowsableType(item.GetType()) && !WalkProperties(activity, item))
						{
							return false;
						}
					}
				}
				else if (obj2 != null && IsBrowsableType(obj2.GetType()) && !WalkProperties(activity, obj2))
				{
					return false;
				}
			}
			return true;
		}

		private static DesignerSerializationVisibility GetSerializationVisibility(PropertyInfo prop)
		{
			if (prop.DeclaringType == typeof(CompositeActivity) && string.Equals(prop.Name, "Activities", StringComparison.Ordinal))
			{
				return DesignerSerializationVisibility.Hidden;
			}
			DesignerSerializationVisibility result = DesignerSerializationVisibility.Visible;
			DesignerSerializationVisibilityAttribute[] array = (DesignerSerializationVisibilityAttribute[])prop.GetCustomAttributes(typeof(DesignerSerializationVisibilityAttribute), inherit: true);
			if (array.Length != 0)
			{
				result = array[0].Visibility;
			}
			return result;
		}

		private static bool IsBrowsableType(Type type)
		{
			bool result = false;
			BrowsableAttribute[] array = (BrowsableAttribute[])type.GetCustomAttributes(typeof(BrowsableAttribute), inherit: true);
			if (array.Length != 0)
			{
				result = array[0].Browsable;
			}
			return result;
		}
	}
	internal class DelegateTypeInfo
	{
		private CodeParameterDeclarationExpression[] parameters;

		private Type[] parameterTypes;

		private CodeTypeReference returnType;

		internal CodeParameterDeclarationExpression[] Parameters => parameters;

		internal Type[] ParameterTypes => parameterTypes;

		internal CodeTypeReference ReturnType => returnType;

		internal DelegateTypeInfo(Type delegateClass)
		{
			Resolve(delegateClass);
		}

		private void Resolve(Type delegateClass)
		{
			MethodInfo method = delegateClass.GetMethod("Invoke");
			if (method == null)
			{
				throw new ArgumentException("delegateClass");
			}
			Resolve(method);
		}

		private void Resolve(MethodInfo method)
		{
			ParameterInfo[] array = method.GetParameters();
			parameters = new CodeParameterDeclarationExpression[array.Length];
			parameterTypes = new Type[array.Length];
			for (int i = 0; i < array.Length; i++)
			{
				string text = array[i].Name;
				Type type = array[i].ParameterType;
				if (text == null || text.Length == 0)
				{
					text = "param" + i.ToString(CultureInfo.InvariantCulture);
				}
				FieldDirection direction = FieldDirection.In;
				if (type.IsByRef)
				{
					if (type.FullName.EndsWith("&"))
					{
						type = type.Assembly.GetType(type.FullName.Substring(0, type.FullName.Length - 1), throwOnError: true);
					}
					direction = FieldDirection.Ref;
				}
				if (array[i].IsOut)
				{
					direction = ((!array[i].IsIn) ? FieldDirection.Out : FieldDirection.Ref);
				}
				parameters[i] = new CodeParameterDeclarationExpression(new CodeTypeReference(type), text);
				parameters[i].Direction = direction;
				parameterTypes[i] = type;
			}
			returnType = new CodeTypeReference(method.ReturnType);
		}

		public override bool Equals(object other)
		{
			if (other == null)
			{
				return false;
			}
			if (!(other is DelegateTypeInfo delegateTypeInfo))
			{
				return false;
			}
			if (ReturnType.BaseType != delegateTypeInfo.ReturnType.BaseType || Parameters.Length != delegateTypeInfo.Parameters.Length)
			{
				return false;
			}
			for (int i = 0; i < Parameters.Length; i++)
			{
				CodeParameterDeclarationExpression codeParameterDeclarationExpression = delegateTypeInfo.Parameters[i];
				if (codeParameterDeclarationExpression.Type.BaseType != Parameters[i].Type.BaseType)
				{
					return false;
				}
			}
			return true;
		}

		public override int GetHashCode()
		{
			return base.GetHashCode();
		}
	}
	internal static class UserDataKeys
	{
		internal static readonly Guid LookupPaths = new Guid("B56CB191-96AE-40fd-A640-955A6ABD733F");

		internal static readonly Guid BindDataSource = new Guid("0d40b274-9ff3-490d-b026-3e946269ca73");

		internal static readonly Guid BindDataContextActivity = new Guid("56897aed-3065-4a58-866d-35279d843e97");

		internal static readonly Guid CodeSegment_New = new Guid("4BA4C3CF-2B73-4fd8-802D-C3746B7885A8");

		internal static readonly Guid CodeSegment_ColumnNumber = new Guid("9981A4D3-0766-4295-BF61-BF252DF28B5E");

		internal static readonly Guid CustomActivityDefaultName = new Guid("8bcd6c40-7bf6-4e60-8eea-bbf40bed92da");

		internal static readonly Guid NewBaseType = new Guid("C4ED69B4-DAFC-4faf-A3F8-D7D559ADDC21");

		internal static readonly Guid DesignTimeTypeNames = new Guid("8B018FBD-A60E-4378-8A79-8A190AE13EBA");

		internal static readonly Guid CustomActivity = new Guid("298CF3E0-E9E0-4d41-A11B-506E9132EB27");
	}
	internal static class ErrorNumbers
	{
		public const int Error_InsideAtomicScope = 256;

		public const int Error_DynamicActivity = 260;

		public const int Error_CreateValidator = 262;

		public const int Error_ParameterPropertyNotSet = 265;

		public const int Error_ParameterTypeNotExist = 266;

		public const int Error_MissingAttribute = 267;

		public const int Error_ReferenceInvalidResourceFile = 268;

		public const int Error_RefBindMissingReferenceName = 269;

		public const int Error_RefBindCantFindRef = 270;

		public const int Error_MissingRootActivity = 271;

		public const int Bind_DuplicateDataSourceNames = 272;

		public const int Error_ScopeDuplicatedNameActivity = 273;

		public const int Error_TypeNotExist = 275;

		public const int Error_TypeTypeMismatchAmbiguity = 276;

		public const int Error_PropertyNotSet = 278;

		public const int Error_CustomActivityCantCreate = 279;

		public const int Error_InvalidIdentifier = 281;

		public const int Error_TypeNotAsseblyQualified = 282;

		public const int Error_RemoveExecutingActivity = 285;

		public const int Error_TypeNotResolvedInFieldName = 287;

		public const int Error_FieldNotExists = 288;

		public const int Error_FieldNotAccessible = 289;

		public const int Error_FieldTypeNotResolved = 290;

		public const int Error_CannotResolveRelativeActivity = 296;

		public const int Error_CannotResolveActivity = 297;

		public const int Error_BindActivityReference = 298;

		public const int Error_PathNotSetForActivitySource = 299;

		public const int Error_InvalidMemberPath = 300;

		public const int Error_TargetTypeMismatch = 301;

		public const int Error_ReferencedActivityPropertyNotBind = 302;

		public const int Bind_ActivityDataSourceRecursionDetected = 303;

		public const int Error_NoEnclosingContext = 304;

		public const int Error_DataSourceNotExist = 305;

		public const int Error_MethodDataSourceWithPath = 306;

		public const int Error_HandlerReadOnly = 307;

		public const int Error_TypeNotDelegate = 308;

		public const int Error_TypeNotResolvedInMethodName = 309;

		public const int Error_MethodSignatureMismatch = 310;

		public const int Error_MethodNotExists = 311;

		public const int Error_MethodNotAccessible = 312;

		public const int Error_MethodReturnTypeMismatch = 313;

		public const int Error_TypeNotPrimitive = 315;

		public const int Error_LiteralConversionFailed = 316;

		public const int Error_DataSourceNameNotSet = 317;

		public const int Error_DataSourceInvalidIdentifier = 318;

		public const int Error_FieldTypeMismatch = 319;

		public const int Error_TargetTypeDataSourcePathMismatch = 321;

		public const int Error_PropertyNoGetter = 322;

		public const int Error_PropertyNoSetter = 323;

		public const int Error_PropertyHasIndexParameters = 324;

		public const int Error_ReadOnlyField = 325;

		public const int Error_XmlDataSourceReadOnly = 327;

		public const int Error_PathNotSetForXmlDataSource = 328;

		public const int Error_CorrelationAttributeInvalid = 336;

		public const int Error_DuplicateCorrelationAttribute = 337;

		public const int Error_MissingCorrelationParameterAttribute = 338;

		public const int Error_CorrelationParameterNotFound = 339;

		public const int Error_CorrelationTypeNotConsistent = 340;

		public const int Error_GenericMethodsNotSupported = 341;

		public const int Error_ReturnTypeNotVoid = 342;

		public const int Error_OutRefParameterNotSupported = 343;

		public const int Error_CorrelationInvalid = 344;

		public const int Error_CorrelationInitializerNotDefinied = 345;

		public const int Error_SerializationError = 347;

		public const int Error_UnknownCompilerException = 348;

		public const int Error_MultipleRootActivityCreator = 349;

		public const int Error_LibraryPath = 352;

		public const int Error_TypeLoad = 353;

		public const int Error_InvalidReferencedAssembly = 354;

		public const int Error_TypeNotResolvedInPropertyName = 355;

		public const int Error_PropertyNotExists = 356;

		public const int Error_PropertyNotAccessible = 357;

		public const int Error_PropertyTypeNotResolved = 358;

		public const int Error_PropertyTypeMismatch = 359;

		public const int Error_PropertyReferenceNoGetter = 360;

		public const int Error_UserCodeFilesNotAllowed = 361;

		public const int Error_CodeWithinNotAllowed = 362;

		public const int Error_TypeNotAuthorized = 363;

		public const int Error_CompanionClassNameCanNotBeEmpty = 372;

		public const int Error_DerivationFromTypeWithLocalDataContext = 373;

		public const int Error_CompanionTypeDerivationError = 374;

		public const int Error_DuplicatedParameterName = 375;

		public const int Error_ConfigFileMissingOrInvalid = 376;

		public const int Error_CyclicalExpression = 377;

		public const int Error_InvalidAssignTarget = 378;

		public const int Error_InvalidCharacter = 379;

		public const int Error_InvalidEscapeSequence = 380;

		public const int Error_UnterminatedCharacterLiteral = 381;

		public const int Error_InvalidExponentDigit = 382;

		public const int Error_InvalidHexDigit = 383;

		public const int Error_MissingLparenAfterCommand = 384;

		public const int Error_InvalidUpdateExpression = 385;

		public const int Error_MissingRParenAfterArgumentList = 386;

		public const int Error_MissingOperand = 387;

		public const int Error_MissingRParenInSubexpression = 388;

		public const int Error_MissingIdentifierAfterDot = 389;

		public const int Error_UnknownFieldOrProperty = 390;

		public const int Error_UnknownLiteral = 391;

		public const int Error_UnknownIdentifier = 392;

		public const int Error_MissingDotAfterNamespace = 393;

		public const int Error_UnknownNamespaceMember = 394;

		public const int Error_MissingTypeArguments = 395;

		public const int Error_NotAGenericType = 396;

		public const int Error_BadTypeArgCount = 397;

		public const int Error_InvalidTypeArgument = 398;

		public const int Error_MissingCloseAngleBracket = 399;

		public const int Error_EmptyExpression = 400;

		public const int Error_ExtraCharactersIgnored = 401;

		public const int Error_InvalidIntegerLiteral = 402;

		public const int Error_UnterminatedStringLiteral = 403;

		public const int Error_CouldNotDetermineMemberType = 404;

		public const int Error_InvalidWildCardInPathQualifier = 405;

		public const int Error_MethodArgCountMismatch = 406;

		public const int Error_MethodDirectionMismatch = 407;

		public const int Error_MethodArgumentTypeMismatch = 408;

		public const int Error_MethodOverloadNotFound = 409;

		public const int Error_MissingCloseSquareBracket = 410;

		public const int Error_CannotIndexType = 411;

		public const int Error_ArrayIndexBadRank = 412;

		public const int Error_IndexerArgCannotBeRefOrOut = 413;

		public const int Error_ArrayIndexBadType = 414;

		public const int Error_IndexerCountMismatch = 415;

		public const int Error_IndexerNotFound = 416;

		public const int Error_IndexerOverloadNotFound = 417;

		public const int Error_NestedPersistOnClose = 418;

		public const int Warning_EmptyBehaviourActivity = 419;

		public const int Error_InvalidRuleAttributeParameter = 420;

		public const int Error_InvokeAttrRefersToParameterAttribute = 421;

		public const int Error_NestedCompensatableActivity = 422;

		public const int Error_InvalidRealLiteral = 423;

		public const int Error_PropertyDefaultIsReference = 424;

		public const int Error_PropertyDefaultTypeMismatch = 425;

		public const int Error_NoArrayCreationSize = 426;

		public const int Error_MissingRCurlyAfterInitializers = 427;

		public const int Error_GetCalleeWorkflow = 1280;

		public const int SR_InvokeTransactionalFromAtomic = 1281;

		public const int Error_ExecInAtomicScope = 1282;

		public const int Error_DuplicateParameter = 1283;

		public const int Error_ParameterNotFound = 1284;

		public const int Error_RecursionDetected = 1286;

		public const int Warning_UnverifiedRecursion = 1287;

		public const int Error_SuspendInAtomicCallChain = 1288;

		public const int Error_CompensateBadNesting = 1289;

		public const int Error_ActivityRefNotResolved = 1290;

		public const int Error_CompensantionParentNotScope = 1291;

		public const int Error_IfElseLessThanOneChildren = 1292;

		public const int Error_IfElseNotAllIfElseBranchDecl = 1293;

		public const int Error_ConditionalBranchParentNotConditional = 1294;

		public const int Error_DynamicActivity2 = 1295;

		public const int Error_EventDrivenParentNotListen = 1296;

		public const int Error_EventDrivenNoFirstActivity = 1297;

		public const int Error_EventDrivenInvalidFirstActivity = 1298;

		public const int Error_ListenLessThanTwoChildren = 1299;

		public const int Error_ListenNotAllEventDriven = 1300;

		public const int Error_ListenNotMoreThanOneDelay = 1302;

		public const int Error_ParallelLessThanTwoChildren = 1303;

		public const int Error_ParallelNotAllSequence = 1304;

		public const int Error_FaultHandlerActivityParentNotFaultHandlersActivity = 1305;

		public const int Error_TypeTypeMismatch = 1306;

		public const int Error_ExceptionVariableNotAssignable = 1307;

		public const int Error_FaultHandlerActivityAllMustBeLast = 1308;

		public const int Error_FaultHandlersActivityDeclNotAllFaultHandlerActivityDecl = 1310;

		public const int Error_ScopeDuplicateFaultHandlerActivityForAll = 1311;

		public const int Error_ScopeDuplicateFaultHandlerActivityFor = 1312;

		public const int Error_FaultHandlerActivityWrongOrder = 1313;

		public const int Error_EventHandlersDeclParentNotScope = 1314;

		public const int Error_EventDrivenMultipleEventActivity = 1316;

		public const int Error_SuspendInAtomicScope = 1317;

		public const int Error_GeneratorShouldContainSingleActivity = 1318;

		public const int Error_ScopeMoreThanOneEventHandlersDecl = 1319;

		public const int Error_MissingMethodName = 1320;

		public const int Error_MissingHostInterface = 1321;

		public const int Error_ScopeMoreThanOneFaultHandlersActivityDecl = 1322;

		public const int Error_ScopeMoreThanOneCompensationDecl = 1323;

		public const int Error_AtomicScopeWithFaultHandlersActivityDecl = 1324;

		public const int Error_AtomicScopeNestedInNonLRT = 1326;

		public const int Error_LRTScopeNestedInNonLRT = 1327;

		public const int Error_NegativeValue = 1329;

		public const int Error_DuplicateCorrelation = 1333;

		public const int Error_ParallelActivationNoCorrelation = 1334;

		public const int Error_UninitializedCorrelation = 1336;

		public const int Error_CorrelatedSendReceiveAtomicScope = 1337;

		public const int Error_CorrelationAlreadyInitialized = 1338;

		public const int Error_ParameterNotSet = 1341;

		public const int Error_ConditionNotFound = 1342;

		public const int Error_DuplicateConditions = 1343;

		public const int Error_InvalidConditionName = 1344;

		public const int Error_LeftOperandMissing = 1345;

		public const int Error_LeftOperandInvalidType = 1346;

		public const int Error_RightOperandMissing = 1347;

		public const int Error_RightOperandInvalidType = 1348;

		public const int Error_OperandTypesIncompatible = 1349;

		public const int Error_BindingTypeMissing = 1350;

		public const int Error_ConditionMustBeBoolean = 1351;

		public const int Error_CodeExpressionNotHandled = 1352;

		public const int Error_UnableToResolveType = 1353;

		public const int Error_CannotResolveMember = 1354;

		public const int Warning_UnreachableCode = 1356;

		public const int Error_InvalidConditionExpression = 1368;

		public const int Error_WebServiceResponseNotFound = 1373;

		public const int Error_WebServiceReceiveNotFound = 1374;

		public const int Error_StaticMember = 1377;

		public const int Error_NonStaticMember = 1378;

		public const int Error_CompensateBadTargetTX = 1379;

		public const int Error_WebServiceReceiveNotValid = 1380;

		public const int Error_WebServiceResponseNotNeeded = 1381;

		public const int Error_WebServiceReceiveNotConfigured = 1382;

		public const int Error_TypeNotPublicSerializable = 1383;

		public const int Error_ActivationActivityNotFirst = 1384;

		public const int Error_WebServiceReceiveNotMarkedActivate = 1385;

		public const int Error_DuplicateWebServiceResponseFound = 1386;

		public const int Warning_RuleAttributeNoMatch = 1387;

		public const int Error_PolicyGetRuleSetNotImplemented = 1388;

		public const int Error_PolicyGetRuleSetNull = 1389;

		public const int Error_TypeNotPublic = 1390;

		public const int Error_InterfaceTypeNotInterface = 1392;

		public const int Error_ParameterTypeNotFound = 1393;

		public const int Error_ReturnTypeNotFound = 1394;

		public const int Error_CancelHandlerParentNotScope = 1395;

		public const int Error_DuplicateWebServiceFaultFound = 1396;

		public const int Error_AtomicScopeWithCancellationHandlerActivity = 1397;

		public const int Error_RuleSetNotFound = 1398;

		public const int Error_InvalidRuleSetExpression = 1399;

		public const int Error_InvalidRuleSetName = 1400;

		public const int Error_ActivationActivityInsideLoop = 1401;

		public const int Error_WebServiceFaultNotNeeded = 1402;

		public const int Error_InvalidUpdate = 1403;

		public const int Error_MissingRuleCondition = 1405;

		public const int Error_InvalidCompositeStateChild = 1520;

		public const int Error_InvalidLeafStateChild = 1521;

		public const int Error_SetStateOnlyWorksOnStateMachineWorkflow = 1522;

		public const int Error_SetStateMustPointToAState = 1523;

		public const int Error_SetStateMustPointToALeafNodeState = 1524;

		public const int Error_InitialStateMustPointToAState = 1525;

		public const int Error_CompletedStateMustPointToAState = 1526;

		public const int Error_InitialStateMustPointToALeafNodeState = 1527;

		public const int Error_CompletedStateMustPointToALeafNodeState = 1528;

		public const int Error_CompletedStateCannotContainActivities = 1535;

		public const int Error_DuplicatedActivityID = 1538;

		public const int Error_EventActivityNotValidInStateHandler = 1539;

		public const int Error_MultipleStateInitializationActivities = 1540;

		public const int Error_InvalidTargetStateInStateInitialization = 1541;

		public const int Error_StateHandlerParentNotState = 1542;

		public const int Error_SynchronizedNeedsDataContext = 1544;

		public const int Error_PropertyReferenceGetterNoAccess = 1546;

		public const int Error_WhileShouldHaveOneChild = 1547;

		public const int Error_CantHaveContextActivity = 1548;

		public const int Error_PathCouldNotBeResolvedToMember = 1549;

		public const int Error_TypeIsNotRootActivity = 1550;

		public const int Error_CantResolveEventHandler = 1551;

		public const int Error_XSDObjectTypeNotSerializable = 1552;

		public const int Error_IDNotSetForActivitySource = 1555;

		public const int Error_ExecWithActivationReceive = 1556;

		public const int Error_NestedConstrainedGroupConditions = 1557;

		public const int Error_MissingDataExchangeServiceAttribute = 1558;

		public const int Error_MissingEventName = 1559;

		public const int Error_CorrelationTokenInReplicator = 1560;

		public const int Error_TypePropertyInvalid = 1561;

		public const int Error_MultipleStateFinalizationActivities = 1562;

		public const int Error_CantRemoveState = 1563;

		public const int Error_XomlWorkflowHasClassName = 1564;

		public const int Error_XomlWorkflowHasCode = 1565;

		public const int Error_MoreThanTwoActivitiesInEventHandlingScope = 1566;

		public const int Error_ModelingConstructsCanNotContainModelingConstructs = 1567;

		public const int Error_CantRemoveEventDrivenFromExecutingState = 1568;

		public const int Error_StateMachineWorkflowMustBeARootActivity = 1569;

		public const int Error_ParentDoesNotSupportCompensation = 1570;

		public const int Error_BlackBoxCustomStateNotSupported = 1571;

		public const int Warning_ParameterBinding = 1572;

		public const int Error_BindBaseTypeNotSpecified = 1574;

		public const int Error_ValidatorThrewException = 1575;

		public const int Error_RootIsNotEnabled = 1576;

		public const int Error_InvalidMemberType = 1577;

		public const int Error_CannotNestThisActivity = 1578;

		public const int Error_InvalidStateActivityParent = 1579;

		public const int Error_InitialStateMustBeDifferentThanCompletedState = 1580;

		public const int Error_InitializerInReplicator = 1581;

		public const int Error_InitializerFollowerInTxnlScope = 1582;

		public const int Error_DynamicActivity3 = 1583;

		public const int Warning_AdditionalBindingsFound = 1584;
	}
}
namespace System.Workflow.ComponentModel.Design
{
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityDesignerLayoutSerializer : WorkflowMarkupSerializer
	{
		protected override void OnBeforeSerialize(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			base.OnBeforeSerialize(serializationManager, obj);
			ActivityDesigner activityDesigner = obj as ActivityDesigner;
			XmlWriter xmlWriter = serializationManager.WorkflowMarkupStack[typeof(XmlWriter)] as XmlWriter;
			if (activityDesigner.Activity != null && activityDesigner.Activity.Parent == null && xmlWriter != null)
			{
				string prefix = string.Empty;
				XmlQualifiedName xmlQualifiedName = serializationManager.GetXmlQualifiedName(typeof(Point), out prefix);
				xmlWriter.WriteAttributeString("xmlns", prefix, null, xmlQualifiedName.Namespace);
			}
		}

		protected override object CreateInstance(WorkflowMarkupSerializationManager serializationManager, Type type)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (type == null)
			{
				throw new ArgumentNullException("type");
			}
			object obj = null;
			IDesignerHost designerHost = serializationManager.GetService(typeof(IDesignerHost)) as IDesignerHost;
			XmlReader xmlReader = serializationManager.WorkflowMarkupStack[typeof(XmlReader)] as XmlReader;
			if (designerHost != null && xmlReader != null)
			{
				string text = string.Empty;
				while (xmlReader.MoveToNextAttribute() && !xmlReader.LocalName.Equals("Name", StringComparison.Ordinal))
				{
				}
				if (xmlReader.LocalName.Equals("Name", StringComparison.Ordinal) && xmlReader.ReadAttributeValue())
				{
					text = xmlReader.Value;
				}
				xmlReader.MoveToElement();
				if (!string.IsNullOrEmpty(text))
				{
					if (!(serializationManager.Context[typeof(CompositeActivityDesigner)] is CompositeActivityDesigner compositeActivityDesigner))
					{
						Activity activity = designerHost.RootComponent as Activity;
						if (activity != null && !text.Equals(activity.Name, StringComparison.Ordinal))
						{
							foreach (IComponent component in designerHost.Container.Components)
							{
								activity = component as Activity;
								if (activity != null && text.Equals(activity.Name, StringComparison.Ordinal))
								{
									break;
								}
							}
						}
						if (activity != null)
						{
							obj = designerHost.GetDesigner(activity);
						}
					}
					else if (compositeActivityDesigner.Activity is CompositeActivity compositeActivity)
					{
						Activity activity2 = null;
						foreach (Activity activity3 in compositeActivity.Activities)
						{
							if (text.Equals(activity3.Name, StringComparison.Ordinal))
							{
								activity2 = activity3;
								break;
							}
						}
						if (activity2 != null)
						{
							obj = designerHost.GetDesigner(activity2);
						}
					}
					if (obj == null)
					{
						serializationManager.ReportError(SR.GetString("Error_LayoutSerializationActivityNotFound", xmlReader.LocalName, text, "Name"));
					}
				}
				else
				{
					serializationManager.ReportError(SR.GetString("Error_LayoutSerializationAssociatedActivityNotFound", xmlReader.LocalName, "Name"));
				}
			}
			return obj;
		}

		protected internal override PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			List<PropertyInfo> list = new List<PropertyInfo>(base.GetProperties(serializationManager, obj));
			if (obj is ActivityDesigner activityDesigner)
			{
				PropertyInfo property = activityDesigner.GetType().GetProperty("Name", BindingFlags.Instance | BindingFlags.NonPublic);
				if (property != null)
				{
					list.Insert(0, property);
				}
			}
			return list.ToArray();
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class CompositeActivityDesignerLayoutSerializer : ActivityDesignerLayoutSerializer
	{
		protected internal override PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			List<PropertyInfo> list = new List<PropertyInfo>(base.GetProperties(serializationManager, obj));
			list.Add(typeof(CompositeActivityDesigner).GetProperty("Designers", BindingFlags.Instance | BindingFlags.NonPublic));
			return list.ToArray();
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class FreeformActivityDesignerLayoutSerializer : CompositeActivityDesignerLayoutSerializer
	{
		protected internal override PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			XmlWriter xmlWriter = serializationManager.WorkflowMarkupStack[typeof(XmlWriter)] as XmlWriter;
			PropertyInfo[] array = base.GetProperties(serializationManager, obj);
			if (obj is FreeformActivityDesigner freeformActivityDesigner)
			{
				List<PropertyInfo> list = new List<PropertyInfo>();
				PropertyInfo[] array2 = array;
				foreach (PropertyInfo propertyInfo in array2)
				{
					if (xmlWriter == null || !propertyInfo.Name.Equals("AutoSizeMargin", StringComparison.Ordinal) || !(freeformActivityDesigner.AutoSizeMargin == FreeformActivityDesigner.DefaultAutoSizeMargin))
					{
						list.Add(propertyInfo);
					}
				}
				list.Add(typeof(FreeformActivityDesigner).GetProperty("DesignerConnectors", BindingFlags.Instance | BindingFlags.NonPublic));
				array = list.ToArray();
			}
			return array;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ConnectorLayoutSerializer : WorkflowMarkupSerializer
	{
		protected internal override PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			List<PropertyInfo> list = new List<PropertyInfo>(base.GetProperties(serializationManager, obj));
			list.Add(typeof(Connector).GetProperty("SourceActivity", BindingFlags.Instance | BindingFlags.NonPublic));
			list.Add(typeof(Connector).GetProperty("SourceConnectionIndex", BindingFlags.Instance | BindingFlags.NonPublic));
			list.Add(typeof(Connector).GetProperty("SourceConnectionEdge", BindingFlags.Instance | BindingFlags.NonPublic));
			list.Add(typeof(Connector).GetProperty("TargetActivity", BindingFlags.Instance | BindingFlags.NonPublic));
			list.Add(typeof(Connector).GetProperty("TargetConnectionIndex", BindingFlags.Instance | BindingFlags.NonPublic));
			list.Add(typeof(Connector).GetProperty("TargetConnectionEdge", BindingFlags.Instance | BindingFlags.NonPublic));
			list.Add(typeof(Connector).GetProperty("Segments", BindingFlags.Instance | BindingFlags.NonPublic));
			return list.ToArray();
		}

		protected override object CreateInstance(WorkflowMarkupSerializationManager serializationManager, Type type)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (type == null)
			{
				throw new ArgumentNullException("type");
			}
			Connector result = null;
			IReferenceService referenceService = serializationManager.GetService(typeof(IReferenceService)) as IReferenceService;
			if (serializationManager.Context[typeof(FreeformActivityDesigner)] is FreeformActivityDesigner freeformActivityDesigner && referenceService != null)
			{
				ConnectionPoint connectionPoint = null;
				ConnectionPoint connectionPoint2 = null;
				try
				{
					Dictionary<string, string> connectorConstructionArguments = GetConnectorConstructionArguments(serializationManager, type);
					if (connectorConstructionArguments.ContainsKey("SourceActivity") && connectorConstructionArguments.ContainsKey("SourceConnectionIndex") && connectorConstructionArguments.ContainsKey("SourceConnectionEdge"))
					{
						ActivityDesigner designer = ActivityDesigner.GetDesigner(referenceService.GetReference(connectorConstructionArguments["SourceActivity"]) as Activity);
						DesignerEdges designerEdges = (DesignerEdges)Enum.Parse(typeof(DesignerEdges), connectorConstructionArguments["SourceConnectionEdge"]);
						int num = Convert.ToInt32(connectorConstructionArguments["SourceConnectionIndex"], CultureInfo.InvariantCulture);
						if (designer != null && designerEdges != 0 && num >= 0)
						{
							connectionPoint = new ConnectionPoint(designer, designerEdges, num);
						}
					}
					if (connectorConstructionArguments.ContainsKey("TargetActivity") && connectorConstructionArguments.ContainsKey("TargetConnectionIndex") && connectorConstructionArguments.ContainsKey("TargetConnectionEdge"))
					{
						ActivityDesigner designer2 = ActivityDesigner.GetDesigner(referenceService.GetReference(connectorConstructionArguments["TargetActivity"]) as Activity);
						DesignerEdges designerEdges2 = (DesignerEdges)Enum.Parse(typeof(DesignerEdges), connectorConstructionArguments["TargetConnectionEdge"]);
						int num2 = Convert.ToInt32(connectorConstructionArguments["TargetConnectionIndex"], CultureInfo.InvariantCulture);
						if (designer2 != null && designerEdges2 != 0 && num2 >= 0)
						{
							connectionPoint2 = new ConnectionPoint(designer2, designerEdges2, num2);
						}
					}
				}
				catch
				{
				}
				if (connectionPoint != null && connectionPoint2 != null)
				{
					result = freeformActivityDesigner.AddConnector(connectionPoint, connectionPoint2);
				}
			}
			return result;
		}

		protected override void OnAfterDeserialize(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			base.OnAfterDeserialize(serializationManager, obj);
			if (obj is Connector connector)
			{
				connector.SetConnectorModified(modified: true);
			}
		}

		protected Dictionary<string, string> GetConnectorConstructionArguments(WorkflowMarkupSerializationManager serializationManager, Type type)
		{
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			if (serializationManager.WorkflowMarkupStack[typeof(XmlReader)] is XmlReader { NodeType: XmlNodeType.Element } xmlReader)
			{
				while (xmlReader.MoveToNextAttribute())
				{
					string localName = xmlReader.LocalName;
					if (!dictionary.ContainsKey(localName))
					{
						xmlReader.ReadAttributeValue();
						dictionary.Add(localName, xmlReader.Value);
					}
				}
				xmlReader.MoveToElement();
			}
			return dictionary;
		}
	}
	internal sealed class ActivityDesignerLayoutSerializerProvider : IDesignerSerializationProvider
	{
		object IDesignerSerializationProvider.GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType)
		{
			if (typeof(Color) == objectType)
			{
				currentSerializer = new ColorMarkupSerializer();
			}
			else if (typeof(Size) == objectType)
			{
				currentSerializer = new SizeMarkupSerializer();
			}
			else if (typeof(Point) == objectType)
			{
				currentSerializer = new PointMarkupSerializer();
			}
			return currentSerializer;
		}
	}
	internal sealed class ColorMarkupSerializer : WorkflowMarkupSerializer
	{
		protected internal override bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			return value is Color;
		}

		protected internal override string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			string result = string.Empty;
			if (value is Color color)
			{
				result = "0X" + ((long)(uint)((color.A << 24) | (color.R << 16) | (color.G << 8) | color.B) & 0xFFFFFFFFL).ToString("X08", CultureInfo.InvariantCulture);
			}
			return result;
		}

		protected internal override object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value)
		{
			if (propertyType.IsAssignableFrom(typeof(Color)))
			{
				if (!string.IsNullOrEmpty(value))
				{
					if (value.StartsWith("0X", StringComparison.OrdinalIgnoreCase))
					{
						long num = Convert.ToInt64(value, 16) & 0xFFFFFFFFu;
						return Color.FromArgb((byte)(num >> 24), (byte)(num >> 16), (byte)(num >> 8), (byte)num);
					}
					return base.DeserializeFromString(serializationManager, propertyType, value);
				}
			}
			return null;
		}
	}
	internal sealed class SizeMarkupSerializer : WorkflowMarkupSerializer
	{
		protected internal override bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			return value is Size;
		}

		protected internal override PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			List<PropertyInfo> list = new List<PropertyInfo>();
			if (obj is Size)
			{
				list.Add(typeof(Size).GetProperty("Width"));
				list.Add(typeof(Size).GetProperty("Height"));
			}
			return list.ToArray();
		}

		protected internal override string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			string empty = string.Empty;
			TypeConverter converter = TypeDescriptor.GetConverter(value);
			if (converter != null && converter.CanConvertTo(typeof(string)))
			{
				return converter.ConvertTo(value, typeof(string)) as string;
			}
			return base.SerializeToString(serializationManager, value);
		}

		protected internal override object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value)
		{
			object result = Size.Empty;
			if (!string.IsNullOrEmpty(value))
			{
				TypeConverter converter = TypeDescriptor.GetConverter(typeof(Size));
				result = ((converter == null || !converter.CanConvertFrom(typeof(string)) || IsValidCompactAttributeFormat(value)) ? base.SerializeToString(serializationManager, value) : converter.ConvertFrom(value));
			}
			return result;
		}
	}
	internal sealed class PointMarkupSerializer : WorkflowMarkupSerializer
	{
		protected internal override bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			return value is Point;
		}

		protected internal override PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			List<PropertyInfo> list = new List<PropertyInfo>();
			if (obj is Point)
			{
				list.Add(typeof(Point).GetProperty("X"));
				list.Add(typeof(Point).GetProperty("Y"));
			}
			return list.ToArray();
		}

		protected internal override string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			string empty = string.Empty;
			TypeConverter converter = TypeDescriptor.GetConverter(value);
			if (converter != null && converter.CanConvertTo(typeof(string)))
			{
				return converter.ConvertTo(value, typeof(string)) as string;
			}
			return base.SerializeToString(serializationManager, value);
		}

		protected internal override object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value)
		{
			object result = Point.Empty;
			if (!string.IsNullOrEmpty(value))
			{
				TypeConverter converter = TypeDescriptor.GetConverter(typeof(Point));
				result = ((converter == null || !converter.CanConvertFrom(typeof(string)) || IsValidCompactAttributeFormat(value)) ? base.SerializeToString(serializationManager, value) : converter.ConvertFrom(value));
			}
			return result;
		}
	}
	internal sealed class CustomActivityDesignerAdapter : IDisposable
	{
		private IServiceProvider serviceProvider;

		private EventHandler ensureChildHierarchyHandler;

		public CustomActivityDesignerAdapter(IServiceProvider serviceProvider)
		{
			this.serviceProvider = serviceProvider;
			if (this.serviceProvider.GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
			{
				componentChangeService.ComponentAdding += OnComponentAdding;
				componentChangeService.ComponentAdded += OnComponentAdded;
			}
		}

		void IDisposable.Dispose()
		{
			if (ensureChildHierarchyHandler != null)
			{
				Application.Idle -= ensureChildHierarchyHandler;
				ensureChildHierarchyHandler = null;
			}
			if (serviceProvider.GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
			{
				componentChangeService.ComponentAdding -= OnComponentAdding;
				componentChangeService.ComponentAdded -= OnComponentAdded;
			}
		}

		private void OnComponentAdding(object sender, ComponentEventArgs eventArgs)
		{
			IDesignerHost designerHost = (IDesignerHost)serviceProvider.GetService(typeof(IDesignerHost));
			if (designerHost == null || designerHost.RootComponent != null || !(eventArgs.Component is Activity activity))
			{
				return;
			}
			DesignerAttribute designerAttribute = GetDesignerAttribute(activity, typeof(IRootDesigner));
			if (designerAttribute.DesignerTypeName == typeof(ActivityDesigner).AssemblyQualifiedName)
			{
				DesignerAttribute designerAttribute2 = GetDesignerAttribute(activity, typeof(IDesigner));
				if (designerAttribute2 != null)
				{
					TypeDescriptor.AddAttributes(activity, new DesignerAttribute(designerAttribute2.DesignerTypeName, typeof(IRootDesigner)));
				}
			}
		}

		private void OnComponentAdded(object sender, ComponentEventArgs eventArgs)
		{
			IDesignerHost designerHost = (IDesignerHost)serviceProvider.GetService(typeof(IDesignerHost));
			if (designerHost == null)
			{
				return;
			}
			if (designerHost.RootComponent == eventArgs.Component)
			{
				if (designerHost.RootComponent is Activity activity)
				{
					if (activity is CompositeActivity && ensureChildHierarchyHandler == null)
					{
						ensureChildHierarchyHandler = OnEnsureChildHierarchy;
						Application.Idle += ensureChildHierarchyHandler;
					}
					activity.UserData[UserDataKeys.CustomActivity] = false;
				}
			}
			else if (eventArgs.Component is Activity)
			{
				if (eventArgs.Component is CompositeActivity && Helpers.IsCustomActivity(eventArgs.Component as CompositeActivity))
				{
					(eventArgs.Component as Activity).UserData[UserDataKeys.CustomActivity] = true;
				}
				else
				{
					(eventArgs.Component as Activity).UserData[UserDataKeys.CustomActivity] = false;
				}
			}
		}

		private void OnEnsureChildHierarchy(object sender, EventArgs e)
		{
			if (ensureChildHierarchyHandler != null)
			{
				Application.Idle -= ensureChildHierarchyHandler;
				ensureChildHierarchyHandler = null;
				IDesignerHost designerHost = (IDesignerHost)serviceProvider.GetService(typeof(IDesignerHost));
				if (designerHost != null)
				{
					EnsureDefaultChildHierarchy(designerHost);
				}
			}
		}

		private static DesignerAttribute GetDesignerAttribute(object component, Type designerBaseType)
		{
			AttributeCollection attributes = TypeDescriptor.GetAttributes(component);
			foreach (Attribute item in attributes)
			{
				if (item is DesignerAttribute designerAttribute && designerAttribute.DesignerBaseTypeName == designerBaseType.AssemblyQualifiedName)
				{
					return designerAttribute;
				}
			}
			return null;
		}

		private static void EnsureDefaultChildHierarchy(IDesignerHost designerHost)
		{
			if (!(designerHost.RootComponent is CompositeActivity compositeActivity) || compositeActivity.Activities.Count != 0)
			{
				return;
			}
			object[] customAttributes = compositeActivity.GetType().GetCustomAttributes(typeof(ToolboxItemAttribute), inherit: false);
			ToolboxItemAttribute toolboxItemAttribute = ((customAttributes != null && customAttributes.GetLength(0) > 0) ? (customAttributes[0] as ToolboxItemAttribute) : null);
			if (toolboxItemAttribute == null || !(toolboxItemAttribute.ToolboxItemType != null))
			{
				return;
			}
			ToolboxItem toolboxItem = Activator.CreateInstance(toolboxItemAttribute.ToolboxItemType, compositeActivity.GetType()) as ToolboxItem;
			IComponent[] array = toolboxItem.CreateComponents();
			CompositeActivity compositeActivity2 = null;
			IComponent[] array2 = array;
			foreach (IComponent component in array2)
			{
				if (component.GetType() == compositeActivity.GetType())
				{
					compositeActivity2 = component as CompositeActivity;
					break;
				}
			}
			if (compositeActivity2 != null && compositeActivity2.Activities.Count > 0 && designerHost.GetService(typeof(IIdentifierCreationService)) is IIdentifierCreationService identifierCreationService)
			{
				Activity[] array3 = compositeActivity2.Activities.ToArray();
				compositeActivity2.Activities.Clear();
				identifierCreationService.EnsureUniqueIdentifiers(compositeActivity, array3);
				Activity[] array4 = array3;
				foreach (Activity item in array4)
				{
					compositeActivity.Activities.Add(item);
				}
				Activity[] array5 = array3;
				foreach (Activity activity in array5)
				{
					WorkflowDesignerLoader.AddActivityToDesigner(designerHost, activity);
				}
			}
		}
	}
	[ProvideProperty("BaseActivityType", typeof(Activity))]
	internal sealed class CustomActivityPropertyExtender : IExtenderProvider
	{
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[SRDisplayName("BaseActivityType")]
		[SRCategory("Activity")]
		[SRDescription("CustomActivityBaseTypeDesc")]
		[Editor(typeof(TypeBrowserEditor), typeof(UITypeEditor))]
		[DesignOnly(true)]
		[TypeFilterProvider(typeof(BaseClassTypeFilterProvider))]
		[DefaultValue("System.Workflow.ComponentModel.Sequence")]
		public string GetBaseActivityType(Activity activity)
		{
			return activity.GetType().FullName;
		}

		public void SetBaseActivityType(Activity activity, string baseActivityTypeName)
		{
			CustomActivityDesignerHelper.SetBaseTypeName(baseActivityTypeName, activity.Site);
		}

		bool IExtenderProvider.CanExtend(object extendee)
		{
			bool result = false;
			if (extendee is Activity { Site: not null } activity && activity == Helpers.GetRootActivity(activity))
			{
				ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
				if (designer != null && designer.ParentDesigner == null)
				{
					result = true;
				}
			}
			return result;
		}
	}
	internal static class CustomActivityDesignerHelper
	{
		public static Type GetCustomActivityType(IServiceProvider serviceProvider)
		{
			if (!(serviceProvider.GetService(typeof(IDesignerHost)) is IDesignerHost { RootComponentClassName: var rootComponentClassName }))
			{
				throw new Exception(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
			}
			if (string.IsNullOrEmpty(rootComponentClassName))
			{
				return null;
			}
			if (!(serviceProvider.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider))
			{
				throw new Exception(SR.GetString("General_MissingService", typeof(ITypeProvider).FullName));
			}
			return typeProvider.GetType(rootComponentClassName, throwOnError: false);
		}

		public static void SetBaseTypeName(string typeName, IServiceProvider serviceProvider)
		{
			if (string.IsNullOrEmpty(typeName))
			{
				throw new ArgumentNullException("typeName");
			}
			if (!(serviceProvider.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
			}
			if (!(serviceProvider.GetService(typeof(IMemberCreationService)) is IMemberCreationService memberCreationService))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IMemberCreationService).FullName));
			}
			Type type = ValidateBaseType(typeName, serviceProvider);
			Type type2 = designerHost.RootComponent.GetType();
			if (type2 == type)
			{
				return;
			}
			if (!TypeProvider.IsAssignable(typeof(CompositeActivity), type))
			{
				PropertyDescriptor propertyDescriptor = TypeDescriptor.GetProperties(designerHost.RootComponent)["SupportsEvents"];
				if (propertyDescriptor != null && (bool)propertyDescriptor.GetValue(designerHost.RootComponent))
				{
					propertyDescriptor.SetValue(designerHost.RootComponent, false);
				}
				PropertyDescriptor propertyDescriptor2 = TypeDescriptor.GetProperties(designerHost.RootComponent)["SupportsExceptions"];
				if (propertyDescriptor2 != null && (bool)propertyDescriptor2.GetValue(designerHost.RootComponent))
				{
					propertyDescriptor2.SetValue(designerHost.RootComponent, false);
				}
			}
			PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(designerHost.RootComponent);
			if (designerHost.RootComponent is CompositeActivity && ((CompositeActivity)designerHost.RootComponent).Activities.Count > 0)
			{
				if (serviceProvider.GetService(typeof(IUIService)) is IUIService iUIService && DialogResult.OK != iUIService.ShowMessage(SR.GetString("NoChildActivities_Message"), SR.GetString("NoChildActivities_Caption"), MessageBoxButtons.OKCancel))
				{
					return;
				}
				List<Activity> list = new List<Activity>(((CompositeActivity)designerHost.RootComponent).Activities);
				if (designerHost.GetDesigner(designerHost.RootComponent) is CompositeActivityDesigner compositeActivityDesigner)
				{
					compositeActivityDesigner.RemoveActivities(list.AsReadOnly());
				}
			}
			foreach (PropertyDescriptor item in properties)
			{
				if (!item.Name.Equals("BaseActivityType", StringComparison.Ordinal) && !item.Name.Equals("Name", StringComparison.Ordinal) && item.CanResetValue(designerHost.RootComponent))
				{
					item.ResetValue(designerHost.RootComponent);
				}
			}
			PropertyDescriptor propertyDescriptor4 = properties["BaseActivityType"];
			PropertyDescriptor propertyDescriptor5 = TypeDescriptor.CreateProperty(propertyDescriptor4.ComponentType, propertyDescriptor4, DesignerSerializationVisibilityAttribute.Visible);
			IComponentChangeService componentChangeService = serviceProvider.GetService(typeof(IComponentChangeService)) as IComponentChangeService;
			componentChangeService?.OnComponentChanging(designerHost.RootComponent, propertyDescriptor5);
			((Activity)designerHost.RootComponent).UserData[UserDataKeys.NewBaseType] = type;
			memberCreationService.UpdateBaseType(designerHost.RootComponentClassName, type);
			componentChangeService?.OnComponentChanged(designerHost.RootComponent, propertyDescriptor5, propertyDescriptor5.GetValue(designerHost.RootComponent), typeName);
			Application.RaiseIdle(new EventArgs());
		}

		private static Type ValidateBaseType(string typeName, IServiceProvider serviceProvider)
		{
			if (typeName != null && typeName.Length > 0)
			{
				ITypeProvider typeProvider = (ITypeProvider)serviceProvider.GetService(typeof(ITypeProvider));
				if (typeProvider == null)
				{
					throw new Exception(SR.GetString("General_MissingService", typeof(ITypeProvider).FullName));
				}
				Type type = typeProvider.GetType(typeName);
				if (type == null)
				{
					throw new Exception(SR.GetString("Error_TypeNotResolved", typeName));
				}
				if (!(serviceProvider.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
				{
					throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
				}
				Type type2 = typeProvider.GetType(designerHost.RootComponentClassName);
				if (type is DesignTimeType && type2 != null && type2.Assembly == type.Assembly)
				{
					throw new InvalidOperationException(SR.GetString("Error_CantUseCurrentProjectTypeAsBase"));
				}
				if (!TypeProvider.IsAssignable(typeof(Activity), type))
				{
					throw new InvalidOperationException(SR.GetString("Error_BaseTypeMustBeActivity"));
				}
				return type;
			}
			return null;
		}

		internal static List<CustomProperty> GetCustomProperties(IServiceProvider serviceProvider)
		{
			if (serviceProvider.GetService(typeof(IDesignerLoaderService)) is WorkflowDesignerLoader workflowDesignerLoader)
			{
				workflowDesignerLoader.Flush();
			}
			Type customActivityType = GetCustomActivityType(serviceProvider);
			if (customActivityType == null)
			{
				return null;
			}
			List<CustomProperty> list = new List<CustomProperty>();
			PropertyInfo[] properties = customActivityType.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public);
			PropertyInfo[] array = properties;
			foreach (PropertyInfo propertyInfo in array)
			{
				if (propertyInfo.PropertyType != null)
				{
					list.Add(CreateCustomProperty(serviceProvider, customActivityType, propertyInfo, propertyInfo.PropertyType));
				}
			}
			EventInfo[] events = customActivityType.GetEvents(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public);
			EventInfo[] array2 = events;
			foreach (EventInfo eventInfo in array2)
			{
				if (!(eventInfo.EventHandlerType == null))
				{
					CustomProperty customProperty = CreateCustomProperty(serviceProvider, customActivityType, eventInfo, eventInfo.EventHandlerType);
					customProperty.IsEvent = true;
					list.Add(customProperty);
				}
			}
			return list;
		}

		private static CustomProperty CreateCustomProperty(IServiceProvider serviceProvider, Type customActivityType, MemberInfo member, Type propertyType)
		{
			CustomProperty customProperty = new CustomProperty(serviceProvider);
			customProperty.Name = member.Name;
			customProperty.IsEvent = member is EventInfo;
			if (propertyType == typeof(ActivityBind))
			{
				customProperty.GenerateDependencyProperty = false;
				customProperty.Type = typeof(ActivityBind).FullName;
			}
			else
			{
				string text = (customProperty.IsEvent ? "Event" : "Property");
				FieldInfo field = customActivityType.GetField(member.Name + text, BindingFlags.Static | BindingFlags.Public);
				if (field != null && field.FieldType == typeof(DependencyProperty))
				{
					customProperty.GenerateDependencyProperty = true;
				}
				else
				{
					customProperty.GenerateDependencyProperty = false;
				}
				customProperty.Type = propertyType.FullName;
			}
			customProperty.oldPropertyName = member.Name;
			customProperty.oldPropertyType = propertyType.FullName;
			object[] customAttributes = member.GetCustomAttributes(typeof(FlagsAttribute), inherit: true);
			if (customAttributes != null && customAttributes.Length != 0)
			{
				customProperty.Hidden = true;
			}
			object[] customAttributes2 = member.GetCustomAttributes(inherit: false);
			foreach (object obj in customAttributes2)
			{
				AttributeInfo attributeInfo = ((obj is AttributeInfoAttribute attributeInfoAttribute) ? attributeInfoAttribute.AttributeInfo : null);
				if (attributeInfo == null)
				{
					continue;
				}
				try
				{
					if (attributeInfo.AttributeType == typeof(BrowsableAttribute) && attributeInfo.ArgumentValues.Count > 0)
					{
						customProperty.Browseable = (bool)attributeInfo.GetArgumentValueAs(serviceProvider, 0, typeof(bool));
					}
					else if (attributeInfo.AttributeType == typeof(CategoryAttribute) && attributeInfo.ArgumentValues.Count > 0)
					{
						customProperty.Category = attributeInfo.GetArgumentValueAs(serviceProvider, 0, typeof(string)) as string;
					}
					else if (attributeInfo.AttributeType == typeof(DescriptionAttribute) && attributeInfo.ArgumentValues.Count > 0)
					{
						customProperty.Description = attributeInfo.GetArgumentValueAs(serviceProvider, 0, typeof(string)) as string;
					}
					else if (attributeInfo.AttributeType == typeof(DesignerSerializationVisibilityAttribute) && attributeInfo.ArgumentValues.Count > 0)
					{
						customProperty.DesignerSerializationVisibility = (DesignerSerializationVisibility)attributeInfo.GetArgumentValueAs(serviceProvider, 0, typeof(DesignerSerializationVisibility));
					}
					else
					{
						if (!(attributeInfo.AttributeType == typeof(EditorAttribute)) || attributeInfo.ArgumentValues.Count <= 1)
						{
							continue;
						}
						Type type = attributeInfo.GetArgumentValueAs(serviceProvider, 1, typeof(Type)) as Type;
						if (type == typeof(UITypeEditor))
						{
							Type type2 = attributeInfo.GetArgumentValueAs(serviceProvider, 0, typeof(Type)) as Type;
							if (type2 != null)
							{
								customProperty.UITypeEditor = type2.FullName;
							}
							if (string.IsNullOrEmpty(customProperty.UITypeEditor))
							{
								customProperty.UITypeEditor = attributeInfo.GetArgumentValueAs(serviceProvider, 0, typeof(string)) as string;
							}
						}
						continue;
					}
				}
				catch
				{
				}
			}
			return customProperty;
		}

		internal static void SetCustomProperties(List<CustomProperty> customProperties, IServiceProvider serviceProvider)
		{
			if (customProperties == null)
			{
				throw new ArgumentNullException("customProperties");
			}
			Type customActivityType = GetCustomActivityType(serviceProvider);
			if (!(customActivityType == null))
			{
				List<CustomProperty> customProperties2 = GetCustomProperties(serviceProvider);
				RemoveDeletedProperties(customProperties, customActivityType, serviceProvider);
				AddNewProperties(customProperties, customActivityType, serviceProvider, customProperties2);
			}
		}

		private static void RemoveDeletedProperties(List<CustomProperty> propCollection, Type customActivityType, IServiceProvider serviceProvider)
		{
			if (!(serviceProvider.GetService(typeof(IMemberCreationService)) is IMemberCreationService memberCreationService))
			{
				throw new Exception(SR.GetString("General_MissingService", typeof(IMemberCreationService).FullName));
			}
			PropertyInfo[] properties = customActivityType.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public);
			PropertyInfo[] array = properties;
			foreach (PropertyInfo propertyInfo in array)
			{
				bool flag = false;
				foreach (CustomProperty item in propCollection)
				{
					if (propertyInfo.Name == item.oldPropertyName && propertyInfo.PropertyType.FullName == item.oldPropertyType)
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					memberCreationService.RemoveProperty(customActivityType.FullName, propertyInfo.Name, propertyInfo.PropertyType);
				}
			}
			EventInfo[] events = customActivityType.GetEvents(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public);
			EventInfo[] array2 = events;
			foreach (EventInfo eventInfo in array2)
			{
				bool flag2 = false;
				foreach (CustomProperty item2 in propCollection)
				{
					if (eventInfo.Name == item2.oldPropertyName && eventInfo.EventHandlerType.FullName == item2.oldPropertyType)
					{
						flag2 = true;
						break;
					}
				}
				if (!flag2 && eventInfo.Name != null && eventInfo.EventHandlerType != null)
				{
					memberCreationService.RemoveEvent(customActivityType.FullName, eventInfo.Name, eventInfo.EventHandlerType);
				}
			}
		}

		private static void AddNewProperties(List<CustomProperty> propCollection, Type customActivityType, IServiceProvider serviceProvider, List<CustomProperty> existingProps)
		{
			if (!(serviceProvider.GetService(typeof(IMemberCreationService)) is IMemberCreationService memberCreationService))
			{
				throw new Exception(SR.GetString("General_MissingService", typeof(IMemberCreationService).FullName));
			}
			if (!(serviceProvider.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider))
			{
				throw new Exception(SR.GetString("General_MissingService", typeof(ITypeProvider).FullName));
			}
			foreach (CustomProperty item in propCollection)
			{
				bool flag = item.oldPropertyName == null || item.oldPropertyType == null;
				if (!flag)
				{
					flag = (item.IsEvent ? (customActivityType.GetEvent(item.oldPropertyName) == null) : (customActivityType.GetProperty(item.oldPropertyName, typeProvider.GetType(item.oldPropertyType)) == null));
				}
				if (flag)
				{
					AttributeInfo[] attributes = CreateCustomPropertyAttributeArray(item, serviceProvider);
					if (item.IsEvent)
					{
						memberCreationService.CreateEvent(customActivityType.FullName, item.Name, typeProvider.GetType(item.Type), attributes, item.GenerateDependencyProperty);
					}
					else
					{
						memberCreationService.CreateProperty(customActivityType.FullName, item.Name, typeProvider.GetType(item.Type), attributes, item.GenerateDependencyProperty, isMetaProperty: false, isAttached: false, null, isReadOnly: false);
					}
					continue;
				}
				CustomProperty customProperty = null;
				foreach (CustomProperty existingProp in existingProps)
				{
					if (existingProp.Name == item.oldPropertyName && existingProp.Type == item.oldPropertyType)
					{
						customProperty = existingProp;
					}
				}
				if (customProperty != null && !ArePropertiesDifferent(item, customProperty))
				{
					continue;
				}
				AttributeInfo[] attributes2 = CreateCustomPropertyAttributeArray(item, serviceProvider);
				AttributeInfo[] array = CreateCustomPropertyAttributeArray(customProperty, serviceProvider);
				Type type = typeProvider.GetType(item.Type, throwOnError: false);
				Type type2 = typeProvider.GetType(item.oldPropertyType, throwOnError: false);
				if (type != null)
				{
					if (item.IsEvent)
					{
						memberCreationService.UpdateEvent(customActivityType.FullName, item.oldPropertyName, type2, item.Name, type, attributes2, item.GenerateDependencyProperty, isMetaProperty: false);
					}
					else
					{
						memberCreationService.UpdateProperty(customActivityType.FullName, item.oldPropertyName, type2, item.Name, type, attributes2, item.GenerateDependencyProperty, isMetaProperty: false);
					}
				}
			}
		}

		private static AttributeInfo[] CreateCustomPropertyAttributeArray(CustomProperty property, IServiceProvider serviceProvider)
		{
			if (property == null || property.Hidden)
			{
				return new AttributeInfo[0];
			}
			List<AttributeInfo> list = new List<AttributeInfo>();
			if (property.Category != null)
			{
				list.Add(new AttributeInfo(typeof(CategoryAttribute), new string[0], new object[1]
				{
					new CodePrimitiveExpression(property.Category)
				}));
			}
			if (property.Description != null)
			{
				list.Add(new AttributeInfo(typeof(DescriptionAttribute), new string[0], new object[1]
				{
					new CodePrimitiveExpression(property.Description)
				}));
			}
			if (!string.IsNullOrEmpty(property.UITypeEditor))
			{
				list.Add(new AttributeInfo(typeof(EditorAttribute), new string[0], new object[2]
				{
					new CodeTypeOfExpression(property.UITypeEditor),
					new CodeTypeOfExpression(typeof(UITypeEditor))
				}));
			}
			list.Add(new AttributeInfo(typeof(BrowsableAttribute), new string[0], new object[1]
			{
				new CodePrimitiveExpression(property.Browseable)
			}));
			list.Add(new AttributeInfo(typeof(DesignerSerializationVisibilityAttribute), new string[0], new object[1]
			{
				new CodeSnippetExpression(typeof(DesignerSerializationVisibility).Name + "." + property.DesignerSerializationVisibility)
			}));
			return list.ToArray();
		}

		private static bool ArePropertiesDifferent(CustomProperty property, CustomProperty oldProperty)
		{
			if (property.Name == oldProperty.Name && property.Type == oldProperty.Type && property.Browseable == oldProperty.Browseable && property.Category == oldProperty.Category && property.Description == oldProperty.Description && property.DesignerSerializationVisibility == oldProperty.DesignerSerializationVisibility && property.Hidden == oldProperty.Hidden && property.UITypeEditor == oldProperty.UITypeEditor)
			{
				return false;
			}
			return true;
		}
	}
	internal sealed class BaseClassTypeFilterProvider : ITypeFilterProvider
	{
		private IServiceProvider serviceProvider;

		string ITypeFilterProvider.FilterDescription => SR.GetString("CustomActivityBaseClassTypeFilterProviderDesc");

		public BaseClassTypeFilterProvider(IServiceProvider serviceProvider)
		{
			this.serviceProvider = serviceProvider;
		}

		bool ITypeFilterProvider.CanFilterType(Type type, bool throwOnError)
		{
			bool result = false;
			if (TypeProvider.IsAssignable(typeof(Activity), type) && type.IsPublic && !type.IsSealed && !type.IsAbstract && !(type is DesignTimeType))
			{
				result = true;
			}
			return result;
		}
	}
	internal sealed class CustomProperty
	{
		public string oldPropertyName;

		public string oldPropertyType;

		private string name;

		private string type;

		private string category;

		private string description;

		private DesignerSerializationVisibility designerSerializationVisibility = DesignerSerializationVisibility.Visible;

		private bool isEvent;

		private bool browseable = true;

		private bool hidden;

		private string uiTypeEditor;

		private IServiceProvider serviceProvider;

		private bool generateDependencyProperty = true;

		public string Name
		{
			get
			{
				return name;
			}
			set
			{
				name = value;
			}
		}

		public string Type
		{
			get
			{
				return type;
			}
			set
			{
				type = value;
			}
		}

		public string Description
		{
			get
			{
				return description;
			}
			set
			{
				description = value;
			}
		}

		public string Category
		{
			get
			{
				return category;
			}
			set
			{
				category = value;
			}
		}

		public bool Browseable
		{
			get
			{
				return browseable;
			}
			set
			{
				browseable = value;
			}
		}

		public DesignerSerializationVisibility DesignerSerializationVisibility
		{
			get
			{
				return designerSerializationVisibility;
			}
			set
			{
				designerSerializationVisibility = value;
			}
		}

		public string UITypeEditor
		{
			get
			{
				return uiTypeEditor;
			}
			set
			{
				string text = value;
				if (serviceProvider != null)
				{
					if (!(serviceProvider.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider))
					{
						throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(ITypeProvider).FullName));
					}
					Type type = typeProvider.GetType(text);
					if (type != null)
					{
						text = type.FullName;
					}
				}
				uiTypeEditor = text;
			}
		}

		public bool IsEvent
		{
			get
			{
				return isEvent;
			}
			set
			{
				isEvent = value;
			}
		}

		public bool Hidden
		{
			get
			{
				return hidden;
			}
			set
			{
				hidden = value;
			}
		}

		public bool GenerateDependencyProperty
		{
			get
			{
				return generateDependencyProperty;
			}
			set
			{
				generateDependencyProperty = value;
			}
		}

		public CustomProperty(IServiceProvider serviceProvider)
		{
			this.serviceProvider = serviceProvider;
		}

		public static CustomProperty CreateCustomProperty(IServiceProvider serviceProvider, string customPropertyName, PropertyDescriptor propertyDescriptor, object propertyOwner)
		{
			CustomProperty customProperty = new CustomProperty(serviceProvider);
			customProperty.Name = customPropertyName;
			if (TypeProvider.IsAssignable(typeof(ActivityBind), propertyDescriptor.PropertyType))
			{
				Type baseType = PropertyDescriptorUtils.GetBaseType(propertyDescriptor, propertyOwner, serviceProvider);
				if (baseType == null)
				{
					throw new InvalidOperationException(SR.GetString("Error_CantDeterminePropertyBaseType", propertyDescriptor.Name));
				}
				customProperty.Type = baseType.FullName;
			}
			else
			{
				customProperty.Type = propertyDescriptor.PropertyType.FullName;
			}
			if (propertyDescriptor is ActivityBindPropertyDescriptor)
			{
				customProperty.IsEvent = DependencyProperty.FromName(propertyDescriptor.Name, propertyDescriptor.ComponentType)?.IsEvent ?? false;
			}
			customProperty.Category = propertyDescriptor.Category;
			return customProperty;
		}
	}
	internal sealed class CommandSet : IDisposable
	{
		internal static CommandID[] NavigationToolCommandIds = new CommandID[4]
		{
			WorkflowMenuCommands.ZoomIn,
			WorkflowMenuCommands.ZoomOut,
			WorkflowMenuCommands.Pan,
			WorkflowMenuCommands.DefaultFilter
		};

		private IServiceProvider serviceProvider;

		private IMenuCommandService menuCommandService;

		private ISelectionService selectionService;

		private WorkflowView workflowView;

		private List<CommandSetItem> commandSet;

		private CommandSetItem[] zoomCommands;

		private CommandSetItem[] layoutCommands;

		private CommandSetItem[] navigationToolCommands;

		private const string CF_DESIGNER = "CF_WINOEDESIGNERCOMPONENTS";

		private const string CF_DESIGNERSTATE = "CF_WINOEDESIGNERCOMPONENTSSTATE";

		private WorkflowDesignerMessageFilter activeFilter;

		public CommandSet(IServiceProvider serviceProvider)
		{
			this.serviceProvider = serviceProvider;
			menuCommandService = (IMenuCommandService)this.serviceProvider.GetService(typeof(IMenuCommandService));
			if (menuCommandService == null)
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IMenuCommandService).FullName));
			}
			workflowView = serviceProvider.GetService(typeof(WorkflowView)) as WorkflowView;
			if (workflowView == null)
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(WorkflowView).FullName));
			}
			selectionService = (ISelectionService)this.serviceProvider.GetService(typeof(ISelectionService));
			if (selectionService == null)
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(ISelectionService).FullName));
			}
			commandSet = new List<CommandSetItem>();
			commandSet.AddRange(new CommandSetItem[28]
			{
				new CommandSetItem(OnStatusAlways, OnMenuSaveWorkflowAsImage, WorkflowMenuCommands.SaveAsImage),
				new CommandSetItem(OnStatusAlways, OnMenuCopyToClipboard, WorkflowMenuCommands.CopyToClipboard),
				new CommandSetItem(OnStatusPrint, OnMenuPrint, WorkflowMenuCommands.Print),
				new CommandSetItem(OnStatusPageSetup, OnMenuPageSetup, WorkflowMenuCommands.PageSetup),
				new CommandSetItem(OnStatusDelete, OnMenuDelete, StandardCommands.Delete),
				new CommandSetItem(OnStatusCopy, OnMenuCopy, StandardCommands.Copy),
				new CommandSetItem(OnStatusCut, OnMenuCut, StandardCommands.Cut),
				new CommandSetItem(OnStatusPaste, OnMenuPaste, StandardCommands.Paste, immidiateStatusUpdate: true),
				new CommandSetItem(OnStatusAlways, OnMenuSelectAll, StandardCommands.SelectAll),
				new CommandSetItem(OnStatusAlways, OnMenuDesignerProperties, WorkflowMenuCommands.DesignerProperties),
				new CommandSetItem(OnStatusAlways, OnViewCode, new CommandID(StandardCommands.Cut.Guid, 333)),
				new CommandSetItem(OnStatusAlways, OnKeyCancel, MenuCommands.KeyCancel),
				new CommandSetItem(OnStatusAlways, OnKeyCancel, MenuCommands.KeyReverseCancel),
				new CommandSetItem(OnStatusAlways, OnKeyMove, MenuCommands.KeyMoveUp),
				new CommandSetItem(OnStatusAlways, OnKeyMove, MenuCommands.KeyMoveDown),
				new CommandSetItem(OnStatusAlways, OnKeyMove, MenuCommands.KeyMoveLeft),
				new CommandSetItem(OnStatusAlways, OnKeyMove, MenuCommands.KeyMoveRight),
				new CommandSetItem(OnStatusAlways, OnKeyMove, MenuCommands.KeySelectNext),
				new CommandSetItem(OnStatusAlways, OnKeyMove, MenuCommands.KeySelectPrevious),
				new CommandSetItem(OnStatusExpandCollapse, OnExpandCollapse, WorkflowMenuCommands.Expand),
				new CommandSetItem(OnStatusExpandCollapse, OnExpandCollapse, WorkflowMenuCommands.Collapse),
				new CommandSetItem(OnStatusEnable, OnEnable, WorkflowMenuCommands.Disable, immidiateStatusUpdate: true),
				new CommandSetItem(OnStatusEnable, OnEnable, WorkflowMenuCommands.Enable, immidiateStatusUpdate: true),
				new CommandSetItem(OnStatusAlways, OnCreateTheme, WorkflowMenuCommands.CreateTheme),
				new CommandSetItem(OnStatusAlways, OnChangeTheme, WorkflowMenuCommands.ChangeTheme),
				new CommandSetItem(OnStatusAnySelection, OnKeyDefault, MenuCommands.KeyDefaultAction),
				new CommandSetItem(OnStatusAlways, OnKeyPageDnUp, WorkflowMenuCommands.PageUp),
				new CommandSetItem(OnStatusAlways, OnKeyPageDnUp, WorkflowMenuCommands.PageDown)
			});
			zoomCommands = new CommandSetItem[8]
			{
				new CommandSetItem(OnStatusZoom, OnZoom, WorkflowMenuCommands.Zoom400Mode, DR.GetString("Zoom400Mode")),
				new CommandSetItem(OnStatusZoom, OnZoom, WorkflowMenuCommands.Zoom300Mode, DR.GetString("Zoom300Mode")),
				new CommandSetItem(OnStatusZoom, OnZoom, WorkflowMenuCommands.Zoom200Mode, DR.GetString("Zoom200Mode")),
				new CommandSetItem(OnStatusZoom, OnZoom, WorkflowMenuCommands.Zoom150Mode, DR.GetString("Zoom150Mode")),
				new CommandSetItem(OnStatusZoom, OnZoom, WorkflowMenuCommands.Zoom100Mode, DR.GetString("Zoom100Mode")),
				new CommandSetItem(OnStatusZoom, OnZoom, WorkflowMenuCommands.Zoom75Mode, DR.GetString("Zoom75Mode")),
				new CommandSetItem(OnStatusZoom, OnZoom, WorkflowMenuCommands.Zoom50Mode, DR.GetString("Zoom50Mode")),
				new CommandSetItem(OnStatusZoom, OnZoom, WorkflowMenuCommands.ShowAll, DR.GetString("ZoomShowAll"))
			};
			commandSet.AddRange(zoomCommands);
			layoutCommands = new CommandSetItem[3]
			{
				new CommandSetItem(OnStatusLayout, OnPageLayout, WorkflowMenuCommands.DefaultPage),
				new CommandSetItem(OnStatusLayout, OnPageLayout, WorkflowMenuCommands.PrintPreviewPage),
				new CommandSetItem(OnStatusLayout, OnPageLayout, WorkflowMenuCommands.PrintPreview)
			};
			commandSet.AddRange(layoutCommands);
			navigationToolCommands = new CommandSetItem[4]
			{
				new CommandSetItem(OnStatusMessageFilter, OnMessageFilterChanged, NavigationToolCommandIds[0]),
				new CommandSetItem(OnStatusMessageFilter, OnMessageFilterChanged, NavigationToolCommandIds[1]),
				new CommandSetItem(OnStatusMessageFilter, OnMessageFilterChanged, NavigationToolCommandIds[2]),
				new CommandSetItem(OnStatusMessageFilter, OnMessageFilterChanged, NavigationToolCommandIds[3])
			};
			commandSet.AddRange(navigationToolCommands);
			for (int i = 0; i < commandSet.Count; i++)
			{
				if (menuCommandService.FindCommand(commandSet[i].CommandID) == null)
				{
					menuCommandService.AddCommand(commandSet[i]);
				}
			}
			if (this.serviceProvider.GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
			{
				componentChangeService.ComponentChanged += OnComponentChanged;
			}
			if (this.serviceProvider.GetService(typeof(IDictionaryService)) is IDictionaryService dictionaryService)
			{
				dictionaryService.SetValue(typeof(CommandID), new CommandID(new Guid("5f1c3c8d-60f1-4b98-b85b-8679f97e8eac"), 0));
			}
		}

		public void Dispose()
		{
			if (serviceProvider.GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
			{
				componentChangeService.ComponentChanged -= OnComponentChanged;
			}
			if (activeFilter != null)
			{
				workflowView.RemoveDesignerMessageFilter(activeFilter);
				activeFilter.Dispose();
				activeFilter = null;
			}
			selectionService = null;
			for (int i = 0; i < commandSet.Count; i++)
			{
				menuCommandService.RemoveCommand(commandSet[i]);
			}
			menuCommandService = null;
		}

		internal void UpdateCommandSet()
		{
			for (int i = 0; i < commandSet.Count; i++)
			{
				commandSet[i].UpdateStatus();
			}
		}

		internal void UpdateZoomCommands(bool enable)
		{
			int num = ConvertToZoomCommand(workflowView.Zoom);
			CommandSetItem[] array = zoomCommands;
			foreach (MenuCommand menuCommand in array)
			{
				menuCommand.Enabled = enable;
				menuCommand.Checked = num == menuCommand.CommandID.ID;
			}
		}

		internal void UpdatePageLayoutCommands(bool enable)
		{
			CommandSetItem[] array = layoutCommands;
			foreach (MenuCommand menuCommand in array)
			{
				menuCommand.Enabled = enable;
				menuCommand.Checked = (workflowView.PrintPreviewMode ? (menuCommand.CommandID == WorkflowMenuCommands.PrintPreview || menuCommand.CommandID == WorkflowMenuCommands.PrintPreviewPage) : (menuCommand.CommandID == WorkflowMenuCommands.DefaultPage));
			}
		}

		internal void UpdatePanCommands(bool enable)
		{
			CommandID commandID = ConvertMessageFilterToCommandID();
			CommandSetItem[] array = navigationToolCommands;
			foreach (MenuCommand menuCommand in array)
			{
				menuCommand.Enabled = enable;
				menuCommand.Checked = commandID == menuCommand.CommandID;
			}
		}

		private CommandID ConvertMessageFilterToCommandID()
		{
			if (activeFilter is PanningMessageFilter)
			{
				return WorkflowMenuCommands.Pan;
			}
			if (activeFilter is ZoomingMessageFilter)
			{
				if (((ZoomingMessageFilter)activeFilter).ZoomingIn)
				{
					return WorkflowMenuCommands.ZoomIn;
				}
				return WorkflowMenuCommands.ZoomOut;
			}
			return WorkflowMenuCommands.DefaultFilter;
		}

		private int ConvertToZoomLevel(int commandId)
		{
			int result = 100;
			if (commandId == WorkflowMenuCommands.Zoom400Mode.ID)
			{
				result = 400;
			}
			else if (commandId == WorkflowMenuCommands.Zoom300Mode.ID)
			{
				result = 300;
			}
			else if (commandId == WorkflowMenuCommands.Zoom200Mode.ID)
			{
				result = 200;
			}
			else if (commandId == WorkflowMenuCommands.Zoom150Mode.ID)
			{
				result = 150;
			}
			else if (commandId == WorkflowMenuCommands.Zoom100Mode.ID)
			{
				result = 100;
			}
			else if (commandId == WorkflowMenuCommands.Zoom75Mode.ID)
			{
				result = 75;
			}
			else if (commandId == WorkflowMenuCommands.Zoom50Mode.ID)
			{
				result = 50;
			}
			return result;
		}

		private int ConvertToZoomCommand(int zoomLevel)
		{
			int result = 0;
			switch (zoomLevel)
			{
			case 400:
				result = WorkflowMenuCommands.Zoom400Mode.ID;
				break;
			case 300:
				result = WorkflowMenuCommands.Zoom300Mode.ID;
				break;
			case 200:
				result = WorkflowMenuCommands.Zoom200Mode.ID;
				break;
			case 150:
				result = WorkflowMenuCommands.Zoom150Mode.ID;
				break;
			case 100:
				result = WorkflowMenuCommands.Zoom100Mode.ID;
				break;
			case 75:
				result = WorkflowMenuCommands.Zoom75Mode.ID;
				break;
			case 50:
				result = WorkflowMenuCommands.Zoom50Mode.ID;
				break;
			}
			return result;
		}

		private void OnComponentChanged(object sender, ComponentChangedEventArgs e)
		{
			if (activeFilter != null)
			{
				workflowView.RemoveDesignerMessageFilter(activeFilter);
				activeFilter = null;
				UpdatePanCommands(enable: true);
			}
		}

		private void OnStatusZoom(object sender, EventArgs e)
		{
			UpdateZoomCommands(enable: true);
		}

		private void OnZoom(object sender, EventArgs e)
		{
			MenuCommand menuCommand = (MenuCommand)sender;
			if (menuCommand.CommandID.ID == WorkflowMenuCommands.ShowAll.ID)
			{
				int val = (int)(100f / workflowView.ActiveLayout.Scaling * Math.Min((float)workflowView.ViewPortSize.Width / (float)workflowView.ActiveLayout.Extent.Width, (float)workflowView.ViewPortSize.Height / (float)workflowView.ActiveLayout.Extent.Height));
				workflowView.Zoom = Math.Min(Math.Max(val, 10), 400);
			}
			else
			{
				workflowView.Zoom = ConvertToZoomLevel(menuCommand.CommandID.ID);
			}
			UpdateZoomCommands(enable: true);
		}

		private void OnStatusLayout(object sender, EventArgs e)
		{
			UpdatePageLayoutCommands(enable: true);
		}

		private void OnPageLayout(object sender, EventArgs e)
		{
			MenuCommand menuCommand = (MenuCommand)sender;
			workflowView.PrintPreviewMode = ((menuCommand.CommandID == WorkflowMenuCommands.PrintPreview) ? (!workflowView.PrintPreviewMode) : (menuCommand.CommandID == WorkflowMenuCommands.PrintPreviewPage));
			UpdatePageLayoutCommands(enable: true);
		}

		private void OnStatusMessageFilter(object sender, EventArgs e)
		{
			UpdatePanCommands(enable: true);
		}

		private void OnMessageFilterChanged(object sender, EventArgs e)
		{
			if (activeFilter != null)
			{
				workflowView.RemoveDesignerMessageFilter(activeFilter);
				activeFilter = null;
			}
			MenuCommand menuCommand = (MenuCommand)sender;
			int iD = menuCommand.CommandID.ID;
			if (WorkflowMenuCommands.ZoomIn.ID == iD)
			{
				activeFilter = new ZoomingMessageFilter(initiateZoomIn: true);
			}
			else if (WorkflowMenuCommands.ZoomOut.ID == iD)
			{
				activeFilter = new ZoomingMessageFilter(initiateZoomIn: false);
			}
			else if (WorkflowMenuCommands.Pan.ID == iD)
			{
				activeFilter = new PanningMessageFilter();
			}
			if (activeFilter != null)
			{
				workflowView.AddDesignerMessageFilter(activeFilter);
			}
			workflowView.Focus();
			UpdatePanCommands(enable: true);
		}

		private void OnStatusPrint(object sender, EventArgs e)
		{
			OnStatusAlways(sender, e);
		}

		private void OnStatusPageSetup(object sender, EventArgs e)
		{
			OnStatusAlways(sender, e);
		}

		private void OnStatusCopy(object sender, EventArgs e)
		{
			MenuCommand menuCommand = (MenuCommand)sender;
			bool flag = false;
			if (serviceProvider.GetService(typeof(IDesignerHost)) is IDesignerHost { Loading: false })
			{
				ArrayList arrayList = new ArrayList(selectionService.GetSelectedComponents());
				flag = Helpers.AreAllActivities(arrayList);
				if (flag)
				{
					foreach (Activity item in arrayList)
					{
						if (item.Site != null && item.Site.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost2 && selectionService.GetComponentSelected(designerHost2.RootComponent))
						{
							flag = false;
							break;
						}
					}
				}
			}
			menuCommand.Enabled = flag;
		}

		private void OnStatusCut(object sender, EventArgs e)
		{
			OnStatusDelete(sender, e);
		}

		private void OnStatusDelete(object sender, EventArgs e)
		{
			MenuCommand menuCommand = (MenuCommand)sender;
			menuCommand.Enabled = false;
			if (serviceProvider.GetService(typeof(IDesignerHost)) is IDesignerHost { RootComponent: not null } designerHost && selectionService.GetComponentSelected(designerHost.RootComponent))
			{
				return;
			}
			ICollection selectedComponents = selectionService.GetSelectedComponents();
			if (!DesignerHelpers.AreComponentsRemovable(selectedComponents))
			{
				return;
			}
			Activity[] topLevelActivities = Helpers.GetTopLevelActivities(selectedComponents);
			IDictionary dictionary = Helpers.PairUpCommonParentActivities(topLevelActivities);
			foreach (DictionaryEntry item in dictionary)
			{
				if (ActivityDesigner.GetDesigner(item.Key as Activity) is CompositeActivityDesigner compositeActivityDesigner && !compositeActivityDesigner.CanRemoveActivities(new List<Activity>((Activity[])((ArrayList)item.Value).ToArray(typeof(Activity))).AsReadOnly()))
				{
					menuCommand.Enabled = false;
					return;
				}
			}
			menuCommand.Enabled = true;
		}

		private void OnStatusPaste(object sender, EventArgs e)
		{
			MenuCommand menuCommand = (MenuCommand)sender;
			menuCommand.Enabled = false;
			object primarySelection = selectionService.PrimarySelection;
			CompositeActivityDesigner compositeActivityDesigner = ActivityDesigner.GetDesigner(primarySelection as Activity) as CompositeActivityDesigner;
			if (compositeActivityDesigner == null)
			{
				compositeActivityDesigner = ActivityDesigner.GetParentDesigner(primarySelection);
			}
			if (compositeActivityDesigner == null || !compositeActivityDesigner.IsEditable)
			{
				return;
			}
			IDesignerHost designerHost = serviceProvider.GetService(typeof(IDesignerHost)) as IDesignerHost;
			IToolboxService toolboxService = (IToolboxService)serviceProvider.GetService(typeof(IToolboxService));
			IDataObject dataObject = Clipboard.GetDataObject();
			if (dataObject == null || designerHost == null || (!dataObject.GetDataPresent("CF_WINOEDESIGNERCOMPONENTS") && toolboxService != null && !toolboxService.IsSupported(dataObject, designerHost)))
			{
				return;
			}
			HitTestInfo hitTestInfo = null;
			if (primarySelection is HitTestInfo)
			{
				hitTestInfo = (HitTestInfo)primarySelection;
			}
			else if (primarySelection is CompositeActivity)
			{
				hitTestInfo = new HitTestInfo(compositeActivityDesigner, HitTestLocations.Designer);
			}
			else if (primarySelection is Activity)
			{
				Activity activity = primarySelection as Activity;
				CompositeActivity parent = activity.Parent;
				if (ActivityDesigner.GetDesigner(parent) is CompositeActivityDesigner compositeActivityDesigner2)
				{
					hitTestInfo = new ConnectorHitTestInfo(compositeActivityDesigner2, HitTestLocations.Designer, parent.Activities.IndexOf(activity) + 1);
				}
			}
			ICollection collection = null;
			try
			{
				collection = CompositeActivityDesigner.DeserializeActivitiesFromDataObject(serviceProvider, dataObject);
			}
			catch (CheckoutException ex)
			{
				if (ex != CheckoutException.Canceled)
				{
					throw ex;
				}
			}
			menuCommand.Enabled = collection != null && hitTestInfo != null && compositeActivityDesigner.CanInsertActivities(hitTestInfo, new List<Activity>(Helpers.GetTopLevelActivities(collection)).AsReadOnly());
		}

		private void OnStatusAnySelection(object sender, EventArgs e)
		{
			MenuCommand menuCommand = (MenuCommand)sender;
			IDesignerHost designerHost = serviceProvider.GetService(typeof(IDesignerHost)) as IDesignerHost;
			menuCommand.Enabled = designerHost != null && selectionService.GetSelectedComponents().Count > 0 && !selectionService.GetComponentSelected(designerHost.RootComponent);
		}

		private void OnStatusAlways(object sender, EventArgs e)
		{
			MenuCommand menuCommand = (MenuCommand)sender;
			menuCommand.Enabled = true;
		}

		private void OnStatusExpandCollapse(object sender, EventArgs e)
		{
			MenuCommand menuCommand = (MenuCommand)sender;
			int num = 0;
			foreach (object selectedComponent in selectionService.GetSelectedComponents())
			{
				if (selectedComponent is Activity activity && ActivityDesigner.GetDesigner(activity) is CompositeActivityDesigner { CanExpandCollapse: not false } compositeActivityDesigner && ((menuCommand.CommandID == WorkflowMenuCommands.Expand && !compositeActivityDesigner.Expanded) || (menuCommand.CommandID == WorkflowMenuCommands.Collapse && compositeActivityDesigner.Expanded)))
				{
					num++;
				}
			}
			bool visible = (menuCommand.Enabled = num == selectionService.SelectionCount);
			menuCommand.Visible = visible;
		}

		private void OnStatusEnable(object sender, EventArgs e)
		{
			MenuCommand menuCommand = (MenuCommand)sender;
			bool flag = true;
			bool flag2 = true;
			ArrayList arrayList = new ArrayList(selectionService.GetSelectedComponents());
			for (int i = 0; i < arrayList.Count && flag2; i++)
			{
				if (arrayList[i] is Activity activity)
				{
					ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
					if (designer == null || designer.IsLocked || (i > 0 && flag != activity.Enabled) || (workflowView.RootDesigner != null && workflowView.RootDesigner.Activity == activity))
					{
						flag2 = false;
					}
					else
					{
						flag = activity.Enabled;
					}
				}
				else
				{
					flag2 = false;
				}
			}
			bool visible = (menuCommand.Enabled = flag2 && ((menuCommand.CommandID == WorkflowMenuCommands.Enable && !flag) || (menuCommand.CommandID == WorkflowMenuCommands.Disable && flag)));
			menuCommand.Visible = visible;
		}

		private void OnKeyDefault(object sender, EventArgs e)
		{
			SendKeyDownCommand(Keys.Return);
		}

		private bool SendKeyDownCommand(Keys key)
		{
			if (serviceProvider.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost)
			{
				IRootDesigner designer = ActivityDesigner.GetDesigner(designerHost.RootComponent as Activity);
				if (designer != null && designer.GetView(ViewTechnology.Default) is WorkflowView workflowView)
				{
					KeyEventArgs keyEventArgs = new KeyEventArgs(key);
					workflowView.OnCommandKey(keyEventArgs);
					return keyEventArgs.Handled;
				}
			}
			return false;
		}

		private void OnKeyMove(object sender, EventArgs e)
		{
			object primarySelection = selectionService.PrimarySelection;
			if (primarySelection != null)
			{
				MenuCommand menuCommand = (MenuCommand)sender;
				Keys key = Keys.Left;
				if (menuCommand.CommandID.ID == MenuCommands.KeyMoveDown.ID)
				{
					key = Keys.Down;
				}
				else if (menuCommand.CommandID.ID == MenuCommands.KeyMoveUp.ID)
				{
					key = Keys.Up;
				}
				else if (menuCommand.CommandID.ID == MenuCommands.KeyMoveLeft.ID)
				{
					key = Keys.Left;
				}
				else if (menuCommand.CommandID.ID == MenuCommands.KeyMoveRight.ID)
				{
					key = Keys.Right;
				}
				else if (menuCommand.CommandID.ID == MenuCommands.KeySelectNext.ID)
				{
					key = Keys.Tab;
				}
				else if (menuCommand.CommandID.ID == MenuCommands.KeySelectPrevious.ID)
				{
					key = Keys.Tab | Keys.Shift;
				}
				SendKeyDownCommand(key);
			}
		}

		private void OnExpandCollapse(object sender, EventArgs e)
		{
			MenuCommand menuCommand = (MenuCommand)sender;
			foreach (object selectedComponent in selectionService.GetSelectedComponents())
			{
				if (selectedComponent is Activity activity && ActivityDesigner.GetDesigner(activity) is CompositeActivityDesigner compositeActivityDesigner)
				{
					compositeActivityDesigner.Expanded = menuCommand.CommandID.ID == WorkflowMenuCommands.Expand.ID;
				}
			}
			MenuCommand menuCommand2 = menuCommandService.FindCommand(WorkflowMenuCommands.Expand);
			if (menuCommand2 != null)
			{
				OnStatusExpandCollapse(menuCommand2, EventArgs.Empty);
			}
			MenuCommand menuCommand3 = menuCommandService.FindCommand(WorkflowMenuCommands.Collapse);
			if (menuCommand3 != null)
			{
				OnStatusExpandCollapse(menuCommand3, EventArgs.Empty);
			}
		}

		private void OnEnable(object sender, EventArgs e)
		{
			MenuCommand menuCommand = (MenuCommand)sender;
			DesignerTransaction designerTransaction = null;
			if (selectionService.PrimarySelection is IComponent { Site: not null } component && component.Site.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost)
			{
				designerTransaction = designerHost.CreateTransaction(SR.GetString("ChangingEnabled"));
			}
			try
			{
				foreach (object selectedComponent in selectionService.GetSelectedComponents())
				{
					if (selectedComponent is Activity activity)
					{
						ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
						if (designer != null && !designer.IsLocked)
						{
							TypeDescriptor.GetProperties(activity)["Enabled"]?.SetValue(activity, !activity.Enabled);
						}
					}
				}
				designerTransaction?.Commit();
			}
			finally
			{
				((IDisposable)designerTransaction)?.Dispose();
			}
			MenuCommand menuCommand2 = menuCommandService.FindCommand(WorkflowMenuCommands.Disable);
			if (menuCommand2 != null)
			{
				OnStatusEnable(menuCommand2, EventArgs.Empty);
			}
			MenuCommand menuCommand3 = menuCommandService.FindCommand(WorkflowMenuCommands.Enable);
			if (menuCommand3 != null)
			{
				OnStatusEnable(menuCommand3, EventArgs.Empty);
			}
		}

		private void OnCreateTheme(object sender, EventArgs e)
		{
			ThemeConfigurationDialog themeConfigurationDialog = new ThemeConfigurationDialog(serviceProvider);
			if (themeConfigurationDialog.ShowDialog() == DialogResult.OK)
			{
				WorkflowTheme workflowTheme = themeConfigurationDialog.ComposedTheme.Clone();
				if (workflowTheme != null)
				{
					WorkflowTheme.CurrentTheme = workflowTheme;
					WorkflowTheme.SaveThemeSettingToRegistry();
				}
			}
		}

		private void OnChangeTheme(object sender, EventArgs e)
		{
			if (serviceProvider.GetService(typeof(IExtendedUIService)) is IExtendedUIService extendedUIService)
			{
				extendedUIService.ShowToolsOptions();
			}
		}

		private void OnKeyCancel(object sender, EventArgs e)
		{
			SendKeyDownCommand(Keys.Escape);
		}

		private void OnKeyPageDnUp(object sender, EventArgs e)
		{
			MenuCommand menuCommand = (MenuCommand)sender;
			SendKeyDownCommand((menuCommand.CommandID == WorkflowMenuCommands.PageUp) ? Keys.Prior : Keys.Next);
		}

		private void OnViewCode(object sender, EventArgs e)
		{
			IComponent component = ((serviceProvider.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost) ? designerHost.RootComponent : null);
			if (component != null && component.Site.GetService(typeof(IMemberCreationService)) is IMemberCreationService memberCreationService)
			{
				memberCreationService.ShowCode();
			}
		}

		private void OnMenuPageSetup(object sender, EventArgs e)
		{
			PrinterSettings.StringCollection installedPrinters = PrinterSettings.InstalledPrinters;
			if (installedPrinters.Count < 1)
			{
				DesignerHelpers.ShowError(serviceProvider, DR.GetString("ThereIsNoPrinterInstalledErrorMessage"));
				return;
			}
			WorkflowPageSetupDialog workflowPageSetupDialog = new WorkflowPageSetupDialog(serviceProvider);
			if (DialogResult.OK == workflowPageSetupDialog.ShowDialog())
			{
				workflowView.PerformLayout(immediateUpdate: false);
			}
		}

		private void OnMenuSaveWorkflowAsImage(object sender, EventArgs e)
		{
			List<SupportedImageFormats> list = new List<SupportedImageFormats>();
			list.Add(new SupportedImageFormats(DR.GetString("BMPImageFormat"), ImageFormat.Bmp));
			list.Add(new SupportedImageFormats(DR.GetString("JPEGImageFormat"), ImageFormat.Jpeg));
			list.Add(new SupportedImageFormats(DR.GetString("PNGImageFormat"), ImageFormat.Png));
			list.Add(new SupportedImageFormats(DR.GetString("TIFFImageFormat"), ImageFormat.Tiff));
			list.Add(new SupportedImageFormats(DR.GetString("WMFImageFormat"), ImageFormat.Wmf));
			list.Add(new SupportedImageFormats(DR.GetString("EXIFImageFormat"), ImageFormat.Exif));
			list.Add(new SupportedImageFormats(DR.GetString("EMFImageFormat"), ImageFormat.Emf));
			SaveFileDialog saveFileDialog = new SaveFileDialog();
			saveFileDialog.Title = DR.GetString("SaveWorkflowImageDialogTitle");
			saveFileDialog.DefaultExt = "bmp";
			string text = string.Empty;
			foreach (SupportedImageFormats item in list)
			{
				text += ((text.Length > 0) ? ("|" + item.Description) : item.Description);
			}
			saveFileDialog.Filter = text;
			saveFileDialog.FilterIndex = 0;
			if (saveFileDialog.ShowDialog() == DialogResult.OK && saveFileDialog.FilterIndex > 0 && saveFileDialog.FilterIndex <= list.Count)
			{
				workflowView.SaveWorkflowImage(saveFileDialog.FileName, list[saveFileDialog.FilterIndex - 1].Format);
			}
		}

		private void OnMenuCopyToClipboard(object sender, EventArgs e)
		{
			workflowView.SaveWorkflowImageToClipboard();
		}

		private void OnMenuPrint(object sender, EventArgs e)
		{
			PrinterSettings.StringCollection installedPrinters = PrinterSettings.InstalledPrinters;
			if (installedPrinters.Count < 1)
			{
				DesignerHelpers.ShowError(serviceProvider, DR.GetString("ThereIsNoPrinterInstalledErrorMessage"));
				return;
			}
			PrintDocument printDocument = workflowView.PrintDocument;
			PrintDialog printDialog = new PrintDialog();
			printDialog.AllowPrintToFile = false;
			printDialog.Document = printDocument;
			try
			{
				if (DialogResult.OK == printDialog.ShowDialog())
				{
					PrinterSettings printerSettings = printDocument.PrinterSettings;
					PageSettings defaultPageSettings = printDocument.DefaultPageSettings;
					printDocument.PrinterSettings = printDialog.PrinterSettings;
					printDocument.DefaultPageSettings = printDialog.Document.DefaultPageSettings;
					printDocument.Print();
					printDocument.PrinterSettings = printerSettings;
					printDocument.DefaultPageSettings = defaultPageSettings;
				}
			}
			catch (Exception ex)
			{
				string @string = DR.GetString("SelectedPrinterIsInvalidErrorMessage");
				@string = @string + "\n" + ex.Message;
				DesignerHelpers.ShowError(serviceProvider, @string);
			}
		}

		private void OnMenuDesignerProperties(object sender, EventArgs e)
		{
			if (menuCommandService != null)
			{
				menuCommandService.GlobalInvoke(StandardCommands.PropertiesWindow);
			}
		}

		private void OnMenuCut(object sender, EventArgs e)
		{
			IDesignerHost designerHost = serviceProvider.GetService(typeof(IDesignerHost)) as IDesignerHost;
			if (designerHost != null && selectionService.GetComponentSelected(designerHost.RootComponent))
			{
				return;
			}
			ICollection selectedComponents = selectionService.GetSelectedComponents();
			if (!Helpers.AreAllActivities(selectedComponents) || !DesignerHelpers.AreAssociatedDesignersMovable(selectedComponents))
			{
				return;
			}
			OnMenuCopy(sender, e);
			string empty = string.Empty;
			if (selectedComponents.Count > 1)
			{
				empty = SR.GetString("CutMultipleActivities", selectedComponents.Count);
			}
			else
			{
				ArrayList arrayList = new ArrayList(selectedComponents);
				empty = ((arrayList.Count <= 0) ? SR.GetString("CutActivity") : SR.GetString("CutSingleActivity", (arrayList[0] as Activity).Name));
			}
			DesignerTransaction designerTransaction = designerHost.CreateTransaction(empty);
			try
			{
				OnMenuDelete(sender, e);
				designerTransaction.Commit();
			}
			catch
			{
				designerTransaction.Cancel();
			}
		}

		private void OnMenuCopy(object sender, EventArgs e)
		{
			if (Helpers.AreAllActivities(selectionService.GetSelectedComponents()))
			{
				Activity[] topLevelActivities = Helpers.GetTopLevelActivities(selectionService.GetSelectedComponents());
				IDataObject dataObject = CompositeActivityDesigner.SerializeActivitiesToDataObject(serviceProvider, topLevelActivities);
				Clipboard.SetDataObject(dataObject);
			}
		}

		private void OnMenuPaste(object sender, EventArgs e)
		{
			object primarySelection = selectionService.PrimarySelection;
			CompositeActivityDesigner compositeActivityDesigner = ActivityDesigner.GetDesigner(primarySelection as Activity) as CompositeActivityDesigner;
			if (compositeActivityDesigner == null)
			{
				compositeActivityDesigner = ActivityDesigner.GetParentDesigner(primarySelection);
			}
			if (compositeActivityDesigner == null || !compositeActivityDesigner.IsEditable)
			{
				return;
			}
			IDataObject dataObject = Clipboard.GetDataObject();
			ICollection collection = null;
			try
			{
				collection = CompositeActivityDesigner.DeserializeActivitiesFromDataObject(serviceProvider, dataObject, addAssemblyReference: true);
			}
			catch (Exception ex)
			{
				if (ex != CheckoutException.Canceled)
				{
					throw new Exception(DR.GetString("ActivityInsertError") + "\n" + ex.Message, ex);
				}
			}
			if (collection == null)
			{
				throw new InvalidOperationException(DR.GetString("InvalidOperationBadClipboardFormat"));
			}
			HitTestInfo hitTestInfo = null;
			if (primarySelection is HitTestInfo)
			{
				hitTestInfo = (HitTestInfo)primarySelection;
			}
			else if (primarySelection is CompositeActivity)
			{
				hitTestInfo = new HitTestInfo(compositeActivityDesigner, HitTestLocations.Designer);
			}
			else if (primarySelection is Activity)
			{
				Activity activity = primarySelection as Activity;
				CompositeActivity parent = activity.Parent;
				if (ActivityDesigner.GetDesigner(parent) is CompositeActivityDesigner compositeActivityDesigner2)
				{
					hitTestInfo = new ConnectorHitTestInfo(compositeActivityDesigner2, HitTestLocations.Designer, parent.Activities.IndexOf(activity) + 1);
				}
			}
			List<Activity> list = new List<Activity>(Helpers.GetTopLevelActivities(collection));
			if (hitTestInfo == null || !compositeActivityDesigner.CanInsertActivities(hitTestInfo, list.AsReadOnly()))
			{
				throw new Exception(SR.GetString("Error_NoPasteSupport"));
			}
			if (serviceProvider.GetService(typeof(IExtendedUIService)) is IExtendedUIService extendedUIService)
			{
				foreach (Activity item in collection)
				{
					extendedUIService.AddAssemblyReference(item.GetType().Assembly.GetName());
				}
			}
			CompositeActivityDesigner.InsertActivities(compositeActivityDesigner, hitTestInfo, list.AsReadOnly(), SR.GetString("PastingActivities"));
			if (dataObject.GetData("CF_WINOEDESIGNERCOMPONENTSSTATE") is Stream stateStream)
			{
				Helpers.DeserializeDesignersFromStream(collection, stateStream);
			}
			selectionService.SetSelectedComponents(list.ToArray(), SelectionTypes.Replace);
			workflowView.EnsureVisible(selectionService.PrimarySelection);
		}

		private void OnMenuSelectAll(object sender, EventArgs e)
		{
			ActivityDesigner safeRootDesigner = ActivityDesigner.GetSafeRootDesigner(serviceProvider);
			if (safeRootDesigner != null)
			{
				List<Activity> list = new List<Activity>();
				if (safeRootDesigner.Activity is CompositeActivity)
				{
					list.AddRange(Helpers.GetNestedActivities(safeRootDesigner.Activity as CompositeActivity));
				}
				selectionService.SetSelectedComponents(list.ToArray(), SelectionTypes.Replace);
			}
		}

		private void OnMenuDelete(object sender, EventArgs e)
		{
			SendKeyDownCommand(Keys.Delete);
		}
	}
	internal class SupportedImageFormats
	{
		public string Description;

		public ImageFormat Format;

		public SupportedImageFormats(string description, ImageFormat imageFormat)
		{
			Description = description;
			Format = imageFormat;
		}
	}
	internal sealed class CommandSetItem : MenuCommand
	{
		private EventHandler statusHandler;

		private bool immidiateStatusUpdate;

		public override int OleStatus
		{
			get
			{
				if (immidiateStatusUpdate)
				{
					UpdateStatus();
				}
				return base.OleStatus;
			}
		}

		public CommandSetItem(EventHandler statusHandler, EventHandler invokeHandler, CommandID id)
			: base(invokeHandler, id)
		{
			this.statusHandler = statusHandler;
		}

		public CommandSetItem(EventHandler statusHandler, EventHandler invokeHandler, CommandID id, string text)
			: this(statusHandler, invokeHandler, id)
		{
			Properties["Text"] = text;
		}

		public CommandSetItem(EventHandler statusHandler, EventHandler invokeHandler, CommandID id, bool immidiateStatusUpdate)
			: this(statusHandler, invokeHandler, id)
		{
			this.immidiateStatusUpdate = immidiateStatusUpdate;
		}

		public void UpdateStatus()
		{
			if (statusHandler != null)
			{
				try
				{
					statusHandler(this, EventArgs.Empty);
				}
				catch
				{
				}
			}
		}
	}
	internal class XomlComponentSerializationService : ComponentSerializationService
	{
		private IServiceProvider serviceProvider;

		internal XomlComponentSerializationService(IServiceProvider serviceProvider)
		{
			this.serviceProvider = serviceProvider;
		}

		public override SerializationStore CreateStore()
		{
			return new WorkflowMarkupSerializationStore(serviceProvider);
		}

		public override SerializationStore LoadStore(Stream stream)
		{
			if (stream == null)
			{
				throw new ArgumentNullException("stream");
			}
			BinaryFormatter binaryFormatter = new BinaryFormatter();
			return (WorkflowMarkupSerializationStore)binaryFormatter.Deserialize(stream);
		}

		public override void SerializeAbsolute(SerializationStore store, object value)
		{
			Serialize(store, value);
		}

		public override void Serialize(SerializationStore store, object value)
		{
			if (store == null)
			{
				throw new ArgumentNullException("store");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			if (!(store is WorkflowMarkupSerializationStore workflowMarkupSerializationStore))
			{
				throw new InvalidOperationException(SR.GetString("Error_UnknownSerializationStore"));
			}
			workflowMarkupSerializationStore.AddObject(value);
		}

		public override void SerializeMemberAbsolute(SerializationStore store, object owningObject, MemberDescriptor member)
		{
			SerializeMember(store, owningObject, member);
		}

		public override void SerializeMember(SerializationStore store, object owningObject, MemberDescriptor member)
		{
			if (store == null)
			{
				throw new ArgumentNullException("store");
			}
			if (owningObject == null)
			{
				throw new ArgumentNullException("owningObject");
			}
			if (member == null)
			{
				throw new ArgumentNullException("member");
			}
			if (!(store is WorkflowMarkupSerializationStore workflowMarkupSerializationStore))
			{
				throw new InvalidOperationException(SR.GetString("Error_UnknownSerializationStore"));
			}
			workflowMarkupSerializationStore.AddMember(owningObject, member);
		}

		public override ICollection Deserialize(SerializationStore store)
		{
			if (store == null)
			{
				throw new ArgumentNullException("store");
			}
			if (!(store is WorkflowMarkupSerializationStore workflowMarkupSerializationStore))
			{
				throw new InvalidOperationException(SR.GetString("Error_UnknownSerializationStore"));
			}
			return workflowMarkupSerializationStore.Deserialize(serviceProvider);
		}

		public override ICollection Deserialize(SerializationStore store, IContainer container)
		{
			if (store == null)
			{
				throw new ArgumentNullException("store");
			}
			if (container == null)
			{
				throw new ArgumentNullException("container");
			}
			if (!(store is WorkflowMarkupSerializationStore workflowMarkupSerializationStore))
			{
				throw new InvalidOperationException(SR.GetString("Error_UnknownSerializationStore"));
			}
			return workflowMarkupSerializationStore.Deserialize(serviceProvider, container);
		}

		public override void DeserializeTo(SerializationStore store, IContainer container, bool validateRecycledTypes, bool applyDefaults)
		{
			if (store == null)
			{
				throw new ArgumentNullException("store");
			}
			if (container == null)
			{
				throw new ArgumentNullException("container");
			}
			if (!(store is WorkflowMarkupSerializationStore workflowMarkupSerializationStore))
			{
				throw new InvalidOperationException(SR.GetString("Error_UnknownSerializationStore"));
			}
			workflowMarkupSerializationStore.DeserializeTo(serviceProvider, container);
		}

		internal static PropertyInfo GetProperty(Type type, string name, BindingFlags bindingFlags)
		{
			PropertyInfo result = null;
			try
			{
				result = type.GetProperty(name, bindingFlags);
			}
			catch (AmbiguousMatchException)
			{
				PropertyInfo[] properties = type.GetProperties(bindingFlags);
				PropertyInfo[] array = properties;
				foreach (PropertyInfo propertyInfo in array)
				{
					if (propertyInfo.Name.Equals(name, StringComparison.Ordinal))
					{
						result = propertyInfo;
						break;
					}
				}
			}
			return result;
		}
	}
	[Serializable]
	internal class WorkflowMarkupSerializationStore : SerializationStore, ISerializable
	{
		private class LocalDesignerSerializationManager : DesignerSerializationManager
		{
			private WorkflowMarkupSerializationStore store;

			internal LocalDesignerSerializationManager(WorkflowMarkupSerializationStore store, IServiceProvider provider)
				: base(provider)
			{
				this.store = store;
			}

			protected override Type GetType(string name)
			{
				Type type = base.GetType(name);
				if (type == null)
				{
					int num = name.IndexOf(",");
					if (num != -1)
					{
						name = name.Substring(0, num);
					}
					AssemblyName[] assemblyNames = store.AssemblyNames;
					AssemblyName[] array = assemblyNames;
					foreach (AssemblyName assemblyRef in array)
					{
						Assembly assembly = Assembly.Load(assemblyRef);
						if (assembly != null)
						{
							type = assembly.GetType(name);
							if (type != null)
							{
								break;
							}
						}
					}
					if (type == null)
					{
						AssemblyName[] array2 = assemblyNames;
						foreach (AssemblyName assemblyRef2 in array2)
						{
							Assembly assembly2 = Assembly.Load(assemblyRef2);
							if (!(assembly2 != null))
							{
								continue;
							}
							AssemblyName[] referencedAssemblies = assembly2.GetReferencedAssemblies();
							foreach (AssemblyName assemblyRef3 in referencedAssemblies)
							{
								Assembly assembly3 = Assembly.Load(assemblyRef3);
								if (assembly3 != null)
								{
									type = assembly3.GetType(name);
									if (type != null)
									{
										break;
									}
								}
							}
							if (type != null)
							{
								break;
							}
						}
					}
				}
				return type;
			}
		}

		private const string SerializedXmlString = "XmlString";

		private const string AssembliesKey = "Assemblies";

		private IServiceProvider serviceProvider;

		private List<Activity> activities = new List<Activity>();

		private List<string> parentObjectNameList = new List<string>();

		private List<MemberDescriptor> memberList = new List<MemberDescriptor>();

		private string serializedXmlString;

		private AssemblyName[] assemblies;

		private AssemblyName[] AssemblyNames => assemblies;

		public override ICollection Errors => null;

		internal WorkflowMarkupSerializationStore(IServiceProvider serviceProvider)
		{
			this.serviceProvider = serviceProvider;
		}

		private WorkflowMarkupSerializationStore(SerializationInfo info, StreamingContext context)
		{
			serializedXmlString = (string)info.GetValue("XmlString", typeof(string));
			assemblies = (AssemblyName[])info.GetValue("Assemblies", typeof(AssemblyName[]));
		}

		internal void AddObject(object value)
		{
			if (serializedXmlString != null)
			{
				throw new InvalidOperationException(DR.GetString("InvalidOperationStoreAlreadyClosed"));
			}
			if (!(value is Activity item))
			{
				throw new ArgumentException("value");
			}
			activities.Add(item);
		}

		internal void AddMember(object value, MemberDescriptor member)
		{
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			if (member == null)
			{
				throw new ArgumentNullException("member");
			}
			if (serializedXmlString != null)
			{
				throw new InvalidOperationException(DR.GetString("InvalidOperationStoreAlreadyClosed"));
			}
			IReferenceService referenceService = serviceProvider.GetService(typeof(IReferenceService)) as IReferenceService;
			parentObjectNameList.Add(referenceService.GetName(value));
			memberList.Add(member);
		}

		internal IList Deserialize(IServiceProvider serviceProvider)
		{
			DesignerSerializationManager designerSerializationManager = new LocalDesignerSerializationManager(this, serviceProvider);
			using (designerSerializationManager.CreateSession())
			{
				ArrayList arrayList = new ArrayList();
				WorkflowMarkupSerializationManager xomlSerializationManager = new WorkflowMarkupSerializationManager(designerSerializationManager);
				XmlTextReader xmlTextReader = new XmlTextReader(serializedXmlString, XmlNodeType.Element, null)
				{
					DtdProcessing = DtdProcessing.Prohibit
				};
				xmlTextReader.MoveToElement();
				while (true)
				{
					if (!xmlTextReader.Read())
					{
						return arrayList;
					}
					xomlSerializationManager.FoundDefTag += delegate(object sender, WorkflowMarkupElementEventArgs eventArgs)
					{
						if (eventArgs.XmlReader.LookupNamespace(eventArgs.XmlReader.Prefix) == "http://schemas.microsoft.com/winfx/2006/xaml" && xomlSerializationManager.Context.Current is Activity)
						{
							WorkflowMarkupSerializationHelpers.ProcessDefTag(xomlSerializationManager, eventArgs.XmlReader, xomlSerializationManager.Context.Current as Activity, newSegment: true, string.Empty);
						}
					};
					WorkflowMarkupSerializer workflowMarkupSerializer = new WorkflowMarkupSerializer();
					object obj = workflowMarkupSerializer.DeserializeObject(xomlSerializationManager, xmlTextReader);
					if (obj == null)
					{
						break;
					}
					if (obj is Activity)
					{
						(obj as Activity).UserData.Remove(UserDataKeys.CustomActivity);
					}
					arrayList.Add(obj);
				}
				throw new InvalidOperationException(DR.GetString("InvalidOperationDeserializationReturnedNonActivity"));
			}
		}

		internal ICollection Deserialize(IServiceProvider serviceProvider, IContainer container)
		{
			throw new NotImplementedException();
		}

		internal void DeserializeTo(IServiceProvider serviceProvider, IContainer container)
		{
			DesignerSerializationManager designerSerializationManager = new LocalDesignerSerializationManager(this, serviceProvider);
			using (designerSerializationManager.CreateSession())
			{
				WorkflowMarkupSerializationManager workflowMarkupSerializationManager = new WorkflowMarkupSerializationManager(designerSerializationManager);
				PropertySegmentSerializationProvider provider = new PropertySegmentSerializationProvider();
				workflowMarkupSerializationManager.AddSerializationProvider(provider);
				StringReader input = new StringReader(serializedXmlString);
				using (XmlTextReader xmlTextReader = new XmlTextReader(input)
				{
					DtdProcessing = DtdProcessing.Prohibit
				})
				{
					while (xmlTextReader.NodeType != XmlNodeType.Element && xmlTextReader.NodeType != XmlNodeType.ProcessingInstruction && xmlTextReader.Read())
					{
					}
					IReferenceService referenceService = this.serviceProvider.GetService(typeof(IReferenceService)) as IReferenceService;
					IComponentChangeService componentChangeService = this.serviceProvider.GetService(typeof(IComponentChangeService)) as IComponentChangeService;
					for (int i = 0; i < memberList.Count; i++)
					{
						object reference = referenceService.GetReference(parentObjectNameList[i]);
						if (reference != null)
						{
							bool flag = componentChangeService != null && (!(reference is IComponent) || ((IComponent)reference).Site == null);
							PropertyDescriptor member = memberList[i] as PropertyDescriptor;
							if (flag)
							{
								componentChangeService.OnComponentChanging(reference, member);
							}
							workflowMarkupSerializationManager.Context.Push(reference);
							PropertySegmentSerializer propertySegmentSerializer = new PropertySegmentSerializer(null);
							PropertySegment propertySegment = propertySegmentSerializer.DeserializeObject(workflowMarkupSerializationManager, xmlTextReader) as PropertySegment;
							workflowMarkupSerializationManager.Context.Pop();
							if (flag)
							{
								componentChangeService.OnComponentChanged(reference, member, null, null);
							}
						}
					}
				}
				workflowMarkupSerializationManager.RemoveSerializationProvider(provider);
			}
		}

		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
		{
			info.AddValue("XmlString", serializedXmlString);
			info.AddValue("Assemblies", assemblies);
		}

		public override void Save(Stream stream)
		{
			Close();
			BinaryFormatter binaryFormatter = new BinaryFormatter();
			binaryFormatter.Serialize(stream, this);
		}

		public override void Close()
		{
			if (serializedXmlString != null)
			{
				return;
			}
			DesignerSerializationManager designerSerializationManager = new LocalDesignerSerializationManager(this, serviceProvider);
			using (designerSerializationManager.CreateSession())
			{
				WorkflowMarkupSerializationManager workflowMarkupSerializationManager = new WorkflowMarkupSerializationManager(designerSerializationManager);
				StringWriter stringWriter = new StringWriter(CultureInfo.InvariantCulture);
				using (XmlTextWriter writer = new XmlTextWriter(stringWriter))
				{
					if (memberList.Count == 0)
					{
						WorkflowMarkupSerializer workflowMarkupSerializer = new WorkflowMarkupSerializer();
						foreach (Activity activity in activities)
						{
							workflowMarkupSerializer.SerializeObject(workflowMarkupSerializationManager, activity, writer);
						}
					}
					else
					{
						PropertySegmentSerializationProvider provider = new PropertySegmentSerializationProvider();
						workflowMarkupSerializationManager.AddSerializationProvider(provider);
						workflowMarkupSerializationManager.Context.Push(new StringWriter(CultureInfo.InvariantCulture));
						if (serviceProvider.GetService(typeof(IReferenceService)) is IReferenceService referenceService)
						{
							for (int i = 0; i < memberList.Count; i++)
							{
								object reference = referenceService.GetReference(parentObjectNameList[i]);
								PropertySegmentSerializer propertySegmentSerializer = new PropertySegmentSerializer(null);
								if (memberList[i] is PropertyDescriptor)
								{
									PropertyInfo property = XomlComponentSerializationService.GetProperty(reference.GetType(), (memberList[i] as PropertyDescriptor).Name, BindingFlags.Instance | BindingFlags.Public);
									if (property != null)
									{
										propertySegmentSerializer.SerializeObject(workflowMarkupSerializationManager, new PropertySegment(serviceProvider, reference, property), writer);
									}
									else
									{
										propertySegmentSerializer.SerializeObject(workflowMarkupSerializationManager, new PropertySegment(serviceProvider, reference, memberList[i] as PropertyDescriptor), writer);
									}
								}
								else if (memberList[i] is EventDescriptor && serviceProvider.GetService(typeof(IEventBindingService)) is IEventBindingService eventBindingService)
								{
									PropertySegment obj = new PropertySegment(serviceProvider, reference, eventBindingService.GetEventProperty(memberList[i] as EventDescriptor));
									propertySegmentSerializer.SerializeObject(workflowMarkupSerializationManager, obj, writer);
								}
							}
						}
						workflowMarkupSerializationManager.Context.Pop();
						workflowMarkupSerializationManager.RemoveSerializationProvider(provider);
					}
				}
				serializedXmlString = stringWriter.ToString();
				List<AssemblyName> list = new List<AssemblyName>();
				foreach (Activity activity2 in activities)
				{
					Assembly assembly = activity2.GetType().Assembly;
					list.Add(assembly.GetName(copiedName: true));
				}
				assemblies = list.ToArray();
				activities.Clear();
				activities = null;
			}
		}
	}
	internal sealed class PropertySegment
	{
		private IServiceProvider serviceProvider;

		private object obj;

		private PropertyInfo property;

		private PropertyDescriptor propertyDescriptor;

		internal object Object => obj;

		internal IServiceProvider ServiceProvider => serviceProvider;

		internal PropertyDescriptor PropertyDescriptor
		{
			get
			{
				PropertyDescriptor propertyDescriptor = this.propertyDescriptor;
				if (propertyDescriptor == null && obj != null && property != null)
				{
					propertyDescriptor = TypeDescriptor.GetProperties(obj)[property.Name];
				}
				return propertyDescriptor;
			}
		}

		public PropertySegment(IServiceProvider serviceProvider, object obj)
		{
			this.serviceProvider = serviceProvider;
			this.obj = obj;
		}

		internal PropertySegment(IServiceProvider serviceProvider, object obj, PropertyInfo property)
		{
			this.serviceProvider = serviceProvider;
			this.obj = obj;
			this.property = property;
		}

		internal PropertySegment(IServiceProvider serviceProvider, object obj, PropertyDescriptor propertyDescriptor)
		{
			this.serviceProvider = serviceProvider;
			this.obj = obj;
			this.propertyDescriptor = propertyDescriptor;
		}

		internal PropertyInfo[] GetProperties(IServiceProvider serviceProvider)
		{
			ArrayList arrayList = new ArrayList(GetType().GetProperties());
			if (property != null)
			{
				arrayList.Add(new PropertySegmentPropertyInfo(this, property));
			}
			else if (this.propertyDescriptor != null)
			{
				arrayList.Add(new PropertySegmentPropertyInfo(this, this.propertyDescriptor));
			}
			else if (obj != null)
			{
				PropertyDescriptorCollection propertyDescriptorCollection = null;
				TypeConverter converter = TypeDescriptor.GetConverter(obj);
				if (converter != null && converter.GetPropertiesSupported())
				{
					DummyTypeDescriptorContext context = new DummyTypeDescriptorContext(this.serviceProvider, GetComponent(obj, serviceProvider), null);
					propertyDescriptorCollection = converter.GetProperties(context, obj, new Attribute[0]);
				}
				else
				{
					propertyDescriptorCollection = TypeDescriptor.GetProperties(obj);
				}
				foreach (PropertyDescriptor item in propertyDescriptorCollection)
				{
					PropertyInfo propertyInfo = XomlComponentSerializationService.GetProperty(obj.GetType(), item.Name, BindingFlags.Instance | BindingFlags.Public);
					if (propertyInfo != null)
					{
						if (Helpers.GetSerializationVisibility(propertyInfo) != 0)
						{
							arrayList.Add(new PropertySegmentPropertyInfo(this, propertyInfo));
						}
						continue;
					}
					arrayList.Add(new PropertySegmentPropertyInfo(this, item));
					if (item.Converter == null)
					{
						continue;
					}
					DummyTypeDescriptorContext context2 = new DummyTypeDescriptorContext(this.serviceProvider, GetComponent(obj, serviceProvider), item);
					if (!item.Converter.GetPropertiesSupported(context2))
					{
						continue;
					}
					foreach (PropertyDescriptor property in item.Converter.GetProperties(context2, obj, new Attribute[0]))
					{
						arrayList.Add(new PropertySegmentPropertyInfo(this, property));
					}
				}
			}
			return arrayList.ToArray(typeof(PropertyInfo)) as PropertyInfo[];
		}

		private IComponent GetComponent(object obj, IServiceProvider serviceProvider)
		{
			IComponent component = obj as IComponent;
			if ((component == null || component.Site == null) && serviceProvider != null && serviceProvider.GetService(typeof(IReferenceService)) is IReferenceService referenceService)
			{
				component = referenceService.GetComponent(obj);
			}
			return component;
		}
	}
	internal class DummyTypeDescriptorContext : ITypeDescriptorContext, IServiceProvider
	{
		private IServiceProvider serviceProvider;

		private object component;

		private PropertyDescriptor propDescriptor;

		public IContainer Container => null;

		public object Instance => component;

		public PropertyDescriptor PropertyDescriptor => propDescriptor;

		public DummyTypeDescriptorContext(IServiceProvider serviceProvider, object component, PropertyDescriptor propDescriptor)
		{
			this.serviceProvider = serviceProvider;
			this.propDescriptor = propDescriptor;
			this.component = component;
		}

		public void OnComponentChanged()
		{
		}

		public bool OnComponentChanging()
		{
			return true;
		}

		public object GetService(Type serviceType)
		{
			if (serviceProvider != null)
			{
				return serviceProvider.GetService(serviceType);
			}
			return null;
		}
	}
	internal sealed class PropertySegmentPropertyInfo : PropertyInfo
	{
		private PropertyInfo realPropInfo;

		private PropertyDescriptor realPropDesc;

		private PropertySegment propertySegment;

		internal PropertySegment PropertySegment => propertySegment;

		public override Type PropertyType
		{
			get
			{
				if (realPropInfo != null)
				{
					return realPropInfo.PropertyType;
				}
				if (realPropDesc != null)
				{
					return realPropDesc.PropertyType;
				}
				return null;
			}
		}

		public override PropertyAttributes Attributes
		{
			get
			{
				if (realPropInfo != null)
				{
					return realPropInfo.Attributes;
				}
				return PropertyAttributes.None;
			}
		}

		public override bool CanRead
		{
			get
			{
				if (realPropInfo != null)
				{
					return realPropInfo.CanRead;
				}
				return true;
			}
		}

		public override bool CanWrite
		{
			get
			{
				if (realPropInfo != null)
				{
					return realPropInfo.CanWrite;
				}
				if (realPropDesc != null)
				{
					return !realPropDesc.IsReadOnly;
				}
				return false;
			}
		}

		public override string Name
		{
			get
			{
				if (realPropInfo != null)
				{
					return realPropInfo.Name;
				}
				if (realPropDesc != null)
				{
					return realPropDesc.Name;
				}
				return string.Empty;
			}
		}

		public override Type DeclaringType
		{
			get
			{
				if (realPropInfo != null)
				{
					return realPropInfo.DeclaringType;
				}
				if (realPropDesc != null)
				{
					return realPropDesc.ComponentType;
				}
				return null;
			}
		}

		public override Type ReflectedType
		{
			get
			{
				if (realPropInfo != null)
				{
					return realPropInfo.ReflectedType;
				}
				return null;
			}
		}

		internal PropertySegmentPropertyInfo(PropertySegment propertySegment, PropertyInfo realPropInfo)
		{
			this.realPropInfo = realPropInfo;
			this.propertySegment = propertySegment;
		}

		internal PropertySegmentPropertyInfo(PropertySegment propertySegment, PropertyDescriptor realPropDesc)
		{
			this.realPropDesc = realPropDesc;
			this.propertySegment = propertySegment;
		}

		public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)
		{
			DependencyProperty dependencyProperty = null;
			Activity activity = null;
			if (propertySegment != null)
			{
				activity = propertySegment.Object as Activity;
			}
			if (activity != null)
			{
				string name = Name;
				Type declaringType = DeclaringType;
				if (!string.IsNullOrEmpty(name) && declaringType != null)
				{
					dependencyProperty = DependencyProperty.FromName(name, declaringType);
				}
			}
			object obj2 = null;
			object obj3 = ((propertySegment == null) ? obj : propertySegment.Object);
			if (dependencyProperty != null && !dependencyProperty.DefaultMetadata.IsMetaProperty)
			{
				obj2 = (activity.IsBindingSet(dependencyProperty) ? activity.GetBinding(dependencyProperty) : (dependencyProperty.IsEvent ? activity.GetHandler(dependencyProperty) : activity.GetValue(dependencyProperty)));
			}
			if (obj2 == null)
			{
				if (realPropInfo != null)
				{
					obj2 = realPropInfo.GetValue(obj3, invokeAttr, binder, index, culture);
				}
				else if (realPropDesc != null)
				{
					obj2 = realPropDesc.GetValue(obj3);
				}
			}
			return obj2;
		}

		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)
		{
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			string name = Name;
			DependencyProperty dependencyProperty = null;
			PropertySegment propertySegment = obj as PropertySegment;
			Activity activity = ((propertySegment != null) ? (propertySegment.Object as Activity) : (obj as Activity));
			if (activity != null)
			{
				Type declaringType = DeclaringType;
				if (!string.IsNullOrEmpty(name) && declaringType != null)
				{
					dependencyProperty = DependencyProperty.FromName(name, declaringType);
				}
			}
			PropertyDescriptor propertyDescriptor = null;
			object obj2 = null;
			if (propertySegment != null)
			{
				PropertyDescriptorCollection propertyDescriptorCollection = null;
				TypeConverter converter = TypeDescriptor.GetConverter(propertySegment.Object);
				if (converter != null && converter.GetPropertiesSupported())
				{
					DummyTypeDescriptorContext context = new DummyTypeDescriptorContext(propertySegment.ServiceProvider, propertySegment.Object, realPropDesc);
					propertyDescriptorCollection = converter.GetProperties(context, propertySegment.Object, new Attribute[0]);
				}
				else
				{
					propertyDescriptorCollection = TypeDescriptor.GetProperties(propertySegment.Object);
				}
				foreach (PropertyDescriptor item in propertyDescriptorCollection)
				{
					if (item.Name == name)
					{
						propertyDescriptor = item;
					}
					else
					{
						if (item.Converter == null)
						{
							continue;
						}
						DummyTypeDescriptorContext context2 = new DummyTypeDescriptorContext(propertySegment.ServiceProvider, propertySegment.Object, item);
						if (item.GetValue(propertySegment.Object) == null || !item.Converter.GetPropertiesSupported(context2))
						{
							continue;
						}
						foreach (PropertyDescriptor property in item.Converter.GetProperties(context2, item.GetValue(propertySegment.Object), new Attribute[0]))
						{
							if (property.Name == name)
							{
								propertyDescriptor = property;
							}
						}
					}
				}
				obj2 = propertySegment.Object;
			}
			else
			{
				propertyDescriptor = TypeDescriptor.GetProperties(obj)[name];
				obj2 = obj;
			}
			if (propertyDescriptor != null && obj2 != null)
			{
				propertyDescriptor.SetValue(obj2, value);
			}
		}

		public override MethodInfo[] GetAccessors(bool nonPublic)
		{
			if (realPropInfo != null)
			{
				return realPropInfo.GetAccessors(nonPublic);
			}
			return new MethodInfo[0];
		}

		public override MethodInfo GetGetMethod(bool nonPublic)
		{
			if (realPropInfo != null)
			{
				return realPropInfo.GetGetMethod(nonPublic);
			}
			return null;
		}

		public override MethodInfo GetSetMethod(bool nonPublic)
		{
			if (realPropInfo != null)
			{
				return realPropInfo.GetSetMethod(nonPublic);
			}
			return null;
		}

		public override ParameterInfo[] GetIndexParameters()
		{
			if (realPropInfo != null)
			{
				return realPropInfo.GetIndexParameters();
			}
			return new ParameterInfo[0];
		}

		public override object[] GetCustomAttributes(bool inherit)
		{
			if (realPropInfo != null)
			{
				return realPropInfo.GetCustomAttributes(inherit);
			}
			return new AttributeInfoAttribute[0];
		}

		public override object[] GetCustomAttributes(Type attributeType, bool inherit)
		{
			if (realPropInfo != null)
			{
				return realPropInfo.GetCustomAttributes(attributeType, inherit);
			}
			return new AttributeInfoAttribute[0];
		}

		public override bool IsDefined(Type attributeType, bool inherit)
		{
			if (realPropInfo != null)
			{
				return realPropInfo.IsDefined(attributeType, inherit);
			}
			return false;
		}
	}
	internal enum AnchorAlignment
	{
		Near,
		Far
	}
	internal class ItemInfo
	{
		private int commandID;

		private IDictionary userData;

		private Image image;

		private string text;

		public int Identifier => commandID;

		public IDictionary UserData
		{
			get
			{
				if (userData == null)
				{
					userData = new HybridDictionary();
				}
				return userData;
			}
		}

		public Image Image => image;

		public string Text => text;

		public ItemInfo(int id)
		{
			commandID = id;
		}

		public ItemInfo(int id, Image image, string text)
			: this(id)
		{
			this.image = image;
			this.text = text;
		}

		public override bool Equals(object obj)
		{
			if (obj != null && obj is ItemInfo)
			{
				return ((ItemInfo)obj).commandID == commandID;
			}
			return false;
		}

		public override int GetHashCode()
		{
			return base.GetHashCode() ^ commandID.GetHashCode();
		}
	}
	internal delegate void SelectionChangeEventHandler<T>(object sender, T e);
	internal class SelectionChangeEventArgs : EventArgs
	{
		private ItemInfo previousItem;

		private ItemInfo currentItem;

		public ItemInfo CurrentItem => currentItem;

		public SelectionChangeEventArgs(ItemInfo previousItem, ItemInfo currentItem)
		{
			this.previousItem = previousItem;
			this.currentItem = currentItem;
		}
	}
	internal sealed class PageStrip : ScrollableItemStrip
	{
		private sealed class PageItemStrip : ItemStrip
		{
			public PageItemStrip(IServiceProvider serviceProvider, Orientation orientation, Size itemSize, Size margin)
				: base(serviceProvider, orientation, itemSize, margin)
			{
			}

			public override void Draw(Graphics graphics)
			{
				GraphicsContainer container = graphics.BeginContainer();
				Rectangle rectangle = base.Bounds;
				using (Region clip = new Region(new Rectangle(rectangle.X, rectangle.Y, rectangle.Width + 1, rectangle.Height + 1)))
				{
					graphics.Clip = clip;
					StringFormat stringFormat = new StringFormat();
					stringFormat.Alignment = StringAlignment.Center;
					stringFormat.LineAlignment = StringAlignment.Center;
					stringFormat.Trimming = StringTrimming.Character;
					stringFormat.FormatFlags = StringFormatFlags.NoWrap;
					int maxVisibleItems = base.MaxVisibleItems;
					int num = base.ScrollPosition;
					for (int i = num; i < base.Items.Count && i < num + maxVisibleItems; i++)
					{
						ItemInfo itemInfo = base.Items[i];
						Rectangle itemBounds = GetItemBounds(itemInfo);
						int num2 = itemBounds.Width / 5;
						GraphicsPath[] pagePaths = ActivityDesignerPaint.GetPagePaths(itemBounds, num2, DesignerContentAlignment.TopRight);
						using GraphicsPath path = pagePaths[0];
						using GraphicsPath path2 = pagePaths[1];
						Brush brush = Brushes.White;
						if (base.SelectedItem == itemInfo)
						{
							brush = SelectionBrush;
						}
						else if (base.HighlitedItem == itemInfo)
						{
							brush = HighliteBrush;
						}
						graphics.FillPath(brush, path);
						graphics.DrawPath(Pens.DarkBlue, path);
						graphics.FillPath(Brushes.White, path2);
						graphics.DrawPath(Pens.DarkBlue, path2);
						if (itemInfo.Image == null)
						{
							itemBounds.Y += num2;
							itemBounds.Height -= num2;
							graphics.DrawString((i + 1).ToString(CultureInfo.CurrentCulture), Control.DefaultFont, SystemBrushes.ControlText, itemBounds, stringFormat);
							continue;
						}
						itemBounds.Y += num2;
						itemBounds.Height -= num2;
						itemBounds.X += (itemBounds.Width - itemBounds.Height) / 2;
						itemBounds.Width = itemBounds.Height;
						itemBounds.Inflate(-2, -2);
						ActivityDesignerPaint.DrawImage(graphics, itemInfo.Image, itemBounds, DesignerContentAlignment.Center);
					}
				}
				graphics.EndContainer(container);
			}
		}

		private static Brush SelectionBrush = new SolidBrush(Color.FromArgb(255, 195, 107));

		private static Brush HighliteBrush = new SolidBrush(Color.FromArgb(100, 255, 195, 107));

		public PageStrip(IServiceProvider serviceProvider, Size itemSize)
			: base(serviceProvider, Orientation.Horizontal, itemSize, Size.Empty)
		{
		}

		protected override ItemStrip CreateItemStrip(IServiceProvider serviceProvider, Orientation orientation, Size itemSize, Size margin)
		{
			return new PageItemStrip(serviceProvider, orientation, itemSize, margin);
		}

		public override void Draw(Graphics graphics)
		{
			GraphicsContainer container = graphics.BeginContainer();
			Rectangle rectangle = base.Bounds;
			using (Region clip = new Region(new Rectangle(rectangle.X, rectangle.Y, rectangle.Width + 1, rectangle.Height + 1)))
			{
				graphics.Clip = clip;
				itemStrip.Draw(graphics);
				if (itemStrip.ScrollPosition > 0)
				{
					DrawButton(graphics, (base.Orientation == Orientation.Horizontal) ? ScrollButton.Left : ScrollButton.Up);
				}
				if (itemStrip.ScrollPosition + itemStrip.MaxVisibleItems < itemStrip.Items.Count)
				{
					DrawButton(graphics, (base.Orientation != 0) ? ScrollButton.Down : ScrollButton.Right);
				}
			}
			graphics.EndContainer(container);
		}

		private void DrawButton(Graphics graphics, ScrollButton scrollButton)
		{
			Rectangle buttonBounds = GetButtonBounds(scrollButton);
			if (base.Orientation == Orientation.Horizontal)
			{
				buttonBounds.Inflate(-itemStrip.ItemSize.Width / 6, -itemStrip.ItemSize.Height / 4);
			}
			else
			{
				buttonBounds.Inflate(-itemStrip.ItemSize.Width / 4, -itemStrip.ItemSize.Height / 6);
			}
			if (base.ActiveButton == scrollButton)
			{
				buttonBounds.Offset(1, 1);
				Size size = ((base.Orientation == Orientation.Horizontal) ? new Size(0, 2) : new Size(2, 0));
				buttonBounds.Inflate(size.Width, size.Height);
				graphics.FillRectangle(SelectionBrush, buttonBounds);
				graphics.DrawRectangle(Pens.Black, buttonBounds);
				buttonBounds.Inflate(-size.Width, -size.Height);
			}
			using GraphicsPath path = ActivityDesignerPaint.GetScrollIndicatorPath(buttonBounds, scrollButton);
			graphics.FillPath(Brushes.Black, path);
			graphics.DrawPath(Pens.Black, path);
		}
	}
	internal abstract class ScrollableItemStrip
	{
		private Rectangle bounds = Rectangle.Empty;

		protected IServiceProvider serviceProvider;

		protected ItemStrip itemStrip;

		private Orientation orientation;

		private Size margin;

		private Size buttonSize;

		private ScrollButton activeButton;

		public IList<ItemInfo> Items => itemStrip.Items;

		public ItemInfo SelectedItem
		{
			get
			{
				return itemStrip.SelectedItem;
			}
			set
			{
				itemStrip.SelectedItem = value;
			}
		}

		public Point Location
		{
			get
			{
				return bounds.Location;
			}
			set
			{
				if (bounds.Location != value)
				{
					Invalidate();
					bounds.Location = value;
					Rectangle buttonBounds = GetButtonBounds(ScrollButton.Left);
					if (orientation == Orientation.Horizontal)
					{
						itemStrip.Location = new Point(buttonBounds.Right, buttonBounds.Top);
					}
					else
					{
						itemStrip.Location = new Point(buttonBounds.Left, buttonBounds.Bottom);
					}
					Invalidate();
				}
			}
		}

		public Size Size
		{
			get
			{
				return bounds.Size;
			}
			set
			{
				if (!(bounds.Size != value))
				{
					return;
				}
				Invalidate();
				bounds.Size = value;
				Size requiredSize = itemStrip.RequiredSize;
				int num = 0;
				if (orientation == Orientation.Horizontal)
				{
					num = bounds.Width - 2 * (2 * margin.Width + buttonSize.Width);
					num -= margin.Width;
					if (margin.Width + itemStrip.ItemSize.Width > 0)
					{
						num -= num % (margin.Width + itemStrip.ItemSize.Width);
					}
					itemStrip.Size = new Size(Math.Min(num, requiredSize.Width), Math.Min(bounds.Height, requiredSize.Height));
				}
				else
				{
					num = bounds.Height - 2 * (2 * margin.Height + buttonSize.Height);
					num -= margin.Height;
					if (margin.Height + itemStrip.ItemSize.Height > 0)
					{
						num -= num % (margin.Height + itemStrip.ItemSize.Height);
					}
					itemStrip.Size = new Size(Math.Min(bounds.Width, requiredSize.Width), Math.Min(num, requiredSize.Height));
				}
				Invalidate();
			}
		}

		public Rectangle Bounds => bounds;

		public Orientation Orientation => orientation;

		protected ScrollButton ActiveButton
		{
			get
			{
				return activeButton;
			}
			private set
			{
				if (activeButton != value)
				{
					activeButton = value;
					Invalidate();
				}
			}
		}

		public event SelectionChangeEventHandler<SelectionChangeEventArgs> SelectionChanged
		{
			add
			{
				itemStrip.SelectionChanged += value;
			}
			remove
			{
				itemStrip.SelectionChanged -= value;
			}
		}

		public ScrollableItemStrip(IServiceProvider serviceProvider, Orientation orientation, Size itemSize, Size margin)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			this.serviceProvider = serviceProvider;
			this.orientation = orientation;
			this.margin = margin;
			if (orientation == Orientation.Horizontal)
			{
				buttonSize = new Size(itemSize.Width * 2 / 3, itemSize.Height);
			}
			else
			{
				buttonSize = new Size(itemSize.Width, itemSize.Height * 2 / 3);
			}
			itemStrip = CreateItemStrip(serviceProvider, orientation, itemSize, margin);
			itemStrip.ScrollPositionChanged += OnScrollPositionChanged;
		}

		public abstract void Draw(Graphics graphics);

		public virtual void OnMouseDragBegin(Point initialDragPoint, MouseEventArgs e)
		{
		}

		public virtual void OnMouseDragMove(MouseEventArgs e)
		{
		}

		public virtual void OnMouseDragEnd()
		{
		}

		public virtual void OnMouseEnter(MouseEventArgs e)
		{
			itemStrip.OnMouseEnter(e);
		}

		public virtual void OnMouseDown(MouseEventArgs e)
		{
			Point point = new Point(e.X, e.Y);
			if (itemStrip.Bounds.Contains(point))
			{
				itemStrip.OnMouseDown(e);
				return;
			}
			ScrollButton scrollButton = HitTest(point);
			if (scrollButton != 0)
			{
				int num = ((scrollButton != ScrollButton.Left && scrollButton != 0) ? 1 : (-1));
				itemStrip.ScrollPosition += num;
			}
			if (e.Button == MouseButtons.Left)
			{
				ActiveButton = scrollButton;
			}
		}

		public virtual void OnMouseMove(MouseEventArgs e)
		{
			itemStrip.OnMouseMove(e);
			if (e.Button == MouseButtons.Left)
			{
				ActiveButton = HitTest(new Point(e.X, e.Y));
			}
		}

		public virtual void OnMouseUp(MouseEventArgs e)
		{
			Point pt = new Point(e.X, e.Y);
			if (itemStrip.Bounds.Contains(pt))
			{
				itemStrip.OnMouseUp(e);
			}
			ActiveButton = ScrollButton.Up;
		}

		public virtual void OnMouseLeave()
		{
			itemStrip.OnMouseLeave();
			ActiveButton = ScrollButton.Up;
		}

		protected abstract ItemStrip CreateItemStrip(IServiceProvider serviceProvider, Orientation orientation, Size itemSize, Size margin);

		protected Rectangle GetButtonBounds(ScrollButton scrollButton)
		{
			Rectangle empty = Rectangle.Empty;
			empty.Size = buttonSize;
			switch (scrollButton)
			{
			case ScrollButton.Up:
			case ScrollButton.Left:
				empty.X = bounds.X + margin.Width;
				empty.Y = bounds.Y + margin.Height;
				break;
			case ScrollButton.Down:
			case ScrollButton.Right:
				if (orientation == Orientation.Horizontal)
				{
					empty.X = bounds.X + margin.Width + empty.Size.Width + itemStrip.Size.Width;
					if (empty.X >= bounds.Right)
					{
						empty.X = bounds.Right - empty.Size.Width;
					}
					empty.Y = bounds.Y + margin.Height;
				}
				else
				{
					empty.X = bounds.X + margin.Width;
					empty.Y = bounds.Y + margin.Height + empty.Size.Height + itemStrip.Size.Height;
					if (empty.Y >= bounds.Bottom)
					{
						empty.Y = bounds.Bottom - empty.Size.Height;
					}
				}
				break;
			}
			return empty;
		}

		protected ScrollButton HitTest(Point mousePoint)
		{
			if (itemStrip.ScrollPosition > 0)
			{
				ScrollButton scrollButton = ((orientation == Orientation.Horizontal) ? ScrollButton.Left : ScrollButton.Up);
				if (GetButtonBounds(scrollButton).Contains(mousePoint))
				{
					return scrollButton;
				}
			}
			if (itemStrip.ScrollPosition + itemStrip.MaxVisibleItems < itemStrip.Items.Count)
			{
				ScrollButton scrollButton2 = ((orientation != 0) ? ScrollButton.Down : ScrollButton.Right);
				if (GetButtonBounds(scrollButton2).Contains(mousePoint))
				{
					return scrollButton2;
				}
			}
			return ScrollButton.Up;
		}

		protected void Invalidate()
		{
			if (serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				workflowView.InvalidateLogicalRectangle(bounds);
			}
		}

		private void OnScrollPositionChanged(object sender, EventArgs e)
		{
			Invalidate();
		}
	}
	internal abstract class ItemStrip
	{
		protected IServiceProvider serviceProvider;

		private ItemList<ItemInfo> items;

		private ItemInfo selectedItem;

		private ItemInfo highlitedItem;

		private int scrollPosition;

		private Rectangle bounds = Rectangle.Empty;

		private Orientation orientation;

		private Size itemSize = new Size(16, 16);

		private Size margin = Size.Empty;

		public IList<ItemInfo> Items => items;

		public ItemInfo SelectedItem
		{
			get
			{
				return selectedItem;
			}
			set
			{
				if (selectedItem != value)
				{
					ItemInfo previousItem = selectedItem;
					selectedItem = value;
					EnsureScrollPositionAndSelection();
					Invalidate();
					if (this.SelectionChanged != null)
					{
						this.SelectionChanged(this, new SelectionChangeEventArgs(previousItem, selectedItem));
					}
				}
			}
		}

		public Point Location
		{
			get
			{
				return bounds.Location;
			}
			set
			{
				if (bounds.Location != value)
				{
					Invalidate();
					bounds.Location = value;
					Invalidate();
				}
			}
		}

		public Size Size
		{
			get
			{
				return bounds.Size;
			}
			set
			{
				if (bounds.Size != value)
				{
					Invalidate();
					bounds.Size = value;
					EnsureScrollPositionAndSelection();
					Invalidate();
				}
			}
		}

		public Rectangle Bounds => bounds;

		public int ScrollPosition
		{
			get
			{
				return scrollPosition;
			}
			set
			{
				if (value < 0)
				{
					return;
				}
				int num = value;
				int maxVisibleItems = MaxVisibleItems;
				if (items.Count >= maxVisibleItems && items.Count - num < maxVisibleItems)
				{
					num = items.Count - maxVisibleItems;
				}
				if (num >= 0 && num <= Math.Max(items.Count - maxVisibleItems + 1, 0))
				{
					scrollPosition = num;
					Invalidate();
					if (this.ScrollPositionChanged != null)
					{
						this.ScrollPositionChanged(this, EventArgs.Empty);
					}
				}
			}
		}

		public Size RequiredSize
		{
			get
			{
				Size empty = Size.Empty;
				if (orientation == Orientation.Horizontal)
				{
					empty.Width = items.Count * itemSize.Width + (items.Count + 1) * margin.Width;
					empty.Height = itemSize.Height + 2 * margin.Height;
				}
				else
				{
					empty.Width = itemSize.Width + 2 * margin.Width;
					empty.Height = items.Count * itemSize.Height + (items.Count + 1) * margin.Height;
				}
				return empty;
			}
		}

		public Size ItemSize => itemSize;

		protected internal int MaxVisibleItems
		{
			get
			{
				int num = 0;
				if (orientation == Orientation.Horizontal)
				{
					int num2 = bounds.Width - margin.Width;
					num = num2 / Math.Max(itemSize.Width + margin.Width, 1);
				}
				else
				{
					int num3 = bounds.Height - margin.Height;
					num = num3 / Math.Max(itemSize.Height + margin.Height, 1);
				}
				return Math.Max(num, 1);
			}
		}

		protected ItemInfo HighlitedItem
		{
			get
			{
				return highlitedItem;
			}
			private set
			{
				if (highlitedItem != value)
				{
					highlitedItem = value;
					Invalidate();
				}
			}
		}

		public event SelectionChangeEventHandler<SelectionChangeEventArgs> SelectionChanged;

		public event EventHandler ScrollPositionChanged;

		public ItemStrip(IServiceProvider serviceProvider, Orientation orientation, Size itemSize, Size margin)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			this.serviceProvider = serviceProvider;
			this.orientation = orientation;
			this.itemSize = itemSize;
			this.margin = margin;
			items = new ItemList<ItemInfo>(this);
			items.ListChanging += OnItemsChanging;
			items.ListChanged += OnItemsChanged;
		}

		public Rectangle GetItemBounds(ItemInfo itemInfo)
		{
			int num = items.IndexOf(itemInfo);
			if (num < 0 || num < scrollPosition || num >= scrollPosition + MaxVisibleItems)
			{
				return Rectangle.Empty;
			}
			Rectangle empty = Rectangle.Empty;
			num -= scrollPosition;
			if (orientation == Orientation.Horizontal)
			{
				empty.X = bounds.Left + num * itemSize.Width + (num + 1) * margin.Width;
				empty.Y = bounds.Top + margin.Height;
			}
			else
			{
				empty.X = bounds.Left + margin.Width;
				empty.Y = bounds.Top + num * itemSize.Height + (num + 1) * margin.Height;
			}
			empty.Size = itemSize;
			return empty;
		}

		public abstract void Draw(Graphics graphics);

		public ItemInfo HitTest(Point point)
		{
			ItemInfo result = null;
			foreach (ItemInfo item in items)
			{
				if (GetItemBounds(item).Contains(point))
				{
					result = item;
					break;
				}
			}
			return result;
		}

		public virtual void OnMouseDragBegin(Point initialDragPoint, MouseEventArgs e)
		{
		}

		public virtual void OnMouseDragMove(MouseEventArgs e)
		{
		}

		public virtual void OnMouseDragEnd()
		{
		}

		public virtual void OnMouseEnter(MouseEventArgs e)
		{
			ItemInfo itemInfo = HitTest(new Point(e.X, e.Y));
			if (itemInfo != null && itemInfo.Text != null && itemInfo.Text.Length > 0)
			{
				ShowInfoTip(itemInfo.Text);
			}
			HighlitedItem = itemInfo;
		}

		public virtual void OnMouseDown(MouseEventArgs e)
		{
			ItemInfo itemInfo = HitTest(new Point(e.X, e.Y));
			if (itemInfo != null)
			{
				SelectedItem = itemInfo;
				if (itemInfo.Text != null && itemInfo.Text.Length > 0)
				{
					ShowInfoTip(itemInfo.Text);
				}
			}
			HighlitedItem = itemInfo;
		}

		public virtual void OnMouseMove(MouseEventArgs e)
		{
			ItemInfo itemInfo = HitTest(new Point(e.X, e.Y));
			if (itemInfo != null && itemInfo.Text != null && itemInfo.Text.Length > 0)
			{
				ShowInfoTip(itemInfo.Text);
			}
			HighlitedItem = itemInfo;
		}

		public virtual void OnMouseUp(MouseEventArgs e)
		{
		}

		public virtual void OnMouseLeave()
		{
			ShowInfoTip(string.Empty);
			HighlitedItem = null;
		}

		protected void Invalidate()
		{
			if (serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				workflowView.InvalidateLogicalRectangle(bounds);
			}
		}

		private void ShowInfoTip(string infoTip)
		{
			if (serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				workflowView.ShowInfoTip(string.Empty, infoTip);
			}
		}

		private void EnsureScrollPositionAndSelection()
		{
			int num = scrollPosition;
			if (selectedItem != null)
			{
				int num2 = items.IndexOf(selectedItem);
				if (num2 >= 0)
				{
					if (num2 <= scrollPosition)
					{
						num = Math.Max(num2 - 1, 0);
					}
					int maxVisibleItems = MaxVisibleItems;
					if (num2 >= scrollPosition + maxVisibleItems - 1)
					{
						num = num2 - maxVisibleItems + 2;
					}
				}
			}
			ScrollPosition = num;
		}

		private void OnItemsChanging(object sender, ItemListChangeEventArgs<ItemInfo> e)
		{
			if (e.Action == ItemListChangeAction.Remove && e.RemovedItems.Count > 0 && selectedItem == e.RemovedItems[0])
			{
				int num = items.IndexOf(e.RemovedItems[0]);
				num += ((num < items.Count - 1) ? 1 : (-1));
				SelectedItem = ((num >= 0 && num < items.Count) ? items[num] : null);
			}
		}

		private void OnItemsChanged(object sender, ItemListChangeEventArgs<ItemInfo> e)
		{
			if (e.Action == ItemListChangeAction.Add)
			{
				if (e.AddedItems.Count > 0)
				{
					SelectedItem = e.AddedItems[0];
				}
			}
			else if (e.Action == ItemListChangeAction.Remove)
			{
				EnsureScrollPositionAndSelection();
			}
			Invalidate();
		}
	}
	internal sealed class ItemPalette
	{
		private sealed class Palette : Form
		{
			private sealed class PaletteShadow : Form
			{
				private Palette parent;

				public PaletteShadow(Palette parent)
				{
					this.parent = parent;
					SetStyle(ControlStyles.UserPaint | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, value: true);
					base.FormBorderStyle = FormBorderStyle.None;
					BackColor = Color.White;
					base.ShowInTaskbar = false;
					base.MaximizeBox = false;
					base.ControlBox = false;
					base.Opacity = 0.5;
					base.StartPosition = FormStartPosition.Manual;
					base.Enabled = false;
					base.Region = parent.Region;
					base.Location = new Point(this.parent.Location.X + DropShadowWidth, this.parent.Location.Y + DropShadowWidth);
				}

				protected override void OnPaint(PaintEventArgs e)
				{
					base.OnPaint(e);
					Rectangle formRectangle = parent.formRectangle;
					formRectangle.Offset(-DropShadowWidth, -DropShadowWidth);
					ActivityDesignerPaint.DrawDropShadow(e.Graphics, formRectangle, Color.Black, 4, LightSourcePosition.Left | LightSourcePosition.Top, 0.2f, roundEdges: false);
				}
			}

			private Size imageRectangle = new Size(20, 20);

			private Size imageSize = new Size(16, 16);

			private Size selectionItemMargin = new Size(1, 1);

			private int leftTextMargin = 5;

			private int rightTextMargin = 20;

			private List<Rectangle> itemRectangles = new List<Rectangle>();

			private int menuItemCount;

			private Rectangle workingRectangle = Rectangle.Empty;

			private static readonly int DropShadowWidth = 4;

			private int maximumTextWidth = 500;

			private Rectangle formRectangle;

			private Rectangle leftGradientRectangle;

			private int itemHeight;

			private int itemWidth;

			private int maxTextHeight;

			private int activeIndex = -1;

			private ItemPalette parent;

			private PaletteShadow paletteShadow;

			private ItemList<ItemInfo> enabledItems;

			private ItemInfo ActiveItem
			{
				get
				{
					if (activeIndex <= -1)
					{
						return null;
					}
					return enabledItems[activeIndex];
				}
			}

			public Palette(ItemPalette parent, Point location)
			{
				this.parent = parent;
				enabledItems = new ItemList<ItemInfo>(this);
				foreach (ItemInfo item in this.parent.items)
				{
					if (!(item.UserData[DesignerUserDataKeys.DesignerVerb] is ActivityDesignerVerb { Enabled: false }))
					{
						enabledItems.Add(item);
					}
				}
				menuItemCount = enabledItems.Count;
				SetStyle(ControlStyles.UserPaint | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, value: true);
				base.FormBorderStyle = FormBorderStyle.None;
				BackColor = Color.White;
				base.ShowInTaskbar = false;
				base.MaximizeBox = false;
				base.ControlBox = false;
				base.StartPosition = FormStartPosition.Manual;
				Screen screen = Screen.FromPoint(location);
				workingRectangle = screen.WorkingArea;
				PreparePalette(location);
				paletteShadow = new PaletteShadow(this);
			}

			protected override void OnClosing(CancelEventArgs e)
			{
				DestroyShadow();
			}

			protected override void OnVisibleChanged(EventArgs e)
			{
				base.OnVisibleChanged(e);
				if (base.Visible)
				{
					paletteShadow.Show();
					BringToFront();
					Focus();
				}
				else
				{
					paletteShadow.Hide();
				}
			}

			protected override void OnKeyDown(KeyEventArgs e)
			{
				base.OnKeyDown(e);
				if (e.KeyCode == Keys.Return)
				{
					if (ActiveItem != null)
					{
						try
						{
							parent.SelectedItem = ActiveItem;
						}
						finally
						{
							parent.DestroyPalette(this);
						}
					}
				}
				else if (e.KeyCode == Keys.Escape)
				{
					parent.DestroyPalette(this);
				}
				else
				{
					if (e.KeyCode != Keys.Up && e.KeyCode != Keys.Down)
					{
						return;
					}
					int num = -1;
					if (activeIndex != -1)
					{
						num = activeIndex;
					}
					int num2 = num;
					if (num >= 0)
					{
						if (e.KeyCode == Keys.Up)
						{
							num--;
						}
						else if (e.KeyCode == Keys.Down)
						{
							num++;
						}
					}
					else
					{
						num = 0;
					}
					if (num >= 0 && num < enabledItems.Count)
					{
						SetActiveItem(num);
					}
				}
			}

			protected override void OnMouseDown(MouseEventArgs e)
			{
				base.OnMouseDown(e);
				ItemInfo itemInfo = null;
				Point pt = new Point(e.X, e.Y);
				for (int i = 0; i < enabledItems.Count; i++)
				{
					if (GetItemBounds(i).Contains(pt))
					{
						itemInfo = enabledItems[i];
						break;
					}
				}
				if (itemInfo != null)
				{
					try
					{
						parent.SelectedItem = itemInfo;
					}
					finally
					{
						parent.DestroyPalette(this);
					}
				}
			}

			protected override void OnMouseMove(MouseEventArgs e)
			{
				base.OnMouseMove(e);
				Point pt = new Point(e.X, e.Y);
				for (int i = 0; i < enabledItems.Count; i++)
				{
					if (GetItemBounds(i).Contains(pt))
					{
						SetActiveItem(i);
						break;
					}
				}
			}

			protected override void OnMouseLeave(EventArgs e)
			{
				base.OnMouseLeave(e);
				SetActiveItem(-1);
			}

			protected override void OnPaint(PaintEventArgs paintArgs)
			{
				Graphics graphics = paintArgs.Graphics;
				graphics.FillRectangle(SystemBrushes.Window, formRectangle);
				graphics.DrawRectangle(SystemPens.ControlDarkDark, formRectangle.X, formRectangle.Y, formRectangle.Width - 1, formRectangle.Height - 1);
				using (Brush brush = new LinearGradientBrush(new Point(leftGradientRectangle.Left, leftGradientRectangle.Top), new Point(leftGradientRectangle.Right, leftGradientRectangle.Top), SystemColors.Window, SystemColors.ScrollBar))
				{
					graphics.FillRectangle(brush, leftGradientRectangle);
				}
				for (int i = 0; i < enabledItems.Count; i++)
				{
					Rectangle itemBounds = GetItemBounds(i);
					if (activeIndex == i)
					{
						graphics.FillRectangle(SystemBrushes.InactiveCaptionText, itemBounds.X, itemBounds.Y, itemBounds.Width - 1, itemBounds.Height - 1);
						graphics.DrawRectangle(SystemPens.ActiveCaption, itemBounds.X, itemBounds.Y, itemBounds.Width - 1, itemBounds.Height - 1);
					}
					if (enabledItems[i].Image != null)
					{
						Point location = new Point(itemBounds.Left + 3, itemBounds.Top + 3);
						Size size = enabledItems[i].Image.Size;
						graphics.DrawImage(enabledItems[i].Image, new Rectangle(location, size), new Rectangle(Point.Empty, size), GraphicsUnit.Pixel);
					}
					Rectangle boundingRect = new Rectangle(itemBounds.Left + 20 + 5 + 2, itemBounds.Top + 1, itemWidth - 29, itemHeight - 3);
					int num = boundingRect.Height - maxTextHeight;
					num = ((num > 0) ? (num / 2) : 0);
					boundingRect.Height = Math.Min(boundingRect.Height, maxTextHeight);
					boundingRect.Y += num;
					graphics.TextRenderingHint = TextRenderingHint.AntiAlias;
					string text = enabledItems[i].Text;
					text = text.Replace("&", "");
					ActivityDesignerPaint.DrawText(graphics, Font, text, boundingRect, StringAlignment.Near, TextQuality.Aliased, SystemBrushes.ControlText);
				}
			}

			private void DestroyShadow()
			{
				if (paletteShadow != null)
				{
					paletteShadow.Close();
					paletteShadow.Dispose();
					paletteShadow = null;
				}
			}

			private void PreparePalette(Point location)
			{
				LayoutPalette();
				Point point = location;
				Rectangle rectangle = formRectangle;
				rectangle.Offset(point);
				Size empty = Size.Empty;
				rectangle.Width += DropShadowWidth;
				rectangle.Height += DropShadowWidth;
				Rectangle a = Rectangle.Empty;
				Screen[] allScreens = Screen.AllScreens;
				foreach (Screen screen in allScreens)
				{
					a = Rectangle.Union(a, screen.Bounds);
				}
				if (workingRectangle.Top > rectangle.Top)
				{
					empty.Height += workingRectangle.Top - rectangle.Top;
				}
				else if (workingRectangle.Bottom < rectangle.Bottom)
				{
					empty.Height -= rectangle.Bottom - workingRectangle.Bottom;
				}
				if (workingRectangle.Left > rectangle.Left)
				{
					empty.Width += workingRectangle.Left - rectangle.Left;
				}
				else if (workingRectangle.Right < rectangle.Right)
				{
					empty.Width -= rectangle.Right - workingRectangle.Right;
				}
				point += empty;
				base.Location = point;
				GraphicsPath graphicsPath = new GraphicsPath();
				graphicsPath.AddRectangle(formRectangle);
				base.Size = formRectangle.Size;
				base.Region = new Region(graphicsPath);
			}

			private void LayoutPalette()
			{
				itemRectangles.Clear();
				leftGradientRectangle = Rectangle.Empty;
				using (Graphics graphics = CreateGraphics())
				{
					Size empty = Size.Empty;
					foreach (ItemInfo enabledItem in enabledItems)
					{
						SizeF sizeF = graphics.MeasureString(enabledItem.Text, Font);
						empty.Width = Math.Max(Convert.ToInt32(Math.Ceiling(sizeF.Width)), empty.Width);
						empty.Height = Math.Max(Convert.ToInt32(Math.Ceiling(sizeF.Height)), empty.Height);
					}
					empty.Width = Math.Min(empty.Width, maximumTextWidth);
					maxTextHeight = empty.Height;
					itemHeight = Math.Max(imageRectangle.Height, empty.Height + 2) + 3;
					itemWidth = imageRectangle.Width + 2 * selectionItemMargin.Width + leftTextMargin + empty.Width + rightTextMargin;
				}
				int num = 2;
				foreach (ItemInfo enabledItem2 in enabledItems)
				{
					itemRectangles.Add(new Rectangle(2, num, itemWidth, itemHeight));
					num += itemHeight + 2 * selectionItemMargin.Height;
				}
				leftGradientRectangle = new Rectangle(2, 2, 24, num - 4);
				formRectangle = new Rectangle(0, 0, itemWidth + 4, num);
			}

			private void SetActiveItem(int index)
			{
				if (activeIndex != index)
				{
					if (activeIndex != -1)
					{
						Invalidate(GetItemBounds(activeIndex));
					}
					activeIndex = index;
					if (activeIndex != -1)
					{
						Invalidate(GetItemBounds(activeIndex));
					}
				}
			}

			private Rectangle GetItemBounds(int index)
			{
				if (index < 0 || index >= itemRectangles.Count)
				{
					return Rectangle.Empty;
				}
				return itemRectangles[index];
			}
		}

		private ItemList<ItemInfo> items;

		private ItemInfo selectedItem;

		private Palette palette;

		private Font font;

		public IList<ItemInfo> Items => items;

		public ItemInfo SelectedItem
		{
			get
			{
				return selectedItem;
			}
			set
			{
				if (selectedItem == value)
				{
					return;
				}
				ItemInfo previousItem = selectedItem;
				selectedItem = value;
				if (this.SelectionChanged != null)
				{
					this.SelectionChanged(this, new SelectionChangeEventArgs(previousItem, selectedItem));
					if (palette != null)
					{
						palette.Invalidate();
					}
				}
			}
		}

		public bool IsVisible
		{
			get
			{
				if (palette != null)
				{
					return palette.Visible;
				}
				return false;
			}
		}

		public event SelectionChangeEventHandler<SelectionChangeEventArgs> SelectionChanged;

		public event EventHandler Closed;

		public ItemPalette()
		{
			items = new ItemList<ItemInfo>(this);
		}

		public void SetFont(Font font)
		{
			this.font = font;
		}

		public void Show(Point location)
		{
			if (palette != null)
			{
				DestroyPalette(palette);
			}
			palette = new Palette(this, location);
			palette.Font = font;
			palette.Show();
			palette.Focus();
			palette.LostFocus += OnPaletteLostFocus;
		}

		private void OnPaletteLostFocus(object sender, EventArgs e)
		{
			DestroyPalette(sender as Palette);
		}

		private void DestroyPalette(Palette palette)
		{
			if (palette != null)
			{
				if (this.Closed != null)
				{
					this.Closed(this, EventArgs.Empty);
				}
				palette.LostFocus -= OnPaletteLostFocus;
				palette.Close();
				palette.Dispose();
				this.palette = null;
			}
		}
	}
	[ToolboxItem(false)]
	internal sealed class TabControl : Control
	{
		private const int SplitterSize = 6;

		private TabStrip tabStrip;

		private ScrollBar scrollBar;

		private AnchorAlignment stripAnchor;

		private bool allowDockChange = true;

		private Splitter splitter;

		private EventHandler idleHandler;

		private bool itemsMinimized = true;

		public ScrollBar ScrollBar => scrollBar;

		public TabStrip TabStrip => tabStrip;

		public TabControl(DockStyle dockStyle, AnchorAlignment stripAnchor)
		{
			if (dockStyle == DockStyle.Fill || dockStyle == DockStyle.None)
			{
				throw new ArgumentException(DR.GetString("InvalidDockingStyle", "dockStyle"));
			}
			SuspendLayout();
			this.stripAnchor = stripAnchor;
			Dock = dockStyle;
			allowDockChange = false;
			if (Dock == DockStyle.Left || Dock == DockStyle.Right)
			{
				base.Width = SystemInformation.VerticalScrollBarWidth + 2;
				splitter = new Splitter();
				tabStrip = new TabStrip(Orientation.Vertical, SystemInformation.VerticalScrollBarWidth);
				scrollBar = new VScrollBar();
				if (this.stripAnchor == AnchorAlignment.Near)
				{
					tabStrip.Dock = DockStyle.Top;
					splitter.Dock = DockStyle.Top;
					scrollBar.Dock = DockStyle.Fill;
				}
				else
				{
					tabStrip.Dock = DockStyle.Bottom;
					splitter.Dock = DockStyle.Bottom;
					scrollBar.Dock = DockStyle.Fill;
				}
			}
			else
			{
				base.Height = SystemInformation.HorizontalScrollBarHeight + 2;
				splitter = new Splitter();
				tabStrip = new TabStrip(Orientation.Horizontal, SystemInformation.HorizontalScrollBarHeight);
				scrollBar = new HScrollBar();
				if (this.stripAnchor == AnchorAlignment.Near)
				{
					tabStrip.Dock = DockStyle.Left;
					splitter.Dock = DockStyle.Left;
					scrollBar.Dock = DockStyle.Fill;
				}
				else
				{
					tabStrip.Dock = DockStyle.Right;
					splitter.Dock = DockStyle.Right;
					scrollBar.Dock = DockStyle.Fill;
				}
			}
			base.Controls.AddRange(new Control[3] { scrollBar, splitter, tabStrip });
			splitter.Size = new Size(6, 6);
			splitter.Paint += OnSplitterPaint;
			splitter.DoubleClick += OnSplitterDoubleClick;
			((ItemList<ItemInfo>)TabStrip.Tabs).ListChanged += OnTabsChanged;
			BackColor = SystemColors.Control;
			ResumeLayout();
		}

		protected override void Dispose(bool disposing)
		{
			if (idleHandler != null)
			{
				Application.Idle -= idleHandler;
				idleHandler = null;
			}
			base.Dispose(disposing);
		}

		protected override void OnLayout(LayoutEventArgs levent)
		{
			base.OnLayout(levent);
			bool flag = splitter.SplitPosition < splitter.MinSize;
			if (splitter.Dock == DockStyle.Left || splitter.Dock == DockStyle.Right)
			{
				int num = Math.Max(splitter.MinSize, base.Width - tabStrip.MaximumRequiredSize - splitter.Width);
				if (splitter.MinExtra != num)
				{
					splitter.MinExtra = num;
				}
				flag |= (itemsMinimized ? (splitter.SplitPosition != splitter.MinSize) : (splitter.SplitPosition != base.Width - splitter.MinExtra));
			}
			else
			{
				int num2 = Math.Max(splitter.MinSize, base.Height - tabStrip.MaximumRequiredSize - splitter.Height);
				if (splitter.MinExtra != num2)
				{
					splitter.MinExtra = num2;
				}
				flag |= (itemsMinimized ? (splitter.SplitPosition != splitter.MinSize) : (splitter.SplitPosition != base.Height - splitter.MinExtra));
			}
			if (flag && idleHandler == null)
			{
				idleHandler = OnIdle;
				Application.Idle += idleHandler;
			}
		}

		protected override void OnDockChanged(EventArgs e)
		{
			if (!allowDockChange)
			{
				throw new InvalidOperationException(SR.GetString("Error_ChangingDock"));
			}
		}

		private void OnIdle(object sender, EventArgs e)
		{
			Application.Idle -= idleHandler;
			idleHandler = null;
			if (splitter.Dock == DockStyle.Left || splitter.Dock == DockStyle.Right)
			{
				if (!itemsMinimized && splitter.SplitPosition != base.Width - splitter.MinExtra)
				{
					splitter.SplitPosition = base.Width - splitter.MinExtra;
				}
			}
			else if (!itemsMinimized && splitter.SplitPosition != base.Height - splitter.MinExtra)
			{
				splitter.SplitPosition = base.Height - splitter.MinExtra;
			}
			if (itemsMinimized && splitter.SplitPosition > splitter.MinSize)
			{
				splitter.SplitPosition = splitter.MinSize;
			}
			if (splitter.SplitPosition < splitter.MinSize)
			{
				splitter.SplitPosition = splitter.MinSize;
			}
		}

		private void OnSplitterDoubleClick(object sender, EventArgs e)
		{
			itemsMinimized = !itemsMinimized;
			if (!itemsMinimized)
			{
				splitter.SplitPosition = ((splitter.Dock == DockStyle.Left || splitter.Dock == DockStyle.Right) ? base.Width : base.Height) - splitter.MinExtra;
			}
			else
			{
				splitter.SplitPosition = splitter.MinSize;
			}
		}

		private void OnSplitterPaint(object sender, PaintEventArgs e)
		{
			Rectangle clientRectangle = base.ClientRectangle;
			if (splitter.Dock == DockStyle.Left || splitter.Dock == DockStyle.Right)
			{
				e.Graphics.DrawLine(SystemPens.ControlLightLight, 0, 0, 0, splitter.Height);
				e.Graphics.DrawLine(SystemPens.ControlLightLight, 0, 0, 5, 0);
				e.Graphics.DrawLine(SystemPens.ControlDark, 4, 0, 4, splitter.Height - 1);
				e.Graphics.DrawLine(SystemPens.ControlDark, 4, splitter.Height - 1, 0, splitter.Height - 1);
				e.Graphics.DrawLine(SystemPens.ControlText, 5, 0, 5, splitter.Height);
			}
			else
			{
				e.Graphics.DrawLine(SystemPens.ControlLightLight, 0, 1, splitter.Width, 1);
				e.Graphics.DrawLine(SystemPens.ControlLightLight, 0, 1, 0, 5);
				e.Graphics.DrawLine(SystemPens.ControlDark, 0, 4, splitter.Width, 4);
				e.Graphics.DrawLine(SystemPens.ControlDark, splitter.Width - 1, 4, splitter.Width - 1, 1);
				e.Graphics.DrawLine(SystemPens.ControlText, 0, 5, splitter.Width, 5);
			}
		}

		private void OnTabsChanged(object sender, ItemListChangeEventArgs<ItemInfo> e)
		{
			if (splitter.Dock == DockStyle.Left || splitter.Dock == DockStyle.Right)
			{
				splitter.MinExtra = base.Width - tabStrip.MaximumRequiredSize - splitter.Width;
				splitter.MinSize = tabStrip.MinimumRequiredSize;
			}
			else if (splitter.Dock == DockStyle.Top || splitter.Dock == DockStyle.Bottom)
			{
				splitter.MinExtra = base.Height - tabStrip.MaximumRequiredSize - splitter.Height;
				splitter.MinSize = tabStrip.MinimumRequiredSize;
			}
		}
	}
	internal sealed class TabSelectionChangeEventArgs : SelectionChangeEventArgs
	{
		private Rectangle selectedTabBounds = Rectangle.Empty;

		public Rectangle SelectedTabBounds => selectedTabBounds;

		public TabSelectionChangeEventArgs(ItemInfo previousItem, ItemInfo currentItem, Rectangle selectedTabBounds)
			: base(previousItem, currentItem)
		{
			this.selectedTabBounds = selectedTabBounds;
		}
	}
	[ToolboxItem(false)]
	internal sealed class TabStrip : Control
	{
		private struct DrawTabItemStruct
		{
			public Rectangle TabItemRectangle;

			public Size TextSize;
		}

		private const int MinSize = 18;

		private const int TabMargin = 1;

		private Orientation orientation;

		private int reqTabItemSize;

		private int selectedTab = -1;

		private ItemList<ItemInfo> tabItemList;

		private ToolTip buttonTips;

		private DrawTabItemStruct[] drawItems;

		public IList<ItemInfo> Tabs => tabItemList;

		public int SelectedTab
		{
			get
			{
				return selectedTab;
			}
			set
			{
				if (value >= 0 && value <= tabItemList.Count)
				{
					ItemInfo previousItem = ((selectedTab >= 0 && selectedTab < tabItemList.Count) ? tabItemList[selectedTab] : null);
					ItemInfo itemInfo = tabItemList[value];
					selectedTab = value;
					Invalidate();
					if (this.TabChange != null)
					{
						Rectangle tabItemRectangle = GetTabItemRectangle(itemInfo);
						this.TabChange(this, new TabSelectionChangeEventArgs(previousItem, itemInfo, new Rectangle(PointToScreen(tabItemRectangle.Location), tabItemRectangle.Size)));
					}
				}
			}
		}

		public int MinimumRequiredSize
		{
			get
			{
				int num = 0;
				for (int i = 0; i < tabItemList.Count; i++)
				{
					num += 1 + reqTabItemSize;
				}
				return num;
			}
		}

		public int MaximumRequiredSize
		{
			get
			{
				int num = 0;
				if (tabItemList.Count == drawItems.Length)
				{
					for (int i = 0; i < tabItemList.Count; i++)
					{
						ItemInfo itemInfo = tabItemList[i];
						int num2 = 0;
						if (itemInfo.Image != null)
						{
							num2++;
							num2 += reqTabItemSize;
						}
						if (itemInfo.Text != null && itemInfo.Text.Length > 0)
						{
							num2++;
							num2 += drawItems[i].TextSize.Width;
						}
						num2 += ((num2 != 0) ? 1 : reqTabItemSize);
						num += num2;
					}
				}
				return num;
			}
		}

		public event SelectionChangeEventHandler<TabSelectionChangeEventArgs> TabChange;

		public TabStrip(Orientation orientation, int tabSize)
		{
			SuspendLayout();
			this.orientation = orientation;
			reqTabItemSize = Math.Max(tabSize, 18);
			Font = new Font(Font.FontFamily, reqTabItemSize * 2 / 3, GraphicsUnit.Pixel);
			tabItemList = new ItemList<ItemInfo>(this);
			tabItemLislistChanging += OnItemsChanging;
			tabItemLislistChanged += OnItemsChanged;
			buttonTips = new ToolTip();
			buttonTips.ShowAlways = true;
			buttonTips.SetToolTip(this, string.Empty);
			BackColor = SystemColors.Control;
			SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.Selectable | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, value: true);
			ResumeLayout();
			SystemEvents.UserPreferenceChanged += SystemEvents_UserPreferenceChanged;
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				SystemEvents.UserPreferenceChanged -= SystemEvents_UserPreferenceChanged;
			}
			base.Dispose(disposing);
		}

		private void SystemEvents_UserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e)
		{
			buttonTips.BackColor = SystemColors.Info;
			buttonTips.ForeColor = SystemColors.InfoText;
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			int num = 0;
			foreach (ItemInfo tabItem in tabItemList)
			{
				if (GetTabItemRectangle(tabItem).Contains(new Point(e.X, e.Y)))
				{
					SelectedTab = num;
					break;
				}
				num++;
			}
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			base.OnMouseMove(e);
			foreach (ItemInfo tabItem in tabItemList)
			{
				if (GetTabItemRectangle(tabItem).Contains(new Point(e.X, e.Y)) && tabItem.Text != buttonTips.GetToolTip(this))
				{
					buttonTips.Active = false;
					buttonTips.SetToolTip(this, tabItem.Text);
					buttonTips.Active = true;
					break;
				}
			}
			Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			buttonTips.SetToolTip(this, string.Empty);
			Invalidate();
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			base.OnPaint(e);
			if (drawItems.Length != tabItemList.Count)
			{
				return;
			}
			e.Graphics.TextRenderingHint = TextRenderingHint.AntiAlias;
			Color color = Color.FromArgb(255, 238, 194);
			Color color2 = Color.FromArgb(255, 192, 111);
			if (SystemInformation.HighContrast)
			{
				color = Color.FromArgb(255 - color.R, 255 - color.G, 255 - color.B);
				color2 = Color.FromArgb(255 - color2.R, 255 - color2.G, 255 - color2.B);
			}
			using Brush brush3 = new SolidBrush(color);
			using Brush brush2 = new SolidBrush(color2);
			for (int i = 0; i < drawItems.Length; i++)
			{
				ItemInfo itemInfo = tabItemList[i];
				DrawTabItemStruct drawTabItemStruct = drawItems[i];
				Brush brush = SystemBrushes.Control;
				Rectangle tabItemRectangle = drawTabItemStruct.TabItemRectangle;
				if (selectedTab == i)
				{
					brush = brush2;
					e.Graphics.FillRectangle(brush, tabItemRectangle);
					e.Graphics.DrawRectangle(SystemPens.Highlight, tabItemRectangle);
				}
				else
				{
					Point pt = PointToClient(Control.MousePosition);
					if (tabItemRectangle.Contains(pt))
					{
						brush = brush3;
						e.Graphics.FillRectangle(brush, tabItemRectangle);
						e.Graphics.DrawRectangle(SystemPens.ControlDarkDark, tabItemRectangle);
					}
				}
				Rectangle tabImageRectangle = GetTabImageRectangle(itemInfo);
				if (!tabImageRectangle.IsEmpty)
				{
					e.Graphics.DrawImage(itemInfo.Image, tabImageRectangle);
				}
				Rectangle tabTextRectangle = GetTabTextRectangle(itemInfo);
				if (tabTextRectangle.IsEmpty)
				{
					continue;
				}
				StringFormat stringFormat = new StringFormat();
				stringFormat.Alignment = StringAlignment.Center;
				stringFormat.LineAlignment = StringAlignment.Center;
				stringFormat.Trimming = StringTrimming.EllipsisCharacter;
				if (orientation == Orientation.Horizontal)
				{
					RectangleF layoutRectangle = new RectangleF(tabTextRectangle.X, tabTextRectangle.Y, tabTextRectangle.Width, tabTextRectangle.Height);
					e.Graphics.DrawString(itemInfo.Text, Font, SystemBrushes.ControlText, layoutRectangle, stringFormat);
					continue;
				}
				using Bitmap bitmap = new Bitmap(tabTextRectangle.Height, tabTextRectangle.Width, e.Graphics);
				using Graphics graphics = Graphics.FromImage(bitmap);
				graphics.TextRenderingHint = TextRenderingHint.AntiAlias;
				graphics.FillRectangle(brush, new Rectangle(0, 0, bitmap.Width, bitmap.Height));
				graphics.DrawString(tabItemList[i].Text, Font, SystemBrushes.ControlText, new Rectangle(0, 0, bitmap.Width, bitmap.Height), stringFormat);
				bitmap.RotateFlip(RotateFlipType.Rotate90FlipNone);
				e.Graphics.DrawImage(bitmap, tabTextRectangle);
			}
		}

		protected override void OnLayout(LayoutEventArgs levent)
		{
			base.OnLayout(levent);
			using Graphics graphics = CreateGraphics();
			drawItems = new DrawTabItemStruct[tabItemList.Count];
			int num = ((orientation == Orientation.Horizontal) ? base.Width : base.Height);
			bool flag = false;
			if (num <= MinimumRequiredSize)
			{
				flag = true;
			}
			int num2 = 0;
			for (int i = 0; i < tabItemList.Count; i++)
			{
				int num3 = 0;
				ItemInfo itemInfo = tabItemList[i];
				if (itemInfo.Image != null)
				{
					num3++;
					num3 += reqTabItemSize - 2;
				}
				if (itemInfo.Text != null && itemInfo.Text.Length > 0)
				{
					SizeF sizeF = graphics.MeasureString(itemInfo.Text, Font);
					drawItems[i].TextSize = new Size(Convert.ToInt32(Math.Ceiling(sizeF.Width)), Convert.ToInt32(Math.Ceiling(sizeF.Height)));
					if (!flag)
					{
						num3 += drawItems[i].TextSize.Width + 1;
					}
				}
				num3 += ((num3 != 0) ? 1 : reqTabItemSize);
				drawItems[i].TabItemRectangle = Rectangle.Empty;
				if (orientation == Orientation.Horizontal)
				{
					drawItems[i].TabItemRectangle.X = num2;
					drawItems[i].TabItemRectangle.Y = 0;
					drawItems[i].TabItemRectangle.Width = num3;
					drawItems[i].TabItemRectangle.Height = reqTabItemSize;
				}
				else
				{
					drawItems[i].TabItemRectangle.X = 0;
					drawItems[i].TabItemRectangle.Y = num2;
					drawItems[i].TabItemRectangle.Width = reqTabItemSize;
					drawItems[i].TabItemRectangle.Height = num3;
				}
				num2 += num3 + 1;
			}
			num2--;
			if (num2 <= num)
			{
				return;
			}
			int num4 = (int)Math.Ceiling((double)(num2 - num) / (double)Math.Max(1, tabItemList.Count));
			num2 = 0;
			DrawTabItemStruct drawTabItemStruct = drawItems[tabItemList.Count - 1];
			int num5 = ((orientation == Orientation.Horizontal) ? (drawTabItemStruct.TabItemRectangle.Width - num4) : (drawTabItemStruct.TabItemRectangle.Height - num4));
			if (num5 < reqTabItemSize)
			{
				num4 += (int)Math.Ceiling((double)(reqTabItemSize - num5) / (double)Math.Max(1, tabItemList.Count));
			}
			for (int j = 0; j < tabItemList.Count; j++)
			{
				if (orientation == Orientation.Horizontal)
				{
					drawItems[j].TabItemRectangle.X -= num2;
					drawItems[j].TabItemRectangle.Width -= num4;
					if (j == tabItemList.Count - 1 && drawItems[j].TabItemRectangle.Width < reqTabItemSize)
					{
						drawItems[j].TabItemRectangle.Width = reqTabItemSize;
					}
				}
				else
				{
					drawItems[j].TabItemRectangle.Y -= num2;
					drawItems[j].TabItemRectangle.Height -= num4;
					if (j == tabItemList.Count - 1 && drawItems[j].TabItemRectangle.Height < reqTabItemSize)
					{
						drawItems[j].TabItemRectangle.Height = reqTabItemSize;
					}
				}
				num2 += num4;
			}
		}

		private void OnItemsChanging(object sender, ItemListChangeEventArgs<ItemInfo> e)
		{
			if (e.Action != ItemListChangeAction.Add)
			{
				return;
			}
			foreach (ItemInfo addedItem in e.AddedItems)
			{
				if (tabItemList.Contains(addedItem))
				{
					throw new ArgumentException(DR.GetString("Error_TabExistsWithSameId"));
				}
			}
		}

		private void OnItemsChanged(object sender, ItemListChangeEventArgs<ItemInfo> e)
		{
			if (tabItemList.Count == 0)
			{
				selectedTab = -1;
			}
			else if (selectedTab > tabItemList.Count - 1)
			{
				SelectedTab = tabItemList.Count - 1;
			}
			if (base.Parent != null)
			{
				base.Parent.PerformLayout();
			}
		}

		private Rectangle GetTabItemRectangle(ItemInfo tabItemInfo)
		{
			int num = tabItemList.IndexOf(tabItemInfo);
			if (num < 0)
			{
				throw new ArgumentException(DR.GetString("ButtonInformationMissing"));
			}
			if (drawItems.Length == tabItemList.Count)
			{
				return drawItems[num].TabItemRectangle;
			}
			return Rectangle.Empty;
		}

		private Rectangle GetTabImageRectangle(ItemInfo tabItemInfo)
		{
			int num = tabItemList.IndexOf(tabItemInfo);
			if (num < 0)
			{
				throw new ArgumentException(DR.GetString("ButtonInformationMissing"));
			}
			Rectangle result = Rectangle.Empty;
			if (tabItemInfo.Image != null && drawItems.Length == tabItemList.Count)
			{
				result = drawItems[num].TabItemRectangle;
				result.Inflate(-1, -1);
				result.Size = new Size(reqTabItemSize - 2, reqTabItemSize - 2);
			}
			return result;
		}

		private Rectangle GetTabTextRectangle(ItemInfo tabItemInfo)
		{
			int num = tabItemList.IndexOf(tabItemInfo);
			if (num < 0)
			{
				throw new ArgumentException(DR.GetString("ButtonInformationMissing"));
			}
			Rectangle result = Rectangle.Empty;
			if (tabItemInfo.Text != null && drawItems.Length == tabItemList.Count)
			{
				result = drawItems[num].TabItemRectangle;
				result.Inflate(-1, -1);
				Rectangle tabImageRectangle = GetTabImageRectangle(tabItemInfo);
				if (!tabImageRectangle.IsEmpty)
				{
					if (orientation == Orientation.Horizontal)
					{
						result.X += tabImageRectangle.Width + 1;
						result.Width -= tabImageRectangle.Width + 1;
					}
					else
					{
						result.Y += tabImageRectangle.Height + 1;
						result.Height -= tabImageRectangle.Height + 1;
					}
				}
				if (result.Width <= 0 || result.Height <= 0)
				{
					result = Rectangle.Empty;
				}
			}
			return result;
		}
	}
	internal sealed class WorkflowToolTip : IDisposable
	{
		private sealed class NativeToolTip : NativeWindow, IDisposable
		{
			private const string ToolTipClass = "tooltips_class32";

			private IntPtr parentHandle;

			private bool activate = true;

			internal NativeToolTip(IntPtr parentHandle)
			{
				this.parentHandle = parentHandle;
				CreateHandle(new CreateParams
				{
					ClassName = "tooltips_class32",
					Style = -2147483645,
					ExStyle = 8,
					Parent = this.parentHandle
				});
				if (IntPtr.Zero == base.Handle)
				{
					throw new NullReferenceException(SR.GetString("Error_CreatingToolTip"));
				}
				NativeMethods.TOOLINFO toolInfo = GetToolInfo();
				toolInfo.flags = 272;
				toolInfo.hwnd = this.parentHandle;
				AddTool(toolInfo);
				Activate(activateToolTip: false);
			}

			void IDisposable.Dispose()
			{
				if (parentHandle != IntPtr.Zero)
				{
					NativeMethods.TOOLINFO toolInfo = GetToolInfo();
					toolInfo.hwnd = parentHandle;
					DelTool(toolInfo);
					DestroyHandle();
					parentHandle = IntPtr.Zero;
				}
			}

			public void Activate(bool activateToolTip)
			{
				if (activate != activateToolTip)
				{
					activate = activateToolTip;
					IntPtr wParam = (activate ? new IntPtr(1) : new IntPtr(0));
					IntPtr intPtr = NativeMethods.SendMessage(base.Handle, NativeMethods.TTM_ACTIVATE, wParam, IntPtr.Zero);
				}
			}

			public void Pop()
			{
				IntPtr intPtr = NativeMethods.SendMessage(base.Handle, NativeMethods.TTM_POP, IntPtr.Zero, IntPtr.Zero);
			}

			public void SetMaxTipWidth(int tipWidth)
			{
				IntPtr intPtr = NativeMethods.SendMessage(base.Handle, NativeMethods.TTM_SETMAXTIPWIDTH, IntPtr.Zero, new IntPtr(tipWidth));
			}

			public void SetDelay(int time, int delay)
			{
				IntPtr intPtr = NativeMethods.SendMessage(base.Handle, NativeMethods.TTM_SETDELAYTIME, new IntPtr(time), new IntPtr(delay));
			}

			public void UpdateTitle(string title)
			{
				IntPtr intPtr = IntPtr.Zero;
				try
				{
					intPtr = Marshal.StringToBSTR(title);
					IntPtr intPtr2 = NativeMethods.SendMessage(base.Handle, NativeMethods.TTM_SETTITLE, new IntPtr(0), intPtr);
				}
				finally
				{
					Marshal.FreeBSTR(intPtr);
				}
			}

			public void UpdateToolTipText(string toolTipText)
			{
				NativeMethods.TOOLINFO ti = GetToolInfo();
				ti.hwnd = parentHandle;
				try
				{
					ti.text = Marshal.StringToBSTR(toolTipText);
					IntPtr intPtr = NativeMethods.SendMessage(base.Handle, NativeMethods.TTM_UPDATETIPTEXT, IntPtr.Zero, ref ti);
				}
				finally
				{
					Marshal.FreeBSTR(ti.text);
				}
			}

			public void UpdateToolTipRectangle(Rectangle rectangle)
			{
				NativeMethods.TOOLINFO ti = GetToolInfo();
				ti.hwnd = parentHandle;
				ti.rect.left = rectangle.Left;
				ti.rect.top = rectangle.Top;
				ti.rect.right = rectangle.Right;
				ti.rect.bottom = rectangle.Bottom;
				IntPtr intPtr = NativeMethods.SendMessage(base.Handle, NativeMethods.TTM_NEWTOOLRECT, IntPtr.Zero, ref ti);
			}

			private bool AddTool(NativeMethods.TOOLINFO toolInfo)
			{
				IntPtr intPtr = NativeMethods.SendMessage(base.Handle, NativeMethods.TTM_ADDTOOL, IntPtr.Zero, ref toolInfo);
				return intPtr != IntPtr.Zero;
			}

			private void DelTool(NativeMethods.TOOLINFO toolInfo)
			{
				IntPtr intPtr = NativeMethods.SendMessage(base.Handle, NativeMethods.TTM_DELTOOL, IntPtr.Zero, ref toolInfo);
			}

			private NativeMethods.TOOLINFO GetToolInfo()
			{
				NativeMethods.TOOLINFO tOOLINFO = default(NativeMethods.TOOLINFO);
				tOOLINFO.size = Marshal.SizeOf((object)tOOLINFO);
				tOOLINFO.flags = 0;
				tOOLINFO.hwnd = IntPtr.Zero;
				tOOLINFO.id = IntPtr.Zero;
				tOOLINFO.rect.left = (tOOLINFO.rect.right = (tOOLINFO.rect.top = (tOOLINFO.rect.bottom = 0)));
				tOOLINFO.hinst = IntPtr.Zero;
				tOOLINFO.text = new IntPtr(-1);
				tOOLINFO.lParam = IntPtr.Zero;
				return tOOLINFO;
			}
		}

		private Control parentControl;

		private NativeToolTip infoTip;

		private NativeToolTip inplaceTip;

		private string infoTipTitle = string.Empty;

		private string infoTipText = string.Empty;

		private string inplaceTipText = string.Empty;

		private Rectangle inplaceTipRectangle;

		internal WorkflowToolTip(Control parentControl)
		{
			this.parentControl = parentControl;
			infoTip = new NativeToolTip(this.parentControl.Handle);
			infoTip.SetDelay(3, 1000);
			infoTip.SetDelay(1, 1000);
			infoTip.SetDelay(2, 1000000);
			using (Graphics graphics = this.parentControl.CreateGraphics())
			{
				int maxTipWidth = Convert.ToInt32(Math.Ceiling(graphics.MeasureString(SR.GetString("ToolTipString"), this.parentControl.Font).Width) / 3.0) * 30;
				infoTip.SetMaxTipWidth(maxTipWidth);
			}
			inplaceTip = new NativeToolTip(this.parentControl.Handle);
			inplaceTip.SetDelay(3, 50);
			inplaceTip.SetDelay(1, 50);
			inplaceTip.SetDelay(2, 1000000);
			this.parentControl.Layout += OnParentLayoutChanged;
		}

		void IDisposable.Dispose()
		{
			if (parentControl != null)
			{
				if (infoTip != null)
				{
					((IDisposable)infoTip).Dispose();
					infoTip = null;
				}
				if (inplaceTip != null)
				{
					((IDisposable)inplaceTip).Dispose();
					inplaceTip = null;
				}
				parentControl.Layout -= OnParentLayoutChanged;
				parentControl = null;
			}
		}

		public void SetText(string title, string text)
		{
			if (string.IsNullOrEmpty(text))
			{
				infoTip.Pop();
				infoTip.Activate(activateToolTip: false);
			}
			else
			{
				inplaceTip.Activate(activateToolTip: false);
				infoTip.Activate(activateToolTip: true);
			}
			bool flag = infoTipTitle != title;
			if (flag | (infoTipText != text))
			{
				if (NativeMethods.IsWindowVisible(infoTip.Handle))
				{
					infoTip.Pop();
				}
				infoTipTitle = title;
				infoTip.UpdateTitle(infoTipTitle);
				infoTipText = text;
				infoTip.UpdateToolTipText(infoTipText);
			}
		}

		public void SetText(string text, Rectangle rectangle)
		{
			if (string.IsNullOrEmpty(text))
			{
				inplaceTip.Pop();
				inplaceTip.Activate(activateToolTip: false);
			}
			else
			{
				infoTip.Activate(activateToolTip: false);
				inplaceTip.Activate(activateToolTip: true);
			}
			bool flag = inplaceTipText != text;
			if (flag | (inplaceTipRectangle != rectangle))
			{
				if (NativeMethods.IsWindowVisible(inplaceTip.Handle))
				{
					inplaceTip.Pop();
				}
				inplaceTipText = text;
				inplaceTip.UpdateToolTipText(inplaceTipText);
				inplaceTipRectangle = rectangle;
			}
		}

		public void RelayParentNotify(ref System.Windows.Forms.Message msg)
		{
			if (msg.Msg == 78 && msg.LParam != IntPtr.Zero && !inplaceTipRectangle.IsEmpty && Marshal.PtrToStructure(msg.LParam, typeof(NativeMethods.NMHDR)) is NativeMethods.NMHDR nMHDR && nMHDR.hwndFrom == inplaceTip.Handle && nMHDR.code == NativeMethods.TTN_SHOW)
			{
				Point point = parentControl.PointToScreen(new Point(inplaceTipRectangle.Left, inplaceTipRectangle.Top));
				int num = NativeMethods.SetWindowPos(inplaceTip.Handle, IntPtr.Zero, point.X, point.Y, 0, 0, 21);
				msg.Result = new IntPtr(1);
			}
		}

		private void OnParentLayoutChanged(object sender, LayoutEventArgs e)
		{
			infoTip.UpdateToolTipRectangle(parentControl.ClientRectangle);
			inplaceTip.UpdateToolTipRectangle(parentControl.ClientRectangle);
		}
	}
	internal sealed class PreviewItemStrip
	{
		private sealed class ItemStripAccessibleObject : AccessibleObject
		{
			internal enum AccessibleObjectType
			{
				LeftScroll = 1,
				Item,
				RightScroll
			}

			private AccessibleObjectType accessibleObjectType;

			private PreviewItemStrip itemStrip;

			private int itemIndex = -1;

			public override Rectangle Bounds
			{
				get
				{
					Rectangle result = Rectangle.Empty;
					if (accessibleObjectType == AccessibleObjectType.LeftScroll)
					{
						result = itemStrip.GetButtonBounds(ScrollButton.Left);
					}
					else if (accessibleObjectType == AccessibleObjectType.RightScroll)
					{
						result = itemStrip.GetButtonBounds(ScrollButton.Right);
					}
					else if (accessibleObjectType == AccessibleObjectType.Item)
					{
						int num = itemStrip.scrollMarker + itemIndex;
						result = ((num >= 0 && num < itemStrip.Items.Count) ? itemStrip.GetItemBounds(itemStrip.Items[num]) : Rectangle.Empty);
					}
					if (!result.IsEmpty && itemStrip.parentDesigner.Activity.Site.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
					{
						result = new Rectangle(workflowView.LogicalPointToScreen(result.Location), workflowView.LogicalSizeToClient(result.Size));
					}
					return result;
				}
			}

			public override string DefaultAction => DR.GetString("AccessibleAction");

			public override string Description
			{
				get
				{
					string result = string.Empty;
					if (accessibleObjectType == AccessibleObjectType.LeftScroll)
					{
						result = DR.GetString("LeftScrollButtonAccessibleDescription");
					}
					else if (accessibleObjectType == AccessibleObjectType.RightScroll)
					{
						result = DR.GetString("RightScrollButtonAccessibleDescription");
					}
					else if (accessibleObjectType == AccessibleObjectType.Item)
					{
						ActivityDesigner associatedDesigner = AssociatedDesigner;
						if (associatedDesigner != null)
						{
							result = DR.GetString("ActivityDesignerAccessibleDescription", associatedDesigner.Activity.GetType().Name);
						}
					}
					return result;
				}
			}

			public override string Help
			{
				get
				{
					string result = string.Empty;
					if (accessibleObjectType == AccessibleObjectType.LeftScroll)
					{
						result = DR.GetString("LeftScrollButtonAccessibleHelp");
					}
					else if (accessibleObjectType == AccessibleObjectType.RightScroll)
					{
						result = DR.GetString("RightScrollButtonAccessibleHelp");
					}
					else if (accessibleObjectType == AccessibleObjectType.Item)
					{
						ActivityDesigner associatedDesigner = AssociatedDesigner;
						if (associatedDesigner != null)
						{
							result = DR.GetString("ActivityDesignerAccessibleHelp", associatedDesigner.Activity.GetType().Name);
						}
					}
					return result;
				}
			}

			public override string Name
			{
				get
				{
					string result = string.Empty;
					if (accessibleObjectType == AccessibleObjectType.LeftScroll)
					{
						result = DR.GetString("LeftScrollButtonName");
					}
					else if (accessibleObjectType == AccessibleObjectType.RightScroll)
					{
						result = DR.GetString("RightScrollButtonName");
					}
					else if (accessibleObjectType == AccessibleObjectType.Item)
					{
						ActivityDesigner associatedDesigner = AssociatedDesigner;
						if (associatedDesigner != null)
						{
							Activity activity = associatedDesigner.Activity;
							result = ((activity != null) ? activity.QualifiedName : base.Name);
						}
					}
					return result;
				}
				set
				{
				}
			}

			public override AccessibleObject Parent => itemStrip.parentDesigner.AccessibilityObject;

			public override AccessibleRole Role => AccessibleRole.Diagram;

			public override AccessibleStates State
			{
				get
				{
					AccessibleStates result = AccessibleStates.None;
					if (accessibleObjectType == AccessibleObjectType.Item)
					{
						ActivityDesigner associatedDesigner = AssociatedDesigner;
						if (GetService(typeof(ISelectionService)) is ISelectionService && associatedDesigner != null)
						{
							result = (associatedDesigner.IsSelected ? AccessibleStates.Selected : AccessibleStates.Selectable);
							result |= AccessibleStates.MultiSelectable;
							result |= (associatedDesigner.IsLocked ? AccessibleStates.ReadOnly : AccessibleStates.Moveable);
							result |= (associatedDesigner.IsPrimarySelection ? AccessibleStates.Focused : AccessibleStates.Focusable);
						}
					}
					return result;
				}
			}

			private ActivityDesigner AssociatedDesigner
			{
				get
				{
					if (accessibleObjectType != AccessibleObjectType.Item)
					{
						return null;
					}
					int num = itemStrip.scrollMarker + itemIndex;
					ItemInfo itemInfo = ((num >= 0 && num < itemStrip.Items.Count) ? itemStrip.Items[num] : null);
					if (itemInfo != null)
					{
						return ActivityDesigner.GetDesigner(itemInfo.UserData[DesignerUserDataKeys.Activity] as Activity);
					}
					return null;
				}
			}

			internal ItemStripAccessibleObject(AccessibleObjectType type, PreviewItemStrip itemStrip)
			{
				accessibleObjectType = type;
				this.itemStrip = itemStrip;
			}

			internal ItemStripAccessibleObject(AccessibleObjectType type, PreviewItemStrip itemStrip, int itemIndex)
			{
				accessibleObjectType = type;
				this.itemStrip = itemStrip;
				this.itemIndex = itemIndex;
			}

			public override void DoDefaultAction()
			{
				if (accessibleObjectType == AccessibleObjectType.Item)
				{
					ActivityDesigner associatedDesigner = AssociatedDesigner;
					if (associatedDesigner != null && GetService(typeof(ISelectionService)) is ISelectionService selectionService)
					{
						selectionService.SetSelectedComponents(new object[1] { associatedDesigner.Activity }, SelectionTypes.Replace);
					}
				}
			}

			public override AccessibleObject Navigate(AccessibleNavigation navdir)
			{
				switch (navdir)
				{
				case AccessibleNavigation.Left:
				case AccessibleNavigation.Right:
				{
					AccessibleObject[] accessibilityObjects = itemStrip.AccessibilityObjects;
					int val = -1;
					if (accessibleObjectType == AccessibleObjectType.LeftScroll)
					{
						val = 0;
					}
					else if (accessibleObjectType == AccessibleObjectType.RightScroll)
					{
						val = accessibilityObjects.Length - 1;
					}
					else if (accessibleObjectType == AccessibleObjectType.Item)
					{
						val = itemIndex + ((navdir != AccessibleNavigation.Left) ? 1 : (-1));
					}
					val = Math.Max(Math.Min(accessibilityObjects.Length - 1, val), 0);
					return accessibilityObjects[val];
				}
				case AccessibleNavigation.Previous:
					return itemStrip.parentDesigner.AccessibilityObject;
				case AccessibleNavigation.Next:
				{
					int num = itemStrip.AccessibilityObjects.Length;
					int childCount = itemStrip.parentDesigner.AccessibilityObject.GetChildCount();
					if (childCount > num)
					{
						return itemStrip.parentDesigner.AccessibilityObject.GetChild(num);
					}
					return itemStrip.parentDesigner.AccessibilityObject.Navigate(navdir);
				}
				default:
					return base.Navigate(navdir);
				}
			}

			public override void Select(AccessibleSelection flags)
			{
				if (accessibleObjectType == AccessibleObjectType.Item)
				{
					ISelectionService selectionService = GetService(typeof(ISelectionService)) as ISelectionService;
					ActivityDesigner associatedDesigner = AssociatedDesigner;
					if (selectionService != null && associatedDesigner != null)
					{
						if ((flags & AccessibleSelection.TakeFocus) > AccessibleSelection.None || (flags & AccessibleSelection.TakeSelection) > AccessibleSelection.None)
						{
							selectionService.SetSelectedComponents(new object[1] { associatedDesigner.Activity }, SelectionTypes.Replace);
						}
						else if ((flags & AccessibleSelection.AddSelection) > AccessibleSelection.None)
						{
							selectionService.SetSelectedComponents(new object[1] { associatedDesigner.Activity }, SelectionTypes.Add);
						}
						else if ((flags & AccessibleSelection.RemoveSelection) > AccessibleSelection.None)
						{
							selectionService.SetSelectedComponents(new object[1] { associatedDesigner.Activity }, SelectionTypes.Remove);
						}
					}
				}
				else
				{
					base.Select(flags);
				}
			}

			private object GetService(Type serviceType)
			{
				if (itemStrip.parentDesigner.Activity != null || itemStrip.parentDesigner.Activity.Site != null)
				{
					return itemStrip.parentDesigner.Activity.Site.GetService(serviceType);
				}
				return null;
			}
		}

		private ActivityPreviewDesigner parentDesigner;

		private ItemList<ItemInfo> items;

		private ScrollButton activeScrollButton;

		private string helpText = string.Empty;

		private int scrollMarker;

		private int activeDropTarget = -1;

		private Rectangle bounds = Rectangle.Empty;

		private ItemInfo activeItem;

		private List<ItemStripAccessibleObject> accessibilityObjects;

		public IList<ItemInfo> Items => items;

		public AccessibleObject[] AccessibilityObjects
		{
			get
			{
				if (accessibilityObjects == null)
				{
					accessibilityObjects = new List<ItemStripAccessibleObject>();
					accessibilityObjects.Add(new ItemStripAccessibleObject(ItemStripAccessibleObject.AccessibleObjectType.LeftScroll, this));
					for (int i = 0; i < VisibleItemCount && scrollMarker + i < Items.Count; i++)
					{
						accessibilityObjects.Add(new ItemStripAccessibleObject(ItemStripAccessibleObject.AccessibleObjectType.Item, this, i));
					}
					accessibilityObjects.Add(new ItemStripAccessibleObject(ItemStripAccessibleObject.AccessibleObjectType.RightScroll, this));
				}
				return accessibilityObjects.ToArray();
			}
		}

		public ItemInfo ActiveItem
		{
			get
			{
				return activeItem;
			}
			set
			{
				if (activeItem != value)
				{
					ItemInfo previousItem = activeItem;
					activeItem = value;
					EnsureScrollMarker();
					if (this.SelectionChanged != null)
					{
						this.SelectionChanged(this, new SelectionChangeEventArgs(previousItem, activeItem));
					}
				}
			}
		}

		public int ActiveDropTarget
		{
			get
			{
				return activeDropTarget;
			}
			set
			{
				if (activeDropTarget != value)
				{
					activeDropTarget = value;
					Invalidate();
				}
			}
		}

		public string HelpText
		{
			get
			{
				return helpText;
			}
			set
			{
				helpText = value;
				if (items.Count == 0 && parentDesigner.Activity != null)
				{
					Invalidate();
				}
			}
		}

		public Rectangle[] DropTargets
		{
			get
			{
				Size itemMargin = ItemMargin;
				Size itemSize = ItemSize;
				Rectangle stripRectangle = StripRectangle;
				Rectangle[] array = new Rectangle[items.Count + 1];
				int num = 0;
				int num2 = Math.Min(items.Count - scrollMarker, VisibleItemCount) + 1;
				for (int i = 0; i < num2; i++)
				{
					num = i + scrollMarker;
					array[num].X = stripRectangle.Left + i * (itemSize.Width + itemMargin.Width);
					array[num].Y = stripRectangle.Top + itemMargin.Height / 2;
					array[num].Size = new Size(itemMargin.Width, itemSize.Height + itemMargin.Height);
				}
				array[num] = new Rectangle(array[num].Left, array[num].Top, stripRectangle.Right - array[num].Left, array[num].Height);
				return array;
			}
		}

		public Point Location
		{
			get
			{
				return bounds.Location;
			}
			set
			{
				if (!(bounds.Location == value))
				{
					bounds.Location = value;
				}
			}
		}

		public Size Size => bounds.Size;

		public Rectangle Bounds => bounds;

		private ScrollButton ActiveScrollButton
		{
			get
			{
				return activeScrollButton;
			}
			set
			{
				if (activeScrollButton != value)
				{
					activeScrollButton = value;
					Invalidate();
				}
			}
		}

		private int VisibleItemCount
		{
			get
			{
				if (!(parentDesigner.DesignerTheme is ActivityPreviewDesignerTheme activityPreviewDesignerTheme))
				{
					return 1;
				}
				return activityPreviewDesignerTheme.PreviewItemCount;
			}
		}

		private Rectangle StripRectangle
		{
			get
			{
				Rectangle empty = Rectangle.Empty;
				Rectangle buttonBounds = GetButtonBounds(ScrollButton.Left);
				Rectangle buttonBounds2 = GetButtonBounds(ScrollButton.Right);
				Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
				empty.X = buttonBounds.Right + margin.Width;
				empty.Y = bounds.Y;
				empty.Width = buttonBounds2.Left - margin.Width - (buttonBounds.Right + margin.Width);
				empty.Height = bounds.Height;
				return empty;
			}
		}

		private Size ItemSize
		{
			get
			{
				if (!(parentDesigner.DesignerTheme is ActivityPreviewDesignerTheme activityPreviewDesignerTheme))
				{
					return Size.Empty;
				}
				return activityPreviewDesignerTheme.PreviewItemSize;
			}
		}

		private Size ItemMargin
		{
			get
			{
				Size itemSize = ItemSize;
				return new Size(itemSize.Width / 2, itemSize.Height / 4);
			}
		}

		public event SelectionChangeEventHandler<SelectionChangeEventArgs> SelectionChanged;

		public PreviewItemStrip(ActivityPreviewDesigner parentDesigner)
		{
			if (parentDesigner == null)
			{
				throw new ArgumentNullException("parentDesigner");
			}
			this.parentDesigner = parentDesigner;
			items = new ItemList<ItemInfo>(this);
			items.ListChanging += OnItemsChanging;
			items.ListChanged += OnItemsChanged;
		}

		public Rectangle GetItemBounds(ItemInfo itemInfo)
		{
			int num = items.IndexOf(itemInfo);
			if (num < 0)
			{
				return Rectangle.Empty;
			}
			if (num < scrollMarker || num >= scrollMarker + VisibleItemCount)
			{
				return Rectangle.Empty;
			}
			Rectangle stripRectangle = StripRectangle;
			Rectangle empty = Rectangle.Empty;
			Size itemMargin = ItemMargin;
			Size itemSize = ItemSize;
			num -= scrollMarker;
			empty.X = stripRectangle.Left + num * itemSize.Width + (num + 1) * itemMargin.Width;
			empty.Y = stripRectangle.Top + itemMargin.Height;
			empty.Size = itemSize;
			return empty;
		}

		public ItemInfo HitTest(Point point)
		{
			for (int i = scrollMarker; i < items.Count; i++)
			{
				if (GetItemBounds(items[i]).Contains(point))
				{
					return items[i];
				}
			}
			return null;
		}

		public void OnMouseDown(MouseEventArgs e)
		{
			Point pt = new Point(e.X, e.Y);
			int num = 0;
			if (GetButtonBounds(ScrollButton.Left).Contains(pt))
			{
				ActiveScrollButton = ScrollButton.Left;
				num = -1;
			}
			else if (GetButtonBounds(ScrollButton.Right).Contains(pt))
			{
				ActiveScrollButton = ScrollButton.Right;
				num = 1;
			}
			if (num != 0 && ActiveItem != null)
			{
				int num2 = items.IndexOf(ActiveItem) + num;
				num2 = ((num2 < items.Count) ? ((num2 < 0) ? (items.Count - 1) : num2) : 0);
				ActiveItem = items[num2];
			}
		}

		public void OnMouseUp(MouseEventArgs e)
		{
			ActiveScrollButton = ScrollButton.Up;
		}

		public void OnMouseLeave()
		{
			ActiveScrollButton = ScrollButton.Up;
		}

		public void OnLayoutSize(Graphics graphics)
		{
			ActivityPreviewDesignerTheme activityPreviewDesignerTheme = parentDesigner.DesignerTheme as ActivityPreviewDesignerTheme;
			Size itemMargin = ItemMargin;
			Size itemSize = ItemSize;
			bounds.Width = 2 * WorkflowTheme.CurrentTheme.AmbientTheme.Margin.Width;
			bounds.Width += itemSize.Width * (activityPreviewDesignerTheme?.PreviewItemCount ?? 0);
			bounds.Width += itemMargin.Width * ((activityPreviewDesignerTheme?.PreviewItemCount ?? 0) + 1);
			bounds.Width += GetButtonBounds(ScrollButton.Left).Size.Width;
			bounds.Width += GetButtonBounds(ScrollButton.Right).Size.Width;
			bounds.Height = itemSize.Height + 2 * itemMargin.Height;
			EnsureScrollMarker();
		}

		public void Draw(Graphics graphics)
		{
			AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
			if (!(parentDesigner.DesignerTheme is ActivityPreviewDesignerTheme activityPreviewDesignerTheme))
			{
				return;
			}
			Rectangle stripRectangle = StripRectangle;
			GraphicsPath graphicsPath = new GraphicsPath();
			if (activityPreviewDesignerTheme.DesignerGeometry == DesignerGeometry.RoundedRectangle)
			{
				graphicsPath.AddPath(ActivityDesignerPaint.GetRoundedRectanglePath(stripRectangle, 4), connect: false);
			}
			else
			{
				graphicsPath.AddRectangle(stripRectangle);
			}
			graphicsPath.CloseFigure();
			graphics.FillPath(activityPreviewDesignerTheme.PreviewBackgroundBrush, graphicsPath);
			graphics.DrawPath(activityPreviewDesignerTheme.PreviewBorderPen, graphicsPath);
			graphicsPath.Dispose();
			Image image = ActivityPreviewDesignerTheme.LeftScrollImageUp;
			Rectangle buttonBounds = GetButtonBounds(ScrollButton.Left);
			if (ActiveScrollButton == ScrollButton.Left)
			{
				image = ActivityPreviewDesignerTheme.LeftScrollImage;
				buttonBounds.Offset(1, 1);
			}
			if (image != null)
			{
				ActivityDesignerPaint.DrawImage(graphics, image, buttonBounds, DesignerContentAlignment.Center);
			}
			image = ActivityPreviewDesignerTheme.RightScrollImageUp;
			buttonBounds = GetButtonBounds(ScrollButton.Right);
			if (ActiveScrollButton == ScrollButton.Right)
			{
				image = ActivityPreviewDesignerTheme.RightScrollImage;
				buttonBounds.Offset(1, 1);
			}
			if (image != null)
			{
				ActivityDesignerPaint.DrawImage(graphics, image, buttonBounds, DesignerContentAlignment.Center);
			}
			Size itemMargin = ItemMargin;
			int num = Math.Max(Math.Min(itemMargin.Width / 4, itemMargin.Height / 2), 1);
			for (int i = scrollMarker; i < items.Count && i < scrollMarker + VisibleItemCount; i++)
			{
				Rectangle itemBounds = GetItemBounds(items[i]);
				if (itemBounds.IsEmpty)
				{
					continue;
				}
				GraphicsPath graphicsPath2 = new GraphicsPath();
				if (activityPreviewDesignerTheme.DesignerGeometry == DesignerGeometry.RoundedRectangle)
				{
					graphicsPath2.AddPath(ActivityDesignerPaint.GetRoundedRectanglePath(itemBounds, 4), connect: true);
				}
				else
				{
					graphicsPath2.AddRectangle(itemBounds);
				}
				graphics.FillPath(activityPreviewDesignerTheme.PreviewForegroundBrush, graphicsPath2);
				graphics.DrawPath(activityPreviewDesignerTheme.PreviewBorderPen, graphicsPath2);
				graphicsPath2.Dispose();
				Image image2 = items[i].Image;
				if (image2 == null)
				{
					Activity activity = items[i].UserData[DesignerUserDataKeys.Activity] as Activity;
					ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
					if (designer != null)
					{
						image2 = designer.Image;
					}
				}
				if (image2 != null)
				{
					Rectangle empty = Rectangle.Empty;
					empty.X = itemBounds.Left + 2;
					empty.Y = itemBounds.Top + 2;
					empty.Size = new Size(itemBounds.Width - 4, itemBounds.Height - 4);
					ActivityDesignerPaint.DrawImage(graphics, image2, empty, DesignerContentAlignment.Center);
				}
				if (i == items.IndexOf(ActiveItem))
				{
					itemBounds.Inflate(num, num);
					graphics.DrawRectangle(ambientTheme.SelectionForegroundPen, itemBounds);
				}
			}
			Rectangle[] dropTargets = DropTargets;
			int num2 = ActiveDropTarget;
			if (num2 >= 0 && num2 < dropTargets.GetLength(0))
			{
				dropTargets[num2].Width = itemMargin.Width;
				graphics.DrawLine(ambientTheme.DropIndicatorPen, dropTargets[num2].Left + dropTargets[num2].Width / 2, dropTargets[num2].Top, dropTargets[num2].Left + dropTargets[num2].Width / 2, dropTargets[num2].Bottom);
			}
			else if (items.Count == 0 && helpText.Length > 0)
			{
				stripRectangle.Inflate(-2, -2);
				Brush textBrush = ((ActiveDropTarget != -1) ? ambientTheme.DropIndicatorBrush : activityPreviewDesignerTheme.ForegroundBrush);
				ActivityDesignerPaint.DrawText(graphics, activityPreviewDesignerTheme.Font, helpText, stripRectangle, StringAlignment.Center, WorkflowTheme.CurrentTheme.AmbientTheme.TextQuality, textBrush);
			}
		}

		private void EnsureScrollMarker()
		{
			if (ActiveItem != null && VisibleItemCount != 0)
			{
				int num = -1;
				int num2 = items.IndexOf(ActiveItem);
				if (num2 >= 0)
				{
					num = ((num2 < scrollMarker) ? num2 : ((num2 >= scrollMarker + VisibleItemCount) ? (num2 - VisibleItemCount + 1) : num));
				}
				if (items.Count >= VisibleItemCount && items.Count - scrollMarker < VisibleItemCount)
				{
					num = items.Count - VisibleItemCount;
				}
				if (num >= 0 && num <= Math.Max(items.Count - VisibleItemCount + 1, 0))
				{
					scrollMarker = num;
				}
				Invalidate();
			}
		}

		private Rectangle GetButtonBounds(ScrollButton scrollButton)
		{
			Image leftScrollImage = ActivityPreviewDesignerTheme.LeftScrollImage;
			if (scrollButton == ScrollButton.Up || leftScrollImage == null)
			{
				return Rectangle.Empty;
			}
			Size size = leftScrollImage.Size;
			size.Height = Math.Min(size.Width, Math.Min(size.Height, ItemSize.Height));
			size.Width = Math.Min(size.Width, size.Height);
			int x = ((scrollButton == ScrollButton.Left) ? bounds.X : (bounds.Right - size.Width));
			Rectangle empty = Rectangle.Empty;
			empty.X = x;
			empty.Y = bounds.Y + bounds.Size.Height / 2 - size.Height / 2;
			empty.Size = size;
			return empty;
		}

		private void OnItemsChanging(object sender, ItemListChangeEventArgs<ItemInfo> e)
		{
			if (e.Action == ItemListChangeAction.Remove && e.RemovedItems.Count > 0 && ActiveItem == e.RemovedItems[0])
			{
				int num = items.IndexOf(e.RemovedItems[0]);
				num += ((num < items.Count - 1) ? 1 : (-1));
				ActiveItem = ((num >= 0 && num < items.Count) ? items[num] : null);
			}
		}

		private void OnItemsChanged(object sender, ItemListChangeEventArgs<ItemInfo> e)
		{
			if (e.Action == ItemListChangeAction.Add && e.AddedItems.Count > 0)
			{
				ActiveItem = e.AddedItems[0];
			}
			if (e.Action == ItemListChangeAction.Remove)
			{
				EnsureScrollMarker();
			}
			accessibilityObjects = null;
			Invalidate();
		}

		private void Invalidate()
		{
			if (parentDesigner != null && parentDesigner.Activity.Site != null && parentDesigner.Activity.Site.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				workflowView.InvalidateLogicalRectangle(bounds);
			}
		}
	}
	internal sealed class PreviewWindow
	{
		private sealed class PreviewWindowAccessibleObject : AccessibleObject
		{
			private PreviewWindow previewWindow;

			public override Rectangle Bounds
			{
				get
				{
					Rectangle result = previewWindow.PreviewModeButtonRectangle;
					if (previewWindow.serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
					{
						result = new Rectangle(workflowView.LogicalPointToScreen(result.Location), workflowView.LogicalSizeToClient(result.Size));
					}
					return result;
				}
			}

			public override string DefaultAction => DR.GetString("AccessibleAction");

			public override string Description => DR.GetString("PreviewButtonAccessibleDescription");

			public override string Help => DR.GetString("PreviewButtonAccessibleHelp");

			public override string Name
			{
				get
				{
					return DR.GetString("PreviewButtonName");
				}
				set
				{
				}
			}

			public override AccessibleObject Parent => previewWindow.parentDesigner.AccessibilityObject;

			public override AccessibleRole Role => AccessibleRole.Diagram;

			public override AccessibleStates State => base.State;

			internal PreviewWindowAccessibleObject(PreviewWindow previewWindow)
			{
				this.previewWindow = previewWindow;
			}

			public override void DoDefaultAction()
			{
				previewWindow.PreviewMode = !previewWindow.PreviewMode;
			}

			public override AccessibleObject Navigate(AccessibleNavigation navdir)
			{
				switch (navdir)
				{
				case AccessibleNavigation.Previous:
				{
					int childCount2 = previewWindow.parentDesigner.AccessibilityObject.GetChildCount();
					if (childCount2 - 3 >= 0)
					{
						return previewWindow.parentDesigner.AccessibilityObject.GetChild(childCount2 - 3);
					}
					break;
				}
				case AccessibleNavigation.Next:
					if (!previewWindow.PreviewMode)
					{
						int childCount = previewWindow.parentDesigner.AccessibilityObject.GetChildCount();
						if (childCount - 1 >= 0)
						{
							return previewWindow.parentDesigner.AccessibilityObject.GetChild(childCount - 1);
						}
						break;
					}
					return previewWindow.parentDesigner.AccessibilityObject.Navigate(navdir);
				}
				return base.Navigate(navdir);
			}

			public override void Select(AccessibleSelection flags)
			{
				base.Select(flags);
			}
		}

		private ActivityPreviewDesigner parentDesigner;

		private IServiceProvider serviceProvider;

		private Activity previewedActivity;

		private Image previewedActivityImage;

		private bool previewMode = true;

		private PreviewWindowAccessibleObject accessibilityObject;

		private Rectangle bounds = Rectangle.Empty;

		private Rectangle canvasBounds = Rectangle.Empty;

		private Rectangle previewModeButtonRectangle = Rectangle.Empty;

		private Rectangle previewModeDescRectangle = Rectangle.Empty;

		private Size previewDescTextSize = Size.Empty;

		public AccessibleObject AccessibilityObject
		{
			get
			{
				if (accessibilityObject == null)
				{
					accessibilityObject = new PreviewWindowAccessibleObject(this);
				}
				return accessibilityObject;
			}
		}

		public Rectangle Bounds => bounds;

		public Point Location
		{
			get
			{
				return bounds.Location;
			}
			set
			{
				Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
				bounds.Location = value;
				int num = Math.Max(previewModeDescRectangle.Height, previewModeButtonRectangle.Height);
				Point empty = Point.Empty;
				empty.X = bounds.Left + bounds.Width / 2 - previewModeDescRectangle.Width / 2 + previewModeButtonRectangle.Width + margin.Width;
				empty.Y = bounds.Top + num / 2 - previewModeDescRectangle.Height / 2;
				previewModeDescRectangle.Location = empty;
				Point empty2 = Point.Empty;
				empty2.X = empty.X - (previewModeButtonRectangle.Width + margin.Width);
				empty2.Y = bounds.Top + num / 2 - previewModeButtonRectangle.Height / 2;
				previewModeButtonRectangle.Location = empty2;
				canvasBounds.Location = new Point(value.X + bounds.Width / 2 - canvasBounds.Width / 2, previewModeDescRectangle.Bottom + margin.Height);
				if (PreviewDesigner != null)
				{
					Point empty3 = Point.Empty;
					empty3.X = canvasBounds.Left + canvasBounds.Width / 2 - PreviewDesigner.Size.Width / 2;
					empty3.Y = canvasBounds.Top + canvasBounds.Height / 2 - PreviewDesigner.Size.Height / 2;
					PreviewDesigner.Location = empty3;
				}
			}
		}

		public Size Size => bounds.Size;

		public Activity PreviewedActivity
		{
			get
			{
				return previewedActivity;
			}
			set
			{
				if (previewedActivity != value)
				{
					previewedActivity = value;
					if (previewedActivityImage != null)
					{
						previewedActivityImage.Dispose();
						previewedActivityImage = null;
					}
					if (serviceProvider != null && serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
					{
						workflowView.PerformLayout(immediateUpdate: false);
					}
				}
			}
		}

		public bool PreviewMode
		{
			get
			{
				return previewMode;
			}
			set
			{
				if (previewMode == value)
				{
					return;
				}
				previewMode = value;
				if (previewMode)
				{
					EnsureValidDesignerPreview(PreviewDesigner);
					if (previewedActivityImage != null)
					{
						previewedActivityImage.Dispose();
						previewedActivityImage = null;
					}
				}
				if (this.PreviewModeChanged != null)
				{
					this.PreviewModeChanged(this, EventArgs.Empty);
				}
				if (serviceProvider != null && serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
				{
					workflowView.PerformLayout(immediateUpdate: false);
				}
			}
		}

		private ActivityDesigner PreviewDesigner => ActivityDesigner.GetDesigner(previewedActivity);

		private Rectangle PreviewModeButtonRectangle => previewModeButtonRectangle;

		private string PreviewModeDescription
		{
			get
			{
				string text = (PreviewMode ? DR.GetString("PreviewMode") : DR.GetString("EditMode"));
				CompositeActivity compositeActivity = ((parentDesigner != null) ? (parentDesigner.Activity as CompositeActivity) : null);
				if (compositeActivity == null)
				{
					return text;
				}
				IComponent component = ((PreviewDesigner != null) ? PreviewDesigner.Activity : null);
				if (component == null)
				{
					return text;
				}
				List<Activity> list = new List<Activity>();
				foreach (Activity activity in compositeActivity.Activities)
				{
					if (!Helpers.IsAlternateFlowActivity(activity))
					{
						list.Add(activity);
					}
				}
				int num = list.IndexOf(component as Activity) + 1;
				return text + " [" + num.ToString(CultureInfo.CurrentCulture) + "/" + list.Count.ToString(CultureInfo.CurrentCulture) + "]";
			}
		}

		public event EventHandler PreviewModeChanged;

		public PreviewWindow(ActivityPreviewDesigner parent)
		{
			parentDesigner = parent;
			serviceProvider = parentDesigner.Activity.Site;
		}

		public void Refresh()
		{
			if (previewedActivityImage != null)
			{
				previewedActivityImage.Dispose();
				previewedActivityImage = null;
			}
			if (serviceProvider != null && serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				workflowView.InvalidateLogicalRectangle(bounds);
			}
		}

		public void OnMouseDown(MouseEventArgs e)
		{
			if (PreviewModeButtonRectangle.Contains(new Point(e.X, e.Y)))
			{
				PreviewMode = !PreviewMode;
			}
		}

		public void OnLayoutSize(Graphics graphics, int minWidth)
		{
			if (parentDesigner.DesignerTheme is ActivityPreviewDesignerTheme activityPreviewDesignerTheme)
			{
				Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
				if (!PreviewMode && PreviewDesigner != null)
				{
					canvasBounds.Size = PreviewDesigner.Bounds.Size;
					canvasBounds.Inflate(margin.Width * 2, margin.Height * 2);
					canvasBounds.Size = new Size(Math.Max(canvasBounds.Width, activityPreviewDesignerTheme.PreviewWindowSize.Width), Math.Max(canvasBounds.Height, activityPreviewDesignerTheme.PreviewWindowSize.Height));
				}
				else
				{
					canvasBounds.Size = activityPreviewDesignerTheme.PreviewWindowSize;
				}
				canvasBounds.Width = Math.Max(canvasBounds.Width, minWidth);
				SizeF sizeF = graphics.MeasureString(PreviewModeDescription, activityPreviewDesignerTheme.Font);
				previewDescTextSize = new Size(Convert.ToInt32(Math.Ceiling(sizeF.Width)), Convert.ToInt32(Math.Ceiling(sizeF.Height)));
				previewDescTextSize.Width = Math.Min(canvasBounds.Size.Width - margin.Width - previewModeButtonRectangle.Size.Width, previewDescTextSize.Width);
				previewModeDescRectangle.Size = previewDescTextSize;
				previewModeButtonRectangle.Height = Math.Min(activityPreviewDesignerTheme.PreviewButtonSize.Height, previewDescTextSize.Height);
				previewModeButtonRectangle.Width = previewModeButtonRectangle.Size.Height;
				Size empty = Size.Empty;
				empty.Width = canvasBounds.Width + 2 * margin.Width;
				empty.Height = Math.Max(previewModeButtonRectangle.Size.Height, previewDescTextSize.Height);
				empty.Height += margin.Height;
				empty.Height += canvasBounds.Height;
				bounds.Size = empty;
			}
		}

		public void Draw(Graphics graphics, Rectangle viewPort)
		{
			if (!(parentDesigner.DesignerTheme is ActivityPreviewDesignerTheme activityPreviewDesignerTheme))
			{
				return;
			}
			Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
			ActivityDesignerPaint.DrawText(graphics, activityPreviewDesignerTheme.Font, PreviewModeDescription, previewModeDescRectangle, StringAlignment.Center, WorkflowTheme.CurrentTheme.AmbientTheme.TextQuality, activityPreviewDesignerTheme.ForegroundBrush);
			graphics.DrawRectangle(Pens.Black, previewModeButtonRectangle.Left - 1, previewModeButtonRectangle.Top - 1, previewModeButtonRectangle.Width + 1, previewModeButtonRectangle.Height + 1);
			ActivityDesignerPaint.Draw3DButton(graphics, null, previewModeButtonRectangle, 1f, (!PreviewMode) ? ButtonState.Pushed : ButtonState.Normal);
			Image image = (PreviewMode ? ActivityPreviewDesignerTheme.PreviewButtonImage : ActivityPreviewDesignerTheme.EditButtonImage);
			ActivityDesignerPaint.DrawImage(graphics, image, new Rectangle(previewModeButtonRectangle.Left + 2, previewModeButtonRectangle.Top + 2, previewModeButtonRectangle.Width - 4, previewModeButtonRectangle.Height - 4), DesignerContentAlignment.Center);
			graphics.FillRectangle(activityPreviewDesignerTheme.PreviewBackgroundBrush, canvasBounds);
			if (PreviewMode)
			{
				graphics.DrawRectangle(activityPreviewDesignerTheme.PreviewBorderPen, canvasBounds);
			}
			else
			{
				Rectangle rect = canvasBounds;
				rect.Inflate(2, 2);
				graphics.DrawRectangle(SystemPens.ControlDark, rect);
				rect.Inflate(-1, -1);
				graphics.DrawLine(SystemPens.ControlDarkDark, rect.Left, rect.Top, rect.Left, rect.Bottom);
				graphics.DrawLine(SystemPens.ControlDarkDark, rect.Left, rect.Top, rect.Right, rect.Top);
				graphics.DrawLine(SystemPens.ControlLight, rect.Right, rect.Top, rect.Right, rect.Bottom);
				graphics.DrawLine(SystemPens.ControlLight, rect.Left, rect.Bottom, rect.Right, rect.Bottom);
				rect.Inflate(-1, -1);
				graphics.DrawLine(SystemPens.ControlLight, rect.Left, rect.Top, rect.Left, rect.Bottom);
				graphics.DrawLine(SystemPens.ControlLight, rect.Left, rect.Top, rect.Right, rect.Top);
				graphics.FillRectangle(activityPreviewDesignerTheme.PreviewBackgroundBrush, rect);
			}
			if (PreviewDesigner == null)
			{
				Rectangle boundingRect = canvasBounds;
				boundingRect.Inflate(-margin.Width, -margin.Height);
				string @string = DR.GetString("SelectActivityDesc");
				ActivityDesignerPaint.DrawText(graphics, activityPreviewDesignerTheme.Font, @string, boundingRect, StringAlignment.Center, WorkflowTheme.CurrentTheme.AmbientTheme.TextQuality, activityPreviewDesignerTheme.ForegroundBrush);
			}
			if (PreviewMode)
			{
				Image image2 = GeneratePreview(graphics);
				if (image2 != null)
				{
					Rectangle empty = Rectangle.Empty;
					Size size = new Size(canvasBounds.Width - 2 * margin.Width, canvasBounds.Height - 2 * margin.Height);
					double val = (double)image2.Width / (double)size.Width;
					val = Math.Max(val, (double)image2.Height / (double)size.Height);
					val = Math.Max(val, 1.2999999523162842);
					empty.Width = Convert.ToInt32(Math.Ceiling((double)(float)image2.Width / val));
					empty.Height = Convert.ToInt32(Math.Ceiling((double)(float)image2.Height / val));
					empty.X = canvasBounds.Left + canvasBounds.Width / 2 - empty.Width / 2;
					empty.Y = canvasBounds.Top + canvasBounds.Height / 2 - empty.Height / 2;
					graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
					graphics.DrawImage(image2, empty, new Rectangle(Point.Empty, image2.Size), GraphicsUnit.Pixel);
				}
				Rectangle destination = canvasBounds;
				destination.Inflate(-margin.Width, -margin.Height);
				ActivityDesignerPaint.DrawImage(graphics, ActivityPreviewDesignerTheme.PreviewImage, destination, DesignerContentAlignment.TopLeft);
			}
			else if (PreviewDesigner != null)
			{
				Rectangle rectangle = PreviewDesigner.Bounds;
				rectangle.Inflate(margin.Width, margin.Height);
				using PaintEventArgs e = new PaintEventArgs(graphics, rectangle);
				((IWorkflowDesignerMessageSink)PreviewDesigner).OnPaint(e, rectangle);
			}
		}

		private Image GeneratePreview(Graphics graphics)
		{
			if (previewedActivityImage == null)
			{
				ActivityDesigner previewDesigner = PreviewDesigner;
				if (previewDesigner != null && parentDesigner != null)
				{
					previewedActivityImage = previewDesigner.GetPreviewImage(graphics);
				}
			}
			return previewedActivityImage;
		}

		private void EnsureValidDesignerPreview(ActivityDesigner designer)
		{
			CompositeActivityDesigner compositeActivityDesigner = designer as CompositeActivityDesigner;
			if (compositeActivityDesigner == null || !compositeActivityDesigner.Expanded || !(parentDesigner.DesignerTheme is ActivityPreviewDesignerTheme { PreviewWindowSize: var previewWindowSize }))
			{
				return;
			}
			Size size = compositeActivityDesigner.Size;
			float val = (float)previewWindowSize.Width / (float)size.Width;
			val = Math.Min(val, (float)previewWindowSize.Height / (float)size.Height);
			if (val < 0.1f)
			{
				if (!compositeActivityDesigner.CanExpandCollapse && compositeActivityDesigner.ContainedDesigners.Count > 0)
				{
					compositeActivityDesigner = compositeActivityDesigner.ContainedDesigners[0] as CompositeActivityDesigner;
				}
				if (compositeActivityDesigner != null)
				{
					compositeActivityDesigner.Expanded = false;
				}
			}
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class WorkflowOutline : UserControl
	{
		private Hashtable activityToNodeMapping = new Hashtable();

		private TreeView treeView;

		private IServiceProvider serviceProvider;

		private bool isDirty;

		private bool needsExpandAll = true;

		protected internal bool NeedsExpandAll
		{
			get
			{
				return needsExpandAll;
			}
			set
			{
				needsExpandAll = value;
			}
		}

		protected internal TreeNode RootNode
		{
			get
			{
				if (treeView.Nodes.Count > 0)
				{
					return treeView.Nodes[0];
				}
				return null;
			}
		}

		protected internal TreeView TreeView => treeView;

		private bool IsDirty
		{
			get
			{
				return isDirty;
			}
			set
			{
				if (isDirty != value)
				{
					isDirty = value;
					if (value)
					{
						Application.Idle += OnIdle;
					}
					else
					{
						Application.Idle -= OnIdle;
					}
				}
			}
		}

		protected internal event TreeViewCancelEventHandler Expanding
		{
			add
			{
				treeView.BeforeExpand += value;
			}
			remove
			{
				treeView.BeforeExpand -= value;
			}
		}

		public WorkflowOutline(IServiceProvider serviceProvider)
		{
			this.serviceProvider = serviceProvider;
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			if (!(GetService(typeof(IDesignerHost)) is IDesignerHost))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
			}
			if (!(GetService(typeof(DesignSurface)) is DesignSurface designSurface))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(DesignSurface).FullName));
			}
			designSurface.Loaded += OnSurfaceLoaded;
			if (GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
			{
				componentChangeService.ComponentChanged += OnComponentChanged;
				componentChangeService.ComponentRename += OnComponentRename;
			}
			WorkflowTheme.ThemeChanged += OnThemeChanged;
			if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				selectionService.SelectionChanged += OnSelectionChanged;
			}
			if (GetService(typeof(IUIService)) is IUIService iUIService)
			{
				Font = (Font)iUIService.Styles["DialogFont"];
			}
			treeView = new TreeView();
			treeView.Dock = DockStyle.Fill;
			treeView.HideSelection = false;
			treeView.AfterSelect += OnTreeViewAfterSelect;
			treeView.MouseDown += OnTreeViewMouseDown;
			treeView.Font = Font;
			treeView.ItemHeight = Math.Max(treeView.ItemHeight, 18);
			base.Controls.Add(treeView);
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				IsDirty = false;
				WorkflowTheme.ThemeChanged -= OnThemeChanged;
				if (GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
				{
					componentChangeService.ComponentChanged -= OnComponentChanged;
					componentChangeService.ComponentRename -= OnComponentRename;
				}
				if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
				{
					selectionService.SelectionChanged -= OnSelectionChanged;
				}
				if (GetService(typeof(DesignSurface)) is DesignSurface designSurface)
				{
					designSurface.Loaded -= OnSurfaceLoaded;
				}
				serviceProvider = null;
			}
			base.Dispose(disposing);
		}

		public void ReloadWorkflowOutline()
		{
			OnBeginUpdate();
			treeView.BeginUpdate();
			try
			{
				treeView.Nodes.Clear();
				activityToNodeMapping.Clear();
				IRootDesigner safeRootDesigner = ActivityDesigner.GetSafeRootDesigner(serviceProvider);
				if (safeRootDesigner != null && safeRootDesigner.Component != null && safeRootDesigner.Component is Activity)
				{
					InsertDocOutlineNode(null, safeRootDesigner.Component as Activity, 0, addNestedActivities: true);
				}
				if (NeedsExpandAll)
				{
					treeView.ExpandAll();
				}
			}
			finally
			{
				treeView.EndUpdate();
			}
			IsDirty = false;
			if (GetService(typeof(ISelectionService)) is ISelectionService { PrimarySelection: not null } selectionService)
			{
				treeView.SelectedNode = activityToNodeMapping[selectionService.PrimarySelection] as WorkflowOutlineNode;
				if (treeView.SelectedNode != null)
				{
					treeView.SelectedNode.EnsureVisible();
				}
			}
			OnEndUpdate();
		}

		public void RefreshWorkflowOutline()
		{
			if (treeView.Nodes.Count > 0)
			{
				RefreshNode(treeView.Nodes[0] as WorkflowOutlineNode, refreshChildNodes: true);
			}
		}

		protected override void OnLoad(EventArgs e)
		{
			base.OnLoad(e);
			ReloadWorkflowOutline();
		}

		protected virtual void OnBeginUpdate()
		{
		}

		protected virtual void OnEndUpdate()
		{
		}

		protected virtual void OnRefreshNode(WorkflowOutlineNode node)
		{
			if (node == null)
			{
				return;
			}
			Activity activity = node.Activity;
			if (activity == null)
			{
				return;
			}
			int num = ((treeView.ImageList != null) ? treeView.ImageList.Images.IndexOfKey(activity.GetType().FullName) : (-1));
			if (num == -1)
			{
				ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
				if (designer != null && designer.StockImage is Bitmap image)
				{
					if (treeView.ImageList == null)
					{
						treeView.ImageList = new ImageList();
						treeView.ImageList.ColorDepth = ColorDepth.Depth32Bit;
					}
					treeView.ImageList.Images.Add(activity.GetType().FullName, image);
					num = treeView.ImageList.Images.Count - 1;
				}
			}
			int imageIndex = (node.SelectedImageIndex = num);
			node.ImageIndex = imageIndex;
			node.RefreshNode();
		}

		protected virtual WorkflowOutlineNode CreateNewNode(Activity activity)
		{
			return new WorkflowOutlineNode(activity);
		}

		protected virtual void OnNodeSelected(WorkflowOutlineNode node)
		{
			if (GetService(typeof(ISelectionService)) is ISelectionService selectionService && node != null && selectionService.PrimarySelection != node.Activity)
			{
				if (GetService(typeof(WorkflowView)) is WorkflowView workflowView)
				{
					workflowView.EnsureVisible(node.Activity);
				}
				selectionService.SetSelectedComponents(new object[1] { node.Activity }, SelectionTypes.Replace);
			}
		}

		protected virtual void OnNodeAdded(WorkflowOutlineNode node)
		{
		}

		protected WorkflowOutlineNode GetNode(Activity activity)
		{
			return activityToNodeMapping[activity] as WorkflowOutlineNode;
		}

		protected void RefreshNode(WorkflowOutlineNode nodeToUpdate, bool refreshChildNodes)
		{
			treeView.BeginUpdate();
			Queue<WorkflowOutlineNode> queue = new Queue<WorkflowOutlineNode>();
			queue.Enqueue(nodeToUpdate);
			while (queue.Count > 0)
			{
				WorkflowOutlineNode workflowOutlineNode = queue.Dequeue();
				OnRefreshNode(workflowOutlineNode);
				if (refreshChildNodes)
				{
					foreach (TreeNode node in workflowOutlineNode.Nodes)
					{
						if (node is WorkflowOutlineNode { Activity: { } } workflowOutlineNode2)
						{
							queue.Enqueue(workflowOutlineNode2);
						}
					}
				}
				treeView.EndUpdate();
			}
		}

		protected override object GetService(Type serviceType)
		{
			object obj = null;
			if (serviceProvider != null)
			{
				return serviceProvider.GetService(serviceType);
			}
			return base.GetService(serviceType);
		}

		private void InsertDocOutlineNode(WorkflowOutlineNode parentNode, Activity activity, int childIndex, bool addNestedActivities)
		{
			if (activityToNodeMapping.Contains(activity))
			{
				return;
			}
			WorkflowOutlineNode workflowOutlineNode = CreateNewNode(activity);
			if (workflowOutlineNode == null)
			{
				return;
			}
			RefreshNode(workflowOutlineNode, refreshChildNodes: false);
			activityToNodeMapping.Add(activity, workflowOutlineNode);
			if (addNestedActivities && activity is CompositeActivity)
			{
				foreach (Activity activity2 in ((CompositeActivity)activity).Activities)
				{
					InsertDocOutlineNode(workflowOutlineNode, activity2, workflowOutlineNode.Nodes.Count, addNestedActivities);
				}
			}
			if (parentNode != null)
			{
				parentNode.Nodes.Insert(childIndex, workflowOutlineNode);
			}
			else
			{
				treeView.Nodes.Add(workflowOutlineNode);
			}
			OnNodeAdded(workflowOutlineNode);
		}

		private void OnComponentChanged(object sender, ComponentChangedEventArgs e)
		{
			if (e.OldValue is ActivityCollectionChangeEventArgs)
			{
				IsDirty = true;
			}
			else if (e.Member != null && e.Component is Activity && activityToNodeMapping[e.Component] is WorkflowOutlineNode nodeToUpdate && string.Equals(e.Member.Name, "Enabled", StringComparison.Ordinal))
			{
				RefreshNode(nodeToUpdate, refreshChildNodes: true);
			}
		}

		private void OnComponentRename(object sender, ComponentRenameEventArgs e)
		{
			if (e.Component is Activity && activityToNodeMapping[e.Component] is WorkflowOutlineNode workflowOutlineNode)
			{
				workflowOutlineNode.OnActivityRename(e.NewName);
			}
		}

		private void OnIdle(object sender, EventArgs e)
		{
			if (IsDirty && treeView.Visible)
			{
				ReloadWorkflowOutline();
			}
		}

		private void OnSelectionChanged(object sender, EventArgs e)
		{
			if (GetService(typeof(ISelectionService)) is ISelectionService { PrimarySelection: not null } selectionService)
			{
				treeView.SelectedNode = activityToNodeMapping[selectionService.PrimarySelection] as WorkflowOutlineNode;
				if (treeView.SelectedNode != null)
				{
					treeView.SelectedNode.EnsureVisible();
				}
			}
		}

		private void OnSurfaceLoaded(object sender, LoadedEventArgs e)
		{
			ReloadWorkflowOutline();
		}

		private void OnTreeViewAfterSelect(object sender, TreeViewEventArgs e)
		{
			WorkflowOutlineNode node = e.Node as WorkflowOutlineNode;
			OnNodeSelected(node);
		}

		private void OnTreeViewMouseDown(object sender, MouseEventArgs e)
		{
			if (treeView.GetNodeAt(e.Location) != null)
			{
				treeView.SelectedNode = treeView.GetNodeAt(e.Location);
			}
		}

		private void OnThemeChanged(object sender, EventArgs e)
		{
			if (treeView.Nodes.Count > 0)
			{
				treeView.ImageList.Images.Clear();
				RefreshWorkflowOutline();
			}
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class WorkflowOutlineNode : TreeNode
	{
		private Activity activity;

		public Activity Activity => activity;

		public WorkflowOutlineNode(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			this.activity = activity;
			base.Name = activity.Name;
		}

		public virtual void RefreshNode()
		{
			Activity activity = Activity;
			if (activity != null)
			{
				base.ForeColor = ((!activity.Enabled || ActivityDesigner.IsCommentedActivity(activity)) ? WorkflowTheme.CurrentTheme.AmbientTheme.CommentIndicatorColor : SystemColors.WindowText);
				base.Text = activity.Name;
			}
		}

		public virtual void OnActivityRename(string newName)
		{
			base.Text = newName;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowMenuCommands : StandardCommands
	{
		public static readonly Guid WorkflowCommandSetId = new Guid("9aeb9524-82c6-40b9-9285-8d85d3dbd4c4");

		public static readonly Guid DebugCommandSetId = new Guid("C9DD4A59-47FB-11d2-83E7-00C04F9902C1");

		public static readonly Guid DebugWorkflowGroupId = new Guid("{e186451b-2313-42bd-84b9-815f1c923aef}");

		internal static readonly Guid StandardCommandSet97Id = new Guid("{5efc7975-14bc-11cf-9b2b-00aa00573819}");

		internal static readonly Guid StandardCommandSet2kId = new Guid("{1496A755-94DE-11D0-8C3F-00C04FC2AAE2}");

		public const int WorkflowToolBar = 1292;

		private const int cmdidInsertBreakpoint = 375;

		private const int cmdidInsertTracepoint = 65;

		private const int cmdidEnableBreakpoint = 376;

		private const int cmdidToggleBreakpoint = 255;

		private const int cmdidShowNextStatement = 259;

		private const int cmdidRunToCursor = 251;

		private const int cmdidSetNextStatement = 258;

		private const int cmdidGoToDisassembly = 263;

		private const int cmdidNewFileTracepoint = 320;

		private const int cmdidNewDataBreakpoint = 313;

		private const int cmdidClearBreakpoints = 256;

		private const int cmdidBreakpointLocation = 322;

		private const int cmdidBreakpointCondition = 323;

		private const int cmdidBreakpointHitCount = 324;

		private const int cmdidBreakpointConstraints = 325;

		private const int cmdidBreakpointAction = 326;

		private const int cmdidShowExecutionState = 4098;

		private const int cmdidPrint = 27;

		private const int cmdidPageSetup = 227;

		private const int cmdidPrintPreview = 228;

		private const int cmdidProperties = 4097;

		private const int cmdidWOEZoom400 = 12544;

		private const int cmdidWOEZoom300 = 12545;

		private const int cmdidWOEZoom200 = 12546;

		private const int cmdidWOEZoom150 = 12547;

		private const int cmdidWOEZoom100 = 12548;

		private const int cmdidWOEZoom75 = 12549;

		private const int cmdidWOEZoom50 = 12550;

		private const int cmdidWOEShowAll = 12551;

		public const int FirstZoomCommand = 12544;

		public const int LastZoomCommand = 12551;

		private const int cmdidDefaultPage = 12560;

		private const int cmdidAutoWidthPage = 12561;

		private const int cmdidAutoHeightPage = 12562;

		private const int cmdidExpand = 12563;

		private const int cmdidCollapse = 12564;

		private const int cmdidZoomIn = 12569;

		private const int cmdidZoomOut = 12570;

		private const int cmdidPan = 12571;

		private const int cmdidDefaultFilter = 12572;

		private const int cmdidDisable = 12565;

		private const int cmdidEnable = 12566;

		private const int cmdidChangeTheme = 12567;

		private const int cmdidCreateTheme = 12568;

		private const int cmdidZoomLevelCombo = 12575;

		private const int cmdidZoomLevelListHandler = 12576;

		private const int cmdidPrintPreviewPage = 12577;

		private const int cmdidSaveWorkflowAsImage = 12580;

		private const int cmdidCopyWorkflowToClipboard = 12581;

		private const int cmdidDebugWorkflowSteppingInstance = 12801;

		private const int cmdidDebugWorkflowSteppingBranch = 12802;

		private const int cmdidPageUp = 27;

		private const int cmdidPageDn = 29;

		private const int mnuidSelection = 1280;

		private const int mnuidZoom = 1287;

		private const int mnuidPageLayout = 1288;

		private const int mnuidDesignerActions = 1289;

		private const int mnuidPan = 1291;

		public static readonly int VerbGroupGeneral = StandardCommands.VerbFirst.ID;

		public static readonly int VerbGroupView = StandardCommands.VerbFirst.ID + 25;

		public static readonly int VerbGroupEdit = StandardCommands.VerbFirst.ID + 50;

		public static readonly int VerbGroupOptions = StandardCommands.VerbFirst.ID + 75;

		public static readonly int VerbGroupActions = StandardCommands.VerbFirst.ID + 100;

		public static readonly int VerbGroupMisc = StandardCommands.VerbFirst.ID + 125;

		public static readonly int VerbGroupDesignerActions = StandardCommands.VerbFirst.ID + 150;

		public static readonly Guid MenuGuid = WorkflowCommandSetId;

		public static readonly CommandID SelectionMenu = new CommandID(WorkflowCommandSetId, 1280);

		public static readonly CommandID DesignerActionsMenu = new CommandID(WorkflowCommandSetId, 1289);

		public static readonly CommandID InsertBreakpointMenu = new CommandID(StandardCommandSet97Id, 375);

		public static readonly CommandID EnableBreakpointMenu = new CommandID(StandardCommandSet97Id, 376);

		public static readonly CommandID ToggleBreakpointMenu = new CommandID(StandardCommandSet97Id, 255);

		public static readonly CommandID ClearBreakpointsMenu = new CommandID(StandardCommandSet97Id, 256);

		public static readonly CommandID ShowNextStatementMenu = new CommandID(StandardCommandSet97Id, 259);

		public static readonly CommandID RunToCursorMenu = new CommandID(StandardCommandSet97Id, 251);

		public static readonly CommandID SetNextStatementMenu = new CommandID(StandardCommandSet97Id, 258);

		public static readonly CommandID GotoDisassemblyMenu = new CommandID(DebugCommandSetId, 263);

		public static readonly CommandID NewFileTracePointMenu = new CommandID(DebugCommandSetId, 320);

		public static readonly CommandID NewDataBreakpointMenu = new CommandID(DebugCommandSetId, 313);

		public static readonly CommandID InsertTracePointMenu = new CommandID(DebugCommandSetId, 65);

		public static readonly CommandID BreakpointLocationMenu = new CommandID(DebugCommandSetId, 322);

		public static readonly CommandID BreakpointConditionMenu = new CommandID(DebugCommandSetId, 323);

		public static readonly CommandID BreakpointHitCountMenu = new CommandID(DebugCommandSetId, 324);

		public static readonly CommandID BreakpointConstraintsMenu = new CommandID(DebugCommandSetId, 325);

		public static readonly CommandID BreakpointActionMenu = new CommandID(DebugCommandSetId, 326);

		public static readonly CommandID ExecutionStateMenu = new CommandID(WorkflowCommandSetId, 4098);

		public static readonly CommandID DebugStepInstanceMenu = new CommandID(WorkflowCommandSetId, 12801);

		public static readonly CommandID DebugStepBranchMenu = new CommandID(WorkflowCommandSetId, 12802);

		public static readonly CommandID Print = new CommandID(StandardCommandSet97Id, 27);

		public static readonly CommandID PageSetup = new CommandID(StandardCommandSet97Id, 227);

		public static readonly CommandID PrintPreview = new CommandID(StandardCommandSet97Id, 228);

		public static readonly CommandID PageUp = new CommandID(StandardCommandSet2kId, 27);

		public static readonly CommandID PageDown = new CommandID(StandardCommandSet2kId, 29);

		public static readonly CommandID DesignerProperties = new CommandID(WorkflowCommandSetId, 4097);

		public static readonly CommandID ZoomMenu = new CommandID(WorkflowCommandSetId, 1287);

		public static readonly CommandID PageLayoutMenu = new CommandID(WorkflowCommandSetId, 1288);

		public static readonly CommandID PanMenu = new CommandID(WorkflowCommandSetId, 1291);

		public static readonly CommandID Zoom400Mode = new CommandID(WorkflowCommandSetId, 12544);

		public static readonly CommandID Zoom300Mode = new CommandID(WorkflowCommandSetId, 12545);

		public static readonly CommandID Zoom200Mode = new CommandID(WorkflowCommandSetId, 12546);

		public static readonly CommandID Zoom150Mode = new CommandID(WorkflowCommandSetId, 12547);

		public static readonly CommandID Zoom100Mode = new CommandID(WorkflowCommandSetId, 12548);

		public static readonly CommandID Zoom75Mode = new CommandID(WorkflowCommandSetId, 12549);

		public static readonly CommandID Zoom50Mode = new CommandID(WorkflowCommandSetId, 12550);

		public static readonly CommandID ShowAll = new CommandID(WorkflowCommandSetId, 12551);

		public static readonly CommandID DefaultPage = new CommandID(WorkflowCommandSetId, 12560);

		public static readonly CommandID PrintPreviewPage = new CommandID(WorkflowCommandSetId, 12577);

		public static readonly CommandID Expand = new CommandID(WorkflowCommandSetId, 12563);

		public static readonly CommandID Collapse = new CommandID(WorkflowCommandSetId, 12564);

		public static readonly CommandID Disable = new CommandID(WorkflowCommandSetId, 12565);

		public static readonly CommandID Enable = new CommandID(WorkflowCommandSetId, 12566);

		public static readonly CommandID ChangeTheme = new CommandID(WorkflowCommandSetId, 12567);

		public static readonly CommandID CreateTheme = new CommandID(WorkflowCommandSetId, 12568);

		public static readonly CommandID ZoomIn = new CommandID(WorkflowCommandSetId, 12569);

		public static readonly CommandID ZoomOut = new CommandID(WorkflowCommandSetId, 12570);

		public static readonly CommandID Pan = new CommandID(WorkflowCommandSetId, 12571);

		public static readonly CommandID DefaultFilter = new CommandID(WorkflowCommandSetId, 12572);

		public static readonly CommandID ZoomLevelCombo = new CommandID(WorkflowCommandSetId, 12575);

		public static readonly CommandID ZoomLevelListHandler = new CommandID(WorkflowCommandSetId, 12576);

		public static readonly CommandID SaveAsImage = new CommandID(WorkflowCommandSetId, 12580);

		public static readonly CommandID CopyToClipboard = new CommandID(WorkflowCommandSetId, 12581);
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IIdentifierCreationService
	{
		void EnsureUniqueIdentifiers(CompositeActivity parentActivity, ICollection childActivities);

		void ValidateIdentifier(Activity activity, string identifier);
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IMemberCreationService
	{
		void CreateField(string className, string fieldName, Type fieldType, Type[] genericParameterTypes, MemberAttributes attributes, CodeSnippetExpression initializationExpression, bool overwriteExisting);

		void CreateProperty(string className, string propertyName, Type propertyType, AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty, bool isAttached, Type ownerType, bool isReadOnly);

		void CreateEvent(string className, string eventName, Type eventType, AttributeInfo[] attributes, bool emitDependencyProperty);

		void UpdateTypeName(string oldClassName, string newClassName);

		void UpdateBaseType(string className, Type baseType);

		void UpdateProperty(string className, string oldPropertyName, Type oldPropertyType, string newPropertyName, Type newPropertyType, AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty);

		void UpdateEvent(string className, string oldEventName, Type oldEventType, string newEventName, Type newEventType, AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty);

		void RemoveProperty(string className, string propertyName, Type propertyType);

		void RemoveEvent(string className, string eventName, Type eventType);

		void ShowCode(Activity activity, string methodName, Type delegateType);

		void ShowCode();
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IExtendedUIService
	{
		DialogResult AddWebReference(out Uri url, out Type proxyClass);

		Uri GetUrlForProxyClass(Type proxyClass);

		Type GetProxyClassForUrl(Uri url);

		void AddDesignerActions(DesignerAction[] actions);

		void RemoveDesignerActions();

		bool NavigateToProperty(string propName);

		ITypeDescriptorContext GetSelectedPropertyContext();

		void ShowToolsOptions();

		Dictionary<string, Type> GetXsdProjectItemsInfo();

		void AddAssemblyReference(AssemblyName assemblyName);
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IExtendedUIService2
	{
		long GetTargetFrameworkVersion();

		bool IsSupportedType(Type type);

		Assembly GetReflectionAssembly(AssemblyName assemblyName);

		Type GetRuntimeType(Type reflectionType);
	}
	internal interface IWorkflowDesignerMessageSink
	{
		bool OnMouseDown(MouseEventArgs e);

		bool OnMouseMove(MouseEventArgs e);

		bool OnMouseUp(MouseEventArgs e);

		bool OnMouseDoubleClick(MouseEventArgs e);

		bool OnMouseEnter(MouseEventArgs e);

		bool OnMouseHover(MouseEventArgs e);

		bool OnMouseLeave();

		bool OnMouseWheel(MouseEventArgs e);

		bool OnMouseCaptureChanged();

		bool OnMouseDragBegin(Point initialPoint, MouseEventArgs e);

		bool OnMouseDragMove(MouseEventArgs e);

		bool OnMouseDragEnd();

		bool OnDragEnter(DragEventArgs e);

		bool OnDragOver(DragEventArgs e);

		bool OnDragLeave();

		bool OnDragDrop(DragEventArgs e);

		bool OnGiveFeedback(GiveFeedbackEventArgs e);

		bool OnQueryContinueDrag(QueryContinueDragEventArgs e);

		bool OnKeyDown(KeyEventArgs e);

		bool OnKeyUp(KeyEventArgs e);

		bool OnScroll(ScrollBar sender, int value);

		bool OnShowContextMenu(Point screenMenuPoint);

		bool ProcessMessage(System.Windows.Forms.Message message);

		void OnLayout(LayoutEventArgs layoutEventArgs);

		void OnLayoutPosition(Graphics graphics);

		void OnLayoutSize(Graphics graphics);

		void OnThemeChange();

		void OnBeginResizing(DesignerEdges sizingEdge);

		void OnResizing(DesignerEdges sizingEdge, Rectangle bounds);

		void OnEndResizing();

		bool OnPaint(PaintEventArgs e, Rectangle viewPort);

		bool OnPaintWorkflowAdornments(PaintEventArgs e, Rectangle viewPort);
	}
	internal sealed class ViewPortData
	{
		public Rectangle LogicalViewPort;

		public Bitmap MemoryBitmap;

		public SizeF Scaling = new SizeF(1f, 1f);

		public Point Translation = Point.Empty;

		public Size ShadowDepth = Size.Empty;

		public Color TransparentColor = Color.White;

		public Size ViewPortSize = Size.Empty;
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityDragEventArgs : DragEventArgs
	{
		private Point snapPoint = Point.Empty;

		private Point dragInitiationPoint = Point.Empty;

		private List<Activity> draggedActivities;

		public ReadOnlyCollection<Activity> Activities => draggedActivities.AsReadOnly();

		public Point DragImageSnapPoint
		{
			get
			{
				return snapPoint;
			}
			set
			{
				snapPoint = value;
			}
		}

		public Point DragInitiationPoint => dragInitiationPoint;

		internal ActivityDragEventArgs(DragEventArgs dragEventArgs, Point dragInitiationPoint, Point point, List<Activity> draggedActivities)
			: base(dragEventArgs.Data, dragEventArgs.KeyState, point.X, point.Y, dragEventArgs.AllowedEffect, dragEventArgs.Effect)
		{
			this.dragInitiationPoint = dragInitiationPoint;
			if (draggedActivities == null)
			{
				this.draggedActivities = new List<Activity>();
			}
			else
			{
				this.draggedActivities = new List<Activity>(draggedActivities);
			}
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityChangedEventArgs : EventArgs
	{
		private Activity activity;

		private MemberDescriptor member;

		private object oldValue;

		private object newValue;

		public Activity Activity => activity;

		public MemberDescriptor Member => member;

		public object OldValue => oldValue;

		public object NewValue => newValue;

		public ActivityChangedEventArgs(Activity activity, MemberDescriptor member, object oldValue, object newValue)
		{
			this.activity = activity;
			this.member = member;
			this.oldValue = oldValue;
			this.newValue = newValue;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityDesignerLayoutEventArgs : EventArgs
	{
		private Graphics graphics;

		private ActivityDesignerTheme designerTheme;

		public AmbientTheme AmbientTheme => WorkflowTheme.CurrentTheme.AmbientTheme;

		public ActivityDesignerTheme DesignerTheme => designerTheme;

		public Graphics Graphics => graphics;

		public ActivityDesignerLayoutEventArgs(Graphics graphics, ActivityDesignerTheme designerTheme)
		{
			this.graphics = graphics;
			this.designerTheme = designerTheme;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityDesignerPaintEventArgs : EventArgs
	{
		private Graphics graphics;

		private Rectangle clipRectangle;

		private Rectangle viewPort;

		private ActivityDesignerTheme designerTheme;

		public Graphics Graphics => graphics;

		public Rectangle ClipRectangle => clipRectangle;

		public AmbientTheme AmbientTheme => WorkflowTheme.CurrentTheme.AmbientTheme;

		public ActivityDesignerTheme DesignerTheme => designerTheme;

		internal Rectangle ViewPort => viewPort;

		public ActivityDesignerPaintEventArgs(Graphics graphics, Rectangle clipRectangle, Rectangle viewPort, ActivityDesignerTheme designerTheme)
		{
			this.graphics = graphics;
			this.clipRectangle = Rectangle.Inflate(clipRectangle, 1, 1);
			this.viewPort = viewPort;
			this.designerTheme = designerTheme;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityDesignerResizeEventArgs : EventArgs
	{
		private DesignerEdges sizingEdge;

		private Rectangle newBounds;

		public DesignerEdges SizingEdge => sizingEdge;

		public Rectangle Bounds => newBounds;

		public ActivityDesignerResizeEventArgs(DesignerEdges sizingEdge, Rectangle newBounds)
		{
			this.sizingEdge = sizingEdge;
			this.newBounds = newBounds;
		}
	}
	[Flags]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum DesignerEdges
	{
		None = 0,
		Left = 1,
		Top = 2,
		Right = 4,
		Bottom = 8,
		All = 0xF
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IDesignerGlyphProviderService
	{
		ReadOnlyCollection<IDesignerGlyphProvider> GlyphProviders { get; }

		void AddGlyphProvider(IDesignerGlyphProvider glyphProvider);

		void RemoveGlyphProvider(IDesignerGlyphProvider glyphProvider);
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IDesignerGlyphProvider
	{
		ActivityDesignerGlyphCollection GetGlyphs(ActivityDesigner activityDesigner);
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IDesignerVerbProviderService
	{
		ReadOnlyCollection<IDesignerVerbProvider> VerbProviders { get; }

		void AddVerbProvider(IDesignerVerbProvider verbProvider);

		void RemoveVerbProvider(IDesignerVerbProvider verbProvider);
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IDesignerVerbProvider
	{
		ActivityDesignerVerbCollection GetVerbs(ActivityDesigner activityDesigner);
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IPersistUIState
	{
		void SaveViewState(BinaryWriter writer);

		void LoadViewState(BinaryReader reader);
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IWorkflowRootDesigner : IRootDesigner, IDesigner, IDisposable
	{
		CompositeActivityDesigner InvokingDesigner { get; set; }

		ReadOnlyCollection<WorkflowDesignerMessageFilter> MessageFilters { get; }

		bool SupportsLayoutPersistence { get; }

		bool IsSupportedActivityType(Type activityType);
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum DesignerNavigationDirection
	{
		Down,
		Up,
		Left,
		Right
	}
	[Flags]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum HitTestLocations
	{
		None = 0,
		Designer = 1,
		ActionArea = 2,
		Left = 4,
		Top = 8,
		Right = 0x10,
		Bottom = 0x20,
		Connector = 0x40
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class HitTestInfo
	{
		private static HitTestInfo nowhere;

		private ActivityDesigner activityDesigner;

		private HitTestLocations location;

		private IDictionary userData;

		public static HitTestInfo Nowhere
		{
			get
			{
				if (nowhere == null)
				{
					nowhere = new HitTestInfo();
				}
				return nowhere;
			}
		}

		[Browsable(false)]
		public ActivityDesigner AssociatedDesigner => activityDesigner;

		[Browsable(false)]
		public HitTestLocations HitLocation => location;

		[Browsable(false)]
		public virtual Rectangle Bounds
		{
			get
			{
				if (activityDesigner != null)
				{
					return activityDesigner.Bounds;
				}
				return Rectangle.Empty;
			}
		}

		[Browsable(false)]
		public virtual object SelectableObject
		{
			get
			{
				if (activityDesigner != null)
				{
					return activityDesigner.Activity;
				}
				return null;
			}
		}

		[Browsable(false)]
		public IDictionary UserData
		{
			get
			{
				if (userData == null)
				{
					userData = new HybridDictionary();
				}
				return userData;
			}
		}

		internal HitTestInfo()
		{
		}

		public HitTestInfo(ActivityDesigner designer, HitTestLocations location)
		{
			if (designer == null)
			{
				throw new ArgumentNullException("designer");
			}
			activityDesigner = designer;
			this.location = location;
		}

		public virtual int MapToIndex()
		{
			if (activityDesigner.Activity is CompositeActivity compositeActivity)
			{
				return compositeActivity.Activities.Count;
			}
			return 0;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ConnectorHitTestInfo : HitTestInfo
	{
		private int connector;

		public override Rectangle Bounds
		{
			get
			{
				if (base.AssociatedDesigner is SequentialActivityDesigner { Expanded: not false } sequentialActivityDesigner)
				{
					Rectangle[] connectors = sequentialActivityDesigner.GetConnectors();
					if (connectors.Length != 0)
					{
						return connectors[connector];
					}
				}
				return Rectangle.Empty;
			}
		}

		public override object SelectableObject => this;

		public ConnectorHitTestInfo(CompositeActivityDesigner compositeActivityDesigner, HitTestLocations flags, int connector)
			: base(compositeActivityDesigner, flags)
		{
			if (this.connector < 0)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidConnectorValue"), "connector");
			}
			this.connector = connector;
		}

		public override int MapToIndex()
		{
			return connector;
		}

		public override bool Equals(object obj)
		{
			if (obj is ConnectorHitTestInfo connectorHitTestInfo && connectorHitTestInfo.AssociatedDesigner == base.AssociatedDesigner && connectorHitTestInfo.HitLocation == base.HitLocation && connectorHitTestInfo.MapToIndex() == MapToIndex())
			{
				return true;
			}
			return false;
		}

		public override int GetHashCode()
		{
			return base.GetHashCode() ^ ((base.AssociatedDesigner != null) ? base.AssociatedDesigner.GetHashCode() : 0) ^ MapToIndex().GetHashCode();
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class DesignerAction
	{
		private ActivityDesigner activityDesigner;

		private int actionId;

		private string text;

		private Image image;

		private IDictionary userData;

		private string propertyName;

		public string PropertyName
		{
			get
			{
				return propertyName;
			}
			set
			{
				propertyName = value;
			}
		}

		public int ActionId => actionId;

		public string Text => text;

		public Image Image => image;

		public IDictionary UserData
		{
			get
			{
				if (userData == null)
				{
					userData = new HybridDictionary();
				}
				return userData;
			}
		}

		public DesignerAction(ActivityDesigner activityDesigner, int actionId, string text)
		{
			if (activityDesigner == null)
			{
				throw new ArgumentNullException("activityDesigner");
			}
			if (text == null || text.Length == 0)
			{
				throw new ArgumentException(SR.GetString("Error_NullOrEmptyValue"), "text");
			}
			this.activityDesigner = activityDesigner;
			this.actionId = actionId;
			this.text = text;
		}

		public DesignerAction(ActivityDesigner activityDesigner, int actionId, string text, Image image)
			: this(activityDesigner, actionId, text)
		{
			this.image = image;
		}

		public void Invoke()
		{
			activityDesigner.OnExecuteDesignerAction(this);
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum DesignerVerbGroup
	{
		General,
		View,
		Edit,
		Options,
		Actions,
		Misc
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityDesignerVerb : DesignerVerb
	{
		private ActivityDesigner activityDesigner;

		private EventHandler invokeHandler;

		private EventHandler statusHandler;

		private DesignerVerbGroup verbGroup;

		private int id;

		public override int OleStatus
		{
			get
			{
				if (statusHandler != null)
				{
					try
					{
						statusHandler(this, EventArgs.Empty);
					}
					catch
					{
					}
				}
				return base.OleStatus;
			}
		}

		public override CommandID CommandID => new CommandID(WorkflowMenuCommands.MenuGuid, id);

		public DesignerVerbGroup Group => verbGroup;

		internal int Id
		{
			get
			{
				return id;
			}
			set
			{
				id = value;
			}
		}

		internal ActivityDesigner ActivityDesigner => activityDesigner;

		public ActivityDesignerVerb(ActivityDesigner activityDesigner, DesignerVerbGroup verbGroup, string text, EventHandler invokeHandler)
			: base(text, OnExecuteDesignerVerb, new CommandID(WorkflowMenuCommands.MenuGuid, 0))
		{
			if (text == null || text.Length == 0)
			{
				throw new ArgumentNullException("text");
			}
			if (invokeHandler == null)
			{
				throw new ArgumentNullException("invokeHandler");
			}
			this.verbGroup = verbGroup;
			this.invokeHandler = invokeHandler;
			this.activityDesigner = activityDesigner;
		}

		public ActivityDesignerVerb(ActivityDesigner activityDesigner, DesignerVerbGroup verbGroup, string text, EventHandler invokeHandler, EventHandler statusHandler)
			: this(activityDesigner, verbGroup, text, invokeHandler)
		{
			this.statusHandler = statusHandler;
		}

		private static void OnExecuteDesignerVerb(object sender, EventArgs e)
		{
			if (!(sender is ActivityDesignerVerb activityDesignerVerb))
			{
				return;
			}
			if (activityDesignerVerb.invokeHandler != null)
			{
				activityDesignerVerb.invokeHandler(sender, e);
			}
			int oleStatus = activityDesignerVerb.OleStatus;
			oleStatus = 0;
			if (activityDesignerVerb.activityDesigner == null)
			{
				return;
			}
			foreach (DesignerVerb verb in ((IDesigner)activityDesignerVerb.activityDesigner).Verbs)
			{
				if (verb is ActivityDesignerVerb)
				{
					oleStatus = verb.OleStatus;
					oleStatus = 0;
				}
			}
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	[PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]
	public sealed class ActivityDesignerVerbCollection : DesignerVerbCollection
	{
		private class ActivityDesignerVerbComparer : IComparer
		{
			public int Compare(object x, object y)
			{
				ActivityDesignerVerb activityDesignerVerb = x as ActivityDesignerVerb;
				ActivityDesignerVerb activityDesignerVerb2 = y as ActivityDesignerVerb;
				if (activityDesignerVerb.Id == activityDesignerVerb2.Id)
				{
					return 0;
				}
				if (activityDesignerVerb.Id > activityDesignerVerb2.Id)
				{
					return 1;
				}
				return -1;
			}
		}

		internal ActivityDesignerVerbCollection SafeCollection
		{
			get
			{
				if (base.Count == 0)
				{
					return this;
				}
				Dictionary<DesignerVerbGroup, List<ActivityDesignerVerb>> dictionary = new Dictionary<DesignerVerbGroup, List<ActivityDesignerVerb>>();
				ArrayList arrayList = new ArrayList(this);
				foreach (ActivityDesignerVerb item in arrayList)
				{
					List<ActivityDesignerVerb> list = null;
					if (!dictionary.ContainsKey(item.Group))
					{
						list = new List<ActivityDesignerVerb>();
						dictionary.Add(item.Group, list);
					}
					else
					{
						list = dictionary[item.Group];
					}
					if (!list.Contains(item))
					{
						item.Id = ConvertGroupToId(item.Group) + list.Count;
						list.Add(item);
					}
				}
				arrayList.Sort(new ActivityDesignerVerbComparer());
				if (((ActivityDesignerVerb)arrayList[0]).Id != StandardCommands.VerbFirst.ID)
				{
					arrayList.Insert(0, new ActivityDesignerVerb(null, DesignerVerbGroup.General, "Dummy", OnDummyVerb));
					((ActivityDesignerVerb)arrayList[0]).Visible = false;
				}
				ActivityDesignerVerbCollection activityDesignerVerbCollection = new ActivityDesignerVerbCollection();
				foreach (ActivityDesignerVerb item2 in arrayList)
				{
					activityDesignerVerbCollection.Add(item2);
				}
				return activityDesignerVerbCollection;
			}
		}

		public ActivityDesignerVerbCollection()
		{
		}

		public ActivityDesignerVerbCollection(IEnumerable<ActivityDesignerVerb> verbs)
		{
			if (verbs == null)
			{
				throw new ArgumentNullException("verbs");
			}
			foreach (ActivityDesignerVerb verb in verbs)
			{
				Add(verb);
			}
		}

		protected override void OnValidate(object value)
		{
			if (!(value is ActivityDesignerVerb))
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidDesignerVerbValue"));
			}
		}

		private void OnDummyVerb(object sender, EventArgs e)
		{
		}

		private int ConvertGroupToId(DesignerVerbGroup group)
		{
			return group switch
			{
				DesignerVerbGroup.General => WorkflowMenuCommands.VerbGroupGeneral, 
				DesignerVerbGroup.View => WorkflowMenuCommands.VerbGroupView, 
				DesignerVerbGroup.Edit => WorkflowMenuCommands.VerbGroupEdit, 
				DesignerVerbGroup.Options => WorkflowMenuCommands.VerbGroupOptions, 
				DesignerVerbGroup.Actions => WorkflowMenuCommands.VerbGroupActions, 
				_ => WorkflowMenuCommands.VerbGroupMisc, 
			};
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface ITypeFilterProvider
	{
		string FilterDescription { get; }

		bool CanFilterType(Type type, bool throwOnError);
	}
	[AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = false)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class TypeFilterProviderAttribute : Attribute
	{
		private string typeName;

		public string TypeFilterProviderTypeName => typeName;

		public TypeFilterProviderAttribute(Type type)
		{
			if (type == null)
			{
				throw new ArgumentNullException("type");
			}
			typeName = type.AssemblyQualifiedName;
		}

		public TypeFilterProviderAttribute(string typeName)
		{
			this.typeName = typeName;
		}
	}
	[Guid("0E6DF9D7-B4B5-4af7-9647-FC335CCE393F")]
	[ComVisible(true)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface ITypeProviderCreator
	{
		ITypeProvider GetTypeProvider(object obj);

		Assembly GetLocalAssembly(object obj);

		Assembly GetTransientAssembly(AssemblyName assemblyName);

		ITypeResolutionService GetTypeResolutionService(object obj);
	}
	[ActivityDesignerTheme(typeof(ActivityDesignerTheme))]
	[SRCategory("ActivityDesigners", "System.Workflow.ComponentModel.Design.DesignerResources")]
	[DesignerSerializer(typeof(ActivityDesignerLayoutSerializer), typeof(WorkflowMarkupSerializer))]
	[ToolboxItemFilter("Microsoft.Workflow.VSDesigner", ToolboxItemFilterType.Require)]
	[ToolboxItemFilter("System.Workflow.ComponentModel.Design.ActivitySet", ToolboxItemFilterType.Custom)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityDesigner : IDisposable, IDesignerFilter, IDesigner, IToolboxUser, IPersistUIState, IWorkflowDesignerMessageSink, IWorkflowRootDesigner, IRootDesigner, IConnectableDesigner
	{
		[Flags]
		internal enum DrawingStates
		{
			Valid = 0,
			InvalidPosition = 1,
			InvalidSize = 2,
			InvalidDraw = 4
		}

		internal sealed class SmartTag : DesignerGlyph
		{
			internal const int DefaultHeight = 2;

			private static Image defaultImage = DR.GetImage("SmartTag");

			private ActivityDesigner activeDesigner;

			public override bool CanBeActivated => true;

			internal ActivityDesigner ActiveDesigner => activeDesigner;

			public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
			{
				Rectangle empty = Rectangle.Empty;
				Rectangle smartTagRectangle = designer.SmartTagRectangle;
				if (!smartTagRectangle.IsEmpty)
				{
					Size glyphSize = WorkflowTheme.CurrentTheme.AmbientTheme.GlyphSize;
					Size size = smartTagRectangle.Size;
					Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
					empty.X = smartTagRectangle.Left - margin.Width / 2;
					empty.Y = smartTagRectangle.Top - margin.Height / 2;
					empty.Width = size.Width + glyphSize.Width / 2 + 3 * margin.Width;
					empty.Height = size.Height + margin.Height;
				}
				return empty;
			}

			protected override void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer)
			{
				Rectangle bounds = GetBounds(designer, activated: true);
				bool flag = false;
				if (Form.ActiveForm != null && Form.ActiveForm.GetType().FullName.Equals(typeof(ItemPalette).FullName + "+Palette", StringComparison.Ordinal))
				{
					flag = Form.ActiveForm.Location == designer.PointToScreen(new Point(bounds.Left, bounds.Bottom));
				}
				if (!activated)
				{
					if (activeDesigner != null)
					{
						activated = true;
					}
					else if (Form.ActiveForm != null && Form.ActiveForm.GetType().FullName.Equals(typeof(ItemPalette).FullName + "+Palette", StringComparison.Ordinal))
					{
						activated = flag;
					}
				}
				graphics.FillRectangle(WorkflowTheme.CurrentTheme.AmbientTheme.BackgroundBrush, bounds);
				using (Brush brush = new SolidBrush(Color.FromArgb(50, WorkflowTheme.CurrentTheme.AmbientTheme.SelectionForeColor)))
				{
					graphics.FillRectangle(brush, bounds);
				}
				graphics.DrawRectangle(SystemPens.ControlDarkDark, bounds);
				Image image = designer.Image;
				image = ((designer.Image == null) ? defaultImage : image);
				Size glyphSize = WorkflowTheme.CurrentTheme.AmbientTheme.GlyphSize;
				Size size = designer.SmartTagRectangle.Size;
				Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
				Rectangle destination = bounds;
				destination.X += margin.Width / 2;
				destination.Y += margin.Height / 2;
				destination.Size = size;
				ActivityDesignerPaint.DrawImage(graphics, image, destination, DesignerContentAlignment.Center);
				Rectangle bounds2 = bounds;
				bounds2.X += size.Width + 3 * margin.Width / 2;
				bounds2.Y += margin.Height / 2;
				bounds2.Width = glyphSize.Width / 2;
				bounds2.Height -= glyphSize.Height / 4;
				using GraphicsPath path = ActivityDesignerPaint.GetScrollIndicatorPath(bounds2, ScrollButton.Down);
				graphics.FillPath(Brushes.Black, path);
				graphics.DrawPath(Pens.Black, path);
			}

			protected override void OnActivate(ActivityDesigner designer)
			{
				if (designer.SmartTagVerbs.Count > 0)
				{
					activeDesigner = designer;
					Rectangle bounds = GetBounds(designer, activated: true);
					activeDesigner.OnShowSmartTagVerbs(new Point(bounds.Left, bounds.Bottom + 1));
					activeDesigner = null;
				}
			}
		}

		private const int MaximumCharsPerLine = 8;

		private const int MaximumTextLines = 2;

		private const int MaximumIdentifierLength = 25;

		private const int MaximumDescriptionLength = 80;

		private const uint FrameworkVersion_3_5 = 196613u;

		private const uint FrameworkVersion_3_0 = 196608u;

		private Activity activity;

		private ActivityDesignerAccessibleObject accessibilityObject;

		private ActivityDesignerVerbCollection designerVerbs;

		private List<DesignerAction> designerActions;

		private DrawingStates drawingState;

		private Point location = Point.Empty;

		private Size size = Size.Empty;

		private Image image;

		private string text = string.Empty;

		private Size textSize = Size.Empty;

		private bool smartTagVisible;

		private SmartTag smartTag = new SmartTag();

		private bool isVisible = true;

		private string rulesText;

		private CompositeActivityDesigner invokingDesigner;

		private WorkflowView workflowView;

		public Activity Activity => activity;

		public CompositeActivityDesigner ParentDesigner
		{
			get
			{
				CompositeActivityDesigner result = null;
				if (this != null && IsRootDesigner)
				{
					result = ((IWorkflowRootDesigner)this).InvokingDesigner;
				}
				else if (Activity != null && Activity.Parent != null)
				{
					result = GetDesigner(Activity.Parent) as CompositeActivityDesigner;
				}
				return result;
			}
		}

		public bool IsSelected
		{
			get
			{
				if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
				{
					return selectionService.GetComponentSelected(Activity);
				}
				return false;
			}
		}

		public bool IsPrimarySelection
		{
			get
			{
				if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
				{
					return selectionService.PrimarySelection == Activity;
				}
				return false;
			}
		}

		public virtual AccessibleObject AccessibilityObject
		{
			get
			{
				if (accessibilityObject == null)
				{
					accessibilityObject = new ActivityDesignerAccessibleObject(this);
				}
				return accessibilityObject;
			}
		}

		public virtual bool IsVisible => isVisible;

		public bool IsLocked
		{
			get
			{
				if (Helpers.IsActivityLocked(Activity))
				{
					return true;
				}
				if (DrawingState != 0)
				{
					return true;
				}
				if (GetService(typeof(WorkflowDesignerLoader)) is WorkflowDesignerLoader { InDebugMode: not false })
				{
					return true;
				}
				IWorkflowRootDesigner safeRootDesigner = GetSafeRootDesigner(Activity.Site);
				if (safeRootDesigner != null && safeRootDesigner.InvokingDesigner != null)
				{
					return true;
				}
				return false;
			}
		}

		public virtual Point Location
		{
			get
			{
				return location;
			}
			set
			{
				if (ParentDesigner is FreeformActivityDesigner)
				{
					value = DesignerHelpers.SnapToGrid(value);
				}
				if (location != value)
				{
					location = value;
				}
			}
		}

		public virtual Size Size
		{
			get
			{
				return size;
			}
			set
			{
				value.Width = Math.Max(value.Width, MinimumSize.Width);
				value.Height = Math.Max(value.Height, MinimumSize.Height);
				if (size != value)
				{
					size = value;
				}
			}
		}

		public virtual Size MinimumSize => DesignerTheme.Size;

		public Rectangle Bounds => new Rectangle(Location, Size);

		public virtual Image Image
		{
			get
			{
				return image;
			}
			protected set
			{
				image = value;
				PerformLayout();
			}
		}

		public virtual string Text
		{
			get
			{
				return text;
			}
			protected set
			{
				if (value != null && value.Length != 0 && !(text == value))
				{
					text = value;
					PerformLayout();
				}
			}
		}

		public ActivityDesignerTheme DesignerTheme => WorkflowTheme.CurrentTheme.GetDesignerTheme(this);

		public bool IsRootDesigner
		{
			get
			{
				bool result = false;
				if (GetService(typeof(IDesignerHost)) is IDesignerHost designerHost)
				{
					result = designerHost.RootComponent == Activity;
				}
				return result;
			}
		}

		protected internal WorkflowView ParentView => GetService(typeof(WorkflowView)) as WorkflowView;

		protected virtual ActivityDesignerVerbCollection Verbs
		{
			get
			{
				if (designerVerbs == null)
				{
					designerVerbs = new ActivityDesignerVerbCollection();
					if (!IsLocked)
					{
						designerVerbs.Add(new ActivityDesignerVerb(this, DesignerVerbGroup.General, DR.GetString("GenerateEventHandlers"), OnGenerateEventHandler, OnGenerateEventHandlerStatusUpdate));
					}
					WorkflowDesignerLoader workflowDesignerLoader = GetService(typeof(WorkflowDesignerLoader)) as WorkflowDesignerLoader;
					if (Activity.Parent != null)
					{
						designerVerbs.Add(new ActivityDesignerVerb(this, DesignerVerbGroup.General, DR.GetString("PromoteBindings"), OnPromoteBindings, OnPromoteBindingsStatusUpdate));
					}
					designerVerbs.Add(new ActivityDesignerVerb(this, DesignerVerbGroup.General, DR.GetString("BindSelectedProperty"), OnBindProperty, OnBindPropertyStatusUpdate));
					ActivityDesignerVerb activityDesignerVerb = new ActivityDesignerVerb(this, DesignerVerbGroup.General, DR.GetString("MoveLeftDesc"), OnMoveBranch, OnStatusMoveBranch);
					activityDesignerVerb.Properties[DesignerUserDataKeys.MoveBranchKey] = true;
					designerVerbs.Add(activityDesignerVerb);
					activityDesignerVerb = new ActivityDesignerVerb(this, DesignerVerbGroup.General, DR.GetString("MoveRightDesc"), OnMoveBranch, OnStatusMoveBranch);
					activityDesignerVerb.Properties[DesignerUserDataKeys.MoveBranchKey] = false;
					designerVerbs.Add(activityDesignerVerb);
					foreach (ActivityDesignerVerb smartTagVerb in SmartTagVerbs)
					{
						designerVerbs.Add(smartTagVerb);
					}
				}
				return designerVerbs;
			}
		}

		protected virtual bool ShowSmartTag => false;

		protected virtual ReadOnlyCollection<ActivityDesignerVerb> SmartTagVerbs => new List<ActivityDesignerVerb>().AsReadOnly();

		protected virtual Rectangle SmartTagRectangle
		{
			get
			{
				Rectangle result = Rectangle.Empty;
				Rectangle imageRectangle = ImageRectangle;
				if (!imageRectangle.Size.IsEmpty)
				{
					result = imageRectangle;
				}
				return result;
			}
		}

		protected internal virtual ReadOnlyCollection<DesignerAction> DesignerActions
		{
			get
			{
				if (designerActions == null)
				{
					designerActions = new List<DesignerAction>();
					Activity activity = Activity;
					if (activity != null)
					{
						bool flag = IsCommentedActivity(activity);
						bool flag2 = GetService(typeof(WorkflowDesignerLoader)) is WorkflowDesignerLoader workflowDesignerLoader && workflowDesignerLoader.InDebugMode;
						if (activity.Enabled && !flag && !IsLocked && activity.Site != null && !flag2)
						{
							ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
							try
							{
								ValidationManager validationManager = new ValidationManager(Activity.Site, validateChildActivities: false);
								using (WorkflowCompilationContext.CreateScope(validationManager))
								{
									Activity rootActivity = Helpers.GetRootActivity(Activity);
									Validator[] validators = validationManager.GetValidators(activity.GetType());
									foreach (Validator validator in validators)
									{
										validationErrorCollection.AddRange(validator.Validate(validationManager, activity));
									}
								}
							}
							catch
							{
							}
							if (validationErrorCollection.Count > 0)
							{
								for (int j = 0; j < validationErrorCollection.Count; j++)
								{
									ValidationError validationError = validationErrorCollection[j];
									if (validationError == null || validationError.IsWarning)
									{
										continue;
									}
									DesignerAction designerAction = new DesignerAction(this, j, validationError.ErrorText, AmbientTheme.ConfigErrorImage);
									designerAction.PropertyName = validationError.PropertyName;
									foreach (DictionaryEntry userDatum in validationError.UserData)
									{
										designerAction.UserData[userDatum.Key] = userDatum.Value;
									}
									designerActions.Add(designerAction);
								}
							}
						}
					}
				}
				return designerActions.AsReadOnly();
			}
		}

		protected internal virtual ActivityDesignerGlyphCollection Glyphs
		{
			get
			{
				ActivityDesignerGlyphCollection activityDesignerGlyphCollection = new ActivityDesignerGlyphCollection();
				if (IsSelected)
				{
					if (IsPrimarySelection)
					{
						activityDesignerGlyphCollection.Add(PrimarySelectionGlyph.Default);
					}
					else
					{
						activityDesignerGlyphCollection.Add(NonPrimarySelectionGlyph.Default);
					}
				}
				bool flag = IsCommentedActivity(Activity);
				bool flag2 = GetService(typeof(WorkflowDesignerLoader)) is WorkflowDesignerLoader workflowDesignerLoader && workflowDesignerLoader.InDebugMode;
				if (WorkflowTheme.CurrentTheme.AmbientTheme.ShowConfigErrors && Activity.Enabled && !flag && !flag2 && DesignerActions.Count > 0)
				{
					activityDesignerGlyphCollection.Add(ConfigErrorGlyph.Default);
				}
				if (!Activity.Enabled && !flag)
				{
					activityDesignerGlyphCollection.Add(CommentGlyph.Default);
				}
				if (Helpers.IsActivityLocked(Activity))
				{
					activityDesignerGlyphCollection.Add(LockedActivityGlyph.Default);
				}
				if (SmartTagVisible && ShowSmartTag)
				{
					activityDesignerGlyphCollection.Add(smartTag);
				}
				return activityDesignerGlyphCollection;
			}
		}

		protected virtual Rectangle TextRectangle
		{
			get
			{
				if (string.IsNullOrEmpty(Text))
				{
					return Rectangle.Empty;
				}
				AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
				ActivityDesignerTheme designerTheme = DesignerTheme;
				Rectangle bounds = Bounds;
				Rectangle empty = Rectangle.Empty;
				empty.X = bounds.Left + ambientTheme.Margin.Width;
				empty.X += ((Image != null) ? (designerTheme.ImageSize.Width + ambientTheme.Margin.Width) : 0);
				empty.Y = bounds.Top + (bounds.Height - textSize.Height) / 2;
				empty.Size = textSize;
				return empty;
			}
		}

		protected virtual Rectangle ImageRectangle
		{
			get
			{
				if (Image == null)
				{
					return Rectangle.Empty;
				}
				AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
				ActivityDesignerTheme designerTheme = DesignerTheme;
				Rectangle bounds = Bounds;
				Rectangle empty = Rectangle.Empty;
				empty.X = bounds.Left + WorkflowTheme.CurrentTheme.AmbientTheme.Margin.Width;
				empty.Y = bounds.Top + (bounds.Height - DesignerTheme.ImageSize.Height) / 2;
				empty.Size = designerTheme.ImageSize;
				return empty;
			}
		}

		protected virtual CompositeActivityDesigner InvokingDesigner
		{
			get
			{
				return invokingDesigner;
			}
			set
			{
				invokingDesigner = value;
			}
		}

		protected virtual ReadOnlyCollection<WorkflowDesignerMessageFilter> MessageFilters
		{
			get
			{
				List<WorkflowDesignerMessageFilter> list = new List<WorkflowDesignerMessageFilter>();
				list.Add(new ConnectionManager());
				list.Add(new ResizingMessageFilter());
				list.Add(new DynamicActionMessageFilter());
				list.Add(new AutoScrollingMessageFilter());
				list.Add(new AutoExpandingMessageFilter());
				list.Add(new DragSelectionMessageFilter());
				list.Add(new FreeFormDragDropManager());
				return list.AsReadOnly();
			}
		}

		protected internal virtual bool EnableVisualResizing => false;

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
		internal string Name
		{
			get
			{
				if (Activity == null)
				{
					return null;
				}
				return Activity.Name;
			}
			set
			{
			}
		}

		internal virtual bool SupportsLayoutPersistence
		{
			get
			{
				bool result = false;
				if (GetService(typeof(IDesignerHost)) is IDesignerHost designerHost)
				{
					foreach (IComponent component in designerHost.Container.Components)
					{
						if (component is Activity activity && GetDesigner(activity) is FreeformActivityDesigner)
						{
							result = true;
							break;
						}
					}
				}
				return result;
			}
		}

		internal virtual WorkflowLayout SupportedLayout => new ActivityRootLayout(Activity.Site);

		internal SmartTag DesignerSmartTag => smartTag;

		internal DrawingStates DrawingState
		{
			get
			{
				return drawingState;
			}
			set
			{
				drawingState = value;
			}
		}

		internal Image StockImage
		{
			get
			{
				if (Activity == null)
				{
					return null;
				}
				Image image = DesignerTheme.DesignerImage;
				if (image == null)
				{
					image = ActivityToolboxItem.GetToolboxImage(Activity.GetType());
				}
				return image;
			}
		}

		internal virtual bool SmartTagVisible
		{
			get
			{
				if (ShowSmartTag && smartTag.ActiveDesigner != null)
				{
					return true;
				}
				return smartTagVisible;
			}
			set
			{
				if (smartTagVisible != value)
				{
					smartTagVisible = value;
					OnSmartTagVisibilityChanged(smartTagVisible);
				}
			}
		}

		private PropertyDescriptor[] EventHandlerProperties
		{
			get
			{
				List<PropertyDescriptor> list = new List<PropertyDescriptor>();
				if (Activity.Site != null)
				{
					foreach (PropertyDescriptor propertiesForEvent in PropertyDescriptorFilter.GetPropertiesForEvents(Activity.Site, Activity))
					{
						list.Add(propertiesForEvent);
					}
				}
				return list.ToArray();
			}
		}

		private PropertyDescriptor[] BindableProperties
		{
			get
			{
				List<PropertyDescriptor> list = new List<PropertyDescriptor>();
				if (!Helpers.IsActivityLocked(Activity))
				{
					PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(Activity, new Attribute[1]
					{
						new BrowsableAttribute(browsable: true)
					});
					if (properties != null)
					{
						foreach (PropertyDescriptor item in properties)
						{
							if (item.Converter is ActivityBindTypeConverter)
							{
								list.Add(item);
							}
						}
					}
				}
				return list.ToArray();
			}
		}

		private string InfoTipTitle
		{
			get
			{
				string empty = string.Empty;
				if (Activity.Parent == null)
				{
					return Activity.GetType().Name;
				}
				string text = ((Activity.Name.Length > 25) ? (Activity.Name.Substring(0, 25) + "...") : Activity.Name);
				return DR.GetString("InfoTipTitle", Activity.GetType().Name, text);
			}
		}

		private string InfoTipText
		{
			get
			{
				string text = ((!string.IsNullOrEmpty(Activity.Description)) ? Activity.Description : GetActivityDescription(Activity.GetType()));
				text = ((text.Length > 80) ? (text.Substring(0, 80) + "...") : text);
				if (RulesText.Length > 0)
				{
					text = text + "\n\n" + RulesText;
				}
				return text;
			}
		}

		private string RulesText
		{
			get
			{
				if (rulesText == null)
				{
					rulesText = string.Empty;
					IDictionary<string, string> declarativeRules = DesignerHelpers.GetDeclarativeRules(Activity);
					if (declarativeRules.Count > 0)
					{
						rulesText = DR.GetString("Rules");
						int num = 315;
						foreach (KeyValuePair<string, string> item in declarativeRules)
						{
							rulesText += "\n";
							string key = item.Key;
							key = ((key.Length > 25) ? (key.Substring(0, 25) + "...") : key);
							string value = item.Value;
							value = ((value.Length > 80) ? (value.Substring(0, 80) + "...") : value);
							if (value.Length == 0)
							{
								value = DR.GetString("Empty");
							}
							rulesText += string.Format(CultureInfo.CurrentCulture, "{0}: {1}", new object[2] { key, value });
							if (rulesText.Length > num)
							{
								break;
							}
						}
						if (rulesText.Length > num)
						{
							rulesText = rulesText + "\n\n" + DR.GetString("More");
						}
					}
				}
				return rulesText;
			}
		}

		IComponent IDesigner.Component => activity;

		DesignerVerbCollection IDesigner.Verbs
		{
			get
			{
				ActivityDesignerVerbCollection activityDesignerVerbCollection = new ActivityDesignerVerbCollection();
				activityDesignerVerbCollection.AddRange(Verbs);
				if (GetService(typeof(IDesignerVerbProviderService)) is IDesignerVerbProviderService designerVerbProviderService)
				{
					foreach (IDesignerVerbProvider verbProvider in designerVerbProviderService.VerbProviders)
					{
						activityDesignerVerbCollection.AddRange(verbProvider.GetVerbs(this));
					}
				}
				return activityDesignerVerbCollection.SafeCollection;
			}
		}

		ViewTechnology[] IRootDesigner.SupportedTechnologies => new ViewTechnology[1] { ViewTechnology.Default };

		CompositeActivityDesigner IWorkflowRootDesigner.InvokingDesigner
		{
			get
			{
				return InvokingDesigner;
			}
			set
			{
				InvokingDesigner = value;
			}
		}

		ReadOnlyCollection<WorkflowDesignerMessageFilter> IWorkflowRootDesigner.MessageFilters => MessageFilters;

		bool IWorkflowRootDesigner.SupportsLayoutPersistence => SupportsLayoutPersistence;

		~ActivityDesigner()
		{
			Dispose(disposing: false);
		}

		private void OnMoveBranch(object sender, EventArgs e)
		{
			if (sender is ActivityDesignerVerb activityDesignerVerb)
			{
				CompositeActivityDesigner.MoveDesigners(this, (bool)activityDesignerVerb.Properties[DesignerUserDataKeys.MoveBranchKey]);
			}
		}

		private void OnStatusMoveBranch(object sender, EventArgs e)
		{
			if (!(sender is ActivityDesignerVerb activityDesignerVerb))
			{
				return;
			}
			bool enabled = false;
			CompositeActivityDesigner parentDesigner = ParentDesigner;
			if (!IsLocked && parentDesigner != null)
			{
				List<Activity> list = new List<Activity>();
				foreach (Activity activity in ((CompositeActivity)parentDesigner.Activity).Activities)
				{
					if (!Helpers.IsAlternateFlowActivity(activity))
					{
						list.Add(activity);
					}
				}
				bool flag = (bool)activityDesignerVerb.Properties[DesignerUserDataKeys.MoveBranchKey];
				int num = list.IndexOf(Activity);
				int num2 = ((num > 0) ? (num - 1) : (-1));
				enabled = num >= 0 && ((flag && num > 0 && num - num2 > 0) || (!flag && num < list.Count - 1));
			}
			activityDesignerVerb.Visible = parentDesigner is ParallelActivityDesigner || (parentDesigner is ActivityPreviewDesigner && !Helpers.IsAlternateFlowActivity(Activity));
			activityDesignerVerb.Enabled = enabled;
		}

		public static ActivityDesigner GetRootDesigner(IServiceProvider serviceProvider)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			if (!(serviceProvider.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
			{
				return null;
			}
			return GetDesigner(designerHost.RootComponent as Activity);
		}

		public static bool IsCommentedActivity(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			bool flag = false;
			CompositeActivity parent = activity.Parent;
			while (parent != null && !flag)
			{
				flag = parent != null && !parent.Enabled;
				parent = parent.Parent;
			}
			return flag;
		}

		public virtual bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner)
		{
			if (parentActivityDesigner == null)
			{
				throw new ArgumentNullException("parentActivityDesigner");
			}
			return true;
		}

		public virtual HitTestInfo HitTest(Point point)
		{
			HitTestInfo hitTestInfo = HitTestInfo.Nowhere;
			if (ParentDesigner is FreeformActivityDesigner || (ParentDesigner == null && this is FreeformActivityDesigner))
			{
				ReadOnlyCollection<ConnectionPoint> connectionPoints = GetConnectionPoints(DesignerEdges.All);
				for (int i = 0; i < connectionPoints.Count; i++)
				{
					if (connectionPoints[i].Bounds.Contains(point))
					{
						hitTestInfo = new ConnectionPointHitTestInfo(connectionPoints[i]);
						break;
					}
				}
			}
			Rectangle bounds = Bounds;
			if (bounds.Contains(point) && hitTestInfo == HitTestInfo.Nowhere)
			{
				HitTestLocations hitTestLocations = (bounds.Contains(point) ? HitTestLocations.Designer : HitTestLocations.None);
				hitTestLocations |= (new Rectangle(bounds.Left, bounds.Top, bounds.Left - bounds.Left, bounds.Height).Contains(point) ? HitTestLocations.Left : hitTestLocations);
				hitTestLocations |= (new Rectangle(bounds.Left, bounds.Top, bounds.Width, bounds.Height - bounds.Height).Contains(point) ? HitTestLocations.Top : hitTestLocations);
				hitTestLocations |= (new Rectangle(bounds.Right, bounds.Top, bounds.Width - bounds.Width, bounds.Height).Contains(point) ? HitTestLocations.Right : hitTestLocations);
				hitTestLocations |= (new Rectangle(bounds.Left, bounds.Bottom, bounds.Width, bounds.Bottom - bounds.Bottom).Contains(point) ? HitTestLocations.Bottom : hitTestLocations);
				hitTestInfo = new HitTestInfo(this, hitTestLocations);
			}
			return hitTestInfo;
		}

		public void EnsureVisible()
		{
			ParentView?.EnsureVisible(Activity);
		}

		public virtual ReadOnlyCollection<ConnectionPoint> GetConnectionPoints(DesignerEdges edges)
		{
			List<ConnectionPoint> list = new List<ConnectionPoint>();
			if ((edges & DesignerEdges.Left) > DesignerEdges.None)
			{
				for (int i = 0; i < GetConnections(DesignerEdges.Left).Count; i++)
				{
					list.Add(new ConnectionPoint(this, DesignerEdges.Left, i));
				}
			}
			if ((edges & DesignerEdges.Right) > DesignerEdges.None)
			{
				for (int j = 0; j < GetConnections(DesignerEdges.Right).Count; j++)
				{
					list.Add(new ConnectionPoint(this, DesignerEdges.Right, j));
				}
			}
			if ((edges & DesignerEdges.Top) > DesignerEdges.None)
			{
				for (int k = 0; k < GetConnections(DesignerEdges.Top).Count; k++)
				{
					list.Add(new ConnectionPoint(this, DesignerEdges.Top, k));
				}
			}
			if ((edges & DesignerEdges.Bottom) > DesignerEdges.None)
			{
				for (int l = 0; l < GetConnections(DesignerEdges.Bottom).Count; l++)
				{
					list.Add(new ConnectionPoint(this, DesignerEdges.Bottom, l));
				}
			}
			return list.AsReadOnly();
		}

		public void Invalidate()
		{
			WorkflowView parentView = ParentView;
			if (parentView == null)
			{
				return;
			}
			parentView.InvalidateLogicalRectangle(Bounds);
			if (!(GetService(typeof(IDesignerGlyphProviderService)) is GlyphManager glyphManager))
			{
				return;
			}
			foreach (DesignerGlyph designerGlyph in glyphManager.GetDesignerGlyphs(this))
			{
				parentView.InvalidateLogicalRectangle(designerGlyph.GetBounds(this, activated: false));
			}
		}

		public void Invalidate(Rectangle rectangle)
		{
			WorkflowView parentView = ParentView;
			if (parentView != null)
			{
				rectangle = Rectangle.Intersect(Bounds, rectangle);
				parentView.InvalidateLogicalRectangle(rectangle);
			}
		}

		public Image GetPreviewImage(Graphics compatibleGraphics)
		{
			if (compatibleGraphics == null)
			{
				throw new ArgumentNullException("compatibleGraphics");
			}
			if (Activity.Site == null)
			{
				((IWorkflowDesignerMessageSink)this).OnLayoutSize(compatibleGraphics);
				((IWorkflowDesignerMessageSink)this).OnLayoutPosition(compatibleGraphics);
			}
			AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
			Bitmap bitmap = new Bitmap(Size.Width + 4 * ambientTheme.Margin.Width, Size.Height + 4 * ambientTheme.Margin.Height, PixelFormat.Format32bppArgb);
			GlyphManager glyphManager = ((Activity != null && Activity.Site != null) ? (GetService(typeof(IDesignerGlyphProviderService)) as GlyphManager) : null);
			using Graphics graphics = Graphics.FromImage(bitmap);
			using Brush brush = new SolidBrush(Color.FromArgb(0, 255, 0, 255));
			graphics.FillRectangle(brush, 0, 0, bitmap.Width, bitmap.Height);
			graphics.TranslateTransform(-Location.X + 2 * ambientTheme.Margin.Width, -Location.Y + 2 * ambientTheme.Margin.Height);
			Rectangle bounds = Bounds;
			Rectangle viewPort = new Rectangle(bounds.Location, new Size(bounds.Width + 1, bounds.Height + 1));
			Queue<ActivityDesigner> queue = new Queue<ActivityDesigner>();
			queue.Enqueue(this);
			while (queue.Count > 0)
			{
				ActivityDesigner activityDesigner = queue.Dequeue();
				activityDesigner.OnPaint(new ActivityDesignerPaintEventArgs(graphics, activityDesigner.Bounds, viewPort, activityDesigner.DesignerTheme));
				ActivityDesignerGlyphCollection activityDesignerGlyphCollection = ((glyphManager != null) ? glyphManager.GetDesignerGlyphs(activityDesigner) : Glyphs);
				foreach (DesignerGlyph item in activityDesignerGlyphCollection)
				{
					if (!(item is SelectionGlyph))
					{
						item.Draw(graphics, activityDesigner);
					}
				}
				if (!(activityDesigner is CompositeActivityDesigner compositeActivityDesigner))
				{
					continue;
				}
				foreach (ActivityDesigner containedDesigner in compositeActivityDesigner.ContainedDesigners)
				{
					if (containedDesigner != null && compositeActivityDesigner.Expanded && compositeActivityDesigner.IsContainedDesignerVisible(containedDesigner))
					{
						queue.Enqueue(containedDesigner);
					}
				}
			}
			return bitmap;
		}

		protected virtual void Initialize(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (IsRootDesigner)
			{
				IDesignerHost designerHost = (IDesignerHost)GetService(typeof(IDesignerHost));
				if (designerHost != null && InvokingDesigner == null)
				{
					designerHost.LoadComplete += OnLoadComplete;
				}
				if (GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
				{
					componentChangeService.ComponentChanged += OnComponentChanged;
					componentChangeService.ComponentRename += OnComponentRenamed;
				}
			}
			Text = ((!string.IsNullOrEmpty(activity.Name)) ? activity.Name : activity.GetType().Name);
			Image = StockImage;
			RefreshDesignerVerbs();
			if (IsLocked)
			{
				DesignerHelpers.MakePropertiesReadOnly(activity.Site, activity);
			}
		}

		protected virtual void Dispose(bool disposing)
		{
			if (disposing && IsRootDesigner)
			{
				if (workflowView != null)
				{
					workflowView.Dispose();
					workflowView = null;
				}
				if (GetService(typeof(IDesignerHost)) is IDesignerHost designerHost && InvokingDesigner == null && Activity == designerHost.RootComponent)
				{
					designerHost.LoadComplete -= OnLoadComplete;
				}
				if (GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
				{
					componentChangeService.ComponentChanged -= OnComponentChanged;
					componentChangeService.ComponentRename -= OnComponentRenamed;
				}
			}
		}

		protected internal virtual ReadOnlyCollection<Point> GetConnections(DesignerEdges edges)
		{
			Rectangle bounds = Bounds;
			List<Point> list = new List<Point>();
			if ((edges & DesignerEdges.Left) > DesignerEdges.None)
			{
				list.Add(new Point(bounds.Left, bounds.Top + bounds.Height / 2));
			}
			if ((edges & DesignerEdges.Top) > DesignerEdges.None)
			{
				list.Add(new Point(bounds.Left + bounds.Width / 2, bounds.Top));
			}
			if ((edges & DesignerEdges.Right) > DesignerEdges.None)
			{
				list.Add(new Point(bounds.Right, bounds.Top + bounds.Height / 2));
			}
			if ((edges & DesignerEdges.Bottom) > DesignerEdges.None)
			{
				list.Add(new Point(bounds.Left + bounds.Width / 2, bounds.Bottom));
			}
			return list.AsReadOnly();
		}

		protected virtual void DoDefaultAction()
		{
			if (IsLocked || !(TypeDescriptor.GetAttributes(Activity)[typeof(DefaultEventAttribute)] is DefaultEventAttribute { Name: not null } defaultEventAttribute) || defaultEventAttribute.Name.Length == 0 || !(TypeDescriptor.GetProperties(Activity)[defaultEventAttribute.Name] is ActivityBindPropertyDescriptor activityBindPropertyDescriptor))
			{
				return;
			}
			object value = activityBindPropertyDescriptor.GetValue(Activity);
			if (value is ActivityBind)
			{
				return;
			}
			IEventBindingService eventBindingService = (IEventBindingService)GetService(typeof(IEventBindingService));
			if (eventBindingService == null)
			{
				return;
			}
			EventDescriptor @event = eventBindingService.GetEvent(activityBindPropertyDescriptor.RealPropertyDescriptor);
			if (@event != null)
			{
				string value2 = activityBindPropertyDescriptor.RealPropertyDescriptor.GetValue(Activity) as string;
				if (string.IsNullOrEmpty(value2))
				{
					value2 = DesignerHelpers.CreateUniqueMethodName(Activity, @event.Name, @event.EventType);
				}
				activityBindPropertyDescriptor.SetValue(Activity, value2);
				eventBindingService.ShowCode(Activity, @event);
			}
		}

		protected virtual void PreFilterAttributes(IDictionary attributes)
		{
			if (attributes == null)
			{
				throw new ArgumentNullException("attributes");
			}
		}

		protected virtual void PreFilterProperties(IDictionary properties)
		{
			if (properties == null)
			{
				throw new ArgumentNullException("properties");
			}
		}

		protected virtual void PreFilterEvents(IDictionary events)
		{
			if (events == null)
			{
				throw new ArgumentNullException("events");
			}
		}

		protected virtual void PostFilterAttributes(IDictionary attributes)
		{
			if (attributes == null)
			{
				throw new ArgumentNullException("attributes");
			}
		}

		protected virtual void PostFilterProperties(IDictionary properties)
		{
			if (properties == null)
			{
				throw new ArgumentNullException("properties");
			}
			StringCollection stringCollection = new StringCollection();
			foreach (DictionaryEntry property in properties)
			{
				PropertyDescriptor propertyDescriptor = property.Value as PropertyDescriptor;
				if (propertyDescriptor.Attributes[typeof(ExtenderProvidedPropertyAttribute)] is ExtenderProvidedPropertyAttribute { Provider: not null } extenderProvidedPropertyAttribute && !extenderProvidedPropertyAttribute.Provider.CanExtend(Activity))
				{
					stringCollection.Add(property.Key as string);
				}
			}
			StringEnumerator enumerator = stringCollection.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					string current = enumerator.Current;
					properties.Remove(current);
				}
			}
			finally
			{
				if (enumerator is IDisposable disposable)
				{
					disposable.Dispose();
				}
			}
			PropertyDescriptorFilter.FilterProperties(Activity.Site, Activity, properties);
		}

		protected virtual void PostFilterEvents(IDictionary events)
		{
			if (events == null)
			{
				throw new ArgumentNullException("events");
			}
		}

		protected object GetService(Type serviceType)
		{
			if (serviceType == null)
			{
				throw new ArgumentNullException("serviceType");
			}
			if (activity != null && activity.Site != null)
			{
				return activity.Site.GetService(serviceType);
			}
			return null;
		}

		protected virtual void OnMouseDragBegin(Point initialDragPoint, MouseEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnMouseDragMove(MouseEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnMouseDragEnd()
		{
		}

		protected virtual void OnMouseEnter(MouseEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (IsVisible)
			{
				if (ShowSmartTag)
				{
					SmartTagVisible = true;
				}
				ShowInfoTip(InfoTipTitle, InfoTipText);
			}
		}

		protected virtual void OnMouseDown(MouseEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnMouseMove(MouseEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (IsVisible)
			{
				ShowInfoTip(InfoTipTitle, InfoTipText);
			}
		}

		protected virtual void OnMouseHover(MouseEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (IsVisible)
			{
				ShowInfoTip(InfoTipTitle, InfoTipText);
			}
		}

		protected virtual void OnMouseUp(MouseEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnMouseDoubleClick(MouseEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnMouseLeave()
		{
			if (ShowSmartTag)
			{
				SmartTagVisible = false;
			}
			ShowInfoTip(string.Empty);
		}

		protected virtual void OnMouseCaptureChanged()
		{
		}

		protected virtual void OnDragEnter(ActivityDragEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnDragOver(ActivityDragEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnDragLeave()
		{
		}

		protected virtual void OnDragDrop(ActivityDragEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnGiveFeedback(GiveFeedbackEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnQueryContinueDrag(QueryContinueDragEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnKeyDown(KeyEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnKeyUp(KeyEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnScroll(ScrollBar sender, int value)
		{
		}

		protected virtual void OnProcessMessage(System.Windows.Forms.Message message)
		{
		}

		protected internal virtual void RefreshDesignerActions()
		{
			designerActions = null;
		}

		protected internal virtual void OnExecuteDesignerAction(DesignerAction designerAction)
		{
			if (designerAction == null)
			{
				throw new ArgumentNullException("designerAction");
			}
			if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				selectionService.SetSelectedComponents(new object[1] { Activity }, SelectionTypes.Replace);
			}
			string propertyName = designerAction.PropertyName;
			if (propertyName != null && propertyName.Length > 0 && GetService(typeof(IExtendedUIService)) is IExtendedUIService extendedUIService)
			{
				extendedUIService.NavigateToProperty(propertyName);
			}
		}

		protected virtual void OnSmartTagVisibilityChanged(bool visible)
		{
			Rectangle rectangle = smartTag.GetBounds(this, activated: true);
			Rectangle textRectangle = TextRectangle;
			if (!textRectangle.Size.IsEmpty)
			{
				rectangle = Rectangle.Union(textRectangle, rectangle);
			}
			Invalidate(rectangle);
		}

		protected virtual void OnShowSmartTagVerbs(Point smartTagPoint)
		{
			ActivityDesignerVerb[] array = null;
			SmartTagVerbs.CopyTo(array, 0);
			DesignerHelpers.ShowDesignerVerbs(this, PointToScreen(smartTagPoint), array);
		}

		protected virtual void OnThemeChange(ActivityDesignerTheme newTheme)
		{
			if (newTheme == null)
			{
				throw new ArgumentNullException("newTheme");
			}
			Image = StockImage;
		}

		protected virtual void SaveViewState(BinaryWriter writer)
		{
			if (writer == null)
			{
				throw new ArgumentNullException("writer");
			}
		}

		protected virtual void LoadViewState(BinaryReader reader)
		{
			if (reader == null)
			{
				throw new ArgumentNullException("reader");
			}
		}

		protected virtual bool IsSupportedActivityType(Type activityType)
		{
			return true;
		}

		protected virtual WorkflowView CreateView(ViewTechnology viewTechnology)
		{
			WorkflowView workflowView = new WorkflowView(Activity.Site);
			workflowView.ShowToolContainer = true;
			return workflowView;
		}

		protected void RefreshDesignerVerbs()
		{
			if (Activity == null || Activity.Site == null)
			{
				return;
			}
			DesignerVerbCollection verbs = ((IDesigner)this).Verbs;
			if (verbs == null)
			{
				return;
			}
			foreach (DesignerVerb item in verbs)
			{
				int oleStatus = item.OleStatus;
				oleStatus = 0;
			}
		}

		protected virtual void OnPaint(ActivityDesignerPaintEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			ActivityDesignerPaint.DrawDesignerBackground(e.Graphics, this);
			if (!string.IsNullOrEmpty(Text) && !TextRectangle.Size.IsEmpty)
			{
				Font font = (SmartTagVisible ? e.DesignerTheme.BoldFont : e.DesignerTheme.Font);
				ActivityDesignerPaint.DrawText(e.Graphics, font, Text, TextRectangle, StringAlignment.Near, e.AmbientTheme.TextQuality, e.DesignerTheme.ForegroundBrush);
			}
			if (Image != null && !ImageRectangle.Size.IsEmpty)
			{
				ActivityDesignerPaint.DrawImage(e.Graphics, Image, ImageRectangle, DesignerContentAlignment.Fill);
			}
		}

		protected virtual void OnLayoutPosition(ActivityDesignerLayoutEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual Size OnLayoutSize(ActivityDesignerLayoutEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			isVisible = GetVisible();
			if (!string.IsNullOrEmpty(Text))
			{
				Size size = ActivityDesignerPaint.MeasureString(e.Graphics, e.DesignerTheme.BoldFont, Text, StringAlignment.Center, Size.Empty);
				Size size2 = size;
				size2.Width /= Text.Length;
				size2.Width += ((size2.Width % Text.Length > 0) ? 1 : 0);
				size2.Width *= Math.Min(Text.Length, 7);
				textSize.Width = MinimumSize.Width - 2 * e.AmbientTheme.Margin.Width;
				if (Image != null)
				{
					textSize.Width -= e.DesignerTheme.ImageSize.Width + e.AmbientTheme.Margin.Width;
				}
				textSize.Width = Math.Min(textSize.Width, size.Width);
				textSize.Width = Math.Max(textSize.Width, size2.Width);
				textSize.Height = size2.Height;
				int num = size.Width / textSize.Width;
				num += ((size.Width % textSize.Width > 0) ? 1 : 0);
				num = Math.Min(num, 2);
				textSize.Height *= num;
			}
			else
			{
				textSize = Size.Empty;
			}
			Size empty = Size.Empty;
			empty.Width = 2 * e.AmbientTheme.Margin.Width + ((Image != null) ? (e.DesignerTheme.ImageSize.Width + e.AmbientTheme.Margin.Width) : 0) + textSize.Width;
			empty.Height = e.AmbientTheme.Margin.Height + Math.Max(e.DesignerTheme.ImageSize.Height, textSize.Height) + e.AmbientTheme.Margin.Height;
			return empty;
		}

		protected virtual void OnBeginResizing(ActivityDesignerResizeEventArgs e)
		{
		}

		protected virtual void OnResizing(ActivityDesignerResizeEventArgs e)
		{
			FreeformActivityDesigner.SetDesignerBounds(this, e.Bounds);
		}

		protected virtual void OnEndResizing()
		{
			PerformLayout();
		}

		protected virtual bool CanConnect(ConnectionPoint source, ConnectionPoint target)
		{
			return true;
		}

		protected virtual void OnConnected(ConnectionPoint source, ConnectionPoint target)
		{
		}

		protected virtual void OnActivityChanged(ActivityChangedEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (e.Member != null && e.Member.Name != null && e.Member.Name.Equals("Name"))
			{
				Text = Activity.Name;
			}
			if (!(e.OldValue is ActivityCollectionChangeEventArgs))
			{
				RefreshDesignerVerbs();
			}
			if (GetService(typeof(IUIService)) is IUIService iUIService)
			{
				iUIService.SetUIDirty();
			}
			rulesText = null;
		}

		protected void ShowInfoTip(string title, string infoTip)
		{
			ParentView?.ShowInfoTip(title, infoTip);
		}

		protected void ShowInfoTip(string infoTip)
		{
			ParentView?.ShowInfoTip(infoTip);
		}

		protected void ShowInPlaceTip(string infoTip, Rectangle rectangle)
		{
			WorkflowView parentView = ParentView;
			parentView?.ShowInPlaceToolTip(infoTip, parentView.LogicalRectangleToClient(rectangle));
		}

		protected void PerformLayout()
		{
			ParentView?.PerformLayout(immediateUpdate: false);
		}

		protected Point PointToScreen(Point point)
		{
			return ParentView?.LogicalPointToScreen(point) ?? point;
		}

		protected Point PointToLogical(Point point)
		{
			return ParentView?.ScreenPointToLogical(point) ?? point;
		}

		protected Rectangle RectangleToScreen(Rectangle rectangle)
		{
			WorkflowView parentView = ParentView;
			if (parentView != null)
			{
				return new Rectangle(PointToScreen(rectangle.Location), parentView.LogicalSizeToClient(rectangle.Size));
			}
			return rectangle;
		}

		internal Rectangle InternalRectangleToScreen(Rectangle rectangle)
		{
			return RectangleToScreen(rectangle);
		}

		protected Rectangle RectangleToLogical(Rectangle rectangle)
		{
			WorkflowView parentView = ParentView;
			if (parentView != null)
			{
				return new Rectangle(PointToLogical(rectangle.Location), parentView.ClientSizeToLogical(rectangle.Size));
			}
			return rectangle;
		}

		internal static ActivityDesigner GetSafeRootDesigner(IServiceProvider serviceProvider)
		{
			if (serviceProvider == null)
			{
				return null;
			}
			return GetRootDesigner(serviceProvider);
		}

		internal static ActivityDesigner GetDesigner(Activity activity)
		{
			ActivityDesigner result = null;
			if (activity != null && activity.Site != null && activity.Site.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost)
			{
				result = designerHost.GetDesigner(activity) as ActivityDesigner;
			}
			return result;
		}

		internal static string GetActivityDescription(Type activityType)
		{
			if (activityType == null)
			{
				return null;
			}
			object[] customAttributes = activityType.GetCustomAttributes(typeof(DescriptionAttribute), inherit: false);
			if (customAttributes != null && customAttributes.GetLength(0) == 0)
			{
				customAttributes = activityType.GetCustomAttributes(typeof(DescriptionAttribute), inherit: true);
			}
			DescriptionAttribute descriptionAttribute = ((customAttributes != null && customAttributes.GetLength(0) > 0) ? (customAttributes[0] as DescriptionAttribute) : null);
			if (descriptionAttribute == null)
			{
				return string.Empty;
			}
			return descriptionAttribute.Description;
		}

		internal static CompositeActivityDesigner GetParentDesigner(object obj)
		{
			CompositeActivityDesigner result = null;
			if (obj is HitTestInfo)
			{
				result = ((HitTestInfo)obj).AssociatedDesigner as CompositeActivityDesigner;
			}
			else if (obj is Activity)
			{
				ActivityDesigner designer = GetDesigner(obj as Activity);
				if (designer != null)
				{
					result = designer.ParentDesigner;
				}
			}
			return result;
		}

		internal static ActivityDesigner CreateTransientDesigner(Activity activity)
		{
			ActivityDesigner activityDesigner = new ActivityDesigner();
			ActivityDesignerTheme designerTheme = activityDesigner.DesignerTheme;
			using Bitmap bitmap = new Bitmap(designerTheme.Size.Width, designerTheme.Size.Height, PixelFormat.Format32bppArgb);
			using Graphics graphics = Graphics.FromImage(bitmap);
			activityDesigner.Image = ActivityToolboxItem.GetToolboxImage(activity.GetType());
			activityDesigner.Location = new Point(-1, -1);
			activityDesigner.Location = Point.Empty;
			activityDesigner.Size = activityDesigner.OnLayoutSize(new ActivityDesignerLayoutEventArgs(graphics, activityDesigner.DesignerTheme));
			return activityDesigner;
		}

		internal static Type GetDesignerType(IServiceProvider serviceProvider, Type activityType, Type designerBaseType)
		{
			Type type = null;
			AttributeCollection attributes = TypeDescriptor.GetAttributes(activityType);
			foreach (Attribute item in attributes)
			{
				if (item is DesignerAttribute designerAttribute && (designerBaseType == null || designerAttribute.DesignerBaseTypeName == designerBaseType.AssemblyQualifiedName))
				{
					int num = designerAttribute.DesignerTypeName.IndexOf(',');
					string name = ((num >= 0) ? designerAttribute.DesignerTypeName.Substring(0, num) : designerAttribute.DesignerTypeName);
					type = activityType.Assembly.GetType(name);
					if (type == null && serviceProvider != null)
					{
						type = ((serviceProvider.GetService(typeof(ITypeResolutionService)) is ITypeResolutionService typeResolutionService) ? typeResolutionService.GetType(designerAttribute.DesignerTypeName) : null);
					}
					if (type == null)
					{
						type = Type.GetType(designerAttribute.DesignerTypeName);
					}
					break;
				}
			}
			return type;
		}

		internal static ActivityDesigner CreateDesigner(IServiceProvider serviceProvider, Activity activity)
		{
			IDesigner designer = null;
			Type designerType = GetDesignerType(serviceProvider, activity.GetType(), typeof(IDesigner));
			if (designerType == null)
			{
				designerType = GetDesignerType(serviceProvider, activity.GetType(), null);
			}
			if (designerType != null)
			{
				try
				{
					designer = Activator.CreateInstance(designerType, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance, null, null, null) as IDesigner;
					designer.Initialize(activity);
				}
				catch
				{
				}
			}
			return designer as ActivityDesigner;
		}

		private bool GetVisible()
		{
			Activity activity = Activity;
			if (activity == null)
			{
				return false;
			}
			while (activity != null)
			{
				ActivityDesigner designer = GetDesigner(activity);
				if (designer != null)
				{
					CompositeActivityDesigner parentDesigner = designer.ParentDesigner;
					if (parentDesigner == null && designer != null)
					{
						return true;
					}
					if (parentDesigner == null || !parentDesigner.Expanded || !parentDesigner.IsContainedDesignerVisible(designer))
					{
						return false;
					}
					activity = parentDesigner.Activity;
				}
				else
				{
					activity = null;
				}
			}
			return true;
		}

		private void OnGenerateEventHandler(object sender, EventArgs e)
		{
			if (!(sender is DesignerVerb))
			{
				return;
			}
			Activity rootActivity = Helpers.GetRootActivity(Activity);
			if (rootActivity == null)
			{
				return;
			}
			PropertyDescriptor propertyDescriptor = null;
			PropertyDescriptor[] eventHandlerProperties = EventHandlerProperties;
			PropertyDescriptor[] array = eventHandlerProperties;
			foreach (PropertyDescriptor propertyDescriptor2 in array)
			{
				Type baseType = PropertyDescriptorUtils.GetBaseType(propertyDescriptor2, Activity, Activity.Site);
				if (baseType != null)
				{
					object obj = propertyDescriptor2.GetValue(Activity);
					if (!(obj is string) || string.IsNullOrEmpty((string)obj))
					{
						obj = DesignerHelpers.CreateUniqueMethodName(Activity, propertyDescriptor2.Name, baseType);
					}
					propertyDescriptor2.SetValue(Activity, obj);
					propertyDescriptor = propertyDescriptor2;
				}
			}
			if (GetService(typeof(IEventBindingService)) is IEventBindingService eventBindingService)
			{
				if (propertyDescriptor is DynamicPropertyDescriptor)
				{
					propertyDescriptor = ((DynamicPropertyDescriptor)propertyDescriptor).RealPropertyDescriptor;
				}
				EventDescriptor @event = eventBindingService.GetEvent(propertyDescriptor);
				if (@event != null)
				{
					eventBindingService.ShowCode(Activity, @event);
				}
				else
				{
					eventBindingService.ShowCode();
				}
			}
		}

		private void OnPromoteBindings(object sender, EventArgs e)
		{
			if (!(sender is DesignerVerb))
			{
				return;
			}
			IServiceProvider serviceProvider = GetService(typeof(DesignSurface)) as IServiceProvider;
			List<CustomProperty> customProperties = CustomActivityDesignerHelper.GetCustomProperties(serviceProvider);
			if (customProperties == null)
			{
				return;
			}
			Type customActivityType = CustomActivityDesignerHelper.GetCustomActivityType(serviceProvider);
			List<string> list = new List<string>();
			MemberInfo[] members = customActivityType.GetMembers(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
			foreach (MemberInfo memberInfo in members)
			{
				if (!list.Contains(memberInfo.Name))
				{
					list.Add(memberInfo.Name);
				}
			}
			PropertyDescriptor[] bindableProperties = BindableProperties;
			Dictionary<PropertyDescriptor, ActivityBind> dictionary = new Dictionary<PropertyDescriptor, ActivityBind>();
			PropertyDescriptor[] array = bindableProperties;
			foreach (PropertyDescriptor propertyDescriptor in array)
			{
				ActivityBind activityBind = propertyDescriptor.GetValue(Activity) as ActivityBind;
				if (activityBind == null)
				{
					CustomProperty customProperty = CustomProperty.CreateCustomProperty(Activity.Site, DesignerHelpers.GenerateUniqueIdentifier(Activity.Site, Activity.Name + "_" + propertyDescriptor.Name, list.ToArray()), propertyDescriptor, Activity);
					customProperties.Add(customProperty);
					list.Add(customProperty.Name);
					dictionary.Add(propertyDescriptor, new ActivityBind(ActivityBind.GetRelativePathExpression(Helpers.GetRootActivity(Activity), Activity), customProperty.Name));
				}
			}
			CustomActivityDesignerHelper.SetCustomProperties(customProperties, serviceProvider);
			foreach (PropertyDescriptor key in dictionary.Keys)
			{
				key.SetValue(Activity, dictionary[key]);
			}
		}

		private void OnBindProperty(object sender, EventArgs e)
		{
			if (GetService(typeof(IExtendedUIService)) is IExtendedUIService extendedUIService)
			{
				BindUITypeEditor.EditValue(extendedUIService.GetSelectedPropertyContext());
			}
		}

		private void OnGenerateEventHandlerStatusUpdate(object sender, EventArgs e)
		{
			if (!(sender is DesignerVerb designerVerb))
			{
				return;
			}
			bool enabled = false;
			PropertyDescriptor[] eventHandlerProperties = EventHandlerProperties;
			PropertyDescriptor[] array = eventHandlerProperties;
			foreach (PropertyDescriptor propertyDescriptor in array)
			{
				object value = propertyDescriptor.GetValue(Activity);
				if (value == null)
				{
					enabled = true;
					break;
				}
			}
			designerVerb.Enabled = enabled;
		}

		private void OnPromoteBindingsStatusUpdate(object sender, EventArgs e)
		{
			if (!(sender is DesignerVerb designerVerb))
			{
				return;
			}
			bool enabled = false;
			PropertyDescriptor[] bindableProperties = BindableProperties;
			PropertyDescriptor[] array = bindableProperties;
			foreach (PropertyDescriptor propertyDescriptor in array)
			{
				if (!(propertyDescriptor.GetValue(Activity) is ActivityBind))
				{
					enabled = true;
					break;
				}
			}
			designerVerb.Enabled = enabled;
		}

		private void OnBindPropertyStatusUpdate(object sender, EventArgs e)
		{
			if (sender is DesignerVerb designerVerb)
			{
				bool flag = false;
				string text = null;
				if (GetService(typeof(IExtendedUIService)) is IExtendedUIService extendedUIService)
				{
					ITypeDescriptorContext selectedPropertyContext = extendedUIService.GetSelectedPropertyContext();
					flag = selectedPropertyContext != null && ActivityBindPropertyDescriptor.IsBindableProperty(selectedPropertyContext.PropertyDescriptor) && !selectedPropertyContext.PropertyDescriptor.IsReadOnly;
					text = selectedPropertyContext?.PropertyDescriptor.Name;
				}
				designerVerb.Properties["Text"] = ((text != null && designerVerb.Enabled) ? string.Format(CultureInfo.CurrentCulture, DR.GetString("BindSelectedPropertyFormat"), new object[1] { text }) : DR.GetString("BindSelectedProperty"));
				designerVerb.Enabled = flag && !IsLocked;
			}
		}

		private void OnComponentRenamed(object sender, ComponentRenameEventArgs e)
		{
			ActivityDesigner designer = GetDesigner(e.Component as Activity);
			if (designer != null)
			{
				Text = Activity.Name;
			}
		}

		private void OnComponentChanged(object sender, ComponentChangedEventArgs e)
		{
			if ((e.Component != null && e.OldValue is ActivityBind && !(e.NewValue is ActivityBind)) || (!(e.OldValue is ActivityBind) && e.NewValue is ActivityBind))
			{
				TypeDescriptor.Refresh(e.Component);
			}
			Activity activity = ((GetService(typeof(IReferenceService)) is IReferenceService referenceService) ? (referenceService.GetComponent(e.Component) as Activity) : (e.Component as Activity));
			if (activity != null)
			{
				GetDesigner(activity)?.OnActivityChanged(new ActivityChangedEventArgs(activity, e.Member, e.OldValue, e.NewValue));
			}
		}

		private void OnLoadComplete(object sender, EventArgs e)
		{
			if (((IRootDesigner)this).GetView(ViewTechnology.Default) is WorkflowView workflowView)
			{
				workflowView.Idle += OnFirstIdle;
			}
		}

		private void OnFirstIdle(object sender, EventArgs e)
		{
			if (((IRootDesigner)this).GetView(ViewTechnology.Default) is WorkflowView workflowView)
			{
				workflowView.Idle -= OnFirstIdle;
			}
			ISelectionService selectionService = (ISelectionService)GetService(typeof(ISelectionService));
			if (selectionService != null && selectionService.SelectionCount == 0)
			{
				selectionService.SetSelectedComponents(new object[1] { Activity }, SelectionTypes.Replace);
			}
			DesignerHelpers.RefreshDesignerActions(Activity.Site);
			Invalidate();
		}

		public void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		void IDesigner.Initialize(IComponent component)
		{
			activity = component as Activity;
			if (activity == null)
			{
				throw new ArgumentException(DR.GetString("Error_InvalidActivity"), "component");
			}
			Initialize(activity);
		}

		void IDesigner.DoDefaultAction()
		{
			DoDefaultAction();
		}

		void IDesignerFilter.PreFilterAttributes(IDictionary attributes)
		{
			PreFilterAttributes(attributes);
		}

		void IDesignerFilter.PreFilterProperties(IDictionary properties)
		{
			PreFilterProperties(properties);
		}

		void IDesignerFilter.PreFilterEvents(IDictionary events)
		{
			PreFilterEvents(events);
		}

		void IDesignerFilter.PostFilterAttributes(IDictionary attributes)
		{
			PostFilterAttributes(attributes);
		}

		void IDesignerFilter.PostFilterProperties(IDictionary properties)
		{
			PostFilterProperties(properties);
		}

		void IDesignerFilter.PostFilterEvents(IDictionary events)
		{
			PostFilterEvents(events);
		}

		bool IConnectableDesigner.CanConnect(ConnectionPoint source, ConnectionPoint target)
		{
			return CanConnect(source, target);
		}

		void IConnectableDesigner.OnConnected(ConnectionPoint source, ConnectionPoint target)
		{
			OnConnected(source, target);
		}

		object IRootDesigner.GetView(ViewTechnology technology)
		{
			DesignSurface designSurface = GetService(typeof(DesignSurface)) as DesignSurface;
			IDesignerHost designerHost = GetService(typeof(IDesignerHost)) as IDesignerHost;
			if (workflowView == null && designSurface != null && designerHost != null && designerHost.RootComponent == Activity)
			{
				workflowView = CreateView(technology);
			}
			return workflowView;
		}

		bool IWorkflowRootDesigner.IsSupportedActivityType(Type activityType)
		{
			return IsSupportedActivityType(activityType);
		}

		bool IToolboxUser.GetToolSupported(ToolboxItem toolboxItem)
		{
			bool result = true;
			if (GetService(typeof(IExtendedUIService2)) is IExtendedUIService2 extendedUIService)
			{
				long targetFrameworkVersion = extendedUIService.GetTargetFrameworkVersion();
				if (targetFrameworkVersion != 0L)
				{
					if (targetFrameworkVersion < 196608)
					{
						return false;
					}
					if (targetFrameworkVersion < 196613 && (string.Equals(toolboxItem.TypeName, "System.Workflow.Activities.ReceiveActivity") || string.Equals(toolboxItem.TypeName, "System.Workflow.Activities.SendActivity")))
					{
						return false;
					}
				}
			}
			if (GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider)
			{
				Type type = null;
				if (typeProvider.LocalAssembly != null)
				{
					type = typeProvider.LocalAssembly.GetType(toolboxItem.TypeName, throwOnError: false);
				}
				if (type == null)
				{
					try
					{
						type = Type.GetType(toolboxItem.TypeName + ", " + toolboxItem.AssemblyName);
					}
					catch (FileNotFoundException)
					{
					}
					catch (FileLoadException)
					{
					}
				}
				if (type == null)
				{
					return result;
				}
				IWorkflowRootDesigner safeRootDesigner = GetSafeRootDesigner(Activity.Site);
				if (safeRootDesigner != null)
				{
					if (!safeRootDesigner.IsSupportedActivityType(type))
					{
						return false;
					}
					if (safeRootDesigner.InvokingDesigner != null && safeRootDesigner.InvokingDesigner.Activity != null)
					{
						safeRootDesigner = GetSafeRootDesigner(safeRootDesigner.InvokingDesigner.Activity.Site);
						if (safeRootDesigner != null && !safeRootDesigner.IsSupportedActivityType(type))
						{
							return false;
						}
					}
				}
				if (!(toolboxItem is ActivityToolboxItem))
				{
					object[] customAttributes = type.GetCustomAttributes(typeof(ToolboxItemAttribute), inherit: false);
					if (customAttributes.Length != 0)
					{
						result = false;
						object[] array = customAttributes;
						for (int i = 0; i < array.Length; i++)
						{
							Attribute attribute = (Attribute)array[i];
							if (attribute is ToolboxItemAttribute toolboxItemAttribute && typeof(ActivityToolboxItem).IsAssignableFrom(toolboxItemAttribute.ToolboxItemType))
							{
								result = true;
								break;
							}
						}
					}
				}
			}
			return result;
		}

		void IToolboxUser.ToolPicked(ToolboxItem toolboxItem)
		{
			ISelectionService selectionService = GetService(typeof(ISelectionService)) as ISelectionService;
			IToolboxService toolboxService = GetService(typeof(IToolboxService)) as IToolboxService;
			if (toolboxItem == null || selectionService == null)
			{
				return;
			}
			object primarySelection = selectionService.PrimarySelection;
			if (!(primarySelection is HitTestInfo) && !(primarySelection is CompositeActivity))
			{
				return;
			}
			HitTestInfo hitTestInfo = null;
			CompositeActivity compositeActivity = null;
			if (primarySelection is HitTestInfo)
			{
				hitTestInfo = (HitTestInfo)primarySelection;
				compositeActivity = hitTestInfo.AssociatedDesigner.Activity as CompositeActivity;
			}
			else if (primarySelection is CompositeActivity)
			{
				compositeActivity = (CompositeActivity)primarySelection;
				hitTestInfo = new HitTestInfo(GetDesigner(compositeActivity), HitTestLocations.Designer);
			}
			if (!(GetDesigner(compositeActivity) is CompositeActivityDesigner compositeActivityDesigner))
			{
				return;
			}
			Activity[] array = CompositeActivityDesigner.DeserializeActivitiesFromToolboxItem(Activity.Site, toolboxItem, addAssemblyReference: false);
			if (array.Length == 0 || !compositeActivityDesigner.CanInsertActivities(hitTestInfo, new List<Activity>(array).AsReadOnly()))
			{
				return;
			}
			try
			{
				array = CompositeActivityDesigner.DeserializeActivitiesFromToolboxItem(Activity.Site, toolboxItem, addAssemblyReference: true);
				if (array.Length != 0)
				{
					CompositeActivityDesigner.InsertActivities(compositeActivityDesigner, hitTestInfo, new List<Activity>(array).AsReadOnly(), SR.GetString("PastingActivities"));
					selectionService.SetSelectedComponents(array, SelectionTypes.Replace);
					ParentView.EnsureVisible(array[0]);
				}
			}
			catch (CheckoutException ex)
			{
				if (ex != CheckoutException.Canceled)
				{
					throw new Exception(DR.GetString("ActivityInsertError") + "\n" + ex.Message, ex);
				}
			}
		}

		void IPersistUIState.SaveViewState(BinaryWriter writer)
		{
			SaveViewState(writer);
		}

		void IPersistUIState.LoadViewState(BinaryReader reader)
		{
			LoadViewState(reader);
		}

		bool IWorkflowDesignerMessageSink.OnMouseDown(MouseEventArgs e)
		{
			WorkflowView parentView = ParentView;
			if (parentView != null)
			{
				try
				{
					Point point = parentView.ClientPointToLogical(new Point(e.X, e.Y));
					OnMouseDown(new MouseEventArgs(e.Button, e.Clicks, point.X, point.Y, e.Delta));
				}
				catch
				{
				}
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnMouseMove(MouseEventArgs e)
		{
			WorkflowView parentView = ParentView;
			if (parentView != null)
			{
				try
				{
					Point point = parentView.ClientPointToLogical(new Point(e.X, e.Y));
					OnMouseMove(new MouseEventArgs(e.Button, e.Clicks, point.X, point.Y, e.Delta));
				}
				catch
				{
				}
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnMouseUp(MouseEventArgs e)
		{
			WorkflowView parentView = ParentView;
			if (parentView != null)
			{
				try
				{
					Point point = parentView.ClientPointToLogical(new Point(e.X, e.Y));
					OnMouseUp(new MouseEventArgs(e.Button, e.Clicks, point.X, point.Y, e.Delta));
				}
				catch
				{
				}
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnMouseDoubleClick(MouseEventArgs e)
		{
			WorkflowView parentView = ParentView;
			if (parentView != null)
			{
				try
				{
					Point point = parentView.ClientPointToLogical(new Point(e.X, e.Y));
					OnMouseDoubleClick(new MouseEventArgs(e.Button, e.Clicks, point.X, point.Y, e.Delta));
				}
				catch
				{
				}
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnMouseEnter(MouseEventArgs e)
		{
			WorkflowView parentView = ParentView;
			if (parentView != null)
			{
				try
				{
					Point point = parentView.ClientPointToLogical(new Point(e.X, e.Y));
					OnMouseEnter(new MouseEventArgs(e.Button, e.Clicks, point.X, point.Y, e.Delta));
				}
				catch
				{
				}
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnMouseHover(MouseEventArgs e)
		{
			WorkflowView parentView = ParentView;
			if (parentView != null)
			{
				try
				{
					Point point = parentView.ClientPointToLogical(new Point(e.X, e.Y));
					OnMouseHover(new MouseEventArgs(e.Button, e.Clicks, point.X, point.Y, e.Delta));
				}
				catch
				{
				}
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnMouseLeave()
		{
			try
			{
				OnMouseLeave();
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnMouseWheel(MouseEventArgs e)
		{
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnMouseCaptureChanged()
		{
			try
			{
				OnMouseCaptureChanged();
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnMouseDragBegin(Point initialPoint, MouseEventArgs e)
		{
			WorkflowView parentView = ParentView;
			if (parentView != null)
			{
				try
				{
					Point point = parentView.ClientPointToLogical(new Point(e.X, e.Y));
					OnMouseDragBegin(initialPoint, new MouseEventArgs(e.Button, e.Clicks, point.X, point.Y, e.Delta));
				}
				catch
				{
				}
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnMouseDragMove(MouseEventArgs e)
		{
			WorkflowView parentView = ParentView;
			if (parentView != null)
			{
				try
				{
					Point point = parentView.ClientPointToLogical(new Point(e.X, e.Y));
					OnMouseDragMove(new MouseEventArgs(e.Button, e.Clicks, point.X, point.Y, e.Delta));
				}
				catch
				{
				}
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnMouseDragEnd()
		{
			try
			{
				OnMouseDragEnd();
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnDragEnter(DragEventArgs e)
		{
			try
			{
				OnDragEnter(e as ActivityDragEventArgs);
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnDragOver(DragEventArgs e)
		{
			try
			{
				OnDragOver(e as ActivityDragEventArgs);
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnDragLeave()
		{
			try
			{
				OnDragLeave();
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnDragDrop(DragEventArgs e)
		{
			try
			{
				OnDragDrop(e as ActivityDragEventArgs);
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnGiveFeedback(GiveFeedbackEventArgs e)
		{
			try
			{
				OnGiveFeedback(e);
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnQueryContinueDrag(QueryContinueDragEventArgs e)
		{
			try
			{
				OnQueryContinueDrag(e);
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnKeyDown(KeyEventArgs e)
		{
			try
			{
				OnKeyDown(e);
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnKeyUp(KeyEventArgs e)
		{
			try
			{
				OnKeyUp(e);
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnScroll(ScrollBar sender, int value)
		{
			try
			{
				OnScroll(sender, value);
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnShowContextMenu(Point screenMenuPoint)
		{
			return true;
		}

		bool IWorkflowDesignerMessageSink.ProcessMessage(System.Windows.Forms.Message message)
		{
			try
			{
				OnProcessMessage(message);
			}
			catch
			{
			}
			return true;
		}

		void IWorkflowDesignerMessageSink.OnLayout(LayoutEventArgs layoutEventArgs)
		{
		}

		void IWorkflowDesignerMessageSink.OnLayoutPosition(Graphics graphics)
		{
			try
			{
				OnLayoutPosition(new ActivityDesignerLayoutEventArgs(graphics, DesignerTheme));
			}
			catch
			{
			}
		}

		void IWorkflowDesignerMessageSink.OnLayoutSize(Graphics graphics)
		{
			try
			{
				Size = OnLayoutSize(new ActivityDesignerLayoutEventArgs(graphics, DesignerTheme));
			}
			catch
			{
			}
		}

		void IWorkflowDesignerMessageSink.OnBeginResizing(DesignerEdges sizingEdge)
		{
			try
			{
				OnBeginResizing(new ActivityDesignerResizeEventArgs(sizingEdge, Bounds));
			}
			catch
			{
			}
		}

		void IWorkflowDesignerMessageSink.OnResizing(DesignerEdges sizingEdge, Rectangle bounds)
		{
			try
			{
				OnResizing(new ActivityDesignerResizeEventArgs(sizingEdge, bounds));
			}
			catch
			{
			}
		}

		void IWorkflowDesignerMessageSink.OnEndResizing()
		{
			try
			{
				OnEndResizing();
			}
			catch
			{
			}
		}

		void IWorkflowDesignerMessageSink.OnThemeChange()
		{
			try
			{
				OnThemeChange(DesignerTheme);
			}
			catch
			{
			}
		}

		bool IWorkflowDesignerMessageSink.OnPaint(PaintEventArgs e, Rectangle viewPort)
		{
			try
			{
				Rectangle bounds = Bounds;
				if (IsVisible && viewPort.IntersectsWith(bounds))
				{
					GlyphManager glyphManager = GetService(typeof(IDesignerGlyphProviderService)) as GlyphManager;
					bounds.Width++;
					bounds.Height++;
					using GraphicsPath path = ActivityDesignerPaint.GetDesignerPath(this, Point.Empty, new Size(DesignerTheme.BorderWidth, DesignerTheme.BorderWidth), DesignerEdges.All, enableRoundedCorners: false);
					using Region region = new Region(path);
					Region clip = e.Graphics.Clip;
					region.Intersect(clip);
					region.Intersect(viewPort);
					bool flag = false;
					try
					{
						ActivityDesignerPaintEventArgs e2 = new ActivityDesignerPaintEventArgs(e.Graphics, bounds, viewPort, DesignerTheme);
						e.Graphics.Clip = region;
						OnPaint(e2);
						e.Graphics.Clip = clip;
						flag = true;
						glyphManager?.DrawDesignerGlyphs(e2, this);
						DrawingState &= ~DrawingStates.InvalidDraw;
					}
					catch
					{
						DrawingState |= DrawingStates.InvalidDraw;
					}
					finally
					{
						if (!flag)
						{
							e.Graphics.Clip = clip;
						}
						if (DrawingState != 0)
						{
							ActivityDesignerPaint.DrawInvalidDesignerIndicator(e.Graphics, this);
						}
					}
				}
			}
			catch
			{
			}
			return true;
		}

		bool IWorkflowDesignerMessageSink.OnPaintWorkflowAdornments(PaintEventArgs e, Rectangle viewPort)
		{
			return true;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityDesignerAccessibleObject : AccessibleObject
	{
		private ActivityDesigner activityDesigner;

		public override Rectangle Bounds => activityDesigner.InternalRectangleToScreen(activityDesigner.Bounds);

		public override string DefaultAction => DR.GetString("AccessibleAction");

		public override string Description => DR.GetString("ActivityDesignerAccessibleDescription", activityDesigner.Activity.GetType().Name);

		public override string Help => DR.GetString("ActivityDesignerAccessibleHelp", activityDesigner.Activity.GetType().Name);

		public override string Name
		{
			get
			{
				Activity activity = activityDesigner.Activity;
				if (activity != null)
				{
					if (TypeDescriptor.GetProperties(activity)["TypeName"] != null)
					{
						return TypeDescriptor.GetProperties(activity)["TypeName"].GetValue(activity) as string;
					}
					if (!string.IsNullOrEmpty(activity.QualifiedName))
					{
						return activity.QualifiedName;
					}
					return activity.GetType().FullName;
				}
				return base.Name;
			}
			set
			{
			}
		}

		public override AccessibleObject Parent => activityDesigner.ParentDesigner?.AccessibilityObject;

		public override AccessibleRole Role => AccessibleRole.Diagram;

		public override AccessibleStates State
		{
			get
			{
				AccessibleStates accessibleStates = (activityDesigner.IsSelected ? AccessibleStates.Selected : AccessibleStates.Selectable);
				accessibleStates |= AccessibleStates.MultiSelectable;
				accessibleStates |= (activityDesigner.IsPrimarySelection ? AccessibleStates.Focused : AccessibleStates.Focusable);
				accessibleStates = ((!activityDesigner.IsLocked) ? (accessibleStates | AccessibleStates.Moveable) : (accessibleStates | AccessibleStates.ReadOnly));
				if (!activityDesigner.IsVisible)
				{
					accessibleStates |= AccessibleStates.Invisible;
				}
				return accessibleStates;
			}
		}

		protected ActivityDesigner ActivityDesigner => activityDesigner;

		public ActivityDesignerAccessibleObject(ActivityDesigner activityDesigner)
		{
			if (activityDesigner == null)
			{
				throw new ArgumentNullException("activityDesigner");
			}
			if (activityDesigner.Activity == null)
			{
				throw new ArgumentException(DR.GetString("DesignerNotInitialized"), "activityDesigner");
			}
			this.activityDesigner = activityDesigner;
		}

		public override void DoDefaultAction()
		{
			if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				selectionService.SetSelectedComponents(new object[1] { activityDesigner.Activity }, SelectionTypes.Replace);
			}
			else
			{
				base.DoDefaultAction();
			}
		}

		public override AccessibleObject Navigate(AccessibleNavigation navdir)
		{
			switch (navdir)
			{
			case AccessibleNavigation.FirstChild:
				return GetChild(0);
			case AccessibleNavigation.LastChild:
				return GetChild(GetChildCount() - 1);
			default:
			{
				CompositeActivityDesigner parentDesigner = activityDesigner.ParentDesigner;
				if (parentDesigner != null)
				{
					DesignerNavigationDirection direction = DesignerNavigationDirection.Down;
					switch (navdir)
					{
					case AccessibleNavigation.Left:
						direction = DesignerNavigationDirection.Left;
						break;
					case AccessibleNavigation.Right:
						direction = DesignerNavigationDirection.Right;
						break;
					case AccessibleNavigation.Up:
					case AccessibleNavigation.Previous:
						direction = DesignerNavigationDirection.Up;
						break;
					case AccessibleNavigation.Down:
					case AccessibleNavigation.Next:
						direction = DesignerNavigationDirection.Down;
						break;
					}
					ActivityDesigner designer = ActivityDesigner.GetDesigner(parentDesigner.GetNextSelectableObject(activityDesigner.Activity, direction) as Activity);
					if (designer != null)
					{
						return designer.AccessibilityObject;
					}
				}
				return base.Navigate(navdir);
			}
			}
		}

		public override void Select(AccessibleSelection flags)
		{
			if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				if ((flags & AccessibleSelection.TakeFocus) > AccessibleSelection.None || (flags & AccessibleSelection.TakeSelection) > AccessibleSelection.None)
				{
					selectionService.SetSelectedComponents(new object[1] { activityDesigner.Activity }, SelectionTypes.Replace);
				}
				else if ((flags & AccessibleSelection.AddSelection) > AccessibleSelection.None)
				{
					selectionService.SetSelectedComponents(new object[1] { activityDesigner.Activity }, SelectionTypes.Add);
				}
				else if ((flags & AccessibleSelection.RemoveSelection) > AccessibleSelection.None)
				{
					selectionService.SetSelectedComponents(new object[1] { activityDesigner.Activity }, SelectionTypes.Remove);
				}
			}
		}

		protected object GetService(Type serviceType)
		{
			if (serviceType == null)
			{
				throw new ArgumentNullException("serviceType");
			}
			if (ActivityDesigner.Activity != null && ActivityDesigner.Activity.Site != null)
			{
				return ActivityDesigner.Activity.Site.GetService(serviceType);
			}
			return null;
		}
	}
	[ActivityDesignerTheme(typeof(CompositeDesignerTheme))]
	[SRCategory("CompositeActivityDesigners", "System.Workflow.ComponentModel.Design.DesignerResources")]
	[DesignerSerializer(typeof(CompositeActivityDesignerLayoutSerializer), typeof(WorkflowMarkupSerializer))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public abstract class CompositeActivityDesigner : ActivityDesigner
	{
		private const string CF_DESIGNER = "CF_WINOEDESIGNERCOMPONENTS";

		private const string CF_DESIGNERSTATE = "CF_WINOEDESIGNERCOMPONENTSSTATE";

		private const int MaximumCharsPerLine = 8;

		private const int MaximumTextLines = 1;

		private Size actualTextSize = Size.Empty;

		private CompositeDesignerAccessibleObject accessibilityObject;

		private List<ActivityDesigner> containedActivityDesigners;

		private bool expanded = true;

		public bool IsEditable
		{
			get
			{
				if (!(base.Activity is CompositeActivity))
				{
					return false;
				}
				if (base.IsLocked)
				{
					return false;
				}
				if (Helpers.IsCustomActivity(base.Activity as CompositeActivity))
				{
					return false;
				}
				return true;
			}
		}

		public virtual bool CanExpandCollapse => !base.IsRootDesigner;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public virtual bool Expanded
		{
			get
			{
				if (!CanExpandCollapse && !expanded)
				{
					Expanded = true;
				}
				return expanded;
			}
			set
			{
				if (expanded != value && (CanExpandCollapse || value))
				{
					expanded = value;
					PerformLayout();
				}
			}
		}

		public virtual ReadOnlyCollection<ActivityDesigner> ContainedDesigners
		{
			get
			{
				List<ActivityDesigner> list = new List<ActivityDesigner>();
				if (base.Activity is CompositeActivity compositeActivity)
				{
					if (containedActivityDesigners == null)
					{
						bool flag = true;
						foreach (Activity activity in compositeActivity.Activities)
						{
							ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
							if (designer != null)
							{
								list.Add(designer);
							}
							else
							{
								flag = false;
							}
						}
						if (flag)
						{
							containedActivityDesigners = list;
						}
					}
					else
					{
						list = containedActivityDesigners;
					}
				}
				return list.AsReadOnly();
			}
		}

		public virtual object FirstSelectableObject => null;

		public virtual object LastSelectableObject => null;

		public override AccessibleObject AccessibilityObject
		{
			get
			{
				if (accessibilityObject == null)
				{
					accessibilityObject = new CompositeDesignerAccessibleObject(this);
				}
				return accessibilityObject;
			}
		}

		public override Point Location
		{
			get
			{
				return base.Location;
			}
			set
			{
				if (base.Location == value)
				{
					return;
				}
				Size size = new Size(value.X - base.Location.X, value.Y - base.Location.Y);
				foreach (ActivityDesigner containedDesigner in ContainedDesigners)
				{
					containedDesigner.Location = new Point(containedDesigner.Location.X + size.Width, containedDesigner.Location.Y + size.Height);
				}
				base.Location = value;
			}
		}

		protected virtual Rectangle ExpandButtonRectangle
		{
			get
			{
				if (!CanExpandCollapse)
				{
					return Rectangle.Empty;
				}
				if (!(base.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme))
				{
					return Rectangle.Empty;
				}
				Size size = TextRectangle.Size;
				Size size2 = ((Image != null) ? compositeDesignerTheme.ImageSize : Size.Empty);
				Rectangle bounds = base.Bounds;
				Size size3 = ((!size.IsEmpty) ? size : size2);
				Rectangle result = new Rectangle(bounds.Location, compositeDesignerTheme.ExpandButtonSize);
				result.X += (bounds.Width - (3 * compositeDesignerTheme.ExpandButtonSize.Width / 2 + size3.Width)) / 2;
				result.Y += 2 * WorkflowTheme.CurrentTheme.AmbientTheme.Margin.Height;
				if (size3.Height > result.Height)
				{
					result.Y += (size3.Height - result.Height) / 2;
				}
				return result;
			}
		}

		protected virtual int TitleHeight
		{
			get
			{
				Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
				Rectangle expandButtonRectangle = ExpandButtonRectangle;
				Rectangle textRectangle = TextRectangle;
				Rectangle imageRectangle = ImageRectangle;
				int num = 0;
				if (!textRectangle.Size.IsEmpty)
				{
					num = Math.Max(expandButtonRectangle.Height, textRectangle.Height);
					num += imageRectangle.Height;
				}
				else
				{
					num = Math.Max(expandButtonRectangle.Height, imageRectangle.Height);
				}
				if (!expandButtonRectangle.Size.IsEmpty || !textRectangle.Size.IsEmpty || !imageRectangle.Size.IsEmpty)
				{
					num += (Expanded ? 2 : 3) * margin.Height;
				}
				if (!imageRectangle.Size.IsEmpty && !textRectangle.Size.IsEmpty)
				{
					num += margin.Height;
				}
				return num;
			}
		}

		protected override Rectangle ImageRectangle
		{
			get
			{
				if (Image == null)
				{
					return Rectangle.Empty;
				}
				if (!(base.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme))
				{
					return Rectangle.Empty;
				}
				Rectangle bounds = base.Bounds;
				Size size = ExpandButtonRectangle.Size;
				Size imageSize = compositeDesignerTheme.ImageSize;
				Size size2 = TextRectangle.Size;
				Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
				Rectangle result = new Rectangle(bounds.Location, imageSize);
				if (size2.Width > 0)
				{
					result.X += (bounds.Width - imageSize.Width) / 2;
				}
				else
				{
					result.X += (bounds.Width - (imageSize.Width + 3 * size.Width / 2)) / 2;
					result.X += 3 * size.Width / 2;
				}
				result.Y += 2 * margin.Height;
				if (size2.Height > 0)
				{
					result.Y += size2.Height + margin.Height;
				}
				return result;
			}
		}

		protected override Rectangle TextRectangle
		{
			get
			{
				if (string.IsNullOrEmpty(Text))
				{
					return Rectangle.Empty;
				}
				if (!(base.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme))
				{
					return Rectangle.Empty;
				}
				Rectangle bounds = base.Bounds;
				Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
				Size size = (CanExpandCollapse ? compositeDesignerTheme.ExpandButtonSize : Size.Empty);
				int val = bounds.Width - (2 * margin.Width + 3 * size.Width / 2);
				Size size2 = actualTextSize;
				size2.Width /= Text.Length;
				size2.Width += ((size2.Width % Text.Length > 0) ? 1 : 0);
				size2.Width *= Math.Min(Text.Length, 7);
				Size empty = Size.Empty;
				empty.Width = Math.Min(val, actualTextSize.Width);
				empty.Width = Math.Max(1, Math.Max(empty.Width, size2.Width));
				empty.Height = size2.Height;
				int num = actualTextSize.Width / empty.Width;
				num += ((actualTextSize.Width % empty.Width > 0) ? 1 : 0);
				num = Math.Min(num, 1);
				empty.Height *= num;
				Rectangle result = new Rectangle(bounds.Location, empty);
				result.X += (bounds.Width - (3 * size.Width / 2 + empty.Width)) / 2;
				result.X += 3 * size.Width / 2;
				result.Y += 2 * margin.Height;
				if (size.Height > empty.Height)
				{
					result.Y += (size.Height - empty.Height) / 2;
				}
				result.Size = empty;
				return result;
			}
		}

		protected internal override ActivityDesignerGlyphCollection Glyphs
		{
			get
			{
				ActivityDesignerGlyphCollection activityDesignerGlyphCollection = new ActivityDesignerGlyphCollection();
				activityDesignerGlyphCollection.AddRange(base.Glyphs);
				if (base.DesignerTheme is CompositeDesignerTheme { ShowDropShadow: not false })
				{
					activityDesignerGlyphCollection.Add(ShadowGlyph.Default);
				}
				return activityDesignerGlyphCollection;
			}
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		internal List<ActivityDesigner> Designers
		{
			get
			{
				List<ActivityDesigner> list = new List<ActivityDesigner>();
				CompositeActivity compositeActivity = base.Activity as CompositeActivity;
				if (GetService(typeof(IDesignerHost)) is IDesignerHost designerHost && compositeActivity != null)
				{
					foreach (Activity activity in compositeActivity.Activities)
					{
						if (designerHost.GetDesigner(activity) is ActivityDesigner item)
						{
							list.Add(item);
						}
					}
				}
				return list;
			}
		}

		public static void InsertActivities(CompositeActivityDesigner compositeActivityDesigner, HitTestInfo insertLocation, ReadOnlyCollection<Activity> activitiesToInsert, string undoTransactionDescription)
		{
			if (compositeActivityDesigner == null)
			{
				throw new ArgumentNullException("compositeActivityDesigner");
			}
			if (compositeActivityDesigner.Activity == null || compositeActivityDesigner.Activity.Site == null || !(compositeActivityDesigner.Activity is CompositeActivity))
			{
				throw new ArgumentException("compositeActivityDesigner");
			}
			if (insertLocation == null)
			{
				throw new ArgumentNullException("insertLocation");
			}
			if (activitiesToInsert == null)
			{
				throw new ArgumentNullException("activitiesToInsert");
			}
			ISite site = compositeActivityDesigner.Activity.Site;
			IDesignerHost designerHost = site.GetService(typeof(IDesignerHost)) as IDesignerHost;
			DesignerTransaction designerTransaction = null;
			if (designerHost != null && !string.IsNullOrEmpty(undoTransactionDescription))
			{
				designerTransaction = designerHost.CreateTransaction(undoTransactionDescription);
			}
			bool flag = false;
			try
			{
				using (IEnumerator<Activity> enumerator = activitiesToInsert.GetEnumerator())
				{
					if (enumerator.MoveNext())
					{
						Activity current = enumerator.Current;
						if (current == null)
						{
							throw new ArgumentException("activitiesToInsert", SR.GetString("Error_CollectionHasNullEntry"));
						}
						flag = ((IComponent)current).Site != null;
					}
				}
				if (flag)
				{
					compositeActivityDesigner.MoveActivities(insertLocation, activitiesToInsert);
				}
				else
				{
					compositeActivityDesigner.InsertActivities(insertLocation, activitiesToInsert);
				}
				designerTransaction?.Commit();
			}
			catch (Exception ex)
			{
				designerTransaction?.Cancel();
				throw ex;
			}
			if (flag)
			{
				return;
			}
			ArrayList arrayList = new ArrayList();
			foreach (Activity item in activitiesToInsert)
			{
				arrayList.Add(item);
				if (item is CompositeActivity)
				{
					arrayList.AddRange(Helpers.GetNestedActivities((CompositeActivity)item));
				}
			}
		}

		public static void RemoveActivities(IServiceProvider serviceProvider, ReadOnlyCollection<Activity> activitiesToRemove, string transactionDescription)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException();
			}
			if (activitiesToRemove == null)
			{
				throw new ArgumentNullException("activitiesToRemove");
			}
			Activity activity = null;
			IDesignerHost designerHost = serviceProvider.GetService(typeof(IDesignerHost)) as IDesignerHost;
			DesignerTransaction designerTransaction = null;
			if (designerHost != null && !string.IsNullOrEmpty(transactionDescription))
			{
				designerTransaction = designerHost.CreateTransaction(transactionDescription);
			}
			try
			{
				foreach (Activity item in activitiesToRemove)
				{
					ActivityDesigner designer = ActivityDesigner.GetDesigner(item);
					if (designer != null)
					{
						CompositeActivityDesigner parentDesigner = designer.ParentDesigner;
						if (parentDesigner != null)
						{
							activity = DesignerHelpers.GetNextSelectableActivity(item);
							parentDesigner.RemoveActivities(new List<Activity>(new Activity[1] { item }).AsReadOnly());
						}
					}
				}
				designerTransaction?.Commit();
			}
			catch
			{
				designerTransaction?.Cancel();
				throw;
			}
			if (activity != null && activity.Site != null && activity.Site.GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				selectionService.SetSelectedComponents(new Activity[1] { activity }, SelectionTypes.Replace);
			}
		}

		public static IDataObject SerializeActivitiesToDataObject(IServiceProvider serviceProvider, Activity[] activities)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			if (activities == null)
			{
				throw new ArgumentNullException("activities");
			}
			ComponentSerializationService componentSerializationService = (ComponentSerializationService)serviceProvider.GetService(typeof(ComponentSerializationService));
			if (componentSerializationService == null)
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(ComponentSerializationService).Name));
			}
			SerializationStore serializationStore = componentSerializationService.CreateStore();
			using (serializationStore)
			{
				foreach (Activity value in activities)
				{
					componentSerializationService.Serialize(serializationStore, value);
				}
			}
			Stream stream = new MemoryStream();
			BinaryFormatter binaryFormatter = new BinaryFormatter();
			binaryFormatter.Serialize(stream, serializationStore);
			stream.Seek(0L, SeekOrigin.Begin);
			DataObject dataObject = new DataObject("CF_WINOEDESIGNERCOMPONENTS", stream);
			dataObject.SetData("CF_WINOEDESIGNERCOMPONENTSSTATE", Helpers.SerializeDesignersToStream(activities));
			return dataObject;
		}

		public static Activity[] DeserializeActivitiesFromDataObject(IServiceProvider serviceProvider, IDataObject dataObj)
		{
			return DeserializeActivitiesFromDataObject(serviceProvider, dataObj, addAssemblyReference: false);
		}

		internal static Activity[] DeserializeActivitiesFromDataObject(IServiceProvider serviceProvider, IDataObject dataObj, bool addAssemblyReference)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			if (dataObj == null)
			{
				return new Activity[0];
			}
			IDesignerHost designerHost = (IDesignerHost)serviceProvider.GetService(typeof(IDesignerHost));
			if (designerHost == null)
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).Name));
			}
			object data = dataObj.GetData("CF_WINOEDESIGNERCOMPONENTS");
			ICollection collection = null;
			if (data is Stream)
			{
				BinaryFormatter binaryFormatter = new BinaryFormatter();
				((Stream)data).Seek(0L, SeekOrigin.Begin);
				object obj = binaryFormatter.Deserialize((Stream)data);
				if (obj is SerializationStore)
				{
					if (!(serviceProvider.GetService(typeof(ComponentSerializationService)) is ComponentSerializationService componentSerializationService))
					{
						throw new Exception(SR.GetString("General_MissingService", typeof(ComponentSerializationService).Name));
					}
					collection = componentSerializationService.Deserialize((SerializationStore)obj);
				}
			}
			else
			{
				IToolboxService toolboxService = (IToolboxService)serviceProvider.GetService(typeof(IToolboxService));
				if (toolboxService != null && toolboxService.IsSupported(dataObj, designerHost))
				{
					ToolboxItem toolboxItem = toolboxService.DeserializeToolboxItem(dataObj, designerHost);
					if (toolboxItem != null)
					{
						collection = GetActivitiesFromToolboxItem(serviceProvider, addAssemblyReference, designerHost, collection, toolboxItem);
					}
				}
			}
			if (collection != null && Helpers.AreAllActivities(collection))
			{
				return (Activity[])new ArrayList(collection).ToArray(typeof(Activity));
			}
			return new Activity[0];
		}

		private static ICollection GetActivitiesFromToolboxItem(IServiceProvider serviceProvider, bool addAssemblyReference, IDesignerHost designerHost, ICollection activities, ToolboxItem toolBoxItem)
		{
			if (addAssemblyReference && toolBoxItem.AssemblyName != null && serviceProvider.GetService(typeof(ITypeResolutionService)) is ITypeResolutionService typeResolutionService)
			{
				typeResolutionService.ReferenceAssembly(toolBoxItem.AssemblyName);
			}
			ActivityToolboxItem activityToolboxItem = toolBoxItem as ActivityToolboxItem;
			activities = ((!addAssemblyReference || activityToolboxItem == null) ? toolBoxItem.CreateComponents(designerHost) : activityToolboxItem.CreateComponentsWithUI(designerHost));
			return activities;
		}

		internal static Activity[] DeserializeActivitiesFromToolboxItem(IServiceProvider serviceProvider, ToolboxItem toolboxItem, bool addAssemblyReference)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			IDesignerHost designerHost = (IDesignerHost)serviceProvider.GetService(typeof(IDesignerHost));
			if (designerHost == null)
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).Name));
			}
			ICollection collection = null;
			if (toolboxItem != null)
			{
				collection = GetActivitiesFromToolboxItem(serviceProvider, addAssemblyReference, designerHost, collection, toolboxItem);
			}
			if (collection != null && Helpers.AreAllActivities(collection))
			{
				return (Activity[])new ArrayList(collection).ToArray(typeof(Activity));
			}
			return new Activity[0];
		}

		public static ActivityDesigner[] GetIntersectingDesigners(ActivityDesigner topLevelDesigner, Rectangle rectangle)
		{
			if (topLevelDesigner == null)
			{
				throw new ArgumentNullException("topLevelDesigner");
			}
			List<ActivityDesigner> list = new List<ActivityDesigner>();
			if (!rectangle.IntersectsWith(topLevelDesigner.Bounds))
			{
				return list.ToArray();
			}
			if (!topLevelDesigner.Bounds.Contains(rectangle))
			{
				list.Add(topLevelDesigner);
			}
			if (topLevelDesigner is CompositeActivityDesigner)
			{
				Queue queue = new Queue();
				queue.Enqueue(topLevelDesigner);
				while (queue.Count > 0)
				{
					if (!(queue.Dequeue() is CompositeActivityDesigner compositeActivityDesigner))
					{
						continue;
					}
					bool flag = false;
					foreach (ActivityDesigner containedDesigner in compositeActivityDesigner.ContainedDesigners)
					{
						if (containedDesigner.IsVisible && rectangle.IntersectsWith(containedDesigner.Bounds))
						{
							flag = true;
							if (!containedDesigner.Bounds.Contains(rectangle))
							{
								list.Add(containedDesigner);
							}
							if (containedDesigner is CompositeActivityDesigner)
							{
								queue.Enqueue(containedDesigner);
							}
						}
						else if (!(compositeActivityDesigner is FreeformActivityDesigner) && flag)
						{
							break;
						}
					}
				}
			}
			return list.ToArray();
		}

		public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection<Activity> activitiesToInsert)
		{
			if (insertLocation == null)
			{
				throw new ArgumentNullException("insertLocation");
			}
			if (activitiesToInsert == null)
			{
				throw new ArgumentNullException("activitiesToInsert");
			}
			if (!(base.Activity is CompositeActivity))
			{
				return false;
			}
			if (!IsEditable)
			{
				return false;
			}
			IExtendedUIService2 extendedUIService = GetService(typeof(IExtendedUIService2)) as IExtendedUIService2;
			foreach (Activity item in activitiesToInsert)
			{
				if (item == null)
				{
					throw new ArgumentException("activitiesToInsert", SR.GetString("Error_CollectionHasNullEntry"));
				}
				if (extendedUIService != null && !extendedUIService.IsSupportedType(item.GetType()))
				{
					return false;
				}
				if (item is CompositeActivity && Helpers.IsAlternateFlowActivity(item))
				{
					return false;
				}
				ActivityDesigner activityDesigner = null;
				if (item.Site != null)
				{
					activityDesigner = ((item.Site.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost) ? (designerHost.GetDesigner(item) as ActivityDesigner) : null);
				}
				else if (item.UserData.Contains(typeof(ActivityDesigner)))
				{
					activityDesigner = item.UserData[typeof(ActivityDesigner)] as ActivityDesigner;
				}
				else
				{
					activityDesigner = ActivityDesigner.CreateDesigner(base.Activity.Site, item);
					item.UserData[typeof(ActivityDesigner)] = activityDesigner;
				}
				if (activityDesigner == null)
				{
					return false;
				}
				if (!activityDesigner.CanBeParentedTo(this))
				{
					return false;
				}
			}
			return true;
		}

		public virtual void InsertActivities(HitTestInfo insertLocation, ReadOnlyCollection<Activity> activitiesToInsert)
		{
			if (insertLocation == null)
			{
				throw new ArgumentNullException("insertLocation");
			}
			if (activitiesToInsert == null)
			{
				throw new ArgumentNullException("activitiesToInsert");
			}
			if (!(base.Activity is CompositeActivity compositeActivity))
			{
				throw new Exception(SR.GetString("Error_DragDropInvalid"));
			}
			int num = insertLocation.MapToIndex();
			if (GetService(typeof(IIdentifierCreationService)) is IIdentifierCreationService identifierCreationService)
			{
				identifierCreationService.EnsureUniqueIdentifiers(compositeActivity, activitiesToInsert);
				foreach (Activity item in activitiesToInsert)
				{
					if (item == null)
					{
						throw new ArgumentException("activitiesToInsert", SR.GetString("Error_CollectionHasNullEntry"));
					}
					if (item.Parent == null)
					{
						compositeActivity.Activities.Insert(num++, item);
						WorkflowDesignerLoader.AddActivityToDesigner(base.Activity.Site, item);
					}
				}
				{
					foreach (Activity item2 in activitiesToInsert)
					{
						Walker walker = new Walker();
						walker.FoundActivity += delegate(Walker w, WalkerEventArgs walkerEventArgs)
						{
							ExtenderHelpers.FilterDependencyProperties(base.Activity.Site, walkerEventArgs.CurrentActivity);
						};
						walker.Walk(item2);
					}
					return;
				}
			}
			throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IIdentifierCreationService).FullName));
		}

		public virtual bool CanMoveActivities(HitTestInfo moveLocation, ReadOnlyCollection<Activity> activitiesToMove)
		{
			if (moveLocation == null)
			{
				throw new ArgumentNullException("moveLocation");
			}
			if (activitiesToMove == null)
			{
				throw new ArgumentNullException("activitiesToMove");
			}
			if (!IsEditable)
			{
				return false;
			}
			foreach (Activity item in activitiesToMove)
			{
				ActivityDesigner designer = ActivityDesigner.GetDesigner(item);
				if (designer == null || designer.IsLocked)
				{
					return false;
				}
			}
			return true;
		}

		public virtual void MoveActivities(HitTestInfo moveLocation, ReadOnlyCollection<Activity> activitiesToMove)
		{
			if (moveLocation == null)
			{
				throw new ArgumentNullException("moveLocation");
			}
			if (activitiesToMove == null)
			{
				throw new ArgumentNullException("activitiesToMove");
			}
			if (!(base.Activity is CompositeActivity compositeActivity))
			{
				throw new Exception(SR.GetString("Error_DragDropInvalid"));
			}
			if (!(GetService(typeof(IIdentifierCreationService)) is IIdentifierCreationService identifierCreationService))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IIdentifierCreationService).FullName));
			}
			if (!(GetService(typeof(IDesignerHost)) is IDesignerHost))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
			}
			int num = moveLocation.MapToIndex();
			foreach (Activity item in activitiesToMove)
			{
				ActivityDesigner designer = ActivityDesigner.GetDesigner(item);
				if (designer != null)
				{
					CompositeActivityDesigner parentDesigner = designer.ParentDesigner;
					if (parentDesigner == this)
					{
						int num2 = compositeActivity.Activities.IndexOf(item);
						if (num > num2)
						{
							num--;
						}
					}
				}
				CompositeActivity parent = item.Parent;
				int index = parent.Activities.IndexOf(item);
				item.Parent.Activities.Remove(item);
				identifierCreationService.EnsureUniqueIdentifiers(compositeActivity, new Activity[1] { item });
				DesignerHelpers.UpdateSiteName(item, "_activityonthemove_");
				CompositeActivity compositeActivity2 = item as CompositeActivity;
				if (compositeActivity2 != null)
				{
					int num3 = 1;
					Activity[] nestedActivities = Helpers.GetNestedActivities(compositeActivity2);
					foreach (Activity activity in nestedActivities)
					{
						DesignerHelpers.UpdateSiteName(activity, "_activityonthemove_" + num3.ToString(CultureInfo.InvariantCulture));
						num3++;
					}
				}
				try
				{
					compositeActivity.Activities.Insert(num++, item);
				}
				catch (Exception ex)
				{
					parent.Activities.Insert(index, item);
					throw ex;
				}
				DesignerHelpers.UpdateSiteName(item, item.Name);
				if (compositeActivity2 != null)
				{
					Activity[] nestedActivities2 = Helpers.GetNestedActivities(compositeActivity2);
					foreach (Activity activity2 in nestedActivities2)
					{
						DesignerHelpers.UpdateSiteName(activity2, activity2.Name);
					}
				}
			}
			foreach (Activity item2 in activitiesToMove)
			{
				Walker walker = new Walker();
				walker.FoundActivity += delegate(Walker w, WalkerEventArgs walkerEventArgs)
				{
					ExtenderHelpers.FilterDependencyProperties(base.Activity.Site, walkerEventArgs.CurrentActivity);
					TypeDescriptor.Refresh(walkerEventArgs.CurrentActivity);
				};
				walker.Walk(item2);
			}
		}

		public virtual bool CanRemoveActivities(ReadOnlyCollection<Activity> activitiesToRemove)
		{
			if (activitiesToRemove == null)
			{
				throw new ArgumentNullException("activitiesToRemove");
			}
			if (!IsEditable)
			{
				return false;
			}
			foreach (Activity item in activitiesToRemove)
			{
				ActivityDesigner designer = ActivityDesigner.GetDesigner(item);
				if (designer == null || designer.IsLocked)
				{
					return false;
				}
			}
			return true;
		}

		public virtual void RemoveActivities(ReadOnlyCollection<Activity> activitiesToRemove)
		{
			if (activitiesToRemove == null)
			{
				throw new ArgumentNullException("activitiesToRemove");
			}
			if (!(base.Activity is CompositeActivity compositeActivity))
			{
				throw new Exception(SR.GetString("Error_DragDropInvalid"));
			}
			foreach (Activity item in activitiesToRemove)
			{
				compositeActivity.Activities.Remove(item);
				item.SetParent(null);
				if (item is CompositeActivity)
				{
					Activity[] nestedActivities = Helpers.GetNestedActivities(item as CompositeActivity);
					foreach (Activity activity in nestedActivities)
					{
						activity.SetParent(null);
					}
				}
				WorkflowDesignerLoader.RemoveActivityFromDesigner(base.Activity.Site, item);
			}
		}

		public virtual bool IsContainedDesignerVisible(ActivityDesigner containedDesigner)
		{
			if (containedDesigner == null)
			{
				throw new ArgumentNullException("containedDesigner");
			}
			return true;
		}

		public virtual void EnsureVisibleContainedDesigner(ActivityDesigner containedDesigner)
		{
			if (containedDesigner == null)
			{
				throw new ArgumentNullException("containedDesigner");
			}
			Expanded = true;
		}

		public virtual object GetNextSelectableObject(object current, DesignerNavigationDirection direction)
		{
			return null;
		}

		public override HitTestInfo HitTest(Point point)
		{
			HitTestInfo hitTestInfo = HitTestInfo.Nowhere;
			if (ExpandButtonRectangle.Contains(point))
			{
				hitTestInfo = new HitTestInfo(this, HitTestLocations.Designer | HitTestLocations.ActionArea);
			}
			else if (Expanded && base.Bounds.Contains(point))
			{
				ReadOnlyCollection<ActivityDesigner> containedDesigners = ContainedDesigners;
				for (int num = containedDesigners.Count - 1; num >= 0; num--)
				{
					ActivityDesigner activityDesigner = containedDesigners[num];
					if (activityDesigner != null && activityDesigner.IsVisible)
					{
						hitTestInfo = activityDesigner.HitTest(point);
						if (hitTestInfo.HitLocation != 0)
						{
							break;
						}
					}
				}
			}
			if (hitTestInfo == HitTestInfo.Nowhere)
			{
				hitTestInfo = base.HitTest(point);
			}
			if (hitTestInfo.AssociatedDesigner != null && hitTestInfo.AssociatedDesigner.DrawingState != 0)
			{
				hitTestInfo = new HitTestInfo(hitTestInfo.AssociatedDesigner, HitTestLocations.Designer | HitTestLocations.ActionArea);
			}
			return hitTestInfo;
		}

		protected virtual void OnContainedActivityChanged(ActivityChangedEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
		}

		protected virtual void OnContainedActivitiesChanging(ActivityCollectionChangeEventArgs listChangeArgs)
		{
			if (listChangeArgs == null)
			{
				throw new ArgumentNullException("listChangeArgs");
			}
		}

		protected virtual void OnContainedActivitiesChanged(ActivityCollectionChangeEventArgs listChangeArgs)
		{
			if (listChangeArgs == null)
			{
				throw new ArgumentNullException("listChangeArgs");
			}
			foreach (ActivityDesigner containedDesigner in ContainedDesigners)
			{
				foreach (DesignerVerb verb in ((IDesigner)containedDesigner).Verbs)
				{
					int oleStatus = verb.OleStatus;
					oleStatus = 0;
				}
			}
			RefreshDesignerVerbs();
			containedActivityDesigners = null;
			PerformLayout();
		}

		protected override void Initialize(Activity activity)
		{
			base.Initialize(activity);
			if (activity is CompositeActivity compositeActivity)
			{
				compositeActivity.Activities.ListChanging += OnActivityListChanging;
				compositeActivity.Activities.ListChanged += OnActivityListChanged;
			}
			if (base.IsRootDesigner && GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
			{
				componentChangeService.ComponentAdded += OnComponentAdded;
				componentChangeService.ComponentChanged += OnComponentChanged;
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				if (base.Activity is CompositeActivity compositeActivity)
				{
					compositeActivity.Activities.ListChanging -= OnActivityListChanging;
					compositeActivity.Activities.ListChanged -= OnActivityListChanged;
				}
				if (base.IsRootDesigner && GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
				{
					componentChangeService.ComponentAdded -= OnComponentAdded;
					componentChangeService.ComponentChanged -= OnComponentChanged;
				}
			}
			base.Dispose(disposing);
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			if (ExpandButtonRectangle.Contains(new Point(e.X, e.Y)))
			{
				if (GetService(typeof(IMenuCommandService)) is IMenuCommandService menuCommandService)
				{
					menuCommandService.GlobalInvoke(Expanded ? WorkflowMenuCommands.Collapse : WorkflowMenuCommands.Expand);
				}
				else
				{
					Expanded = !Expanded;
				}
			}
		}

		protected override void OnPaint(ActivityDesignerPaintEventArgs e)
		{
			base.OnPaint(e);
			if (!(e.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme))
			{
				return;
			}
			if (CanExpandCollapse)
			{
				Rectangle expandButtonRectangle = ExpandButtonRectangle;
				if (!expandButtonRectangle.Size.IsEmpty)
				{
					ActivityDesignerPaint.DrawExpandButton(e.Graphics, expandButtonRectangle, !Expanded, compositeDesignerTheme);
				}
			}
			if (Expanded)
			{
				PaintContainedDesigners(e);
			}
		}

		protected override void OnLayoutPosition(ActivityDesignerLayoutEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			base.OnLayoutPosition(e);
			foreach (ActivityDesigner containedDesigner in ContainedDesigners)
			{
				try
				{
					((IWorkflowDesignerMessageSink)containedDesigner).OnLayoutPosition(e.Graphics);
					containedDesigner.DrawingState &= ~DrawingStates.InvalidPosition;
				}
				catch
				{
					containedDesigner.DrawingState |= DrawingStates.InvalidPosition;
				}
			}
		}

		protected override Size OnLayoutSize(ActivityDesignerLayoutEventArgs e)
		{
			Size result = base.OnLayoutSize(e);
			foreach (ActivityDesigner containedDesigner in ContainedDesigners)
			{
				try
				{
					((IWorkflowDesignerMessageSink)containedDesigner).OnLayoutSize(e.Graphics);
					containedDesigner.DrawingState &= ~DrawingStates.InvalidSize;
				}
				catch
				{
					containedDesigner.Size = containedDesigner.DesignerTheme.Size;
					containedDesigner.DrawingState |= DrawingStates.InvalidSize;
				}
			}
			if (!string.IsNullOrEmpty(Text))
			{
				actualTextSize = ActivityDesignerPaint.MeasureString(e.Graphics, e.DesignerTheme.BoldFont, Text, StringAlignment.Center, Size.Empty);
			}
			else
			{
				actualTextSize = Size.Empty;
			}
			if (Expanded)
			{
				result.Height = TitleHeight;
			}
			else
			{
				result.Height = TitleHeight + WorkflowTheme.CurrentTheme.AmbientTheme.Margin.Height;
			}
			return result;
		}

		protected override void SaveViewState(BinaryWriter writer)
		{
			if (writer == null)
			{
				throw new ArgumentNullException("writer");
			}
			writer.Write(Expanded);
			base.SaveViewState(writer);
		}

		protected override void LoadViewState(BinaryReader reader)
		{
			if (reader == null)
			{
				throw new ArgumentNullException("reader");
			}
			Expanded = reader.ReadBoolean();
			base.LoadViewState(reader);
		}

		protected override void OnThemeChange(ActivityDesignerTheme designerTheme)
		{
			base.OnThemeChange(designerTheme);
			if (!(base.Activity is CompositeActivity compositeActivity))
			{
				return;
			}
			foreach (Activity activity in compositeActivity.Activities)
			{
				((IWorkflowDesignerMessageSink)ActivityDesigner.GetDesigner(activity))?.OnThemeChange();
			}
		}

		protected void PaintContainedDesigners(ActivityDesignerPaintEventArgs e)
		{
			OnPaintContainedDesigners(e);
		}

		protected override void OnKeyDown(KeyEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			ISelectionService selectionService = GetService(typeof(ISelectionService)) as ISelectionService;
			object obj = selectionService?.PrimarySelection;
			if (obj == null)
			{
				return;
			}
			object obj2 = null;
			if (e.KeyCode == Keys.Down || (e.KeyCode == Keys.Tab && !e.Shift))
			{
				if (ActivityDesigner.GetDesigner(obj as Activity) is CompositeActivityDesigner compositeActivityDesigner)
				{
					obj2 = compositeActivityDesigner.FirstSelectableObject;
				}
				if (obj2 == null)
				{
					while (true)
					{
						CompositeActivityDesigner parentDesigner = ActivityDesigner.GetParentDesigner(obj);
						if (parentDesigner == null)
						{
							obj2 = obj;
							break;
						}
						obj2 = parentDesigner.GetNextSelectableObject(obj, DesignerNavigationDirection.Down);
						if (obj2 != null)
						{
							break;
						}
						obj = parentDesigner.Activity;
					}
				}
			}
			else if (e.KeyCode == Keys.Up || (e.KeyCode == Keys.Tab && e.Shift))
			{
				CompositeActivityDesigner parentDesigner2 = ActivityDesigner.GetParentDesigner(obj);
				if (parentDesigner2 == null)
				{
					if (ActivityDesigner.GetDesigner(obj as Activity) is CompositeActivityDesigner compositeActivityDesigner2)
					{
						obj2 = compositeActivityDesigner2.LastSelectableObject;
					}
				}
				else
				{
					obj2 = parentDesigner2.GetNextSelectableObject(obj, DesignerNavigationDirection.Up);
					if (obj2 != null)
					{
						if (ActivityDesigner.GetDesigner(obj2 as Activity) is CompositeActivityDesigner { LastSelectableObject: { } lastSelectableObject })
						{
							obj2 = lastSelectableObject;
						}
					}
					else
					{
						obj2 = parentDesigner2.Activity;
					}
				}
			}
			else if (e.KeyCode == Keys.Left)
			{
				while (true)
				{
					CompositeActivityDesigner parentDesigner3 = ActivityDesigner.GetParentDesigner(obj);
					if (parentDesigner3 == null)
					{
						break;
					}
					obj2 = parentDesigner3.GetNextSelectableObject(obj, DesignerNavigationDirection.Left);
					if (obj2 != null)
					{
						break;
					}
					obj = parentDesigner3.Activity;
				}
			}
			else if (e.KeyCode == Keys.Right)
			{
				while (true)
				{
					CompositeActivityDesigner parentDesigner4 = ActivityDesigner.GetParentDesigner(obj);
					if (parentDesigner4 == null)
					{
						break;
					}
					obj2 = parentDesigner4.GetNextSelectableObject(obj, DesignerNavigationDirection.Right);
					if (obj2 != null)
					{
						break;
					}
					obj = parentDesigner4.Activity;
				}
			}
			if (obj2 != null)
			{
				selectionService.SetSelectedComponents(new object[1] { obj2 }, SelectionTypes.Replace);
				base.ParentView.EnsureVisible(obj2);
			}
		}

		internal virtual void OnPaintContainedDesigners(ActivityDesignerPaintEventArgs e)
		{
			foreach (ActivityDesigner containedDesigner in ContainedDesigners)
			{
				using PaintEventArgs e2 = new PaintEventArgs(e.Graphics, e.ViewPort);
				((IWorkflowDesignerMessageSink)containedDesigner).OnPaint(e2, e.ViewPort);
			}
		}

		private void OnComponentAdded(object sender, ComponentEventArgs e)
		{
			ActivityDesigner designer = ActivityDesigner.GetDesigner(e.Component as Activity);
			if (base.Activity != e.Component && designer != null && designer.IsLocked)
			{
				DesignerHelpers.MakePropertiesReadOnly(e.Component.Site, designer.Activity);
			}
		}

		private void OnComponentChanged(object sender, ComponentChangedEventArgs e)
		{
			Activity activity = ((GetService(typeof(IReferenceService)) is IReferenceService referenceService) ? (referenceService.GetComponent(e.Component) as Activity) : (e.Component as Activity));
			if (activity != null)
			{
				ActivityDesigner.GetDesigner(activity)?.ParentDesigner?.OnContainedActivityChanged(new ActivityChangedEventArgs(activity, e.Member, e.OldValue, e.NewValue));
			}
		}

		private void OnActivityListChanging(object sender, ActivityCollectionChangeEventArgs e)
		{
			OnContainedActivitiesChanging(e);
		}

		private void OnActivityListChanged(object sender, ActivityCollectionChangeEventArgs e)
		{
			OnContainedActivitiesChanged(e);
		}

		public static void MoveDesigners(ActivityDesigner activityDesigner, bool moveBack)
		{
			if (activityDesigner == null)
			{
				throw new ArgumentNullException("activityDesigner");
			}
			Activity activity = activityDesigner.Activity;
			if (activity == null || activity.Parent == null)
			{
				return;
			}
			CompositeActivity parent = activity.Parent;
			if (parent == null || !parent.Activities.Contains(activity))
			{
				return;
			}
			int num = parent.Activities.IndexOf(activity);
			num += ((!moveBack) ? 1 : (-1));
			if (num < 0 || num >= parent.Activities.Count || !(parent.Site.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
			{
				return;
			}
			DesignerTransaction designerTransaction = designerHost.CreateTransaction(SR.GetString("MovingActivities"));
			try
			{
				parent.Activities.Remove(activity);
				parent.Activities.Insert(num, activity);
				if (parent.Site.GetService(typeof(ISelectionService)) is ISelectionService selectionService)
				{
					selectionService.SetSelectedComponents(new object[1] { activity });
				}
				designerTransaction?.Commit();
			}
			catch
			{
				designerTransaction?.Cancel();
				throw;
			}
			if (ActivityDesigner.GetDesigner(parent) is CompositeActivityDesigner compositeActivityDesigner)
			{
				compositeActivityDesigner.PerformLayout();
			}
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class CompositeDesignerAccessibleObject : ActivityDesignerAccessibleObject
	{
		public override AccessibleStates State
		{
			get
			{
				AccessibleStates state = base.State;
				CompositeActivityDesigner compositeActivityDesigner = base.ActivityDesigner as CompositeActivityDesigner;
				return state | (compositeActivityDesigner.Expanded ? AccessibleStates.Expanded : AccessibleStates.Collapsed);
			}
		}

		public CompositeDesignerAccessibleObject(CompositeActivityDesigner activityDesigner)
			: base(activityDesigner)
		{
		}

		public override AccessibleObject GetChild(int index)
		{
			CompositeActivityDesigner compositeActivityDesigner = base.ActivityDesigner as CompositeActivityDesigner;
			if (index >= 0 && index < compositeActivityDesigner.ContainedDesigners.Count)
			{
				return compositeActivityDesigner.ContainedDesigners[index].AccessibilityObject;
			}
			return base.GetChild(index);
		}

		public override int GetChildCount()
		{
			CompositeActivityDesigner compositeActivityDesigner = base.ActivityDesigner as CompositeActivityDesigner;
			return compositeActivityDesigner.ContainedDesigners.Count;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public abstract class StructuredCompositeActivityDesigner : CompositeActivityDesigner
	{
		private int currentDropTarget = -1;

		private List<DesignerView> views;

		private DesignerView activeView;

		private ItemPalette itemPalette;

		public override ReadOnlyCollection<ActivityDesigner> ContainedDesigners
		{
			get
			{
				List<ActivityDesigner> list = new List<ActivityDesigner>();
				ActivityDesigner activeDesigner = ActiveDesigner;
				if (activeDesigner != null)
				{
					if (activeDesigner == this)
					{
						list.AddRange(base.ContainedDesigners);
						List<ActivityDesigner> list2 = new List<ActivityDesigner>();
						IList<ActivityDesigner> designersFromSupportedViews = DesignersFromSupportedViews;
						foreach (ActivityDesigner item in list)
						{
							bool flag = Helpers.IsAlternateFlowActivity(item.Activity);
							if (designersFromSupportedViews.Contains(item) || flag)
							{
								list2.Add(item);
							}
						}
						foreach (ActivityDesigner item2 in list2)
						{
							list.Remove(item2);
						}
					}
					else
					{
						list.Add(activeDesigner);
					}
				}
				return list.AsReadOnly();
			}
		}

		public override object FirstSelectableObject
		{
			get
			{
				ActivityDesigner activeDesigner = ActiveDesigner;
				if (activeDesigner != null && activeDesigner != this)
				{
					return activeDesigner.Activity;
				}
				return base.FirstSelectableObject;
			}
		}

		public override object LastSelectableObject
		{
			get
			{
				ActivityDesigner activeDesigner = ActiveDesigner;
				if (activeDesigner != null && activeDesigner != this && activeDesigner is CompositeActivityDesigner)
				{
					return ((CompositeActivityDesigner)activeDesigner).LastSelectableObject;
				}
				return base.LastSelectableObject;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DesignerView ActiveView
		{
			get
			{
				if (activeView == null)
				{
					activeView = ValidatedViews[0];
				}
				return activeView;
			}
			set
			{
				if (activeView != value && value != null)
				{
					DesignerView designerView = activeView;
					activeView = value;
					value.OnActivate();
					ActivityDesigner associatedDesigner = value.AssociatedDesigner;
					if (associatedDesigner == null)
					{
						value.OnDeactivate();
						activeView = designerView;
						return;
					}
					designerView?.OnDeactivate();
					OnViewChanged(activeView);
					DesignerHelpers.RefreshDesignerActions(base.Activity.Site);
					RefreshDesignerVerbs();
				}
			}
		}

		public override Size MinimumSize
		{
			get
			{
				Size minimumSize = base.MinimumSize;
				ActivityDesigner activeDesigner = ActiveDesigner;
				if (activeDesigner != null && activeDesigner != this && Expanded)
				{
					minimumSize.Width = Math.Max(minimumSize.Width, 160);
					minimumSize.Height = Math.Max(minimumSize.Height, 160);
				}
				return minimumSize;
			}
		}

		public virtual ReadOnlyCollection<DesignerView> Views
		{
			get
			{
				if (views == null)
				{
					views = new List<DesignerView>();
					views.AddRange(SecondaryViewProvider.GetViews(this));
				}
				return views.AsReadOnly();
			}
		}

		protected virtual int CurrentDropTarget
		{
			get
			{
				return currentDropTarget;
			}
			set
			{
				currentDropTarget = value;
				Invalidate();
			}
		}

		protected override bool ShowSmartTag
		{
			get
			{
				if (!string.IsNullOrEmpty(Text) && !TextRectangle.Size.IsEmpty)
				{
					return Views.Count > 1;
				}
				return false;
			}
		}

		protected override ReadOnlyCollection<ActivityDesignerVerb> SmartTagVerbs
		{
			get
			{
				List<ActivityDesignerVerb> list = new List<ActivityDesignerVerb>(base.SmartTagVerbs);
				if (Views.Count > 1)
				{
					for (int i = 0; i < Views.Count; i++)
					{
						DesignerView designerView = Views[i];
						ActivityDesignerVerb activityDesignerVerb = new ActivityDesignerVerb(this, DesignerVerbGroup.Actions, designerView.Text, OnSmartTagVerb, OnSmartTagVerbStatus);
						activityDesignerVerb.Properties[DesignerUserDataKeys.DesignerView] = designerView;
						activityDesignerVerb.Properties[DesignerUserDataKeys.Image] = designerView.Image;
						list.Add(activityDesignerVerb);
					}
				}
				return list.AsReadOnly();
			}
		}

		internal ActivityDesigner ActiveDesigner
		{
			get
			{
				if (ActiveView != null)
				{
					return ActiveView.AssociatedDesigner;
				}
				return null;
			}
		}

		internal override bool SmartTagVisible
		{
			get
			{
				if (itemPalette != null && itemPalette.IsVisible)
				{
					return true;
				}
				return base.SmartTagVisible;
			}
			set
			{
				base.SmartTagVisible = value;
			}
		}

		private ReadOnlyCollection<DesignerView> ValidatedViews
		{
			get
			{
				ReadOnlyCollection<DesignerView> readOnlyCollection = Views;
				if (readOnlyCollection.Count == 0)
				{
					throw new InvalidOperationException(DR.GetString("Error_MultiviewSequentialActivityDesigner"));
				}
				return readOnlyCollection;
			}
		}

		private IList<ActivityDesigner> DesignersFromSupportedViews
		{
			get
			{
				List<ActivityDesigner> list = new List<ActivityDesigner>();
				foreach (DesignerView validatedView in ValidatedViews)
				{
					ActivityDesigner associatedDesigner = validatedView.AssociatedDesigner;
					if (associatedDesigner != null)
					{
						list.Add(associatedDesigner);
					}
				}
				return list.AsReadOnly();
			}
		}

		public override bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection<Activity> activitiesToInsert)
		{
			if (insertLocation == null)
			{
				throw new ArgumentNullException("insertLocation");
			}
			if (activitiesToInsert == null)
			{
				throw new ArgumentNullException("activitiesToInsert");
			}
			ActivityDesigner activityDesigner = ((ActiveView != null) ? ActiveView.AssociatedDesigner : null);
			if (activityDesigner != this)
			{
				return false;
			}
			IList<Type> activityTypes = SecondaryViewProvider.GetActivityTypes(this);
			foreach (Activity item in activitiesToInsert)
			{
				if (item == null)
				{
					throw new ArgumentException("activitiesToInsert", SR.GetString("Error_CollectionHasNullEntry"));
				}
				if (activityTypes.Contains(item.GetType()))
				{
					return false;
				}
			}
			return base.CanInsertActivities(GetUpdatedLocation(insertLocation), activitiesToInsert);
		}

		public override void InsertActivities(HitTestInfo insertLocation, ReadOnlyCollection<Activity> activitiesToInsert)
		{
			if (insertLocation == null)
			{
				throw new ArgumentNullException("insertLocation");
			}
			if (activitiesToInsert == null)
			{
				throw new ArgumentNullException("activitiesToInsert");
			}
			base.InsertActivities(GetUpdatedLocation(insertLocation), activitiesToInsert);
		}

		public override void MoveActivities(HitTestInfo moveLocation, ReadOnlyCollection<Activity> activitiesToMove)
		{
			if (moveLocation == null)
			{
				throw new ArgumentNullException("moveLocation");
			}
			if (activitiesToMove == null)
			{
				throw new ArgumentNullException("activitiesToMove");
			}
			base.MoveActivities(GetUpdatedLocation(moveLocation), activitiesToMove);
		}

		public override bool CanRemoveActivities(ReadOnlyCollection<Activity> activitiesToRemove)
		{
			if (activitiesToRemove == null)
			{
				throw new ArgumentNullException("activitiesToRemove");
			}
			return base.CanRemoveActivities(activitiesToRemove);
		}

		public override void EnsureVisibleContainedDesigner(ActivityDesigner containedDesigner)
		{
			if (containedDesigner == null)
			{
				throw new ArgumentNullException("containedDesigner");
			}
			Expanded = true;
			ActivityDesigner activeDesigner = ActiveDesigner;
			if (containedDesigner == activeDesigner || containedDesigner == this)
			{
				return;
			}
			DesignerView designerView = null;
			ReadOnlyCollection<DesignerView> validatedViews = ValidatedViews;
			foreach (DesignerView item in validatedViews)
			{
				if (containedDesigner == item.AssociatedDesigner)
				{
					designerView = item;
					break;
				}
			}
			if (designerView == null)
			{
				designerView = validatedViews[0];
			}
			ActiveView = designerView;
			if (ActiveDesigner is CompositeActivityDesigner compositeActivityDesigner)
			{
				if (compositeActivityDesigner != this)
				{
					compositeActivityDesigner.EnsureVisibleContainedDesigner(containedDesigner);
				}
				else
				{
					base.EnsureVisibleContainedDesigner(containedDesigner);
				}
			}
		}

		public override object GetNextSelectableObject(object current, DesignerNavigationDirection direction)
		{
			object result = null;
			ActivityDesigner activeDesigner = ActiveDesigner;
			if (activeDesigner != null)
			{
				if (activeDesigner != this)
				{
					if (current != activeDesigner.Activity && activeDesigner is CompositeActivityDesigner)
					{
						result = ((CompositeActivityDesigner)activeDesigner).GetNextSelectableObject(current, direction);
					}
				}
				else
				{
					result = base.GetNextSelectableObject(current, direction);
				}
			}
			return result;
		}

		protected override void Initialize(Activity activity)
		{
			base.Initialize(activity);
			ActiveView = ValidatedViews[0];
		}

		protected virtual ReadOnlyCollection<Point> GetInnerConnections(DesignerEdges edges)
		{
			List<Point> list = new List<Point>(GetConnections(edges));
			if (list.Count > 0 && (edges & DesignerEdges.Top) > DesignerEdges.None)
			{
				list[0] = new Point(list[0].X, list[0].Y + TitleHeight);
			}
			return list.AsReadOnly();
		}

		protected virtual Rectangle[] GetDropTargets(Point dropPoint)
		{
			return new Rectangle[1] { base.Bounds };
		}

		protected override void OnContainedActivitiesChanging(ActivityCollectionChangeEventArgs listChangeArgs)
		{
			base.OnContainedActivitiesChanging(listChangeArgs);
			if (listChangeArgs.Action == ActivityCollectionChangeAction.Remove && listChangeArgs.RemovedItems[0] != null)
			{
				ActivityDesigner activeDesigner = ActiveDesigner;
				if (activeDesigner != null && listChangeArgs.RemovedItems[0] == activeDesigner.Activity)
				{
					ActiveView = ValidatedViews[0];
				}
				SecondaryViewProvider.OnViewRemoved(this, listChangeArgs.RemovedItems[0].GetType());
			}
		}

		protected void DrawConnectors(Graphics graphics, Pen pen, Point[] points, LineAnchor startCap, LineAnchor endCap)
		{
			Size connectorCapSize = Size.Empty;
			Size maxCapSize = Size.Empty;
			if (base.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme)
			{
				connectorCapSize = new Size(compositeDesignerTheme.ConnectorSize.Width / 3, compositeDesignerTheme.ConnectorSize.Height / 3);
				maxCapSize = compositeDesignerTheme.ConnectorSize;
			}
			ActivityDesignerPaint.DrawConnectors(graphics, pen, points, connectorCapSize, maxCapSize, startCap, endCap);
		}

		protected override void OnDragEnter(ActivityDragEventArgs e)
		{
			base.OnDragEnter(e);
			CurrentDropTarget = CanDrop(e);
			e.Effect = CheckDragEffect(e);
			e.DragImageSnapPoint = SnapInToDropTarget(e);
		}

		protected override void OnDragOver(ActivityDragEventArgs e)
		{
			base.OnDragOver(e);
			CurrentDropTarget = CanDrop(e);
			e.Effect = CheckDragEffect(e);
			e.DragImageSnapPoint = SnapInToDropTarget(e);
		}

		protected override void OnDragLeave()
		{
			base.OnDragLeave();
			CurrentDropTarget = -1;
		}

		protected override void OnDragDrop(ActivityDragEventArgs e)
		{
			base.OnDragDrop(e);
			if ((e.KeyState & 8) == 8 && (e.AllowedEffect & DragDropEffects.Copy) == DragDropEffects.Copy)
			{
				e.Effect = DragDropEffects.Copy;
			}
			else if ((e.AllowedEffect & DragDropEffects.Move) == DragDropEffects.Move)
			{
				e.Effect = DragDropEffects.Move;
			}
			try
			{
				CompositeActivityDesigner.InsertActivities(this, new ConnectorHitTestInfo(this, HitTestLocations.Designer, CurrentDropTarget), e.Activities, SR.GetString("DragDropActivities"));
			}
			finally
			{
				CurrentDropTarget = -1;
			}
		}

		protected override void OnLayoutPosition(ActivityDesignerLayoutEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			base.OnLayoutPosition(e);
			if (!Expanded)
			{
				return;
			}
			ActivityDesigner activeDesigner = ActiveDesigner;
			if (activeDesigner != null && activeDesigner != this)
			{
				Point point = Location;
				point.X += (Size.Width - activeDesigner.Size.Width) / 2;
				point.Y += e.AmbientTheme.SelectionSize.Height;
				activeDesigner.Location = point;
			}
			int titleHeight = TitleHeight;
			foreach (ActivityDesigner containedDesigner in ContainedDesigners)
			{
				containedDesigner.Location = new Point(containedDesigner.Location.X, containedDesigner.Location.Y + titleHeight);
			}
		}

		protected override Size OnLayoutSize(ActivityDesignerLayoutEventArgs e)
		{
			Size result = base.OnLayoutSize(e);
			if (Expanded)
			{
				ActivityDesigner activeDesigner = ActiveDesigner;
				if (activeDesigner != null && activeDesigner != this)
				{
					result.Width = Math.Max(result.Width, activeDesigner.Size.Width);
					result.Height += activeDesigner.Size.Height;
					result.Width += 2 * e.AmbientTheme.SelectionSize.Width;
					result.Width += 3 * e.AmbientTheme.Margin.Width;
					result.Height += e.AmbientTheme.Margin.Height;
					result.Height += 2 * e.AmbientTheme.SelectionSize.Height;
				}
			}
			return result;
		}

		protected override void SaveViewState(BinaryWriter writer)
		{
			if (writer == null)
			{
				throw new ArgumentNullException("writer");
			}
			List<DesignerView> list = new List<DesignerView>(ValidatedViews);
			writer.Write("ActiveView");
			writer.Write(list.IndexOf(activeView));
			base.SaveViewState(writer);
		}

		protected override void LoadViewState(BinaryReader reader)
		{
			if (reader == null)
			{
				throw new ArgumentNullException("reader");
			}
			string text = reader.ReadString();
			if (text != null && text.Equals("ActiveView", StringComparison.Ordinal))
			{
				int num = reader.ReadInt32();
				ReadOnlyCollection<DesignerView> validatedViews = ValidatedViews;
				if (num != -1 && num < validatedViews.Count)
				{
					ActiveView = validatedViews[num];
				}
			}
			base.LoadViewState(reader);
		}

		protected virtual void OnViewChanged(DesignerView view)
		{
			PerformLayout();
		}

		protected override void OnShowSmartTagVerbs(Point smartTagPoint)
		{
			if (itemPalette == null)
			{
				itemPalette = new ItemPalette();
				itemPalette.Closed += OnPaletteClosed;
				itemPalette.SelectionChanged += OnSmartAction;
			}
			itemPalette.SetFont(WorkflowTheme.CurrentTheme.AmbientTheme.Font);
			itemPalette.Items.Clear();
			foreach (ActivityDesignerVerb smartTagVerb in SmartTagVerbs)
			{
				Image image = smartTagVerb.Properties[DesignerUserDataKeys.Image] as Image;
				ItemInfo itemInfo = new ItemInfo(smartTagVerb.Id, image, smartTagVerb.Text);
				itemInfo.UserData[DesignerUserDataKeys.DesignerVerb] = smartTagVerb;
				itemPalette.Items.Add(itemInfo);
			}
			Point point = PointToScreen(smartTagPoint);
			itemPalette.Show(point);
		}

		protected override void OnActivityChanged(ActivityChangedEventArgs e)
		{
			ReadOnlyCollection<DesignerView> readOnlyCollection = SecondaryViewProvider.GetViews(this);
			ReadOnlyCollection<DesignerView> readOnlyCollection2 = Views;
			if (readOnlyCollection.Count != readOnlyCollection2.Count)
			{
				views = null;
				PerformLayout();
			}
			base.OnActivityChanged(e);
		}

		internal override void OnPaintContainedDesigners(ActivityDesignerPaintEventArgs e)
		{
			bool flag = false;
			foreach (ActivityDesigner containedDesigner in ContainedDesigners)
			{
				Rectangle bounds = containedDesigner.Bounds;
				if (e.ViewPort.IntersectsWith(bounds))
				{
					flag = true;
					using PaintEventArgs e2 = new PaintEventArgs(e.Graphics, e.ViewPort);
					((IWorkflowDesignerMessageSink)containedDesigner).OnPaint(e2, e.ViewPort);
				}
				else if (flag)
				{
					break;
				}
			}
		}

		private Point SnapInToDropTarget(ActivityDragEventArgs e)
		{
			if (CurrentDropTarget >= 0)
			{
				Rectangle[] dropTargets = GetDropTargets(new Point(e.X, e.Y));
				if (CurrentDropTarget < dropTargets.Length)
				{
					Rectangle rectangle = dropTargets[CurrentDropTarget];
					return new Point(rectangle.Left + rectangle.Width / 2, rectangle.Top + rectangle.Height / 2);
				}
			}
			return Point.Empty;
		}

		private int CanDrop(ActivityDragEventArgs e)
		{
			if (e.Activities.Count == 0)
			{
				return -1;
			}
			Point point = new Point(e.X, e.Y);
			int num = -1;
			Rectangle[] dropTargets = GetDropTargets(point);
			for (int i = 0; i < dropTargets.Length; i++)
			{
				if (dropTargets[i].Contains(point))
				{
					num = i;
					break;
				}
			}
			if (num >= 0 && !CanInsertActivities(new ConnectorHitTestInfo(this, HitTestLocations.Designer, num), e.Activities))
			{
				num = -1;
			}
			bool flag = (e.KeyState & 8) == 8;
			if (num >= 0 && !flag && (e.AllowedEffect & DragDropEffects.Move) == DragDropEffects.Move)
			{
				ConnectorHitTestInfo moveLocation = new ConnectorHitTestInfo(this, HitTestLocations.Designer, num);
				foreach (Activity activity in e.Activities)
				{
					if (activity.Site != null)
					{
						ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
						if (designer == null || designer.ParentDesigner == null || !designer.ParentDesigner.CanMoveActivities(moveLocation, new List<Activity>(new Activity[1] { activity }).AsReadOnly()))
						{
							num = -1;
							break;
						}
					}
				}
			}
			return num;
		}

		private DragDropEffects CheckDragEffect(ActivityDragEventArgs e)
		{
			if (e.Activities.Count == 0)
			{
				return DragDropEffects.None;
			}
			if (CurrentDropTarget >= 0)
			{
				if ((e.KeyState & 8) == 8 && (e.AllowedEffect & DragDropEffects.Copy) == DragDropEffects.Copy)
				{
					return DragDropEffects.Copy;
				}
				if ((e.AllowedEffect & DragDropEffects.Move) == DragDropEffects.Move)
				{
					return DragDropEffects.Move;
				}
			}
			return e.Effect;
		}

		private void OnSmartTagVerbStatus(object sender, EventArgs e)
		{
			ActivityDesignerVerb activityDesignerVerb = sender as ActivityDesignerVerb;
			if (activityDesignerVerb.Properties[DesignerUserDataKeys.DesignerView] is DesignerView designerView)
			{
				activityDesignerVerb.Checked = designerView == ActiveView;
			}
		}

		private void OnSmartTagVerb(object sender, EventArgs e)
		{
			ActivityDesignerVerb activityDesignerVerb = sender as ActivityDesignerVerb;
			if (activityDesignerVerb.Properties[DesignerUserDataKeys.DesignerView] is DesignerView designerView)
			{
				ActiveView = designerView;
				if (Expanded && designerView.AssociatedDesigner != null && GetService(typeof(ISelectionService)) is ISelectionService selectionService)
				{
					selectionService.SetSelectedComponents(new object[1] { designerView.AssociatedDesigner.Activity }, SelectionTypes.Replace);
				}
			}
		}

		private void OnSmartAction(object sender, SelectionChangeEventArgs e)
		{
			ItemInfo currentItem = e.CurrentItem;
			if (currentItem != null && currentItem.UserData[DesignerUserDataKeys.DesignerVerb] is ActivityDesignerVerb activityDesignerVerb)
			{
				activityDesignerVerb.Invoke();
			}
		}

		private void OnPaletteClosed(object sender, EventArgs e)
		{
			Invalidate(base.DesignerSmartTag.GetBounds(this, activated: true));
		}

		private HitTestInfo GetUpdatedLocation(HitTestInfo location)
		{
			int num = 0;
			foreach (DesignerView view in Views)
			{
				if (view.AssociatedDesigner != null && this != view.AssociatedDesigner && Helpers.IsActivityLocked(view.AssociatedDesigner.Activity))
				{
					num++;
				}
			}
			return new ConnectorHitTestInfo(this, location.HitLocation, num + location.MapToIndex());
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class SequentialActivityDesigner : StructuredCompositeActivityDesigner
	{
		private sealed class SequentialConnectorSelectionGlyph : ConnectorSelectionGlyph
		{
			public override bool IsPrimarySelection => isPrimarySelectionGlyph;

			public SequentialConnectorSelectionGlyph(int connectorIndex, bool isPrimarySelectionGlyph)
				: base(connectorIndex, isPrimarySelectionGlyph)
			{
			}

			public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
			{
				Rectangle result = Rectangle.Empty;
				if (designer is SequentialActivityDesigner)
				{
					Rectangle[] connectors = ((SequentialActivityDesigner)designer).GetConnectors();
					if (connectorIndex < connectors.Length)
					{
						result = connectors[connectorIndex];
					}
				}
				return result;
			}

			protected override void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer)
			{
				Rectangle bounds = GetBounds(designer, activated);
				ActivityDesignerPaint.DrawGrabHandles(graphics, new Rectangle[2]
				{
					new Rectangle(bounds.X + bounds.Width / 2 - ambientTheme.SelectionSize.Width / 2, bounds.Y, ambientTheme.SelectionSize.Width, ambientTheme.SelectionSize.Height),
					new Rectangle(bounds.X + bounds.Width / 2 - ambientTheme.SelectionSize.Width / 2, bounds.Bottom - ambientTheme.SelectionSize.Height, ambientTheme.SelectionSize.Width, ambientTheme.SelectionSize.Height)
				}, isPrimarySelectionGlyph);
			}
		}

		private static readonly Size DefaultHelpTextSize = new Size(100, 85);

		private SequenceDesignerAccessibleObject accessibilityObject;

		private string helpText = string.Empty;

		private Size helpTextSize = Size.Empty;

		public override bool Expanded
		{
			get
			{
				if (base.ParentDesigner is ParallelActivityDesigner)
				{
					return true;
				}
				return base.Expanded;
			}
			set
			{
				if (base.ParentDesigner is ParallelActivityDesigner)
				{
					value = true;
				}
				base.Expanded = value;
			}
		}

		public override bool CanExpandCollapse
		{
			get
			{
				if (base.ParentDesigner is ParallelActivityDesigner)
				{
					return false;
				}
				return base.CanExpandCollapse;
			}
		}

		public override object FirstSelectableObject
		{
			get
			{
				if (base.ActiveDesigner != this)
				{
					return base.FirstSelectableObject;
				}
				if (GetConnectors().Length == 0 || !Expanded || !IsVisible)
				{
					return null;
				}
				return new ConnectorHitTestInfo(this, HitTestLocations.Designer, 0);
			}
		}

		public override object LastSelectableObject
		{
			get
			{
				if (base.ActiveDesigner != this)
				{
					return base.LastSelectableObject;
				}
				Rectangle[] connectors = GetConnectors();
				if (connectors.Length == 0 || !Expanded || !IsVisible)
				{
					return null;
				}
				return new ConnectorHitTestInfo(this, HitTestLocations.Designer, connectors.Length - 1);
			}
		}

		public override AccessibleObject AccessibilityObject
		{
			get
			{
				if (accessibilityObject == null)
				{
					accessibilityObject = new SequenceDesignerAccessibleObject(this);
				}
				return accessibilityObject;
			}
		}

		protected virtual string HelpText
		{
			get
			{
				return helpText;
			}
			set
			{
				helpText = value;
				PerformLayout();
			}
		}

		protected virtual Rectangle HelpTextRectangle
		{
			get
			{
				Rectangle[] connectors = GetConnectors();
				if (HelpText.Length == 0 || ContainedDesigners.Count > 0 || !Expanded || connectors.Length == 0)
				{
					return Rectangle.Empty;
				}
				Rectangle empty = Rectangle.Empty;
				empty.X = connectors[0].Left + connectors[0].Width / 2 - helpTextSize.Width / 2;
				empty.Y = connectors[0].Top + connectors[0].Height / 2 - helpTextSize.Height / 2;
				empty.Size = helpTextSize;
				return empty;
			}
		}

		protected internal override ActivityDesignerGlyphCollection Glyphs
		{
			get
			{
				ActivityDesignerGlyphCollection activityDesignerGlyphCollection = new ActivityDesignerGlyphCollection();
				if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
				{
					ICollection selectedComponents = selectionService.GetSelectedComponents();
					foreach (object item in selectedComponents)
					{
						if (item is ConnectorHitTestInfo connectorHitTestInfo && connectorHitTestInfo.AssociatedDesigner == this)
						{
							activityDesignerGlyphCollection.Add(new SequentialConnectorSelectionGlyph(connectorHitTestInfo.MapToIndex(), selectionService.PrimarySelection == item));
						}
					}
				}
				activityDesignerGlyphCollection.AddRange(CreateConnectorDragDropGlyphs());
				activityDesignerGlyphCollection.AddRange(base.Glyphs);
				return activityDesignerGlyphCollection;
			}
		}

		protected Size HelpTextSize => helpTextSize;

		protected internal virtual Rectangle[] GetConnectors()
		{
			if (base.ActiveDesigner != this)
			{
				return new Rectangle[0];
			}
			if (!Expanded)
			{
				return new Rectangle[0];
			}
			if (!(base.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme))
			{
				return new Rectangle[0];
			}
			ReadOnlyCollection<ActivityDesigner> containedDesigners = ContainedDesigners;
			int num = ((containedDesigners.Count <= 0) ? 1 : (2 + (containedDesigners.Count - 1)));
			Rectangle[] array = new Rectangle[num];
			ReadOnlyCollection<Point> innerConnections = GetInnerConnections(DesignerEdges.Top | DesignerEdges.Bottom);
			Point point = default(Point);
			Point point2 = default(Point);
			if (innerConnections != null && innerConnections.Count > 0)
			{
				point = innerConnections[0];
				point2 = innerConnections[innerConnections.Count - 1];
			}
			if (containedDesigners.Count > 0)
			{
				ActivityDesigner activityDesigner = containedDesigners[0];
				ReadOnlyCollection<Point> readOnlyCollection = activityDesigner.GetConnections(DesignerEdges.Top | DesignerEdges.Bottom);
				if (readOnlyCollection.Count == 0)
				{
					Rectangle bounds = activityDesigner.Bounds;
					List<Point> list = new List<Point>();
					list.Add(new Point(bounds.Left + bounds.Width / 2, bounds.Top));
					list.Add(new Point(bounds.Left + bounds.Width / 2, bounds.Bottom));
					readOnlyCollection = list.AsReadOnly();
				}
				array[0].Location = new Point(point.X - (compositeDesignerTheme?.ConnectorSize.Width ?? 0) / 2, point.Y);
				array[0].Size = new Size(compositeDesignerTheme?.ConnectorSize.Width ?? 0, readOnlyCollection[0].Y - point.Y);
				for (int i = 0; i < containedDesigners.Count - 1; i++)
				{
					ActivityDesigner activityDesigner2 = containedDesigners[i];
					ActivityDesigner activityDesigner3 = containedDesigners[i + 1];
					if (activityDesigner2 != null && activityDesigner3 != null)
					{
						ReadOnlyCollection<Point> connections = activityDesigner2.GetConnections(DesignerEdges.Top | DesignerEdges.Bottom);
						int count = connections.Count;
						ReadOnlyCollection<Point> connections2 = activityDesigner3.GetConnections(DesignerEdges.Top | DesignerEdges.Bottom);
						array[i + 1].Location = new Point(connections[count - 1].X - (compositeDesignerTheme?.ConnectorSize.Width ?? 0) / 2, connections[count - 1].Y);
						array[i + 1].Size = new Size(compositeDesignerTheme?.ConnectorSize.Width ?? 0, connections2[0].Y - connections[count - 1].Y);
					}
				}
				ActivityDesigner activityDesigner4 = containedDesigners[containedDesigners.Count - 1];
				ReadOnlyCollection<Point> readOnlyCollection2 = activityDesigner4.GetConnections(DesignerEdges.Top | DesignerEdges.Bottom);
				if (readOnlyCollection2.Count == 0)
				{
					Rectangle bounds2 = activityDesigner4.Bounds;
					List<Point> list2 = new List<Point>();
					list2.Add(new Point(bounds2.Left + bounds2.Width / 2, bounds2.Top));
					list2.Add(new Point(bounds2.Left + bounds2.Width / 2, bounds2.Bottom));
					readOnlyCollection2 = list2.AsReadOnly();
				}
				array[num - 1].Location = new Point(readOnlyCollection2[readOnlyCollection2.Count - 1].X - (compositeDesignerTheme?.ConnectorSize.Width ?? 0) / 2, readOnlyCollection2[readOnlyCollection2.Count - 1].Y);
				array[num - 1].Size = new Size(compositeDesignerTheme?.ConnectorSize.Width ?? 0, point2.Y - readOnlyCollection2[readOnlyCollection2.Count - 1].Y);
			}
			else
			{
				array[0].Location = new Point(point.X - (compositeDesignerTheme?.ConnectorSize.Width ?? 0) / 2, point.Y);
				array[0].Size = new Size(compositeDesignerTheme?.ConnectorSize.Width ?? 0, point2.Y - point.Y);
			}
			for (int j = 0; j < array.Length; j++)
			{
				array[j].Inflate(3 * array[j].Width, 0);
			}
			return array;
		}

		public override HitTestInfo HitTest(Point point)
		{
			if (base.ActiveDesigner != this)
			{
				return base.HitTest(point);
			}
			HitTestInfo hitTestInfo = HitTestInfo.Nowhere;
			if (!Expanded)
			{
				hitTestInfo = base.HitTest(point);
			}
			else if (ContainedDesigners.Count == 0 && HelpTextRectangle.Contains(point))
			{
				hitTestInfo = new ConnectorHitTestInfo(this, HitTestLocations.Designer, 0);
			}
			else
			{
				Rectangle[] connectors = GetConnectors();
				for (int i = 0; i < connectors.Length; i++)
				{
					if (connectors[i].Contains(point))
					{
						hitTestInfo = new ConnectorHitTestInfo(this, HitTestLocations.Designer, i);
						break;
					}
				}
				if (hitTestInfo.HitLocation == HitTestLocations.None)
				{
					hitTestInfo = base.HitTest(point);
				}
			}
			return hitTestInfo;
		}

		public override object GetNextSelectableObject(object obj, DesignerNavigationDirection direction)
		{
			if (base.ActiveDesigner != this)
			{
				return base.GetNextSelectableObject(obj, direction);
			}
			if (direction != 0 && direction != DesignerNavigationDirection.Up)
			{
				return null;
			}
			object result = null;
			ReadOnlyCollection<ActivityDesigner> containedDesigners = ContainedDesigners;
			switch (direction)
			{
			case DesignerNavigationDirection.Down:
				if (obj is ConnectorHitTestInfo)
				{
					int num3 = ((ConnectorHitTestInfo)obj).MapToIndex();
					if (num3 >= 0 && num3 < containedDesigners.Count)
					{
						result = containedDesigners[num3].Activity;
					}
				}
				else if (obj is Activity)
				{
					ActivityDesigner designer2 = ActivityDesigner.GetDesigner(obj as Activity);
					int num4 = ((designer2 != null) ? containedDesigners.IndexOf(designer2) : (-1));
					if (num4 >= 0 && num4 + 1 < GetConnectors().Length)
					{
						result = new ConnectorHitTestInfo(this, HitTestLocations.Designer, num4 + 1);
					}
				}
				break;
			case DesignerNavigationDirection.Up:
				if (obj is ConnectorHitTestInfo)
				{
					int num = ((ConnectorHitTestInfo)obj).MapToIndex();
					if (num > 0 && num < GetConnectors().Length)
					{
						result = containedDesigners[num - 1].Activity;
					}
				}
				else if (obj is Activity)
				{
					ActivityDesigner designer = ActivityDesigner.GetDesigner(obj as Activity);
					int num2 = ((designer != null) ? containedDesigners.IndexOf(designer) : (-1));
					if (num2 >= 0 && num2 < GetConnectors().Length)
					{
						result = new ConnectorHitTestInfo(this, HitTestLocations.Designer, num2);
					}
				}
				break;
			}
			return result;
		}

		protected override void Initialize(Activity activity)
		{
			base.Initialize(activity);
			HelpText = DR.GetString("DropActivitiesHere");
		}

		protected override Rectangle[] GetDropTargets(Point dropPoint)
		{
			if (HelpTextRectangle.Contains(dropPoint))
			{
				return new Rectangle[1] { HelpTextRectangle };
			}
			return GetConnectors();
		}

		protected override void OnPaint(ActivityDesignerPaintEventArgs e)
		{
			base.OnPaint(e);
			CompositeDesignerTheme compositeDesignerTheme = e.DesignerTheme as CompositeDesignerTheme;
			if (!Expanded || compositeDesignerTheme == null)
			{
				return;
			}
			Rectangle helpTextRectangle = HelpTextRectangle;
			if (CurrentDropTarget == -1 && !helpTextRectangle.Size.IsEmpty)
			{
				Rectangle[] connectors = GetConnectors();
				if (connectors.Length != 0)
				{
					DrawConnectors(e.Graphics, compositeDesignerTheme.ForegroundPen, new Point[2]
					{
						new Point(connectors[0].X + connectors[0].Width / 2, connectors[0].Y + 2),
						new Point(connectors[0].X + connectors[0].Width / 2, helpTextRectangle.Top - 2)
					}, compositeDesignerTheme.ConnectorStartCap, LineAnchor.None);
					DrawConnectors(e.Graphics, compositeDesignerTheme.ForegroundPen, new Point[2]
					{
						new Point(connectors[0].X + connectors[0].Width / 2, helpTextRectangle.Bottom + 2),
						new Point(connectors[0].X + connectors[0].Width / 2, connectors[0].Bottom - 2)
					}, LineAnchor.None, compositeDesignerTheme.ConnectorEndCap);
				}
				ActivityDesignerPaint.DrawText(e.Graphics, compositeDesignerTheme.Font, HelpText, helpTextRectangle, StringAlignment.Center, e.AmbientTheme.TextQuality, compositeDesignerTheme.ForegroundBrush);
			}
			else
			{
				Rectangle[] connectors2 = GetConnectors();
				for (int i = 0; i < connectors2.Length; i++)
				{
					Pen pen = ((i == CurrentDropTarget) ? e.AmbientTheme.DropIndicatorPen : compositeDesignerTheme.ForegroundPen);
					LineAnchor startCap = (((i != 0 || connectors2.Length <= 2) && i != connectors2.Length - 1) ? compositeDesignerTheme.ConnectorStartCap : LineAnchor.None);
					LineAnchor endCap = ((i != 0 && (i != connectors2.Length - 1 || connectors2.Length <= 2)) ? compositeDesignerTheme.ConnectorEndCap : LineAnchor.None);
					DrawConnectors(e.Graphics, pen, new Point[2]
					{
						new Point(connectors2[i].Left + connectors2[i].Width / 2, connectors2[i].Top + 2),
						new Point(connectors2[i].Left + connectors2[i].Width / 2, connectors2[i].Bottom - 2)
					}, startCap, endCap);
				}
			}
		}

		protected override void OnLayoutPosition(ActivityDesignerLayoutEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			base.OnLayoutPosition(e);
			if (!Expanded || base.ActiveDesigner != this)
			{
				return;
			}
			CompositeDesignerTheme compositeDesignerTheme = e.DesignerTheme as CompositeDesignerTheme;
			int num = 0;
			ReadOnlyCollection<Point> innerConnections = GetInnerConnections(DesignerEdges.Top | DesignerEdges.Bottom);
			Point point = ((innerConnections.Count > 0) ? innerConnections[0] : Location);
			if (ContainedDesigners.Count == 1)
			{
				int num2 = 0;
				if (innerConnections.Count > 0)
				{
					num2 = Size.Height - (innerConnections[innerConnections.Count - 1].Y - innerConnections[0].Y);
				}
				num += (Size.Height - num2) / 2 - ContainedDesigners[0].Size.Height / 2;
			}
			else
			{
				num += compositeDesignerTheme?.ConnectorSize.Height ?? 0;
			}
			foreach (ActivityDesigner containedDesigner in ContainedDesigners)
			{
				Size size = containedDesigner.Size;
				containedDesigner.Location = new Point(point.X - size.Width / 2, point.Y + num);
				num += size.Height + (compositeDesignerTheme?.ConnectorSize.Height ?? 0);
			}
		}

		protected override Size OnLayoutSize(ActivityDesignerLayoutEventArgs e)
		{
			Size result = base.OnLayoutSize(e);
			CompositeDesignerTheme compositeDesignerTheme = e.DesignerTheme as CompositeDesignerTheme;
			if (Expanded && base.ActiveDesigner == this && compositeDesignerTheme != null)
			{
				if (HelpText.Length > 0)
				{
					helpTextSize = ActivityDesignerPaint.MeasureString(e.Graphics, compositeDesignerTheme.Font, HelpText, StringAlignment.Center, DefaultHelpTextSize);
				}
				result.Height += compositeDesignerTheme.ConnectorSize.Height;
				foreach (ActivityDesigner containedDesigner in ContainedDesigners)
				{
					Size size = containedDesigner.Size;
					result.Width = Math.Max(result.Width, size.Width);
					result.Height += size.Height;
					result.Height += compositeDesignerTheme.ConnectorSize.Height;
				}
				if (ContainedDesigners.Count == 0)
				{
					Rectangle helpTextRectangle = HelpTextRectangle;
					result.Width = Math.Max(helpTextRectangle.Width, result.Width);
					result.Height += helpTextRectangle.Height;
					result.Height += compositeDesignerTheme.ConnectorSize.Height;
				}
				result.Width = Math.Max(result.Width, compositeDesignerTheme.Size.Width);
				result.Width += 3 * e.AmbientTheme.Margin.Width;
				result.Width += 2 * e.AmbientTheme.SelectionSize.Width;
				result.Height = Math.Max(result.Height, compositeDesignerTheme.Size.Height);
			}
			return result;
		}

		private DesignerGlyph[] CreateConnectorDragDropGlyphs()
		{
			WorkflowView parentView = base.ParentView;
			DragDropManager dragDropManager = GetService(typeof(DragDropManager)) as DragDropManager;
			if (parentView == null || dragDropManager == null || !parentView.DragDropInProgress || base.DrawingState != 0)
			{
				return new DesignerGlyph[0];
			}
			List<DesignerGlyph> list = new List<DesignerGlyph>();
			Rectangle rectangle = parentView.ClientRectangleToLogical(new Rectangle(Point.Empty, parentView.ViewPortSize));
			AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
			Rectangle[] connectors = GetConnectors();
			Rectangle helpTextRectangle = HelpTextRectangle;
			for (int i = 0; i < connectors.Length; i++)
			{
				if (rectangle.IntersectsWith(connectors[i]) && i != CurrentDropTarget && dragDropManager.IsValidDropContext(new ConnectorHitTestInfo(this, HitTestLocations.Designer, i)))
				{
					Point connectorCenter = Point.Empty;
					connectorCenter = ((!helpTextRectangle.IsEmpty) ? new Point(helpTextRectangle.Left + helpTextRectangle.Width / 2 + 1, helpTextRectangle.Top - ambientTheme.DropIndicatorSize.Height / 2) : new Point(connectors[i].Location.X + connectors[i].Size.Width / 2 + 1, connectors[i].Location.Y + connectors[i].Size.Height / 2));
					list.Add(new ConnectorDragDropGlyph(i, connectorCenter));
				}
			}
			return list.ToArray();
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class SequenceDesignerAccessibleObject : CompositeDesignerAccessibleObject
	{
		private sealed class SequentialConnectorAccessibleObject : AccessibleObject
		{
			private ConnectorHitTestInfo connectorHitInfo;

			public override Rectangle Bounds => ((SequentialActivityDesigner)connectorHitInfo.AssociatedDesigner).InternalRectangleToScreen(connectorHitInfo.Bounds);

			public override string DefaultAction => DR.GetString("AccessibleAction");

			public override string Description => DR.GetString("ConnectorAccessibleDescription", connectorHitInfo.GetType().Name);

			public override string Help => DR.GetString("ConnectorAccessibleHelp", connectorHitInfo.GetType().Name);

			public override string Name
			{
				get
				{
					return DR.GetString("ConnectorDesc", connectorHitInfo.MapToIndex().ToString(CultureInfo.InvariantCulture), Parent.Name);
				}
				set
				{
				}
			}

			public override AccessibleObject Parent => connectorHitInfo.AssociatedDesigner.AccessibilityObject;

			public override AccessibleRole Role => AccessibleRole.Diagram;

			public override AccessibleStates State
			{
				get
				{
					AccessibleStates accessibleStates = AccessibleStates.MultiSelectable;
					if (connectorHitInfo.AssociatedDesigner.IsLocked)
					{
						accessibleStates |= AccessibleStates.ReadOnly;
					}
					if (!connectorHitInfo.AssociatedDesigner.IsVisible)
					{
						accessibleStates |= AccessibleStates.Invisible;
					}
					if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
					{
						accessibleStates |= (selectionService.GetComponentSelected(connectorHitInfo.SelectableObject) ? AccessibleStates.Selected : AccessibleStates.Selectable);
						accessibleStates |= ((selectionService.PrimarySelection == connectorHitInfo.SelectableObject) ? AccessibleStates.Focused : AccessibleStates.Focusable);
					}
					return accessibleStates;
				}
			}

			internal SequentialConnectorAccessibleObject(SequentialActivityDesigner activityDesigner, int connectorIndex)
			{
				if (activityDesigner == null)
				{
					throw new ArgumentNullException("activityDesigner");
				}
				connectorHitInfo = new ConnectorHitTestInfo(activityDesigner, HitTestLocations.Designer, connectorIndex);
			}

			public override void DoDefaultAction()
			{
				if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
				{
					selectionService.SetSelectedComponents(new object[1] { connectorHitInfo.SelectableObject }, SelectionTypes.Replace);
				}
				else
				{
					base.DoDefaultAction();
				}
			}

			public override AccessibleObject Navigate(AccessibleNavigation navdir)
			{
				if (navdir == AccessibleNavigation.FirstChild || navdir == AccessibleNavigation.LastChild)
				{
					return base.Navigate(navdir);
				}
				DesignerNavigationDirection direction = DesignerNavigationDirection.Down;
				switch (navdir)
				{
				case AccessibleNavigation.Left:
					direction = DesignerNavigationDirection.Left;
					break;
				case AccessibleNavigation.Right:
					direction = DesignerNavigationDirection.Right;
					break;
				case AccessibleNavigation.Up:
				case AccessibleNavigation.Previous:
					direction = DesignerNavigationDirection.Up;
					break;
				case AccessibleNavigation.Down:
				case AccessibleNavigation.Next:
					direction = DesignerNavigationDirection.Down;
					break;
				}
				object nextSelectableObject = ((CompositeActivityDesigner)connectorHitInfo.AssociatedDesigner).GetNextSelectableObject(connectorHitInfo, direction);
				if (nextSelectableObject is ConnectorHitTestInfo)
				{
					ConnectorHitTestInfo connectorHitTestInfo = nextSelectableObject as ConnectorHitTestInfo;
					return new SequentialConnectorAccessibleObject(connectorHitTestInfo.AssociatedDesigner as SequentialActivityDesigner, connectorHitTestInfo.MapToIndex());
				}
				if (nextSelectableObject is Activity)
				{
					ActivityDesigner designer = ActivityDesigner.GetDesigner(nextSelectableObject as Activity);
					if (designer != null)
					{
						return designer.AccessibilityObject;
					}
				}
				return base.Navigate(navdir);
			}

			public override void Select(AccessibleSelection flags)
			{
				if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
				{
					if ((flags & AccessibleSelection.TakeFocus) > AccessibleSelection.None || (flags & AccessibleSelection.TakeSelection) > AccessibleSelection.None)
					{
						selectionService.SetSelectedComponents(new object[1] { connectorHitInfo.SelectableObject }, SelectionTypes.Replace);
					}
					else if ((flags & AccessibleSelection.AddSelection) > AccessibleSelection.None)
					{
						selectionService.SetSelectedComponents(new object[1] { connectorHitInfo.SelectableObject }, SelectionTypes.Add);
					}
					else if ((flags & AccessibleSelection.RemoveSelection) > AccessibleSelection.None)
					{
						selectionService.SetSelectedComponents(new object[1] { connectorHitInfo.SelectableObject }, SelectionTypes.Remove);
					}
				}
			}

			private object GetService(Type serviceType)
			{
				if (connectorHitInfo.AssociatedDesigner != null && connectorHitInfo.AssociatedDesigner.Activity.Site != null)
				{
					return connectorHitInfo.AssociatedDesigner.Activity.Site.GetService(serviceType);
				}
				return null;
			}
		}

		public SequenceDesignerAccessibleObject(SequentialActivityDesigner activityDesigner)
			: base(activityDesigner)
		{
		}

		public override AccessibleObject GetChild(int index)
		{
			SequentialActivityDesigner sequentialActivityDesigner = base.ActivityDesigner as SequentialActivityDesigner;
			if (sequentialActivityDesigner.ActiveDesigner != sequentialActivityDesigner)
			{
				return base.GetChild(index);
			}
			if (index >= 0 && index < GetChildCount() && index % 2 == 0)
			{
				return new SequentialConnectorAccessibleObject(base.ActivityDesigner as SequentialActivityDesigner, index / 2);
			}
			return base.GetChild(index / 2);
		}

		public override int GetChildCount()
		{
			SequentialActivityDesigner sequentialActivityDesigner = base.ActivityDesigner as SequentialActivityDesigner;
			if (sequentialActivityDesigner.ActiveDesigner != sequentialActivityDesigner)
			{
				return base.GetChildCount();
			}
			if (sequentialActivityDesigner != null)
			{
				return sequentialActivityDesigner.ContainedDesigners.Count + sequentialActivityDesigner.ContainedDesigners.Count + 1;
			}
			return -1;
		}

		public override AccessibleObject Navigate(AccessibleNavigation navdir)
		{
			if (navdir == AccessibleNavigation.Up || navdir == AccessibleNavigation.Previous || navdir == AccessibleNavigation.Down || navdir == AccessibleNavigation.Next)
			{
				DesignerNavigationDirection designerNavigationDirection = DesignerNavigationDirection.Down;
				designerNavigationDirection = ((navdir == AccessibleNavigation.Up || navdir == AccessibleNavigation.Previous) ? DesignerNavigationDirection.Up : DesignerNavigationDirection.Down);
				CompositeActivityDesigner parentDesigner = base.ActivityDesigner.ParentDesigner;
				if (parentDesigner != null)
				{
					object nextSelectableObject = parentDesigner.GetNextSelectableObject(base.ActivityDesigner.Activity, designerNavigationDirection);
					if (nextSelectableObject is ConnectorHitTestInfo)
					{
						return GetChild(((ConnectorHitTestInfo)nextSelectableObject).MapToIndex());
					}
				}
			}
			return base.Navigate(navdir);
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ParallelActivityDesigner : StructuredCompositeActivityDesigner
	{
		private ActivityDesignerVerbCollection designerVerbs;

		public override object FirstSelectableObject
		{
			get
			{
				if (base.ActiveDesigner != this)
				{
					return base.FirstSelectableObject;
				}
				if (!Expanded || !IsVisible)
				{
					return null;
				}
				object result = null;
				if (ContainedDesigners.Count > 0)
				{
					result = ContainedDesigners[0].Activity;
				}
				return result;
			}
		}

		public override object LastSelectableObject
		{
			get
			{
				if (base.ActiveDesigner != this)
				{
					return base.FirstSelectableObject;
				}
				if (!Expanded || !IsVisible)
				{
					return null;
				}
				object obj = ((ContainedDesigners.Count > 0) ? ContainedDesigners[0].Activity : null);
				CompositeActivityDesigner compositeActivityDesigner = ((obj is Activity) ? (ActivityDesigner.GetDesigner(obj as Activity) as CompositeActivityDesigner) : null);
				object obj2 = null;
				if (compositeActivityDesigner != null)
				{
					obj2 = compositeActivityDesigner.LastSelectableObject;
				}
				if (obj2 == null)
				{
					obj2 = obj;
				}
				return obj2;
			}
		}

		protected override ActivityDesignerVerbCollection Verbs
		{
			get
			{
				ActivityDesignerVerbCollection activityDesignerVerbCollection = new ActivityDesignerVerbCollection();
				activityDesignerVerbCollection.AddRange(base.Verbs);
				if (designerVerbs == null)
				{
					designerVerbs = new ActivityDesignerVerbCollection();
					designerVerbs.Add(new ActivityDesignerVerb(this, DesignerVerbGroup.General, DR.GetString("AddBranch"), OnAddBranch, OnStatusAddBranch));
				}
				activityDesignerVerbCollection.AddRange(designerVerbs);
				return activityDesignerVerbCollection;
			}
		}

		public override object GetNextSelectableObject(object obj, DesignerNavigationDirection direction)
		{
			if (base.ActiveDesigner != this)
			{
				return base.GetNextSelectableObject(obj, direction);
			}
			if (direction != DesignerNavigationDirection.Left && direction != DesignerNavigationDirection.Right)
			{
				return null;
			}
			object result = null;
			ReadOnlyCollection<ActivityDesigner> containedDesigners = ContainedDesigners;
			ActivityDesigner designer = ActivityDesigner.GetDesigner(obj as Activity);
			int num = ((designer != null) ? containedDesigners.IndexOf(designer) : (-1));
			if (direction == DesignerNavigationDirection.Left && num >= 0 && num < containedDesigners.Count)
			{
				result = containedDesigners[(num > 0) ? (num - 1) : (containedDesigners.Count - 1)].Activity;
			}
			else if (direction == DesignerNavigationDirection.Right && num <= containedDesigners.Count - 1)
			{
				result = containedDesigners[(num < containedDesigners.Count - 1) ? (num + 1) : 0].Activity;
			}
			return result;
		}

		public override bool CanRemoveActivities(ReadOnlyCollection<Activity> activitiesToRemove)
		{
			if (activitiesToRemove == null)
			{
				throw new ArgumentNullException("activitiesToRemove");
			}
			if (base.ActiveDesigner != this)
			{
				return base.CanRemoveActivities(activitiesToRemove);
			}
			if (ContainedDesigners.Count - activitiesToRemove.Count < 2)
			{
				return false;
			}
			return base.CanRemoveActivities(activitiesToRemove);
		}

		public override bool CanMoveActivities(HitTestInfo moveLocation, ReadOnlyCollection<Activity> activitiesToMove)
		{
			if (moveLocation == null)
			{
				throw new ArgumentNullException("moveLocation");
			}
			if (activitiesToMove == null)
			{
				throw new ArgumentNullException("activitiesToMove");
			}
			if (base.ActiveDesigner != this)
			{
				return base.CanMoveActivities(moveLocation, activitiesToMove);
			}
			if (ContainedDesigners.Count - activitiesToMove.Count < 2 && moveLocation != null && moveLocation.AssociatedDesigner != this)
			{
				return false;
			}
			return base.CanMoveActivities(moveLocation, activitiesToMove);
		}

		protected virtual CompositeActivity OnCreateNewBranch()
		{
			return null;
		}

		protected override void OnPaint(ActivityDesignerPaintEventArgs e)
		{
			base.OnPaint(e);
			if (Expanded && base.ActiveDesigner == this)
			{
				if (ContainedDesigners.Count > 0)
				{
					DrawParallelConnectors(e);
				}
				if (CurrentDropTarget >= 0)
				{
					DrawParallelDropTargets(e, CurrentDropTarget);
				}
			}
		}

		protected override void OnLayoutPosition(ActivityDesignerLayoutEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			base.OnLayoutPosition(e);
			if (!Expanded || base.ActiveDesigner != this || !(e.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme))
			{
				return;
			}
			ReadOnlyCollection<Point> innerConnections = GetInnerConnections(DesignerEdges.Top | DesignerEdges.Bottom);
			Point point = ((innerConnections.Count > 0) ? new Point(Location.X, innerConnections[0].Y) : Location);
			int num = 0;
			int num2 = compositeDesignerTheme.ConnectorSize.Height * 3 / 2;
			foreach (ActivityDesigner containedDesigner in ContainedDesigners)
			{
				num += e.AmbientTheme.SelectionSize.Width;
				num += compositeDesignerTheme.ConnectorSize.Width;
				Size size = containedDesigner.Size;
				containedDesigner.Location = new Point(point.X + num, point.Y + num2);
				num += size.Width;
				num += e.AmbientTheme.SelectionSize.Width;
			}
		}

		protected override Size OnLayoutSize(ActivityDesignerLayoutEventArgs e)
		{
			Size result = base.OnLayoutSize(e);
			CompositeDesignerTheme compositeDesignerTheme = e.DesignerTheme as CompositeDesignerTheme;
			if (Expanded && base.ActiveDesigner == this && compositeDesignerTheme != null)
			{
				Size empty = Size.Empty;
				foreach (ActivityDesigner containedDesigner in ContainedDesigners)
				{
					Size size = containedDesigner.Size;
					empty.Width += e.AmbientTheme.SelectionSize.Width;
					empty.Width += compositeDesignerTheme.ConnectorSize.Width;
					empty.Width += size.Width;
					empty.Width += e.AmbientTheme.SelectionSize.Width;
					empty.Height = Math.Max(empty.Height, size.Height);
				}
				empty.Width += ((ContainedDesigners.Count > 0) ? compositeDesignerTheme.ConnectorSize.Width : 0);
				foreach (ActivityDesigner containedDesigner2 in ContainedDesigners)
				{
					containedDesigner2.Size = new Size(containedDesigner2.Size.Width, empty.Height);
				}
				empty.Height += 3 * compositeDesignerTheme.ConnectorSize.Height;
				result.Width = Math.Max(result.Width, empty.Width);
				result.Height += empty.Height;
			}
			return result;
		}

		protected override Rectangle[] GetDropTargets(Point dropPoint)
		{
			if (!Expanded || base.ActiveDesigner != this)
			{
				return new Rectangle[0];
			}
			CompositeDesignerTheme compositeDesignerTheme = base.DesignerTheme as CompositeDesignerTheme;
			Rectangle bounds = base.Bounds;
			ReadOnlyCollection<ActivityDesigner> containedDesigners = ContainedDesigners;
			Rectangle[] array = new Rectangle[containedDesigners.Count + 1];
			if (containedDesigners.Count > 0)
			{
				ActivityDesigner activityDesigner = containedDesigners[0];
				array[0].Location = new Point(bounds.X, activityDesigner.Location.Y);
				array[0].Size = new Size(compositeDesignerTheme?.ConnectorSize.Width ?? 0, activityDesigner.Size.Height);
				for (int i = 0; i < containedDesigners.Count - 1; i++)
				{
					ActivityDesigner activityDesigner2 = containedDesigners[i];
					Rectangle bounds2 = activityDesigner2.Bounds;
					ActivityDesigner activityDesigner3 = containedDesigners[i + 1];
					Rectangle bounds3 = activityDesigner3.Bounds;
					array[i + 1].Location = new Point(bounds2.Right + (bounds3.Left - bounds2.Right) / 2 - (compositeDesignerTheme?.ConnectorSize.Width ?? 0) / 2, bounds2.Top);
					array[i + 1].Size = new Size(compositeDesignerTheme?.ConnectorSize.Width ?? 0, bounds2.Height);
				}
				ActivityDesigner activityDesigner4 = containedDesigners[containedDesigners.Count - 1];
				array[containedDesigners.Count].Location = new Point(bounds.Right - (compositeDesignerTheme?.ConnectorSize.Width ?? 0), activityDesigner4.Location.Y);
				array[containedDesigners.Count].Size = new Size(compositeDesignerTheme?.ConnectorSize.Width ?? 0, activityDesigner4.Size.Height);
			}
			else
			{
				array[0].Location = new Point(Location.X + (Size.Width - (compositeDesignerTheme?.ConnectorSize.Width ?? 0)) / 2, TextRectangle.Bottom);
				array[0].Size = new Size(compositeDesignerTheme?.ConnectorSize.Width ?? 0, Location.Y + Size.Height - array[0].Location.Y);
			}
			return array;
		}

		private void OnStatusAddBranch(object sender, EventArgs e)
		{
			if (sender is ActivityDesignerVerb activityDesignerVerb)
			{
				activityDesignerVerb.Enabled = base.IsEditable;
			}
		}

		private void DrawParallelConnectors(ActivityDesignerPaintEventArgs e)
		{
			if (!(e.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme))
			{
				return;
			}
			Rectangle bounds = base.Bounds;
			int top = bounds.Top;
			top += TitleHeight;
			ReadOnlyCollection<ActivityDesigner> containedDesigners = ContainedDesigners;
			ActivityDesigner activityDesigner = containedDesigners[0];
			ReadOnlyCollection<Point> connections = activityDesigner.GetConnections(DesignerEdges.Top | DesignerEdges.Bottom);
			ActivityDesigner activityDesigner2 = containedDesigners[containedDesigners.Count - 1];
			ReadOnlyCollection<Point> connections2 = activityDesigner2.GetConnections(DesignerEdges.Top | DesignerEdges.Bottom);
			Point[] array = new Point[2];
			array[0].X = bounds.Left + bounds.Width / 2;
			array[0].Y = top;
			array[1].X = bounds.Left + bounds.Width / 2;
			array[1].Y = top + compositeDesignerTheme.ConnectorSize.Height * 3 / 4;
			DrawConnectors(e.Graphics, compositeDesignerTheme.ForegroundPen, array, LineAnchor.None, LineAnchor.None);
			array[0].X = connections[0].X;
			array[0].Y = top + compositeDesignerTheme.ConnectorSize.Height * 3 / 4;
			array[1].X = connections2[0].X;
			array[1].Y = top + compositeDesignerTheme.ConnectorSize.Height * 3 / 4;
			DrawConnectors(e.Graphics, compositeDesignerTheme.ForegroundPen, array, LineAnchor.None, LineAnchor.None);
			array[0].X = connections[connections.Count - 1].X;
			array[0].Y = bounds.Bottom - compositeDesignerTheme.ConnectorSize.Height * 3 / 4;
			array[1].X = connections2[connections2.Count - 1].X;
			array[1].Y = bounds.Bottom - compositeDesignerTheme.ConnectorSize.Height * 3 / 4;
			DrawConnectors(e.Graphics, compositeDesignerTheme.ForegroundPen, array, LineAnchor.None, LineAnchor.None);
			array[0].X = bounds.Left + bounds.Width / 2;
			array[0].Y = bounds.Bottom - compositeDesignerTheme.ConnectorSize.Height * 3 / 4;
			array[1].X = bounds.Left + bounds.Width / 2;
			array[1].Y = bounds.Bottom;
			DrawConnectors(e.Graphics, compositeDesignerTheme.ForegroundPen, array, LineAnchor.None, LineAnchor.None);
			foreach (ActivityDesigner item in containedDesigners)
			{
				ReadOnlyCollection<Point> connections3 = item.GetConnections(DesignerEdges.Top | DesignerEdges.Bottom);
				int count = connections3.Count;
				Point[] array2 = new Point[2];
				array2[0].X = connections3[0].X;
				array2[0].Y = top + compositeDesignerTheme.ConnectorSize.Height * 3 / 4;
				array2[1].X = connections3[0].X;
				array2[1].Y = connections3[0].Y;
				DrawConnectors(e.Graphics, compositeDesignerTheme.ForegroundPen, array2, compositeDesignerTheme.ConnectorStartCap, compositeDesignerTheme.ConnectorEndCap);
				array2[0].X = connections3[count - 1].X;
				array2[0].Y = connections3[count - 1].Y;
				array2[1].X = connections3[count - 1].X;
				array2[1].Y = bounds.Bottom - compositeDesignerTheme.ConnectorSize.Height * 3 / 4;
				DrawConnectors(e.Graphics, compositeDesignerTheme.ForegroundPen, array2, compositeDesignerTheme.ConnectorStartCap, compositeDesignerTheme.ConnectorEndCap);
			}
		}

		private void DrawParallelDropTargets(ActivityDesignerPaintEventArgs e, int index)
		{
			Rectangle[] dropTargets = GetDropTargets(Point.Empty);
			if (index < 0 || index >= dropTargets.Length || !(e.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme))
			{
				return;
			}
			ReadOnlyCollection<ActivityDesigner> containedDesigners = ContainedDesigners;
			Rectangle rectangle = dropTargets[index];
			Rectangle bounds = base.Bounds;
			int top = bounds.Top;
			top += TitleHeight;
			top += ((containedDesigners.Count > 0) ? (compositeDesignerTheme.ConnectorSize.Height * 3 / 4) : 0);
			int num = rectangle.Y - top;
			num += bounds.Bottom - rectangle.Bottom;
			num -= ((containedDesigners.Count > 0) ? (compositeDesignerTheme.ConnectorSize.Height * 3 / 4) : 0);
			rectangle.Y = top;
			rectangle.Height += num;
			DrawConnectors(e.Graphics, e.AmbientTheme.DropIndicatorPen, new Point[2]
			{
				new Point(rectangle.Left + rectangle.Width / 2, rectangle.Top + 2),
				new Point(rectangle.Left + rectangle.Width / 2, rectangle.Bottom - 2)
			}, compositeDesignerTheme.ConnectorStartCap, compositeDesignerTheme.ConnectorEndCap);
			if (containedDesigners.Count > 0)
			{
				if (index == 0)
				{
					ActivityDesigner activityDesigner = containedDesigners[0];
					ReadOnlyCollection<Point> connections = activityDesigner.GetConnections(DesignerEdges.Top | DesignerEdges.Bottom);
					Point[] array = new Point[2];
					array[0].X = rectangle.X + rectangle.Width / 2;
					array[0].Y = rectangle.Y;
					array[1].X = connections[0].X;
					array[1].Y = rectangle.Y;
					DrawConnectors(e.Graphics, e.AmbientTheme.DropIndicatorPen, array, LineAnchor.None, LineAnchor.None);
					array[0].Y = rectangle.Bottom;
					array[1].Y = rectangle.Bottom;
					DrawConnectors(e.Graphics, e.AmbientTheme.DropIndicatorPen, array, LineAnchor.None, LineAnchor.None);
				}
				else if (index == containedDesigners.Count)
				{
					ActivityDesigner activityDesigner2 = containedDesigners[containedDesigners.Count - 1];
					ReadOnlyCollection<Point> connections2 = activityDesigner2.GetConnections(DesignerEdges.Top | DesignerEdges.Bottom);
					Point[] array2 = new Point[2];
					array2[0].X = connections2[0].X;
					array2[0].Y = rectangle.Y;
					array2[1].X = rectangle.X + rectangle.Width / 2;
					array2[1].Y = rectangle.Y;
					DrawConnectors(e.Graphics, e.AmbientTheme.DropIndicatorPen, array2, LineAnchor.None, LineAnchor.None);
					array2[0].Y = rectangle.Bottom;
					array2[1].Y = rectangle.Bottom;
					DrawConnectors(e.Graphics, e.AmbientTheme.DropIndicatorPen, array2, LineAnchor.None, LineAnchor.None);
				}
			}
		}

		private void OnAddBranch(object sender, EventArgs e)
		{
			CompositeActivity compositeActivity = OnCreateNewBranch();
			if (base.Activity is CompositeActivity compositeActivity2 && compositeActivity != null)
			{
				int count = ContainedDesigners.Count;
				CompositeActivityDesigner.InsertActivities(this, new ConnectorHitTestInfo(this, HitTestLocations.Designer, compositeActivity2.Activities.Count), new List<Activity>(new Activity[1] { compositeActivity }).AsReadOnly(), DR.GetString("AddingBranch", compositeActivity.GetType().Name));
				if (ContainedDesigners.Count > count && ContainedDesigners.Count > 0)
				{
					ContainedDesigners[ContainedDesigners.Count - 1].EnsureVisible();
				}
			}
		}
	}
	[ActivityDesignerTheme(typeof(ActivityPreviewDesignerTheme))]
	[SRCategory("ActivityPreviewDesigners", "System.Workflow.ComponentModel.Design.DesignerResources")]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityPreviewDesigner : SequentialActivityDesigner
	{
		private sealed class StripItemSelectionGlyph : SelectionGlyph
		{
			private ActivityPreviewDesigner parentDesigner;

			private ItemInfo item;

			public override bool IsPrimarySelection
			{
				get
				{
					if (parentDesigner.GetService(typeof(ISelectionService)) is ISelectionService selectionService)
					{
						return selectionService.PrimarySelection == item.UserData[DesignerUserDataKeys.Activity];
					}
					return false;
				}
			}

			internal StripItemSelectionGlyph(ActivityPreviewDesigner parentDesigner, ItemInfo item)
			{
				this.parentDesigner = parentDesigner;
				this.item = item;
			}

			public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
			{
				Rectangle itemBounds = parentDesigner.previewStrip.GetItemBounds(item);
				Size size = new Size(Math.Max(itemBounds.Width / 6, 1), Math.Max(itemBounds.Height / 6, 1));
				itemBounds.Inflate(size);
				return itemBounds;
			}
		}

		private sealed class StripItemCommentGlyph : CommentGlyph
		{
			private ActivityPreviewDesigner parentDesigner;

			private ItemInfo item;

			internal StripItemCommentGlyph(ActivityPreviewDesigner parentDesigner, ItemInfo item)
			{
				this.parentDesigner = parentDesigner;
				this.item = item;
			}

			public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
			{
				return parentDesigner.previewStrip.GetItemBounds(item);
			}
		}

		private sealed class StripItemConfigErrorGlyph : ConfigErrorGlyph
		{
			private ActivityPreviewDesigner parentDesigner;

			private ItemInfo item;

			internal StripItemConfigErrorGlyph(ActivityPreviewDesigner parentDesigner, ItemInfo item)
			{
				this.parentDesigner = parentDesigner;
				this.item = item;
			}

			public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
			{
				Rectangle itemBounds = parentDesigner.previewStrip.GetItemBounds(item);
				Size glyphSize = WorkflowTheme.CurrentTheme.AmbientTheme.GlyphSize;
				glyphSize.Width = glyphSize.Width * 3 / 4;
				glyphSize.Height = glyphSize.Height * 3 / 4;
				Point location = new Point(itemBounds.Right - glyphSize.Width / 2, itemBounds.Top - glyphSize.Height / 2);
				itemBounds = new Rectangle(location, glyphSize);
				if (activated)
				{
					itemBounds.Width *= 2;
					AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
					itemBounds.Inflate(ambientTheme.Margin.Width / 2, ambientTheme.Margin.Height / 2);
				}
				return itemBounds;
			}

			protected override void OnActivate(ActivityDesigner designer)
			{
				ActivityDesigner designer2 = ActivityDesigner.GetDesigner(item.UserData[DesignerUserDataKeys.Activity] as Activity);
				if (designer2 != null)
				{
					base.OnActivate(designer2);
				}
			}
		}

		private sealed class ActivityCollectionAccessibleObject : SequenceDesignerAccessibleObject
		{
			public ActivityCollectionAccessibleObject(ActivityPreviewDesigner activityDesigner)
				: base(activityDesigner)
			{
			}

			public override int GetChildCount()
			{
				int num = 0;
				if (base.ActivityDesigner is ActivityPreviewDesigner activityPreviewDesigner && activityPreviewDesigner.ActiveDesigner == activityPreviewDesigner)
				{
					num += activityPreviewDesigner.previewStrip.AccessibilityObjects.Length;
					if (activityPreviewDesigner.ShowPreview)
					{
						num++;
					}
					if ((activityPreviewDesigner.ShowPreview && !activityPreviewDesigner.previewWindow.PreviewMode) || !activityPreviewDesigner.ShowPreview)
					{
						num++;
					}
				}
				return num;
			}

			public override AccessibleObject GetChild(int index)
			{
				if (base.ActivityDesigner is ActivityPreviewDesigner activityPreviewDesigner && activityPreviewDesigner.ActiveDesigner == activityPreviewDesigner)
				{
					if (index < activityPreviewDesigner.previewStrip.AccessibilityObjects.Length)
					{
						return activityPreviewDesigner.previewStrip.AccessibilityObjects[index];
					}
					index -= activityPreviewDesigner.previewStrip.AccessibilityObjects.Length;
					if (activityPreviewDesigner.ShowPreview && index == 0)
					{
						return activityPreviewDesigner.previewWindow.AccessibilityObject;
					}
					AccessibleObject accessibleObject = activityPreviewDesigner.PreviewedDesigner.AccessibilityObject;
					while (accessibleObject.Bounds.Size.IsEmpty && accessibleObject.GetChildCount() > 0)
					{
						accessibleObject = accessibleObject.GetChild(0);
					}
					return accessibleObject;
				}
				return base.GetChild(index);
			}
		}

		private ActivityCollectionAccessibleObject accessibilityObject;

		private ActivityDesignerVerbCollection designerVerbs;

		private PreviewItemStrip previewStrip;

		private PreviewWindow previewWindow;

		private Point[] separatorLine = new Point[2];

		private bool removePreviewedDesigner;

		public bool ShowPreview
		{
			get
			{
				return previewWindow != null;
			}
			set
			{
				if (ShowPreview != value)
				{
					if (previewWindow != null)
					{
						previewWindow.PreviewModeChanged -= OnPreviewModeChanged;
						previewWindow = null;
					}
					else
					{
						previewWindow = new PreviewWindow(this);
						previewWindow.PreviewModeChanged += OnPreviewModeChanged;
					}
					designerVerbs = null;
					TypeDescriptor.Refresh(base.Activity);
					RefreshDesignerVerbs();
				}
			}
		}

		public ActivityDesigner PreviewedDesigner
		{
			get
			{
				ItemInfo activeItem = previewStrip.ActiveItem;
				if (activeItem == null)
				{
					return null;
				}
				return ActivityDesigner.GetDesigner(activeItem.UserData[DesignerUserDataKeys.Activity] as Activity);
			}
		}

		public override ReadOnlyCollection<ActivityDesigner> ContainedDesigners
		{
			get
			{
				if (base.ActiveDesigner == this)
				{
					List<ActivityDesigner> list = new List<ActivityDesigner>();
					if (PreviewedDesigner != null)
					{
						if (ShowPreview)
						{
							list.AddRange(base.ContainedDesigners);
							if (removePreviewedDesigner)
							{
								list.Remove(PreviewedDesigner);
							}
						}
						else
						{
							list.Add(PreviewedDesigner);
						}
					}
					return list.AsReadOnly();
				}
				return base.ContainedDesigners;
			}
		}

		public override Point Location
		{
			get
			{
				return base.Location;
			}
			set
			{
				if (base.Location == value)
				{
					return;
				}
				Size size = new Size(value.X - base.Location.X, value.Y - base.Location.Y);
				base.Location = value;
				previewStrip.Location = new Point(previewStrip.Location.X + size.Width, previewStrip.Location.Y + size.Height);
				if (ShowPreview)
				{
					previewWindow.Location = new Point(previewWindow.Location.X + size.Width, previewWindow.Location.Y + size.Height);
					separatorLine[0] = new Point(separatorLine[0].X + size.Width, separatorLine[0].Y + size.Height);
					separatorLine[1] = new Point(separatorLine[1].X + size.Width, separatorLine[1].Y + size.Height);
					return;
				}
				int num = previewStrip.Bounds.Bottom - Location.Y;
				if (PreviewedDesigner != null)
				{
					PreviewedDesigner.Location = new Point(Location.X + (Size.Width - PreviewedDesigner.Size.Width) / 2, Location.Y + num + 2 * WorkflowTheme.CurrentTheme.AmbientTheme.Margin.Height);
				}
			}
		}

		public override object FirstSelectableObject
		{
			get
			{
				if (Expanded && IsVisible)
				{
					if (PreviewedDesigner != null)
					{
						return PreviewedDesigner.Activity;
					}
					if (ContainedDesigners.Count > 0)
					{
						return ContainedDesigners[0].Activity;
					}
				}
				return null;
			}
		}

		public override object LastSelectableObject
		{
			get
			{
				if (Expanded && IsVisible)
				{
					if (PreviewedDesigner != null)
					{
						CompositeActivityDesigner compositeActivityDesigner = PreviewedDesigner as CompositeActivityDesigner;
						if (previewWindow != null && !previewWindow.PreviewMode && compositeActivityDesigner != null)
						{
							return compositeActivityDesigner.LastSelectableObject;
						}
						return PreviewedDesigner.Activity;
					}
					if (ContainedDesigners.Count > 0)
					{
						return ContainedDesigners[ContainedDesigners.Count - 1].Activity;
					}
				}
				return null;
			}
		}

		public override AccessibleObject AccessibilityObject
		{
			get
			{
				if (accessibilityObject == null)
				{
					accessibilityObject = new ActivityCollectionAccessibleObject(this);
				}
				return accessibilityObject;
			}
		}

		protected override string HelpText
		{
			get
			{
				return base.HelpText;
			}
			set
			{
				base.HelpText = value;
				previewStrip.HelpText = value;
			}
		}

		protected override int CurrentDropTarget
		{
			get
			{
				return base.CurrentDropTarget;
			}
			set
			{
				base.CurrentDropTarget = value;
				previewStrip.ActiveDropTarget = value;
			}
		}

		protected override ActivityDesignerVerbCollection Verbs
		{
			get
			{
				ActivityDesignerVerbCollection activityDesignerVerbCollection = new ActivityDesignerVerbCollection();
				activityDesignerVerbCollection.AddRange(base.Verbs);
				if (designerVerbs == null)
				{
					designerVerbs = new ActivityDesignerVerbCollection();
					if (base.ActiveDesigner == this)
					{
						DesignerVerb designerVerb = new ActivityDesignerVerb(this, DesignerVerbGroup.View, DR.GetString("ViewPreviousActivity"), OnViewActivity, OnViewActivityStatusUpdate);
						designerVerb.Properties[DesignerUserDataKeys.ViewActivity] = false;
						designerVerbs.Add(designerVerb);
						designerVerb = new ActivityDesignerVerb(this, DesignerVerbGroup.View, DR.GetString("ViewNextActivity"), OnViewActivity, OnViewActivityStatusUpdate);
						designerVerb.Properties[DesignerUserDataKeys.ViewActivity] = true;
						designerVerbs.Add(designerVerb);
						if (ShowPreview)
						{
							designerVerb = new ActivityDesignerVerb(this, DesignerVerbGroup.Edit, DR.GetString("PreviewActivity"), OnChangePreviewMode, OnPreviewModeStatusUpdate);
							designerVerb.Properties[DesignerUserDataKeys.PreviewActivity] = true;
							designerVerbs.Add(designerVerb);
							designerVerb = new ActivityDesignerVerb(this, DesignerVerbGroup.Edit, DR.GetString("EditActivity"), OnChangePreviewMode, OnPreviewModeStatusUpdate);
							designerVerb.Properties[DesignerUserDataKeys.PreviewActivity] = false;
							designerVerbs.Add(designerVerb);
						}
					}
				}
				activityDesignerVerbCollection.AddRange(designerVerbs);
				return activityDesignerVerbCollection;
			}
		}

		protected internal override ActivityDesignerGlyphCollection Glyphs
		{
			get
			{
				ActivityDesignerGlyphCollection activityDesignerGlyphCollection = new ActivityDesignerGlyphCollection();
				if (Expanded && base.ActiveDesigner == this)
				{
					ISelectionService selectionService = GetService(typeof(ISelectionService)) as ISelectionService;
					bool flag = GetService(typeof(WorkflowDesignerLoader)) is WorkflowDesignerLoader workflowDesignerLoader && !workflowDesignerLoader.InDebugMode;
					foreach (ItemInfo item in previewStrip.Items)
					{
						Rectangle itemBounds = previewStrip.GetItemBounds(item);
						if (!(item.UserData[DesignerUserDataKeys.Activity] is Activity activity) || itemBounds.IsEmpty)
						{
							continue;
						}
						if (selectionService != null && selectionService.GetComponentSelected(activity))
						{
							activityDesignerGlyphCollection.Add(new StripItemSelectionGlyph(this, item));
						}
						if (!activity.Enabled && !ActivityDesigner.IsCommentedActivity(activity))
						{
							activityDesignerGlyphCollection.Add(new StripItemCommentGlyph(this, item));
						}
						if (ShowPreview && flag && Expanded)
						{
							ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
							if (designer != null && designer.DesignerActions.Count > 0 && flag)
							{
								activityDesignerGlyphCollection.Add(new StripItemConfigErrorGlyph(this, item));
							}
						}
					}
				}
				activityDesignerGlyphCollection.AddRange(base.Glyphs);
				return activityDesignerGlyphCollection;
			}
		}

		public ActivityPreviewDesigner()
		{
			previewStrip = new PreviewItemStrip(this);
			previewStrip.SelectionChanged += OnPreviewChanged;
			previewStrip.HelpText = DR.GetString("DropActivitiesHere");
		}

		protected internal override Rectangle[] GetConnectors()
		{
			if (!Expanded || ContainedDesigners.Count > 0 || ShowPreview || base.ActiveDesigner != this)
			{
				return new Rectangle[0];
			}
			AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
			int height = ambientTheme.Margin.Height;
			height += previewStrip.Size.Height;
			height += ambientTheme.Margin.Height;
			Rectangle[] connectors = base.GetConnectors();
			if (connectors.Length != 0)
			{
				connectors[0].Y = connectors[0].Y + height;
				connectors[0].Height -= height;
			}
			return connectors;
		}

		public void RefreshPreview()
		{
			if (ShowPreview)
			{
				previewWindow.Refresh();
			}
		}

		public override HitTestInfo HitTest(Point point)
		{
			HitTestInfo nowhere = HitTestInfo.Nowhere;
			if (Expanded && base.ActiveDesigner == this)
			{
				if (ContainedDesigners.Count == 0 && HelpTextRectangle.Contains(point))
				{
					nowhere = new ConnectorHitTestInfo(this, HitTestLocations.Designer, 0);
				}
				else if (previewStrip.Bounds.Contains(point))
				{
					ItemInfo itemInfo = previewStrip.HitTest(point);
					ActivityDesigner activityDesigner = ((itemInfo != null) ? ActivityDesigner.GetDesigner(itemInfo.UserData[DesignerUserDataKeys.Activity] as Activity) : null);
					nowhere = ((activityDesigner == null) ? new HitTestInfo(this, HitTestLocations.Designer | HitTestLocations.ActionArea) : new HitTestInfo(activityDesigner, HitTestLocations.Designer));
				}
				else if (ShowPreview && previewWindow.Bounds.Contains(point) && (previewWindow.PreviewMode || PreviewedDesigner == null || !PreviewedDesigner.Bounds.Contains(point)))
				{
					nowhere = new HitTestInfo(this, HitTestLocations.Designer | HitTestLocations.ActionArea);
				}
				else
				{
					nowhere = base.HitTest(point);
					if (ShowPreview && previewWindow.PreviewMode && nowhere.AssociatedDesigner != this)
					{
						nowhere = HitTestInfo.Nowhere;
					}
				}
			}
			else
			{
				nowhere = base.HitTest(point);
			}
			return nowhere;
		}

		public override bool IsContainedDesignerVisible(ActivityDesigner containedDesigner)
		{
			if (containedDesigner == null)
			{
				throw new ArgumentNullException("containedDesigner");
			}
			if (base.ActiveDesigner == this)
			{
				if (ShowPreview && previewWindow.PreviewMode)
				{
					return false;
				}
				if (previewStrip.ActiveItem != null)
				{
					return previewStrip.ActiveItem.UserData[DesignerUserDataKeys.Activity] == containedDesigner.Activity;
				}
				return false;
			}
			return base.IsContainedDesignerVisible(containedDesigner);
		}

		public override void EnsureVisibleContainedDesigner(ActivityDesigner containedDesigner)
		{
			if (containedDesigner == null)
			{
				throw new ArgumentNullException("containedDesigner");
			}
			base.EnsureVisibleContainedDesigner(containedDesigner);
			if (base.ActiveDesigner != this)
			{
				return;
			}
			foreach (ItemInfo item in previewStrip.Items)
			{
				if (item.UserData[DesignerUserDataKeys.Activity] == containedDesigner.Activity)
				{
					previewStrip.ActiveItem = item;
					break;
				}
			}
		}

		public override object GetNextSelectableObject(object obj, DesignerNavigationDirection direction)
		{
			if (base.ActiveDesigner != this)
			{
				return base.GetNextSelectableObject(obj, direction);
			}
			if (direction != DesignerNavigationDirection.Left && direction != DesignerNavigationDirection.Right)
			{
				return null;
			}
			object result = null;
			int num = StripItemIndexFromActivity(obj as Activity);
			if (direction == DesignerNavigationDirection.Left && num >= 0)
			{
				result = previewStrip.Items[(num > 0) ? (num - 1) : (previewStrip.Items.Count - 1)].UserData[DesignerUserDataKeys.Activity];
			}
			else if (direction == DesignerNavigationDirection.Right && num <= previewStrip.Items.Count - 1)
			{
				result = previewStrip.Items[(num < previewStrip.Items.Count - 1) ? (num + 1) : 0].UserData[DesignerUserDataKeys.Activity];
			}
			return result;
		}

		protected override void Initialize(Activity activity)
		{
			base.Initialize(activity);
			ShowPreview = true;
			if (base.Activity is CompositeActivity compositeActivity)
			{
				foreach (Activity activity2 in compositeActivity.Activities)
				{
					if (!Helpers.IsAlternateFlowActivity(activity2))
					{
						ItemInfo itemInfo = new ItemInfo(activity2.GetHashCode());
						itemInfo.UserData[DesignerUserDataKeys.Activity] = activity2;
						previewStrip.Items.Add(itemInfo);
					}
				}
			}
			if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				selectionService.SelectionChanged += OnSelectionChanged;
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				selectionService.SelectionChanged -= OnSelectionChanged;
			}
			base.Dispose(disposing);
		}

		protected override Rectangle[] GetDropTargets(Point dropPoint)
		{
			if (base.ActiveDesigner == this && previewStrip.Bounds.Contains(dropPoint))
			{
				return previewStrip.DropTargets;
			}
			return base.GetDropTargets(dropPoint);
		}

		protected override void OnPaint(ActivityDesignerPaintEventArgs e)
		{
			if (ShowPreview && !previewWindow.PreviewMode && PreviewedDesigner != null)
			{
				removePreviewedDesigner = true;
			}
			base.OnPaint(e);
			if (ShowPreview && !previewWindow.PreviewMode && PreviewedDesigner != null)
			{
				removePreviewedDesigner = false;
			}
			if (Expanded && base.ActiveDesigner == this)
			{
				previewStrip.Draw(e.Graphics);
				if (ShowPreview)
				{
					e.Graphics.DrawLine(e.DesignerTheme.ForegroundPen, separatorLine[0], separatorLine[1]);
					previewWindow.Draw(e.Graphics, e.ViewPort);
				}
			}
		}

		protected override void OnDragEnter(ActivityDragEventArgs e)
		{
			base.OnDragEnter(e);
			e.DragImageSnapPoint = SnapInToPreviewStripDropTarget(e);
		}

		protected override void OnDragOver(ActivityDragEventArgs e)
		{
			base.OnDragOver(e);
			e.DragImageSnapPoint = SnapInToPreviewStripDropTarget(e);
		}

		protected override void OnLayoutPosition(ActivityDesignerLayoutEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (base.ActiveDesigner == this && Expanded)
			{
				Rectangle bounds = base.Bounds;
				previewStrip.Location = new Point(bounds.Left + bounds.Width / 2 - previewStrip.Size.Width / 2, Location.Y + TitleHeight + e.AmbientTheme.Margin.Height);
				base.OnLayoutPosition(e);
				if (ShowPreview)
				{
					Rectangle bounds2 = previewStrip.Bounds;
					previewWindow.Location = new Point(bounds.Left + bounds.Width / 2 - previewWindow.Size.Width / 2, bounds2.Bottom + 3 * e.AmbientTheme.Margin.Height);
					separatorLine[0].X = bounds.Left + e.AmbientTheme.Margin.Width;
					separatorLine[0].Y = bounds2.Bottom;
					separatorLine[0].Y += e.AmbientTheme.Margin.Height + e.AmbientTheme.Margin.Height / 2;
					separatorLine[1].X = bounds.Right - e.AmbientTheme.Margin.Width;
					separatorLine[1].Y = bounds2.Bottom;
					separatorLine[1].Y += e.AmbientTheme.Margin.Height + e.AmbientTheme.Margin.Height / 2;
				}
				else
				{
					int num = previewStrip.Bounds.Bottom - Location.Y;
					if (PreviewedDesigner != null)
					{
						PreviewedDesigner.Location = new Point(Location.X + (Size.Width - PreviewedDesigner.Size.Width) / 2, Location.Y + num + 2 * e.AmbientTheme.Margin.Height);
					}
				}
			}
			else
			{
				base.OnLayoutPosition(e);
			}
		}

		protected override Size OnLayoutSize(ActivityDesignerLayoutEventArgs e)
		{
			Size result = base.OnLayoutSize(e);
			if (Expanded && base.ActiveDesigner == this)
			{
				previewStrip.OnLayoutSize(e.Graphics);
				Size empty = Size.Empty;
				empty.Width = Math.Max(empty.Width, previewStrip.Size.Width);
				empty.Height += previewStrip.Size.Height;
				empty.Height += e.AmbientTheme.Margin.Height;
				if (previewWindow != null)
				{
					previewWindow.Refresh();
					previewWindow.OnLayoutSize(e.Graphics, empty.Width);
					empty.Width = Math.Max(empty.Width, previewWindow.Size.Width);
					empty.Width += 2 * e.AmbientTheme.Margin.Width;
					empty.Height += TitleHeight;
					empty.Height += 4 * e.AmbientTheme.Margin.Height;
					empty.Height += previewWindow.Size.Height;
					empty.Height += e.AmbientTheme.Margin.Height;
				}
				else
				{
					empty.Width = Math.Max(empty.Width, result.Width);
					empty.Width += 3 * e.AmbientTheme.Margin.Width;
					empty.Width += 2 * e.AmbientTheme.SelectionSize.Width;
					empty.Height += result.Height;
				}
				empty.Width = Math.Max(empty.Width, MinimumSize.Width);
				empty.Height = Math.Max(empty.Height, MinimumSize.Height);
				if (!ShowPreview && PreviewedDesigner != null)
				{
					if (e.DesignerTheme is ActivityPreviewDesignerTheme activityPreviewDesignerTheme)
					{
						empty.Height -= activityPreviewDesignerTheme.ConnectorSize.Height;
						empty.Height -= 2 * e.AmbientTheme.Margin.Height;
						empty.Height -= 2 * e.AmbientTheme.SelectionSize.Height;
					}
					Size size = new Size(2 * e.AmbientTheme.Margin.Width + 2 * e.AmbientTheme.SelectionSize.Width, 2 * e.AmbientTheme.Margin.Height + 2 * e.AmbientTheme.SelectionSize.Height);
					PreviewedDesigner.Size = new Size(empty.Width - size.Width, empty.Height - (TitleHeight + previewStrip.Size.Height + size.Height));
				}
				result = empty;
			}
			return result;
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			if (base.ActiveDesigner == this)
			{
				Point pt = new Point(e.X, e.Y);
				if (previewStrip.Bounds.Contains(pt))
				{
					previewStrip.OnMouseDown(e);
				}
				else if (ShowPreview && previewWindow.Bounds.Contains(pt))
				{
					previewWindow.OnMouseDown(e);
				}
			}
		}

		protected override void OnMouseDoubleClick(MouseEventArgs e)
		{
			base.OnMouseDoubleClick(e);
			if (base.ActiveDesigner == this)
			{
				Point pt = new Point(e.X, e.Y);
				if (PreviewedDesigner != null && ShowPreview && previewWindow.PreviewMode && previewWindow.Bounds.Contains(pt))
				{
					previewWindow.PreviewMode = false;
				}
			}
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			if (base.ActiveDesigner == this)
			{
				previewStrip.OnMouseUp(e);
			}
		}

		protected override void OnMouseLeave()
		{
			base.OnMouseLeave();
			if (base.ActiveDesigner == this)
			{
				previewStrip.OnMouseLeave();
			}
		}

		protected override void SaveViewState(BinaryWriter writer)
		{
			if (writer == null)
			{
				throw new ArgumentNullException("writer");
			}
			int value = -1;
			bool value2 = false;
			if (previewStrip.ActiveItem != null)
			{
				value = previewStrip.Items.IndexOf(previewStrip.ActiveItem);
			}
			writer.Write(value);
			if (ShowPreview)
			{
				value2 = previewWindow.PreviewMode;
			}
			writer.Write(value2);
			base.SaveViewState(writer);
		}

		protected override void LoadViewState(BinaryReader reader)
		{
			if (reader == null)
			{
				throw new ArgumentNullException("reader");
			}
			int num = reader.ReadInt32();
			if (num != -1 && num < previewStrip.Items.Count)
			{
				ItemInfo itemInfo = previewStrip.Items[num];
				if (!(GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
				{
					throw new Exception(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
				}
				EnsureVisibleContainedDesigner(designerHost.GetDesigner((Activity)itemInfo.UserData[DesignerUserDataKeys.Activity]) as ActivityDesigner);
			}
			bool previewMode = reader.ReadBoolean();
			if (ShowPreview)
			{
				previewWindow.PreviewMode = previewMode;
			}
			base.LoadViewState(reader);
		}

		protected override void OnThemeChange(ActivityDesignerTheme newTheme)
		{
			base.OnThemeChange(newTheme);
			RefreshPreview();
		}

		protected internal override void RefreshDesignerActions()
		{
			base.RefreshDesignerActions();
			RefreshPreview();
		}

		protected override void OnContainedActivitiesChanged(ActivityCollectionChangeEventArgs listChangeArgs)
		{
			if (base.ActiveDesigner == this)
			{
				if (listChangeArgs.Action == ActivityCollectionChangeAction.Add && listChangeArgs.AddedItems.Count > 0 && !Helpers.IsAlternateFlowActivity(listChangeArgs.AddedItems[0]))
				{
					ItemInfo itemInfo = new ItemInfo(listChangeArgs.AddedItems[0].GetHashCode());
					itemInfo.UserData[DesignerUserDataKeys.Activity] = listChangeArgs.AddedItems[0];
					if (listChangeArgs.Index < previewStrip.Items.Count)
					{
						previewStrip.Items.Insert(listChangeArgs.Index, itemInfo);
					}
					else
					{
						previewStrip.Items.Add(itemInfo);
					}
				}
				else if (listChangeArgs.Action == ActivityCollectionChangeAction.Remove && listChangeArgs.RemovedItems.Count > 0)
				{
					int num = previewStrip.Items.IndexOf(new ItemInfo(listChangeArgs.RemovedItems[0].GetHashCode()));
					if (num >= 0)
					{
						previewStrip.Items.RemoveAt(num);
					}
				}
			}
			base.OnContainedActivitiesChanged(listChangeArgs);
		}

		private Point SnapInToPreviewStripDropTarget(ActivityDragEventArgs e)
		{
			int activeDropTarget = previewStrip.ActiveDropTarget;
			Rectangle[] dropTargets = previewStrip.DropTargets;
			if (activeDropTarget < 0 || activeDropTarget >= dropTargets.Length)
			{
				return Point.Empty;
			}
			Rectangle rectangle = dropTargets[activeDropTarget];
			ActivityPreviewDesignerTheme activityPreviewDesignerTheme = base.DesignerTheme as ActivityPreviewDesignerTheme;
			rectangle.Width = ((rectangle.Width <= (activityPreviewDesignerTheme?.ConnectorSize.Width ?? 0)) ? rectangle.Width : (activityPreviewDesignerTheme?.ConnectorSize.Width ?? 0));
			return new Point(rectangle.Left + rectangle.Width / 2, rectangle.Top + rectangle.Height / 2);
		}

		private void OnSelectionChanged(object sender, EventArgs e)
		{
			if (!(GetService(typeof(ISelectionService)) is ISelectionService selectionService) || base.ActiveDesigner != this)
			{
				return;
			}
			foreach (ItemInfo item in previewStrip.Items)
			{
				if (item.UserData[DesignerUserDataKeys.Activity] == selectionService.PrimarySelection)
				{
					previewStrip.ActiveItem = item;
					break;
				}
			}
			if (selectionService.SelectionCount != 1)
			{
				return;
			}
			ActivityDesigner designer = ActivityDesigner.GetDesigner(selectionService.PrimarySelection as Activity);
			if (designer == null || designer.IsVisible || this == designer.ParentDesigner)
			{
				return;
			}
			ActivityDesigner activityDesigner = designer;
			while (activityDesigner != null)
			{
				CompositeActivityDesigner parentDesigner = activityDesigner.ParentDesigner;
				if (this == parentDesigner)
				{
					break;
				}
				activityDesigner = parentDesigner;
			}
			if (activityDesigner != null)
			{
				if (previewWindow != null && previewWindow.PreviewMode)
				{
					activityDesigner.EnsureVisible();
				}
				else
				{
					designer.EnsureVisible();
				}
			}
		}

		private void OnPreviewChanged(object sender, SelectionChangeEventArgs e)
		{
			bool flag = !ShowPreview;
			if (ShowPreview)
			{
				previewWindow.PreviewedActivity = ((e.CurrentItem != null) ? (e.CurrentItem.UserData[DesignerUserDataKeys.Activity] as Activity) : null);
				flag = !previewWindow.PreviewMode;
			}
			if (flag)
			{
				PerformLayout();
			}
		}

		private void OnViewActivity(object sender, EventArgs args)
		{
			if (sender is DesignerVerb designerVerb && designerVerb.Properties.Contains(DesignerUserDataKeys.ViewActivity))
			{
				ItemInfo activeItem = previewStrip.ActiveItem;
				if (activeItem != null)
				{
					bool flag = (bool)designerVerb.Properties[DesignerUserDataKeys.ViewActivity];
					int num = previewStrip.Items.IndexOf(activeItem) + (flag ? 1 : (-1));
					num = ((num < previewStrip.Items.Count) ? ((num < 0) ? (previewStrip.Items.Count - 1) : num) : 0);
					previewStrip.ActiveItem = previewStrip.Items[num];
				}
			}
		}

		private void OnViewActivityStatusUpdate(object sender, EventArgs args)
		{
			if (sender is DesignerVerb designerVerb)
			{
				designerVerb.Enabled = previewStrip.ActiveItem != null && previewStrip.Items.Count > 1 && previewStrip.Items.IndexOf(previewStrip.ActiveItem) >= 0;
			}
		}

		private void OnChangePreviewMode(object sender, EventArgs args)
		{
			DesignerVerb designerVerb = sender as DesignerVerb;
			if (ShowPreview && designerVerb != null && designerVerb.Properties.Contains(DesignerUserDataKeys.PreviewActivity))
			{
				previewWindow.PreviewMode = (bool)designerVerb.Properties[DesignerUserDataKeys.PreviewActivity];
			}
		}

		private void OnPreviewModeStatusUpdate(object sender, EventArgs args)
		{
			DesignerVerb designerVerb = sender as DesignerVerb;
			if (ShowPreview && designerVerb != null && designerVerb.Properties.Contains(DesignerUserDataKeys.PreviewActivity))
			{
				designerVerb.Enabled = previewWindow.PreviewMode != (bool)designerVerb.Properties[DesignerUserDataKeys.PreviewActivity];
			}
		}

		private void OnPreviewModeChanged(object sender, EventArgs e)
		{
			RefreshDesignerVerbs();
		}

		private int StripItemIndexFromActivity(Activity activity)
		{
			int num = 0;
			foreach (ItemInfo item in previewStrip.Items)
			{
				if (item.UserData[DesignerUserDataKeys.Activity] == activity)
				{
					return num;
				}
				num++;
			}
			return -1;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class DesignerView
	{
		private static int MaxViewName = 150;

		private int viewId;

		private string text;

		private Image image;

		private IDictionary userData;

		private ActivityDesigner designer;

		public int ViewId => viewId;

		public string Text => text;

		public Image Image => image;

		public IDictionary UserData
		{
			get
			{
				if (userData == null)
				{
					userData = new HybridDictionary();
				}
				return userData;
			}
		}

		public virtual ActivityDesigner AssociatedDesigner => designer;

		public DesignerView(int viewId, string text, Image image)
		{
			if (text == null)
			{
				throw new ArgumentNullException("text");
			}
			if (image == null)
			{
				throw new ArgumentNullException("image");
			}
			this.viewId = viewId;
			this.text = ((text.Length > MaxViewName) ? (text.Substring(0, MaxViewName) + "...") : text);
			this.image = image;
		}

		public DesignerView(int viewId, string text, Image image, ActivityDesigner associatedDesigner)
			: this(viewId, text, image)
		{
			if (associatedDesigner == null)
			{
				throw new ArgumentNullException("associatedDesigner");
			}
			designer = associatedDesigner;
		}

		public virtual void OnActivate()
		{
		}

		public virtual void OnDeactivate()
		{
		}

		public override bool Equals(object obj)
		{
			if (!(obj is DesignerView designerView))
			{
				return false;
			}
			return viewId == designerView.viewId;
		}

		public override int GetHashCode()
		{
			return viewId;
		}
	}
	internal static class SecondaryViewProvider
	{
		private const string EventHandlersRef = "System.Workflow.Activities.EventHandlersActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";

		private const string EventHandlingScopeRef = "System.Workflow.Activities.EventHandlingScopeActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";

		internal static ReadOnlyCollection<DesignerView> GetViews(StructuredCompositeActivityDesigner designer)
		{
			if (designer.Activity == null)
			{
				throw new ArgumentException("Component can not be null!");
			}
			bool flag = !designer.IsEditable;
			List<object[]> list = new List<object[]>();
			string toolboxDisplayName = ActivityToolboxItem.GetToolboxDisplayName(designer.Activity.GetType());
			list.Add(new object[2]
			{
				designer.Activity.GetType(),
				DR.GetString("ViewActivity", toolboxDisplayName)
			});
			if (designer.Activity.Site != null)
			{
				WorkflowDesignerLoader workflowDesignerLoader = designer.Activity.Site.GetService(typeof(WorkflowDesignerLoader)) as WorkflowDesignerLoader;
				Type type = designer.Activity.GetType();
				if (workflowDesignerLoader == null || (typeof(CompositeActivity).IsAssignableFrom(type) && (!flag || FindActivity(designer, typeof(CancellationHandlerActivity)) != null)))
				{
					list.Add(new object[2]
					{
						typeof(CancellationHandlerActivity),
						DR.GetString("ViewCancelHandler")
					});
				}
				if (workflowDesignerLoader == null || (typeof(CompositeActivity).IsAssignableFrom(type) && (!flag || FindActivity(designer, typeof(FaultHandlersActivity)) != null)))
				{
					list.Add(new object[2]
					{
						typeof(FaultHandlersActivity),
						DR.GetString("ViewExceptions")
					});
				}
				if (workflowDesignerLoader == null || (designer.Activity is ICompensatableActivity && typeof(CompositeActivity).IsAssignableFrom(type) && (!flag || FindActivity(designer, typeof(CompensationHandlerActivity)) != null)))
				{
					list.Add(new object[2]
					{
						typeof(CompensationHandlerActivity),
						DR.GetString("ViewCompensation")
					});
				}
				if (workflowDesignerLoader == null || (Type.GetType("System.Workflow.Activities.EventHandlingScopeActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35").IsAssignableFrom(type) && (!flag || FindActivity(designer, Type.GetType("System.Workflow.Activities.EventHandlersActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")) != null)))
				{
					list.Add(new object[2]
					{
						Type.GetType("System.Workflow.Activities.EventHandlersActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"),
						DR.GetString("ViewEvents")
					});
				}
			}
			List<DesignerView> list2 = new List<DesignerView>();
			for (int i = 0; i < list.Count; i++)
			{
				Type activityType = list[i][0] as Type;
				DesignerView item = new SecondaryView(designer, i + 1, list[i][1] as string, activityType);
				list2.Add(item);
			}
			return list2.AsReadOnly();
		}

		internal static IList<Type> GetActivityTypes(StructuredCompositeActivityDesigner designer)
		{
			List<Type> list = new List<Type>();
			ReadOnlyCollection<DesignerView> views = designer.Views;
			for (int i = 1; i < views.Count; i++)
			{
				Type item = views[i].UserData[SecondaryView.UserDataKey_ActivityType] as Type;
				list.Add(item);
			}
			return list.AsReadOnly();
		}

		internal static void OnViewRemoved(StructuredCompositeActivityDesigner designer, Type viewTypeRemoved)
		{
			ReadOnlyCollection<DesignerView> views = designer.Views;
			for (int i = 1; i < views.Count; i++)
			{
				Type type = views[i].UserData[SecondaryView.UserDataKey_ActivityType] as Type;
				if (viewTypeRemoved == type)
				{
					views[i].UserData[SecondaryView.UserDataKey_Designer] = null;
				}
			}
		}

		internal static Activity FindActivity(StructuredCompositeActivityDesigner designer, Type activityType)
		{
			CompositeActivity compositeActivity = designer.Activity as CompositeActivity;
			if (activityType == null || compositeActivity == null)
			{
				return null;
			}
			foreach (Activity activity in compositeActivity.Activities)
			{
				if (activityType.IsAssignableFrom(activity.GetType()))
				{
					return activity;
				}
			}
			return null;
		}
	}
	internal sealed class SecondaryView : DesignerView
	{
		internal static readonly Guid UserDataKey_ActivityType = new Guid("03C4103A-D6E9-46e9-B98E-149E145EC2C9");

		internal static readonly Guid UserDataKey_Designer = new Guid("2B72C7F7-DE4A-4e32-8EB4-9E1ED1C5E84E");

		private StructuredCompositeActivityDesigner parentDesigner;

		public override ActivityDesigner AssociatedDesigner
		{
			get
			{
				ActivityDesigner activityDesigner = base.UserData[UserDataKey_Designer] as ActivityDesigner;
				if (activityDesigner == null)
				{
					Type type = base.UserData[UserDataKey_ActivityType] as Type;
					if (type != null)
					{
						if (type != parentDesigner.Activity.GetType())
						{
							Activity activity = SecondaryViewProvider.FindActivity(parentDesigner, type);
							if (activity != null)
							{
								activityDesigner = ActivityDesigner.GetDesigner(activity);
							}
						}
						else
						{
							activityDesigner = parentDesigner;
						}
						base.UserData[UserDataKey_Designer] = activityDesigner;
					}
				}
				return activityDesigner;
			}
		}

		internal SecondaryView(StructuredCompositeActivityDesigner parentDesigner, int id, string text, Type activityType)
			: base(id, text, ActivityToolboxItem.GetToolboxImage(activityType))
		{
			this.parentDesigner = parentDesigner;
			base.UserData[UserDataKey_ActivityType] = activityType;
			if (this.parentDesigner.Activity.GetType() == activityType)
			{
				base.UserData[UserDataKey_Designer] = this.parentDesigner;
			}
		}

		public override void OnActivate()
		{
			if (AssociatedDesigner != null)
			{
				return;
			}
			Type type = base.UserData[UserDataKey_ActivityType] as Type;
			CompositeActivity compositeActivity = parentDesigner.Activity as CompositeActivity;
			if (type == null || compositeActivity == null || !parentDesigner.IsEditable)
			{
				return;
			}
			Activity activity = Activator.CreateInstance(type) as Activity;
			try
			{
				CompositeActivityDesigner.InsertActivities(parentDesigner, new HitTestInfo(parentDesigner, HitTestLocations.Designer), new List<Activity>(new Activity[1] { activity }).AsReadOnly(), SR.GetString("AddingImplicitActivity"));
			}
			catch (Exception ex)
			{
				if (ex != CheckoutException.Canceled && parentDesigner.Activity.Site.GetService(typeof(IUIService)) is IUIService iUIService)
				{
					iUIService.ShowError(ex.Message);
				}
			}
			ActivityDesigner value = ActivityDesigner.GetDesigner(activity);
			base.UserData[UserDataKey_Designer] = value;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class SequentialWorkflowRootDesigner : SequentialActivityDesigner
	{
		private sealed class WorkflowHeader : SequentialWorkflowHeaderFooter
		{
			public override Rectangle Bounds
			{
				get
				{
					Rectangle bounds = base.Bounds;
					Rectangle textRectangle = base.TextRectangle;
					if (MinHeaderBarHeight > textRectangle.Height)
					{
						bounds.Height += MinHeaderBarHeight - textRectangle.Height;
					}
					return bounds;
				}
			}

			public override Rectangle TextRectangle
			{
				get
				{
					Rectangle textRectangle = base.TextRectangle;
					if (MinHeaderBarHeight > textRectangle.Height)
					{
						textRectangle.Y += (MinHeaderBarHeight - textRectangle.Height) / 2;
					}
					return textRectangle;
				}
			}

			public override Rectangle ImageRectangle
			{
				get
				{
					Rectangle imageRectangle = base.ImageRectangle;
					if (Image != null)
					{
						ActivityDesignerTheme designerTheme = base.AssociatedDesigner.DesignerTheme;
						imageRectangle.X -= 4;
						imageRectangle.Y = HeaderBarRectangle.Bottom + WorkflowTheme.CurrentTheme.AmbientTheme.Margin.Height;
						imageRectangle.Width += 8;
						imageRectangle.Height += 8;
					}
					return imageRectangle;
				}
			}

			private Rectangle HeaderBarRectangle
			{
				get
				{
					Rectangle result = default(Rectangle);
					result.Location = base.AssociatedDesigner.Location;
					result.Width = base.AssociatedDesigner.Size.Width;
					result.Height = Math.Max(2 * WorkflowTheme.CurrentTheme.AmbientTheme.Margin.Height + textSize.Height, MinHeaderBarHeight);
					return result;
				}
			}

			private int MinHeaderBarHeight => 2 * WorkflowTheme.CurrentTheme.AmbientTheme.Margin.Height;

			public WorkflowHeader(SequentialWorkflowRootDesigner parent)
				: base(parent, isHeader: true)
			{
				Image = HeaderImage;
			}

			public override void OnPaint(ActivityDesignerPaintEventArgs e)
			{
				if (e == null)
				{
					throw new ArgumentNullException("e");
				}
				Rectangle headerBarRectangle = HeaderBarRectangle;
				Color empty = Color.Empty;
				Color color = Color.FromArgb(50, e.DesignerTheme.BorderColor);
				using (Brush brush = new LinearGradientBrush(headerBarRectangle, empty, color, LinearGradientMode.Vertical))
				{
					e.Graphics.FillRectangle(brush, headerBarRectangle);
					e.Graphics.DrawLine(e.DesignerTheme.BorderPen, headerBarRectangle.Left, headerBarRectangle.Bottom, headerBarRectangle.Right, headerBarRectangle.Bottom);
				}
				base.OnPaint(e);
			}
		}

		private sealed class WorkflowFooter : SequentialWorkflowHeaderFooter
		{
			public override Rectangle Bounds
			{
				get
				{
					Rectangle bounds = base.Bounds;
					SequentialWorkflowRootDesigner associatedDesigner = base.AssociatedDesigner;
					bounds.Height = Math.Max(bounds.Height, associatedDesigner.Size.Height - associatedDesigner.TitleHeight - associatedDesigner.OptimalHeight);
					bounds.Y = associatedDesigner.Location.Y + associatedDesigner.TitleHeight + associatedDesigner.OptimalHeight;
					int height = ImageRectangle.Height;
					height += ((height > 0) ? (2 * WorkflowTheme.CurrentTheme.AmbientTheme.Margin.Height) : 0);
					height += MinFooterBarHeight;
					bounds.Height = Math.Max(height, bounds.Height);
					return bounds;
				}
			}

			public override Rectangle ImageRectangle
			{
				get
				{
					Rectangle imageRectangle = base.ImageRectangle;
					if (Image != null)
					{
						SequentialWorkflowRootDesigner associatedDesigner = base.AssociatedDesigner;
						imageRectangle.X -= 4;
						imageRectangle.Width += 8;
						imageRectangle.Height += 8;
						imageRectangle.Y = associatedDesigner.Location.Y + associatedDesigner.TitleHeight + associatedDesigner.OptimalHeight;
						imageRectangle.Y += WorkflowTheme.CurrentTheme.AmbientTheme.Margin.Height;
					}
					return imageRectangle;
				}
			}

			internal Rectangle FooterBarRectangle => Rectangle.Empty;

			private int MinFooterBarHeight => 0;

			public WorkflowFooter(SequentialWorkflowRootDesigner parent)
				: base(parent, isHeader: false)
			{
				Image = FooterImage;
			}

			public override void OnPaint(ActivityDesignerPaintEventArgs e)
			{
				if (e == null)
				{
					throw new ArgumentNullException("e");
				}
				Rectangle footerBarRectangle = FooterBarRectangle;
				if (!FooterBarRectangle.IsEmpty)
				{
					Color empty = Color.Empty;
					Color color = Color.FromArgb(50, e.DesignerTheme.BorderColor);
					using Brush brush = new LinearGradientBrush(footerBarRectangle, color, empty, LinearGradientMode.Vertical);
					e.Graphics.FillRectangle(brush, footerBarRectangle);
					e.Graphics.DrawLine(e.DesignerTheme.BorderPen, footerBarRectangle.Left, footerBarRectangle.Top, footerBarRectangle.Right, footerBarRectangle.Top);
				}
				base.OnPaint(e);
			}
		}

		private const int HeaderFooterSizeIncr = 8;

		private static readonly Image HeaderImage = DR.GetImage("StartWorkflow");

		private static readonly Image FooterImage = DR.GetImage("EndWorkflow");

		private static readonly Size PageStripItemSize = new Size(24, 20);

		private static readonly Size MinSize = new Size(240, 240);

		private WorkflowHeader header;

		private WorkflowFooter footer;

		public override string Text => string.Empty;

		public override Image Image => Header.Image;

		protected override Rectangle ImageRectangle => Rectangle.Empty;

		public override bool CanExpandCollapse => false;

		public override Size MinimumSize
		{
			get
			{
				Size minimumSize = base.MinimumSize;
				minimumSize.Width = Math.Max(minimumSize.Width, MinSize.Width);
				minimumSize.Height = Math.Max(minimumSize.Width, MinSize.Height);
				if (base.IsRootDesigner && InvokingDesigner == null)
				{
					minimumSize.Width = Math.Max(minimumSize.Width, base.ParentView.ViewPortSize.Width - 2 * DefaultWorkflowLayout.Separator.Width);
					minimumSize.Height = Math.Max(minimumSize.Height, base.ParentView.ViewPortSize.Height - 2 * DefaultWorkflowLayout.Separator.Height);
				}
				return minimumSize;
			}
		}

		protected virtual SequentialWorkflowHeaderFooter Header
		{
			get
			{
				if (header == null)
				{
					header = new WorkflowHeader(this);
				}
				return header;
			}
		}

		protected virtual SequentialWorkflowHeaderFooter Footer
		{
			get
			{
				if (footer == null)
				{
					footer = new WorkflowFooter(this);
				}
				return footer;
			}
		}

		protected override int TitleHeight
		{
			get
			{
				int num = base.TitleHeight;
				if (Header != null)
				{
					num += Header.Bounds.Height;
				}
				return num;
			}
		}

		protected override bool ShowSmartTag
		{
			get
			{
				if (Header != null && !string.IsNullOrEmpty(Header.Text) && Views.Count > 1)
				{
					return true;
				}
				return base.ShowSmartTag;
			}
		}

		protected override Rectangle SmartTagRectangle
		{
			get
			{
				Rectangle result = Rectangle.Empty;
				if (Header != null)
				{
					result = Header.ImageRectangle;
				}
				return result;
			}
		}

		protected override CompositeActivityDesigner InvokingDesigner
		{
			get
			{
				return base.InvokingDesigner;
			}
			set
			{
				base.InvokingDesigner = value;
			}
		}

		protected internal override ActivityDesignerGlyphCollection Glyphs
		{
			get
			{
				ActivityDesignerGlyphCollection activityDesignerGlyphCollection = new ActivityDesignerGlyphCollection(base.Glyphs);
				if (InvokingDesigner != null)
				{
					activityDesignerGlyphCollection.Add(LockedActivityGlyph.Default);
				}
				return activityDesignerGlyphCollection;
			}
		}

		internal override WorkflowLayout SupportedLayout => new WorkflowRootLayout(base.Activity.Site);

		private int OptimalHeight
		{
			get
			{
				if (!(base.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme))
				{
					return 0;
				}
				int num = 0;
				if (ContainedDesigners.Count == 0)
				{
					num += compositeDesignerTheme.ConnectorSize.Height;
					num += base.HelpTextSize.Height;
					num += compositeDesignerTheme.ConnectorSize.Height;
				}
				else
				{
					ActivityDesigner activeDesigner = base.ActiveDesigner;
					if (activeDesigner == this)
					{
						num += compositeDesignerTheme.ConnectorSize.Height;
					}
					AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
					foreach (ActivityDesigner containedDesigner in ContainedDesigners)
					{
						num += containedDesigner.Size.Height;
						num = ((activeDesigner != this) ? (num + 2 * ambientTheme.SelectionSize.Height) : (num + compositeDesignerTheme.ConnectorSize.Height));
					}
				}
				return num;
			}
		}

		public override bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner)
		{
			return false;
		}

		protected override ReadOnlyCollection<Point> GetInnerConnections(DesignerEdges edges)
		{
			List<Point> list = new List<Point>(base.GetInnerConnections(edges));
			if (list.Count > 0 && Footer != null && (edges & DesignerEdges.Bottom) > DesignerEdges.None)
			{
				list[list.Count - 1] = new Point(list[list.Count - 1].X, list[list.Count - 1].Y - Footer.Bounds.Height);
			}
			return list.AsReadOnly();
		}

		protected override void OnSmartTagVisibilityChanged(bool visible)
		{
			base.OnSmartTagVisibilityChanged(visible);
			if (Header != null && !Header.TextRectangle.IsEmpty)
			{
				Invalidate(Header.TextRectangle);
			}
		}

		protected override Size OnLayoutSize(ActivityDesignerLayoutEventArgs e)
		{
			Size result = base.OnLayoutSize(e);
			if (Footer is WorkflowFooter workflowFooter)
			{
				result.Height += workflowFooter.ImageRectangle.Height + 2 * e.AmbientTheme.Margin.Height + workflowFooter.FooterBarRectangle.Size.Height;
			}
			if (Header != null)
			{
				Header.OnLayout(e);
			}
			if (Footer != null)
			{
				Footer.OnLayout(e);
			}
			return result;
		}

		protected override void OnPaint(ActivityDesignerPaintEventArgs e)
		{
			base.OnPaint(e);
			if (e.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme)
			{
				Rectangle empty = Rectangle.Empty;
				if (compositeDesignerTheme.WatermarkImage != null)
				{
					Rectangle bounds = base.Bounds;
					bounds.Inflate(-e.AmbientTheme.Margin.Width, -e.AmbientTheme.Margin.Height);
					empty = ActivityDesignerPaint.GetRectangleFromAlignment(compositeDesignerTheme.WatermarkAlignment, bounds, compositeDesignerTheme.WatermarkImage.Size);
				}
				if (Header != null)
				{
					Header.OnPaint(e);
				}
				if (Footer != null)
				{
					Footer.OnPaint(e);
				}
			}
		}

		internal void InternalPerformLayout()
		{
			PerformLayout();
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class SequentialWorkflowHeaderFooter
	{
		private SequentialWorkflowRootDesigner rootDesigner;

		private Image image;

		private string text = string.Empty;

		private bool isHeader = true;

		internal Size textSize = Size.Empty;

		public virtual Image Image
		{
			get
			{
				return image;
			}
			set
			{
				if (image != value)
				{
					image = value;
					AssociatedDesigner.InternalPerformLayout();
				}
			}
		}

		public virtual string Text
		{
			get
			{
				return text;
			}
			set
			{
				if (!(text == value))
				{
					text = value;
					AssociatedDesigner.InternalPerformLayout();
				}
			}
		}

		public virtual Rectangle Bounds
		{
			get
			{
				Rectangle empty = Rectangle.Empty;
				Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
				Rectangle textRectangle = TextRectangle;
				Rectangle imageRectangle = ImageRectangle;
				if (!textRectangle.Size.IsEmpty || !imageRectangle.Size.IsEmpty)
				{
					empty.Width = Math.Max(imageRectangle.Width, textRectangle.Width) + 2 * margin.Width;
					empty.Height = margin.Height + imageRectangle.Height;
					empty.Height += ((imageRectangle.Height > 0) ? margin.Height : 0);
					empty.Height += textRectangle.Height;
					empty.Height += ((textRectangle.Height > 0) ? margin.Height : 0);
					Rectangle bounds = rootDesigner.Bounds;
					empty.X = bounds.Left + bounds.Width / 2 - empty.Width / 2;
					empty.Y = (isHeader ? bounds.Top : (bounds.Bottom - empty.Height));
				}
				return empty;
			}
		}

		public virtual Rectangle TextRectangle
		{
			get
			{
				Rectangle empty = Rectangle.Empty;
				if (!string.IsNullOrEmpty(Text))
				{
					Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
					Rectangle bounds = rootDesigner.Bounds;
					empty.Size = textSize;
					empty.X = bounds.Left + bounds.Width / 2 - textSize.Width / 2;
					empty.Y = (isHeader ? (bounds.Top + margin.Height) : (bounds.Bottom - margin.Height - textSize.Height));
				}
				return empty;
			}
		}

		public virtual Rectangle ImageRectangle
		{
			get
			{
				Rectangle empty = Rectangle.Empty;
				if (Image != null)
				{
					ActivityDesignerTheme designerTheme = rootDesigner.DesignerTheme;
					Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
					Rectangle bounds = rootDesigner.Bounds;
					Rectangle textRectangle = TextRectangle;
					empty.Size = designerTheme.ImageSize;
					empty.X = bounds.Left + bounds.Width / 2 - empty.Width / 2;
					if (isHeader)
					{
						empty.Y = bounds.Top + margin.Height;
						empty.Y += textRectangle.Height;
						empty.Y += ((textRectangle.Height > 0) ? margin.Height : 0);
					}
					else
					{
						empty.Y = bounds.Bottom - margin.Height;
						empty.Y -= textRectangle.Height;
						empty.Y -= ((textRectangle.Height > 0) ? margin.Height : 0);
						empty.Y -= empty.Height;
					}
				}
				return empty;
			}
		}

		protected SequentialWorkflowRootDesigner AssociatedDesigner => rootDesigner;

		public SequentialWorkflowHeaderFooter(SequentialWorkflowRootDesigner parent, bool isHeader)
		{
			rootDesigner = parent;
			this.isHeader = isHeader;
		}

		public virtual void OnLayout(ActivityDesignerLayoutEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (!string.IsNullOrEmpty(Text) && e.DesignerTheme != null && e.DesignerTheme.Font != null)
			{
				using (Font font = new Font(e.DesignerTheme.Font.FontFamily, e.DesignerTheme.Font.SizeInPoints + 1f, FontStyle.Bold))
				{
					textSize = ActivityDesignerPaint.MeasureString(e.Graphics, font, Text, StringAlignment.Center, Size.Empty);
				}
			}
		}

		public virtual void OnPaint(ActivityDesignerPaintEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			if (!string.IsNullOrEmpty(Text) && !TextRectangle.Size.IsEmpty && e.DesignerTheme != null && e.DesignerTheme.Font != null)
			{
				using Font font = new Font(e.DesignerTheme.Font.FontFamily, e.DesignerTheme.Font.SizeInPoints + 1f, AssociatedDesigner.SmartTagVisible ? FontStyle.Bold : FontStyle.Regular);
				ActivityDesignerPaint.DrawText(e.Graphics, font, Text, TextRectangle, StringAlignment.Center, TextQuality.AntiAliased, e.DesignerTheme.ForegroundBrush);
			}
			if (Image != null && !ImageRectangle.Size.IsEmpty)
			{
				ActivityDesignerPaint.DrawImage(e.Graphics, Image, ImageRectangle, DesignerContentAlignment.Fill);
			}
		}
	}
	internal static class ExtenderHelpers
	{
		internal static void FilterDependencyProperties(IServiceProvider serviceProvider, Activity activity)
		{
			if (!(serviceProvider.GetService(typeof(IExtenderListService)) is IExtenderListService extenderListService))
			{
				return;
			}
			Dictionary<string, DependencyProperty> dictionary = new Dictionary<string, DependencyProperty>();
			foreach (DependencyProperty metaDependencyProperty in activity.MetaDependencyProperties)
			{
				dictionary.Add(metaDependencyProperty.Name, metaDependencyProperty);
			}
			List<string> list = new List<string>();
			IExtenderProvider[] extenderProviders = extenderListService.GetExtenderProviders();
			foreach (IExtenderProvider extenderProvider in extenderProviders)
			{
				if (!extenderProvider.CanExtend(activity))
				{
					ProvidePropertyAttribute[] array = extenderProvider.GetType().GetCustomAttributes(typeof(ProvidePropertyAttribute), inherit: true) as ProvidePropertyAttribute[];
					ProvidePropertyAttribute[] array2 = array;
					foreach (ProvidePropertyAttribute providePropertyAttribute in array2)
					{
						list.Add(providePropertyAttribute.PropertyName);
					}
				}
			}
			foreach (string item in list)
			{
				if (dictionary.ContainsKey(item))
				{
					activity.RemoveProperty(dictionary[item]);
				}
			}
		}
	}
	[ToolboxItem(false)]
	[ActivityDesignerTheme(typeof(AmbientTheme), Xml = "<AmbientTheme xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/workflow\" ApplyTo=\"System.Workflow.ComponentModel.Design.WorkflowView\" ShowConfigErrors=\"True\" DrawShadow=\"False\" DrawGrayscale=\"False\" DropIndicatorColor=\"0xFF006400\" SelectionForeColor=\"0xFF0000FF\" SelectionPatternColor=\"0xFF606060\" ForeColor=\"0xFF808080\" BackColor=\"0xFFFFFFFF\" ShowGrid=\"False\" GridColor=\"0xFFC0C0C0\" TextQuality=\"Aliased\" DrawRounded=\"True\" ShowDesignerBorder=\"True\" />")]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class WorkflowView : UserControl, IServiceProvider, IMessageFilter
	{
		[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
		private enum TabButtonIds
		{
			MultiPage = 1,
			Zoom,
			Pan
		}

		private sealed class WorkflowMessageDispatchData : IDisposable
		{
			private WorkflowView workflowView;

			private HitTestInfo messageContext;

			public ReadOnlyCollection<WorkflowDesignerMessageFilter> Filters
			{
				get
				{
					List<WorkflowDesignerMessageFilter> list = new List<WorkflowDesignerMessageFilter>();
					list.AddRange(workflowView.customMessageFilters);
					list.AddRange(workflowView.stockMessageFilters);
					return list.AsReadOnly();
				}
			}

			public WorkflowMessageDispatchData(WorkflowView workflowView, EventArgs e)
			{
				this.workflowView = workflowView;
				if (this.workflowView.RootDesigner == null || this.workflowView.stockMessageFilters.Count <= 0)
				{
					return;
				}
				Point clientPoint = Point.Empty;
				if (e is MouseEventArgs || e is DragEventArgs)
				{
					if (e is MouseEventArgs)
					{
						clientPoint = new Point(((MouseEventArgs)e).X, ((MouseEventArgs)e).Y);
					}
					else if (e is DragEventArgs)
					{
						clientPoint = this.workflowView.PointToClient(new Point(((DragEventArgs)e).X, ((DragEventArgs)e).Y));
						this.workflowView.UpdateLayout();
					}
					Point point = this.workflowView.ClientPointToLogical(clientPoint);
					HitTestInfo hitTestInfo = this.workflowView.RootDesigner.HitTest(point);
					messageContext = ((hitTestInfo != null) ? hitTestInfo : HitTestInfo.Nowhere);
					this.workflowView.messageHitTestContexts.Push(messageContext);
				}
			}

			void IDisposable.Dispose()
			{
				if (workflowView != null && messageContext != null)
				{
					HitTestInfo hitTestInfo = workflowView.messageHitTestContexts.Pop();
					_ = messageContext;
				}
			}
		}

		internal const string ThemeXml = "<AmbientTheme xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/workflow\" ApplyTo=\"System.Workflow.ComponentModel.Design.WorkflowView\" ShowConfigErrors=\"True\" DrawShadow=\"False\" DrawGrayscale=\"False\" DropIndicatorColor=\"0xFF006400\" SelectionForeColor=\"0xFF0000FF\" SelectionPatternColor=\"0xFF606060\" ForeColor=\"0xFF808080\" BackColor=\"0xFFFFFFFF\" ShowGrid=\"False\" GridColor=\"0xFFC0C0C0\" TextQuality=\"Aliased\" DrawRounded=\"True\" ShowDesignerBorder=\"True\" />";

		private IServiceProvider serviceProvider;

		private ActivityDesigner rootDesigner;

		private float zoomLevel = 1f;

		private int shadowDepth = WorkflowTheme.CurrentTheme.AmbientTheme.ShadowDepth;

		private List<WorkflowDesignerMessageFilter> stockMessageFilters = new List<WorkflowDesignerMessageFilter>();

		private List<WorkflowDesignerMessageFilter> customMessageFilters = new List<WorkflowDesignerMessageFilter>();

		private Bitmap viewPortBitmap;

		private WorkflowToolTip workflowToolTip;

		private CommandSet commandSet;

		private DynamicAction fitAllAction;

		private int prePreviewZoom = 100;

		private Point prePreviewScroll = Point.Empty;

		private WorkflowPrintDocument printDocument;

		private WorkflowLayout activeLayout;

		private WorkflowLayout defaultLayout;

		private EventHandler layoutEventHandler;

		private EventHandler ensureVisibleEventHandler;

		private Stack<HitTestInfo> messageHitTestContexts = new Stack<HitTestInfo>();

		private HScrollBar hScrollBar;

		private VScrollBar vScrollBar;

		private TabControl toolContainer;

		private EventHandler idleEventListeners;

		private EventHandler idleEventHandler;

		private bool dragDropInProgress;

		public int Zoom
		{
			get
			{
				return Convert.ToInt32(zoomLevel * 100f);
			}
			set
			{
				if (Zoom == value)
				{
					return;
				}
				if (value < 10 || value > 400)
				{
					throw new NotSupportedException(DR.GetString("ZoomLevelException2", 10, 400));
				}
				ScrollBar scrollBar = HScrollBar;
				ScrollBar scrollBar2 = VScrollBar;
				if (scrollBar != null && scrollBar2 != null)
				{
					PointF pointF = Point.Empty;
					Point point = new Point(ScrollPosition.X, ScrollPosition.Y);
					pointF = new PointF((float)point.X / (float)scrollBar.Maximum, (float)point.Y / (float)scrollBar2.Maximum);
					zoomLevel = (float)value / 100f;
					UpdateScrollRange();
					Point point2 = new Point((int)((float)scrollBar.Maximum * pointF.X), (int)((float)scrollBar2.Maximum * pointF.Y));
					ScrollPosition = new Point(point2.X, point2.Y);
					if (rootDesigner != null)
					{
						rootDesigner.Location = activeLayout.RootDesignerAlignment;
					}
					InvalidateClientRectangle(Rectangle.Empty);
					activeLayout.Update(null, WorkflowLayout.LayoutUpdateReason.ZoomChanged);
					if (GetService(typeof(IUIService)) is IUIService iUIService)
					{
						iUIService.SetUIDirty();
					}
					if (commandSet != null)
					{
						commandSet.UpdateZoomCommands(enable: true);
					}
					OnZoomChanged();
				}
			}
		}

		public ActivityDesigner RootDesigner
		{
			get
			{
				return rootDesigner;
			}
			set
			{
				if (rootDesigner != value)
				{
					DisposeMessageFilters(stockFilters: false);
					rootDesigner = value;
					if (rootDesigner != null)
					{
						PopulateMessageFilters(stockFilters: false);
						WorkflowLayout workflowLayout = (DefaultLayout = rootDesigner.SupportedLayout);
						ActiveLayout = workflowLayout;
					}
					OnRootDesignerChanged();
					PerformLayout();
				}
			}
		}

		public int ShadowDepth
		{
			get
			{
				return shadowDepth;
			}
			set
			{
				if (value < 0 || value > 8)
				{
					throw new NotSupportedException(DR.GetString("ShadowDepthException", 0, 8));
				}
				if (shadowDepth != value)
				{
					shadowDepth = value;
					InvalidateClientRectangle(Rectangle.Empty);
				}
			}
		}

		public Rectangle ViewPortRectangle => new Rectangle(ScrollPosition, ViewPortSize);

		public Size ViewPortSize
		{
			get
			{
				Size clientSize = base.ClientSize;
				if (HScrollBar.Visible)
				{
					clientSize.Height = Math.Max(0, clientSize.Height - HScrollBar.Height);
				}
				if (VScrollBar.Visible)
				{
					clientSize.Width = Math.Max(0, clientSize.Width - VScrollBar.Width);
				}
				return clientSize;
			}
		}

		public Point ScrollPosition
		{
			get
			{
				return new Point(HScrollBar.Value, VScrollBar.Value);
			}
			set
			{
				ScrollBar scrollBar = HScrollBar;
				if (scrollBar != null)
				{
					value.X = Math.Min(value.X, scrollBar.Maximum - scrollBar.LargeChange + 1);
					value.X = Math.Max(value.X, scrollBar.Minimum);
					scrollBar.Value = value.X;
				}
				ScrollBar scrollBar2 = VScrollBar;
				if (scrollBar2 != null)
				{
					value.Y = Math.Min(value.Y, scrollBar2.Maximum - scrollBar2.LargeChange + 1);
					value.Y = Math.Max(value.Y, scrollBar2.Minimum);
					scrollBar2.Value = value.Y;
				}
			}
		}

		public bool PrintPreviewMode
		{
			get
			{
				return activeLayout == ((WorkflowPrintDocument)PrintDocument).PrintPreviewLayout;
			}
			set
			{
				if (PrintPreviewMode != value)
				{
					if (value && PrinterSettings.InstalledPrinters.Count == 0)
					{
						DesignerHelpers.ShowError(this, DR.GetString("ThereIsNoPrinterInstalledErrorMessage"));
						value = false;
					}
					ActiveLayout = (value ? ((WorkflowPrintDocument)PrintDocument).PrintPreviewLayout : DefaultLayout);
					if (commandSet != null)
					{
						commandSet.UpdatePageLayoutCommands(enable: true);
					}
					if (PrintPreviewMode)
					{
						prePreviewZoom = Zoom;
						prePreviewScroll = ScrollPosition;
						Zoom = 40;
					}
					else
					{
						Zoom = prePreviewZoom;
						ScrollPosition = prePreviewScroll;
					}
				}
			}
		}

		public PrintDocument PrintDocument
		{
			get
			{
				if (printDocument == null)
				{
					printDocument = new WorkflowPrintDocument(this);
				}
				return printDocument;
			}
		}

		public HScrollBar HScrollBar => hScrollBar;

		public VScrollBar VScrollBar => vScrollBar;

		public bool EnableFitToScreen
		{
			get
			{
				return fitAllAction != null;
			}
			set
			{
				if (EnableFitToScreen == value)
				{
					return;
				}
				if (value)
				{
					if (fitAllAction == null)
					{
						fitAllAction = CreateDynamicAction();
					}
				}
				else if (fitAllAction != null)
				{
					fitAllAction.Dispose();
					fitAllAction = null;
				}
				InvalidateClientRectangle(Rectangle.Empty);
			}
		}

		internal bool DragDropInProgress => dragDropInProgress;

		internal bool ShowToolContainer
		{
			get
			{
				return toolContainer != null;
			}
			set
			{
				if (ShowToolContainer == value)
				{
					return;
				}
				try
				{
					SuspendLayout();
					if (value)
					{
						toolContainer = new TabControl(DockStyle.Right, AnchorAlignment.Far);
						base.Controls.Add(toolContainer);
						EnsureScrollBars(hScrollBar, toolContainer.ScrollBar as VScrollBar);
						string[,] array = new string[3, 2]
						{
							{ "MultipageLayoutCaption", "MultipageLayout" },
							{ "ZoomCaption", "Zoom" },
							{ "PanCaption", "AutoPan" }
						};
						for (int i = 0; i < array.GetLength(0); i++)
						{
							Bitmap image = DR.GetImage(array[i, 1]) as Bitmap;
							string @string = DR.GetString(array[i, 0]);
							toolContainer.TabStrip.Tabs.Add(new ItemInfo(i + 1, image, @string));
						}
						toolContainer.TabStrip.TabChange += OnTabChange;
						if (commandSet != null)
						{
							commandSet.UpdatePageLayoutCommands(enable: true);
							commandSet.UpdateZoomCommands(enable: true);
							commandSet.UpdatePanCommands(enable: true);
						}
					}
					else
					{
						toolContainer.TabStrip.TabChange -= OnTabChange;
						toolContainer.TabStrip.Tabs.Clear();
						base.Controls.Remove(toolContainer);
						toolContainer.Dispose();
						toolContainer = null;
						EnsureScrollBars(hScrollBar, new VScrollBar());
					}
				}
				finally
				{
					ResumeLayout(performLayout: true);
				}
			}
		}

		internal HitTestInfo MessageHitTestContext => messageHitTestContexts.Peek();

		internal WorkflowLayout ActiveLayout
		{
			get
			{
				return activeLayout;
			}
			set
			{
				if (value == null)
				{
					throw new ArgumentNullException("Layout cannot be null!");
				}
				Cursor current = Cursor.Current;
				try
				{
					Cursor.Current = Cursors.WaitCursor;
					activeLayout = value;
					if (activeLayout != ((WorkflowPrintDocument)PrintDocument).PrintPreviewLayout)
					{
						DefaultLayout = activeLayout;
					}
					PerformLayout();
					if (commandSet != null)
					{
						commandSet.UpdatePageLayoutCommands(enable: true);
					}
				}
				finally
				{
					Cursor.Current = current;
				}
			}
		}

		private WorkflowLayout DefaultLayout
		{
			get
			{
				if (defaultLayout == null)
				{
					defaultLayout = new WorkflowRootLayout(this);
				}
				return defaultLayout;
			}
			set
			{
				if (value == null)
				{
					throw new ArgumentNullException(DR.GetString("Error_WorkflowLayoutNull"));
				}
				if (defaultLayout != value)
				{
					if (defaultLayout != null)
					{
						defaultLayout.Dispose();
					}
					defaultLayout = value;
				}
			}
		}

		private float ScaleZoomFactor => zoomLevel * activeLayout.Scaling;

		public event EventHandler ZoomChanged;

		public event EventHandler RootDesignerChanged;

		public event EventHandler Idle
		{
			add
			{
				idleEventListeners = (EventHandler)Delegate.Combine(idleEventListeners, value);
				if (idleEventHandler == null)
				{
					idleEventHandler = OnWorkflowIdle;
					Form form = base.TopLevelControl as Form;
					if (!Application.MessageLoop || (form != null && form.Modal))
					{
						WorkflowTimer.Default.Subscribe(100, idleEventHandler);
					}
					else
					{
						Application.Idle += idleEventHandler;
					}
				}
			}
			remove
			{
				idleEventListeners = (EventHandler)Delegate.Remove(idleEventListeners, value);
				if (idleEventHandler != null && idleEventListeners == null)
				{
					if (base.TopLevelControl is Form { Modal: not false })
					{
						WorkflowTimer.Default.Unsubscribe(idleEventHandler);
					}
					else
					{
						Application.Idle -= idleEventHandler;
					}
					idleEventHandler = null;
				}
			}
		}

		public WorkflowView()
			: this(new DesignSurface())
		{
		}

		public WorkflowView(IServiceProvider serviceProvider)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			SuspendLayout();
			AllowDrop = true;
			AutoScroll = false;
			base.HScroll = false;
			base.VScroll = false;
			SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.Selectable | ControlStyles.AllPaintingInWmPaint | ControlStyles.EnableNotifyMessage | ControlStyles.OptimizedDoubleBuffer, value: true);
			this.serviceProvider = serviceProvider;
			if (GetService(typeof(IServiceContainer)) is IServiceContainer serviceContainer)
			{
				serviceContainer.RemoveService(typeof(WorkflowView));
				serviceContainer.AddService(typeof(WorkflowView), this);
			}
			if (this.serviceProvider.GetService(typeof(IUIService)) is IUIService uIService)
			{
				WorkflowTheme.UIService = uIService;
			}
			EnsureScrollBars(new HScrollBar(), new VScrollBar());
			workflowToolTip = new WorkflowToolTip(this);
			WorkflowTheme.ThemeChanged += OnThemeChange;
			PopulateMessageFilters(stockFilters: true);
			RootDesigner = ActivityDesigner.GetSafeRootDesigner(this);
			fitAllAction = CreateDynamicAction();
			if (activeLayout == null || defaultLayout == null)
			{
				ActiveLayout = (DefaultLayout = new WorkflowRootLayout(this.serviceProvider));
			}
			if (GetService(typeof(IMenuCommandService)) is IMenuCommandService)
			{
				commandSet = new CommandSet(this);
				commandSet.UpdatePanCommands(enable: true);
			}
			if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				selectionService.SelectionChanged += OnSelectionChanged;
			}
			Application.AddMessageFilter(this);
			ResumeLayout(performLayout: true);
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				try
				{
					SuspendLayout();
					Application.RemoveMessageFilter(this);
					if (layoutEventHandler != null)
					{
						Idle -= layoutEventHandler;
						layoutEventHandler = null;
					}
					if (ensureVisibleEventHandler != null)
					{
						Idle -= ensureVisibleEventHandler;
						ensureVisibleEventHandler = null;
					}
					if (idleEventHandler != null)
					{
						idleEventListeners = null;
						Form form = base.TopLevelControl as Form;
						if (!Application.MessageLoop || (form != null && form.Modal))
						{
							WorkflowTimer.Default.Unsubscribe(idleEventHandler);
						}
						else
						{
							Application.Idle -= idleEventHandler;
						}
						idleEventHandler = null;
					}
					if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
					{
						selectionService.SelectionChanged -= OnSelectionChanged;
					}
					WorkflowTheme.ThemeChanged -= OnThemeChange;
					if (fitAllAction != null)
					{
						fitAllAction.Dispose();
						fitAllAction = null;
					}
					if (workflowToolTip != null)
					{
						((IDisposable)workflowToolTip).Dispose();
						workflowToolTip = null;
					}
					DisposeMessageFilters(stockFilters: false);
					DisposeMessageFilters(stockFilters: true);
					activeLayout = null;
					if (defaultLayout != null)
					{
						defaultLayout.Dispose();
						defaultLayout = null;
					}
					if (viewPortBitmap != null)
					{
						viewPortBitmap.Dispose();
						viewPortBitmap = null;
					}
					if (commandSet != null)
					{
						commandSet.Dispose();
						commandSet = null;
					}
					HScrollBar.ValueChanged -= OnScroll;
					VScrollBar.ValueChanged -= OnScroll;
					if (toolContainer != null)
					{
						base.Controls.Remove(toolContainer);
						toolContainer.TabStrip.Tabs.Clear();
						toolContainer.Dispose();
						toolContainer = null;
					}
					if (GetService(typeof(IServiceContainer)) is IServiceContainer serviceContainer)
					{
						serviceContainer.RemoveService(typeof(WorkflowView));
					}
				}
				finally
				{
					ResumeLayout(performLayout: false);
				}
			}
			base.Dispose(disposing);
		}

		public void AddDesignerMessageFilter(WorkflowDesignerMessageFilter designerMessageFilter)
		{
			if (designerMessageFilter == null)
			{
				throw new ArgumentNullException("designerMessageFilter");
			}
			if (base.Capture)
			{
				base.Capture = false;
			}
			customMessageFilters.Insert(0, designerMessageFilter);
			designerMessageFilter.SetParentView(this);
		}

		public void RemoveDesignerMessageFilter(WorkflowDesignerMessageFilter designerMessageFilter)
		{
			if (designerMessageFilter == null)
			{
				throw new ArgumentNullException("designerMessageFilter");
			}
			if (customMessageFilters.Contains(designerMessageFilter))
			{
				if (base.Capture)
				{
					base.Capture = false;
				}
				customMessageFilters.Remove(designerMessageFilter);
				((IDisposable)designerMessageFilter).Dispose();
			}
		}

		public void ShowInPlaceToolTip(string toolTipText, Rectangle toolTipRectangle)
		{
			if (toolTipText == null)
			{
				throw new ArgumentNullException("toolTipText");
			}
			if (toolTipRectangle.IsEmpty)
			{
				throw new ArgumentException(SR.GetString("Error_EmptyToolTipRectangle"));
			}
			workflowToolTip.SetText(toolTipText, toolTipRectangle);
		}

		public void ShowInfoTip(string text)
		{
			if (text == null)
			{
				throw new ArgumentNullException("text");
			}
			workflowToolTip.SetText(string.Empty, text);
		}

		public void ShowInfoTip(string title, string text)
		{
			if (title == null)
			{
				throw new ArgumentNullException("title");
			}
			if (text == null)
			{
				throw new ArgumentNullException("text");
			}
			workflowToolTip.SetText(title, text);
		}

		public void EnsureVisible(object selectableObject)
		{
			if (selectableObject == null)
			{
				throw new ArgumentNullException("selectableObject");
			}
			Activity activity = selectableObject as Activity;
			while (activity != null)
			{
				ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
				CompositeActivityDesigner parentDesigner = designer.ParentDesigner;
				if (parentDesigner != null)
				{
					if (designer != null)
					{
						parentDesigner.EnsureVisibleContainedDesigner(designer);
					}
					activity = parentDesigner.Activity;
				}
				else
				{
					activity = null;
				}
			}
			if (selectableObject is Activity activity2 && ActivityDesigner.GetDesigner(activity2) is CompositeActivityDesigner compositeActivityDesigner)
			{
				compositeActivityDesigner.EnsureVisibleContainedDesigner(compositeActivityDesigner);
			}
			PerformLayout(immediateUpdate: false);
			if (ensureVisibleEventHandler == null)
			{
				ensureVisibleEventHandler = OnEnsureVisible;
				Idle += ensureVisibleEventHandler;
			}
		}

		public void PerformLayout(bool immediateUpdate)
		{
			if (immediateUpdate)
			{
				if (layoutEventHandler != null)
				{
					Idle -= layoutEventHandler;
					layoutEventHandler = null;
				}
				PerformLayout();
			}
			else if (layoutEventHandler == null)
			{
				layoutEventHandler = OnPerformLayout;
				Idle += layoutEventHandler;
			}
		}

		public void SaveViewState(Stream viewState)
		{
			if (viewState == null)
			{
				throw new ArgumentNullException("viewState");
			}
			IDesignerHost designerHost = (IDesignerHost)GetService(typeof(IDesignerHost));
			if (designerHost == null)
			{
				throw new Exception(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
			}
			BinaryWriter binaryWriter = new BinaryWriter(viewState);
			binaryWriter.Write(PrintPreviewMode);
			binaryWriter.Write(Zoom);
			DesignerHelpers.SerializeDesignerStates(designerHost, binaryWriter);
			binaryWriter.Write(ScrollPosition.X);
			binaryWriter.Write(ScrollPosition.Y);
		}

		public void LoadViewState(Stream viewState)
		{
			if (viewState == null)
			{
				throw new ArgumentNullException("viewState");
			}
			bool flag = false;
			Point point = new Point(0, 0);
			IDesignerHost designerHost = (IDesignerHost)GetService(typeof(IDesignerHost));
			if (designerHost == null)
			{
				throw new Exception(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
			}
			viewState.Position = 0L;
			BinaryReader binaryReader = new BinaryReader(viewState);
			PrintPreviewMode = binaryReader.ReadBoolean();
			Zoom = binaryReader.ReadInt32();
			try
			{
				if (!DesignerHelpers.DeserializeDesignerStates(designerHost, binaryReader))
				{
					point.X = binaryReader.ReadInt32();
					point.Y = binaryReader.ReadInt32();
				}
			}
			finally
			{
				PerformLayout();
				ScrollPosition = point;
			}
		}

		public void FitToScreenSize()
		{
			if (HScrollBar.Maximum > ViewPortSize.Width || VScrollBar.Maximum > ViewPortSize.Height)
			{
				int val = (int)(100f / ActiveLayout.Scaling * Math.Min((float)ViewPortSize.Width / (float)ActiveLayout.Extent.Width, (float)ViewPortSize.Height / (float)ActiveLayout.Extent.Height));
				Zoom = Math.Min(Math.Max(val, 10), 400);
			}
		}

		public void FitToWorkflowSize()
		{
			if (Zoom != 100)
			{
				Zoom = 100;
			}
		}

		public void SaveWorkflowImage(string imageFile, ImageFormat imageFormat)
		{
			if (imageFile == null)
			{
				throw new ArgumentNullException("imageFile");
			}
			if (imageFormat == null)
			{
				throw new ArgumentNullException("imageFormat");
			}
			Bitmap bitmap = TakeWorkflowSnapShot();
			if (bitmap != null)
			{
				bitmap.Save(imageFile, imageFormat);
				bitmap.Dispose();
			}
		}

		public void SaveWorkflowImage(Stream stream, ImageFormat imageFormat)
		{
			if (stream == null)
			{
				throw new ArgumentNullException("stream");
			}
			if (imageFormat == null)
			{
				throw new ArgumentNullException("imageFormat");
			}
			Bitmap bitmap = TakeWorkflowSnapShot();
			if (bitmap != null)
			{
				bitmap.Save(stream, imageFormat);
				bitmap.Dispose();
			}
		}

		public void SaveWorkflowImageToClipboard()
		{
			Bitmap bitmap = TakeWorkflowSnapShot();
			if (bitmap != null)
			{
				Clipboard.SetDataObject(bitmap, copy: true);
				bitmap.Dispose();
			}
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			base.OnPaint(e);
			GraphicsContainer container = e.Graphics.BeginContainer();
			e.Graphics.SmoothingMode = SmoothingMode.HighQuality;
			e.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
			e.Graphics.CompositingQuality = CompositingQuality.HighQuality;
			bool flag = viewPortBitmap == null || viewPortBitmap.Size != ViewPortSize;
			if (flag)
			{
				if (viewPortBitmap != null)
				{
					viewPortBitmap.Dispose();
				}
				viewPortBitmap = new Bitmap(Math.Max(1, ViewPortSize.Width), Math.Max(1, ViewPortSize.Height), e.Graphics);
			}
			ViewPortData viewPortData = new ViewPortData();
			viewPortData.LogicalViewPort = ClientRectangleToLogical(new Rectangle(Point.Empty, ViewPortSize));
			viewPortData.MemoryBitmap = viewPortBitmap;
			viewPortData.Scaling = new SizeF(ScaleZoomFactor, ScaleZoomFactor);
			viewPortData.Translation = ScrollPosition;
			viewPortData.ShadowDepth = new Size(shadowDepth, shadowDepth);
			viewPortData.ViewPortSize = ViewPortSize;
			if (layoutEventHandler == null || flag)
			{
				TakeWorkflowSnapShot(this, viewPortData);
			}
			try
			{
				activeLayout.OnPaintWorkflow(e, viewPortData);
			}
			catch (Exception)
			{
			}
			using (WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, EventArgs.Empty))
			{
				foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
				{
					try
					{
						if (((IWorkflowDesignerMessageSink)filter).OnPaintWorkflowAdornments(e, ViewPortRectangle))
						{
							break;
						}
					}
					catch (Exception)
					{
					}
				}
			}
			e.Graphics.EndContainer(container);
			e.Graphics.FillRectangle(SystemBrushes.Control, new Rectangle(base.Width - SystemInformation.VerticalScrollBarWidth, base.Height - SystemInformation.HorizontalScrollBarHeight, SystemInformation.VerticalScrollBarWidth, SystemInformation.HorizontalScrollBarHeight));
		}

		protected virtual void OnZoomChanged()
		{
			if (this.ZoomChanged != null)
			{
				this.ZoomChanged(this, EventArgs.Empty);
			}
		}

		protected virtual void OnRootDesignerChanged()
		{
			if (this.RootDesignerChanged != null)
			{
				this.RootDesignerChanged(this, EventArgs.Empty);
			}
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, e);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnMouseDown(e))
				{
					break;
				}
			}
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			base.OnMouseMove(e);
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, e);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnMouseMove(e))
				{
					break;
				}
			}
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, e);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnMouseUp(e))
				{
					break;
				}
			}
		}

		protected override void OnMouseDoubleClick(MouseEventArgs e)
		{
			base.OnMouseDoubleClick(e);
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, e);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnMouseDoubleClick(e))
				{
					break;
				}
			}
		}

		protected override void OnMouseEnter(EventArgs e)
		{
			base.OnMouseEnter(e);
			Point point = PointToClient(Control.MousePosition);
			MouseEventArgs e2 = new MouseEventArgs(Control.MouseButtons, 1, point.X, point.Y, 0);
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, e2);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnMouseEnter(e2))
				{
					break;
				}
			}
		}

		protected override void OnMouseHover(EventArgs e)
		{
			base.OnMouseHover(e);
			Point point = PointToClient(Control.MousePosition);
			MouseEventArgs e2 = new MouseEventArgs(Control.MouseButtons, 1, point.X, point.Y, 0);
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, e2);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnMouseHover(e2))
				{
					break;
				}
			}
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, EventArgs.Empty);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnMouseLeave())
				{
					break;
				}
			}
		}

		protected override void OnMouseCaptureChanged(EventArgs e)
		{
			base.OnMouseCaptureChanged(e);
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, EventArgs.Empty);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnMouseCaptureChanged())
				{
					break;
				}
			}
		}

		protected override void OnMouseWheel(MouseEventArgs e)
		{
			base.OnMouseWheel(e);
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, e);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnMouseWheel(e))
				{
					break;
				}
			}
		}

		protected override void OnKeyDown(KeyEventArgs e)
		{
			using (WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, e))
			{
				foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
				{
					if (((IWorkflowDesignerMessageSink)filter).OnKeyDown(e))
					{
						break;
					}
				}
			}
			if (!e.Handled)
			{
				base.OnKeyDown(e);
			}
		}

		protected override void OnKeyUp(KeyEventArgs e)
		{
			using (WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, e))
			{
				foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
				{
					if (((IWorkflowDesignerMessageSink)filter).OnKeyUp(e))
					{
						break;
					}
				}
			}
			if (!e.Handled)
			{
				base.OnKeyUp(e);
			}
		}

		protected override void OnLayout(LayoutEventArgs levent)
		{
			base.OnLayout(levent);
			ScrollBar scrollBar = HScrollBar;
			ScrollBar scrollBar2 = VScrollBar;
			if (base.Controls.Contains(scrollBar))
			{
				scrollBar.Bounds = new Rectangle(0, Math.Max(0, base.Height - SystemInformation.HorizontalScrollBarHeight), Math.Max(base.Width - (scrollBar2.Visible ? SystemInformation.VerticalScrollBarWidth : 0), 0), SystemInformation.HorizontalScrollBarHeight);
			}
			if (base.Controls.Contains(scrollBar2))
			{
				scrollBar2.Bounds = new Rectangle(Math.Max(0, base.Width - SystemInformation.VerticalScrollBarWidth), 0, SystemInformation.VerticalScrollBarWidth, Math.Max(base.Height - (scrollBar.Visible ? SystemInformation.HorizontalScrollBarHeight : 0), 0));
			}
			if (toolContainer != null)
			{
				toolContainer.Location = new Point(base.Width - toolContainer.Width, 0);
				toolContainer.Height = base.Height - (scrollBar.Visible ? scrollBar.Height : 0);
			}
			using (WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, levent))
			{
				foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
				{
					((IWorkflowDesignerMessageSink)filter).OnLayout(levent);
				}
			}
			using (Graphics graphics = CreateGraphics())
			{
				activeLayout.Update(graphics, WorkflowLayout.LayoutUpdateReason.LayoutChanged);
				if (rootDesigner != null)
				{
					rootDesigner.Location = activeLayout.RootDesignerAlignment;
				}
			}
			UpdateScrollRange();
			InvalidateClientRectangle(Rectangle.Empty);
		}

		protected override void OnDragEnter(DragEventArgs dragEventArgs)
		{
			base.OnDragEnter(dragEventArgs);
			dragDropInProgress = true;
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, dragEventArgs);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnDragEnter(dragEventArgs))
				{
					break;
				}
			}
		}

		protected override void OnDragOver(DragEventArgs dragEventArgs)
		{
			base.OnDragOver(dragEventArgs);
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, dragEventArgs);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnDragOver(dragEventArgs))
				{
					break;
				}
			}
		}

		protected override void OnDragLeave(EventArgs e)
		{
			base.OnDragLeave(e);
			using (WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, EventArgs.Empty))
			{
				foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
				{
					if (((IWorkflowDesignerMessageSink)filter).OnDragLeave())
					{
						break;
					}
				}
			}
			dragDropInProgress = false;
		}

		protected override void OnDragDrop(DragEventArgs dragEventArgs)
		{
			base.OnDragDrop(dragEventArgs);
			using (WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, dragEventArgs))
			{
				foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
				{
					if (((IWorkflowDesignerMessageSink)filter).OnDragDrop(dragEventArgs))
					{
						break;
					}
				}
			}
			dragDropInProgress = false;
		}

		protected override void OnGiveFeedback(GiveFeedbackEventArgs gfbevent)
		{
			base.OnGiveFeedback(gfbevent);
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, gfbevent);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnGiveFeedback(gfbevent))
				{
					break;
				}
			}
		}

		protected override void OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent)
		{
			base.OnQueryContinueDrag(qcdevent);
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, qcdevent);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				if (((IWorkflowDesignerMessageSink)filter).OnQueryContinueDrag(qcdevent))
				{
					break;
				}
			}
		}

		[UIPermission(SecurityAction.Assert, Window = UIPermissionWindow.AllWindows)]
		protected override void WndProc(ref System.Windows.Forms.Message m)
		{
			using (WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, EventArgs.Empty))
			{
				foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
				{
					if (((IWorkflowDesignerMessageSink)filter).ProcessMessage(m))
					{
						break;
					}
				}
				if (m.Msg == 123)
				{
					int num = (int)m.LParam;
					Point screenMenuPoint = ((num != -1) ? new Point(num) : Control.MousePosition);
					foreach (WorkflowDesignerMessageFilter filter2 in workflowMessageDispatchData.Filters)
					{
						if (((IWorkflowDesignerMessageSink)filter2).OnShowContextMenu(screenMenuPoint))
						{
							break;
						}
					}
					m.Result = IntPtr.Zero;
					return;
				}
			}
			if (workflowToolTip != null && m.Msg == 78)
			{
				workflowToolTip.RelayParentNotify(ref m);
			}
			try
			{
				if (m.Result == IntPtr.Zero)
				{
					base.WndProc(ref m);
				}
			}
			catch (Exception ex)
			{
				if (ex != CheckoutException.Canceled)
				{
					DesignerHelpers.ShowError(this, ex);
				}
			}
		}

		protected override void OnControlAdded(ControlEventArgs e)
		{
			if (e.Control != VScrollBar && e.Control != HScrollBar && e.Control != toolContainer)
			{
				throw new InvalidOperationException(SR.GetString("Error_InsertingChildControls"));
			}
		}

		protected override AccessibleObject CreateAccessibilityInstance()
		{
			return new WorkflowViewAccessibleObject(this);
		}

		private void OnWorkflowIdle(object sender, EventArgs e)
		{
			if (idleEventListeners != null)
			{
				idleEventListeners(this, e);
			}
		}

		private void UpdateLayout()
		{
			if (layoutEventHandler != null)
			{
				PerformLayout(immediateUpdate: true);
				InvalidateClientRectangle(Rectangle.Empty);
			}
		}

		internal void OnCommandKey(KeyEventArgs e)
		{
			OnKeyDown(e);
			OnKeyUp(e);
		}

		private void OnSelectionChanged(object sender, EventArgs e)
		{
			if (commandSet != null)
			{
				commandSet.UpdateCommandSet();
			}
			if (RootDesigner != null && RootDesigner.Activity != null && GetService(typeof(ISelectionService)) is ISelectionService selectionService && selectionService.GetComponentSelected(RootDesigner.Activity) && GetService(typeof(IHelpService)) is IHelpService helpService)
			{
				helpService.AddContextAttribute("Keyword", RootDesigner.Activity.GetType().FullName, HelpKeywordType.F1Keyword);
			}
		}

		private void OnPerformLayout(object sender, EventArgs e)
		{
			if (layoutEventHandler != null)
			{
				Idle -= layoutEventHandler;
				layoutEventHandler = null;
				PerformLayout();
			}
		}

		private Bitmap TakeWorkflowSnapShot()
		{
			Bitmap result = null;
			ActivityDesigner activityDesigner = RootDesigner;
			if (activityDesigner != null)
			{
				using Graphics g = CreateGraphics();
				ViewPortData viewPortData = new ViewPortData();
				viewPortData.LogicalViewPort = new Rectangle(Point.Empty, new Size(activityDesigner.Bounds.Width + 2 * DefaultWorkflowLayout.Separator.Width, activityDesigner.Bounds.Height + 2 * DefaultWorkflowLayout.Separator.Height));
				viewPortData.MemoryBitmap = new Bitmap(viewPortData.LogicalViewPort.Width, viewPortData.LogicalViewPort.Height, g);
				viewPortData.Scaling = new SizeF(1f, 1f);
				viewPortData.Translation = Point.Empty;
				viewPortData.ShadowDepth = new Size(0, 0);
				viewPortData.ViewPortSize = viewPortData.LogicalViewPort.Size;
				TakeWorkflowSnapShot(this, viewPortData);
				result = viewPortData.MemoryBitmap;
			}
			return result;
		}

		internal static void TakeWorkflowSnapShot(WorkflowView workflowView, ViewPortData viewPortData)
		{
			Bitmap memoryBitmap = viewPortData.MemoryBitmap;
			using Graphics graphics = Graphics.FromImage(memoryBitmap);
			graphics.SmoothingMode = SmoothingMode.HighQuality;
			graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
			using (PaintEventArgs e = new PaintEventArgs(graphics, viewPortData.LogicalViewPort))
			{
				workflowView.ActiveLayout.OnPaint(e, viewPortData);
			}
			Matrix matrix = new Matrix();
			matrix.Scale(viewPortData.Scaling.Width, viewPortData.Scaling.Height, MatrixOrder.Prepend);
			Point[] array = new Point[1] { viewPortData.LogicalViewPort.Location };
			matrix.TransformPoints(array);
			matrix.Translate(-array[0].X + viewPortData.ShadowDepth.Width, -array[0].Y + viewPortData.ShadowDepth.Height, MatrixOrder.Append);
			graphics.Transform = matrix;
			if (workflowView.RootDesigner != null)
			{
				using Region region = new Region();
				using GraphicsPath path = ActivityDesignerPaint.GetDesignerPath(workflowView.RootDesigner, enableRoundedCorners: false);
				Region clip = graphics.Clip;
				region.MakeEmpty();
				region.Union(path);
				graphics.Clip = region;
				AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
				graphics.FillRectangle(ambientTheme.BackgroundBrush, workflowView.RootDesigner.Bounds);
				if (ambientTheme.ShowGrid)
				{
					ActivityDesignerPaint.DrawGrid(graphics, workflowView.RootDesigner.Bounds);
				}
				graphics.Clip = clip;
				try
				{
					using PaintEventArgs e2 = new PaintEventArgs(graphics, viewPortData.LogicalViewPort);
					((IWorkflowDesignerMessageSink)workflowView.RootDesigner).OnPaint(e2, viewPortData.LogicalViewPort);
				}
				catch (Exception)
				{
				}
			}
			using (PaintEventArgs e3 = new PaintEventArgs(graphics, workflowView.RootDesigner.Bounds))
			{
				using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(workflowView, EventArgs.Empty);
				foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
				{
					try
					{
						if (((IWorkflowDesignerMessageSink)filter).OnPaint(e3, viewPortData.LogicalViewPort))
						{
							break;
						}
					}
					catch (Exception)
					{
					}
				}
			}
			graphics.Transform = new Matrix();
			if (!viewPortData.ShadowDepth.IsEmpty)
			{
				Bitmap bitmap = new Bitmap(memoryBitmap);
				using (Brush brush = new SolidBrush(Color.FromArgb(220, Color.White)))
				{
					graphics.FillRectangle(brush, new Rectangle(Point.Empty, new Size(memoryBitmap.Size.Width - viewPortData.ShadowDepth.Width - 1, memoryBitmap.Size.Height - viewPortData.ShadowDepth.Height - 1)));
				}
				ImageAttributes imageAttributes = new ImageAttributes();
				imageAttributes.SetColorKey(viewPortData.TransparentColor, viewPortData.TransparentColor, ColorAdjustType.Default);
				imageAttributes.SetColorKey(viewPortData.TransparentColor, viewPortData.TransparentColor, ColorAdjustType.Bitmap);
				graphics.DrawImage(bitmap, new Rectangle(-viewPortData.ShadowDepth.Width, -viewPortData.ShadowDepth.Height, memoryBitmap.Width, memoryBitmap.Height), 0, 0, memoryBitmap.Width, memoryBitmap.Height, GraphicsUnit.Pixel, imageAttributes);
				bitmap.Dispose();
			}
		}

		internal void OnThemeChange(object sender, EventArgs e)
		{
			ShadowDepth = WorkflowTheme.CurrentTheme.AmbientTheme.ShadowDepth;
			using (WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, EventArgs.Empty))
			{
				foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
				{
					try
					{
						((IWorkflowDesignerMessageSink)filter).OnThemeChange();
					}
					catch (Exception)
					{
					}
				}
			}
			PerformLayout();
		}

		private void OnEnsureVisible(object sender, EventArgs e)
		{
			if (ensureVisibleEventHandler != null)
			{
				Idle -= ensureVisibleEventHandler;
				ensureVisibleEventHandler = null;
			}
			ISelectionService selectionService = (ISelectionService)GetService(typeof(ISelectionService));
			if (selectionService == null || selectionService.SelectionCount <= 0)
			{
				return;
			}
			ArrayList arrayList = new ArrayList(selectionService.GetSelectedComponents());
			for (int num = arrayList.Count - 1; num >= 0; num--)
			{
				Rectangle rect = Rectangle.Empty;
				if (arrayList[num] is Activity)
				{
					ActivityDesigner designer = ActivityDesigner.GetDesigner(arrayList[num] as Activity);
					if (designer != null)
					{
						rect = designer.Bounds;
						rect.Inflate(WorkflowTheme.CurrentTheme.AmbientTheme.SelectionSize);
						rect.Inflate(WorkflowTheme.CurrentTheme.AmbientTheme.SelectionSize);
					}
				}
				else if (arrayList[num] is HitTestInfo)
				{
					rect = ((HitTestInfo)arrayList[num]).Bounds;
				}
				if (!rect.IsEmpty)
				{
					EnsureVisible(rect);
				}
			}
		}

		private void EnsureVisible(Rectangle rect)
		{
			Rectangle rectangle = ClientRectangleToLogical(new Rectangle(Point.Empty, ViewPortSize));
			if (rectangle.Contains(rect.Location) && rectangle.Contains(new Point(rect.Right, rect.Bottom)))
			{
				return;
			}
			Size logicalSize = default(Size);
			if (!rectangle.Contains(new Point(rect.Left, rectangle.Top)) || !rectangle.Contains(new Point(rect.Right, rectangle.Top)))
			{
				if (rect.Width > rectangle.Width)
				{
					logicalSize.Width = rect.Left + rect.Width / 2 - (rectangle.Left + rectangle.Width / 2);
				}
				else if (rect.Left < rectangle.Left)
				{
					logicalSize.Width = rect.Left - rectangle.Left;
				}
				else
				{
					logicalSize.Width = rect.Right - rectangle.Right;
				}
			}
			if (!rectangle.Contains(new Point(rectangle.Left, rect.Top)) || !rectangle.Contains(new Point(rectangle.Left, rect.Bottom)))
			{
				if (rect.Top < rectangle.Top || rect.Height > rectangle.Height)
				{
					logicalSize.Height = rect.Top - rectangle.Top;
				}
				else
				{
					logicalSize.Height = rect.Bottom - rectangle.Bottom;
				}
			}
			logicalSize = LogicalSizeToClient(logicalSize);
			Point point = ScrollPosition;
			ScrollPosition = new Point(point.X + logicalSize.Width, point.Y + logicalSize.Height);
		}

		private void OnScroll(object sender, EventArgs e)
		{
			InvalidateClientRectangle(Rectangle.Empty);
			if (!(sender is ScrollBar scrollBar))
			{
				return;
			}
			using WorkflowMessageDispatchData workflowMessageDispatchData = new WorkflowMessageDispatchData(this, e);
			foreach (WorkflowDesignerMessageFilter filter in workflowMessageDispatchData.Filters)
			{
				try
				{
					((IWorkflowDesignerMessageSink)filter).OnScroll(scrollBar, scrollBar.Value);
				}
				catch (Exception)
				{
				}
			}
		}

		private void UpdateScrollRange()
		{
			if (ViewPortSize.Width >= 0 && ViewPortSize.Height >= 0)
			{
				Size viewPortSize = ViewPortSize;
				Size size = LogicalSizeToClient(activeLayout.Extent);
				Size size2 = new Size(Math.Min(size.Width, viewPortSize.Width), Math.Min(size.Height, viewPortSize.Height));
				if (hScrollBar.Maximum != size.Width)
				{
					hScrollBar.Maximum = size.Width;
				}
				if (vScrollBar.Maximum != size.Height)
				{
					vScrollBar.Maximum = size.Height;
				}
				if (hScrollBar.LargeChange != size2.Width)
				{
					hScrollBar.SmallChange = size2.Width / 15;
					hScrollBar.LargeChange = size2.Width + 1;
				}
				if (vScrollBar.LargeChange != size2.Height)
				{
					vScrollBar.SmallChange = size2.Height / 15;
					vScrollBar.LargeChange = size2.Height + 1;
				}
				int num = size.Width - hScrollBar.LargeChange;
				num = ((num >= 0) ? num : 0);
				if (hScrollBar.Value > num)
				{
					hScrollBar.Value = num;
				}
				int num2 = size.Height - vScrollBar.LargeChange;
				num2 = ((num2 >= 0) ? num2 : 0);
				if (vScrollBar.Value > num2)
				{
					vScrollBar.Value = num2;
				}
				RefreshDynamicAction();
				bool visible = hScrollBar.Visible;
				if (base.Controls.Contains(hScrollBar))
				{
					hScrollBar.Visible = hScrollBar.Maximum > viewPortSize.Width;
				}
				bool visible2 = vScrollBar.Visible;
				if (base.Controls.Contains(vScrollBar))
				{
					vScrollBar.Visible = vScrollBar.Maximum > viewPortSize.Height;
				}
				if (visible != hScrollBar.Visible || vScrollBar.Visible != visible2)
				{
					PerformLayout();
					Refresh();
				}
			}
		}

		private DynamicAction CreateDynamicAction()
		{
			DynamicAction dynamicAction = new DynamicAction();
			dynamicAction.ButtonSize = DynamicAction.ButtonSizes.Large;
			dynamicAction.DockAlignment = DesignerContentAlignment.BottomRight;
			dynamicAction.DockMargin = new Size(5, 5);
			ActionButton actionButton = new ActionButton(new Image[1] { DR.GetImage("FitToScreen") as Bitmap });
			actionButton.StateChanged += OnFitToScreen;
			dynamicAction.Buttons.Add(actionButton);
			return dynamicAction;
		}

		private void RefreshDynamicAction()
		{
			if (GetService(typeof(DynamicActionMessageFilter)) is DynamicActionMessageFilter dynamicActionMessageFilter && fitAllAction != null)
			{
				if (HScrollBar.Maximum > ViewPortSize.Width || VScrollBar.Maximum > ViewPortSize.Height)
				{
					fitAllAction.Buttons[0].Description = DR.GetString("FitToScreenDescription");
					ActionButton actionButton = fitAllAction.Buttons[0];
					Image[] stateImages = new Bitmap[1] { DR.GetImage("FitToScreen") as Bitmap };
					actionButton.StateImages = stateImages;
					dynamicActionMessageFilter.AddAction(fitAllAction);
				}
				else if (Zoom != 100)
				{
					fitAllAction.Buttons[0].Description = DR.GetString("FitToWorkflowDescription");
					ActionButton actionButton2 = fitAllAction.Buttons[0];
					Image[] stateImages = new Bitmap[1] { DR.GetImage("FitToWorkflow") as Bitmap };
					actionButton2.StateImages = stateImages;
					dynamicActionMessageFilter.AddAction(fitAllAction);
				}
				else
				{
					dynamicActionMessageFilter.RemoveAction(fitAllAction);
					fitAllAction.Buttons[0].State = ActionButton.States.Normal;
				}
			}
		}

		private void OnFitToScreen(object sender, EventArgs e)
		{
			if (sender is ActionButton { State: ActionButton.States.Pressed })
			{
				if (HScrollBar.Maximum > ViewPortSize.Width || VScrollBar.Maximum > ViewPortSize.Height)
				{
					FitToScreenSize();
				}
				else if (Zoom != 100)
				{
					FitToWorkflowSize();
				}
			}
		}

		private void OnTabChange(object sender, TabSelectionChangeEventArgs e)
		{
			if (e.CurrentItem.Identifier == 1 || e.CurrentItem.Identifier == 2 || e.CurrentItem.Identifier == 3)
			{
				Rectangle selectedTabBounds = e.SelectedTabBounds;
				CommandID commandID = null;
				commandID = ((e.CurrentItem.Identifier == 1) ? WorkflowMenuCommands.PageLayoutMenu : ((e.CurrentItem.Identifier != 2) ? WorkflowMenuCommands.PanMenu : WorkflowMenuCommands.ZoomMenu));
				((IMenuCommandService)GetService(typeof(IMenuCommandService)))?.ShowContextMenu(commandID, selectedTabBounds.Right, selectedTabBounds.Top);
			}
		}

		private void EnsureScrollBars(HScrollBar newHorizScrollBar, VScrollBar newVertScrollBar)
		{
			try
			{
				SuspendLayout();
				if (hScrollBar != newHorizScrollBar)
				{
					if (hScrollBar != null)
					{
						hScrollBar.ValueChanged -= OnScroll;
						if (base.Controls.Contains(hScrollBar))
						{
							base.Controls.Remove(hScrollBar);
						}
					}
					hScrollBar = newHorizScrollBar;
					if (hScrollBar.Parent == null)
					{
						hScrollBar.TabStop = false;
						base.Controls.Add(hScrollBar);
					}
				}
				if (vScrollBar != newVertScrollBar)
				{
					if (vScrollBar != null)
					{
						vScrollBar.ValueChanged -= OnScroll;
						if (base.Controls.Contains(vScrollBar))
						{
							base.Controls.Remove(vScrollBar);
						}
					}
					vScrollBar = newVertScrollBar;
					if (vScrollBar.Parent == null)
					{
						vScrollBar.TabStop = false;
						base.Controls.Add(vScrollBar);
					}
				}
				hScrollBar.ValueChanged += OnScroll;
				vScrollBar.ValueChanged += OnScroll;
			}
			finally
			{
				ResumeLayout(performLayout: true);
			}
		}

		private void PopulateMessageFilters(bool stockFilters)
		{
			IList<WorkflowDesignerMessageFilter> list = (stockFilters ? stockMessageFilters : customMessageFilters);
			if (stockFilters)
			{
				list.Add(new GlyphManager());
				list.Add(new WindowManager());
			}
			else
			{
				if (base.Capture)
				{
					base.Capture = false;
				}
				IList messageFilters = ((IWorkflowRootDesigner)rootDesigner).MessageFilters;
				foreach (WorkflowDesignerMessageFilter item in messageFilters)
				{
					list.Add(item);
				}
			}
			foreach (WorkflowDesignerMessageFilter item2 in list)
			{
				item2.SetParentView(this);
			}
		}

		private void DisposeMessageFilters(bool stockFilters)
		{
			List<WorkflowDesignerMessageFilter> list = (stockFilters ? stockMessageFilters : customMessageFilters);
			ArrayList arrayList = new ArrayList(list.ToArray());
			foreach (WorkflowDesignerMessageFilter item in arrayList)
			{
				((IDisposable)item).Dispose();
			}
			list.Clear();
		}

		public void InvalidateClientRectangle(Rectangle clientRectangle)
		{
			if (layoutEventHandler == null)
			{
				if (!clientRectangle.IsEmpty)
				{
					clientRectangle.Inflate(1, 1);
					Invalidate(clientRectangle);
				}
				else
				{
					Invalidate();
				}
			}
		}

		public void InvalidateLogicalRectangle(Rectangle logicalRectangle)
		{
			InvalidateClientRectangle(LogicalRectangleToClient(logicalRectangle));
		}

		public Point LogicalPointToScreen(Point logicalPoint)
		{
			return PointToScreen(LogicalPointToClient(logicalPoint));
		}

		public Point ScreenPointToLogical(Point screenPoint)
		{
			return ClientPointToLogical(PointToClient(screenPoint));
		}

		public Point LogicalPointToClient(Point logicalPoint)
		{
			return LogicalPointToClient(logicalPoint, mapToLayout: true);
		}

		public Point ClientPointToLogical(Point clientPoint)
		{
			return ClientPointToLogical(clientPoint, mapToLayout: true);
		}

		public Size LogicalSizeToClient(Size logicalSize)
		{
			Point[] array = new Point[1]
			{
				new Point(logicalSize)
			};
			Matrix matrix = new Matrix();
			matrix.Scale(ScaleZoomFactor, ScaleZoomFactor);
			matrix.TransformPoints(array);
			return new Size(array[0]);
		}

		public Size ClientSizeToLogical(Size clientSize)
		{
			Point[] array = new Point[1]
			{
				new Point(clientSize)
			};
			Matrix matrix = new Matrix();
			matrix.Scale(ScaleZoomFactor, ScaleZoomFactor);
			matrix.Invert();
			matrix.TransformPoints(array);
			matrix.Invert();
			return new Size(array[0]);
		}

		public Rectangle LogicalRectangleToClient(Rectangle rectangle)
		{
			Rectangle rectangle2 = ((activeLayout != null) ? activeLayout.MapOutRectangleFromLayout(rectangle) : rectangle);
			return new Rectangle(LogicalPointToClient(rectangle2.Location, mapToLayout: false), LogicalSizeToClient(rectangle2.Size));
		}

		public Rectangle ClientRectangleToLogical(Rectangle rectangle)
		{
			Rectangle logicalRectangle = new Rectangle(ClientPointToLogical(rectangle.Location, mapToLayout: false), ClientSizeToLogical(rectangle.Size));
			return activeLayout.MapInRectangleToLayout(logicalRectangle);
		}

		internal bool IsClientPointInActiveLayout(Point clientPoint)
		{
			Point logicalCoOrd = ClientPointToLogical(clientPoint, mapToLayout: false);
			return activeLayout.IsCoOrdInLayout(logicalCoOrd);
		}

		private Point LogicalPointToClient(Point point, bool mapToLayout)
		{
			if (mapToLayout)
			{
				point = activeLayout.MapOutCoOrdFromLayout(point);
			}
			Matrix matrix = new Matrix();
			matrix.Scale(ScaleZoomFactor, ScaleZoomFactor);
			Point[] array = new Point[1] { point };
			matrix.TransformPoints(array);
			Matrix matrix2 = new Matrix();
			matrix2.Translate(-ScrollPosition.X, -ScrollPosition.Y);
			matrix2.TransformPoints(array);
			return array[0];
		}

		private Point ClientPointToLogical(Point point, bool mapToLayout)
		{
			Point[] array = new Point[1] { point };
			Matrix matrix = new Matrix();
			matrix.Translate(ScrollPosition.X, ScrollPosition.Y);
			matrix.TransformPoints(array);
			Matrix matrix2 = new Matrix();
			matrix2.Scale(ScaleZoomFactor, ScaleZoomFactor);
			matrix2.Invert();
			matrix2.TransformPoints(array);
			matrix2.Invert();
			if (!mapToLayout)
			{
				return array[0];
			}
			return activeLayout.MapInCoOrdToLayout(array[0]);
		}

		object IServiceProvider.GetService(Type serviceType)
		{
			return GetService(serviceType);
		}

		protected override object GetService(Type serviceType)
		{
			object obj = null;
			if (serviceType == typeof(CommandID))
			{
				return new CommandID(new Guid("5f1c3c8d-60f1-4b98-b85b-8679f97e8eac"), 0);
			}
			return serviceProvider.GetService(serviceType);
		}

		bool IMessageFilter.PreFilterMessage(ref System.Windows.Forms.Message m)
		{
			bool result = false;
			if (m.Msg == 256 || m.Msg == 260 || m.Msg == 257 || m.Msg == 261)
			{
				Control control = Control.FromHandle(m.HWnd);
				if (control != null && (control == this || base.Controls.Contains(control)))
				{
					KeyEventArgs keyEventArgs = new KeyEventArgs((Keys)((int)(long)m.WParam | (int)Control.ModifierKeys));
					if (m.Msg == 256 || m.Msg == 260)
					{
						OnKeyDown(keyEventArgs);
					}
					else
					{
						OnKeyUp(keyEventArgs);
					}
					result = keyEventArgs.Handled;
				}
			}
			return result;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class WorkflowViewAccessibleObject : Control.ControlAccessibleObject
	{
		private WorkflowView workflowView;

		public override Rectangle Bounds => new Rectangle(workflowView.PointToScreen(Point.Empty), workflowView.ViewPortSize);

		public override string DefaultAction => DR.GetString("AccessibleAction");

		public override string Description => DR.GetString("WorkflowViewAccessibleDescription");

		public override string Help => DR.GetString("WorkflowViewAccessibleHelp");

		public override string Name
		{
			get
			{
				return DR.GetString("WorkflowViewAccessibleName");
			}
			set
			{
			}
		}

		public override AccessibleRole Role => AccessibleRole.Diagram;

		public WorkflowViewAccessibleObject(WorkflowView workflowView)
			: base(workflowView)
		{
			if (workflowView == null)
			{
				throw new ArgumentNullException("workflowView");
			}
			this.workflowView = workflowView;
		}

		public override AccessibleObject GetChild(int index)
		{
			if (workflowView.RootDesigner == null || index != 0)
			{
				return base.GetChild(index);
			}
			return workflowView.RootDesigner.AccessibilityObject;
		}

		public override int GetChildCount()
		{
			if (workflowView.RootDesigner == null)
			{
				return -1;
			}
			return 1;
		}

		public override AccessibleObject Navigate(AccessibleNavigation navdir)
		{
			if (navdir == AccessibleNavigation.FirstChild || navdir == AccessibleNavigation.LastChild)
			{
				return GetChild(0);
			}
			return base.Navigate(navdir);
		}
	}
	internal sealed class WorkflowTimer : IDisposable
	{
		private sealed class ElapsedEventUnit
		{
			internal EventHandler elapsedEventHandler;

			internal int elapsedInterval;

			internal int elapsedTime;

			internal ElapsedEventUnit(int interval, EventHandler eventHandler)
			{
				elapsedInterval = interval;
				elapsedEventHandler = eventHandler;
			}
		}

		private static WorkflowTimer workflowTimer;

		private const int TimerInterval = 50;

		private System.Windows.Forms.Timer timer;

		private List<ElapsedEventUnit> elapsedEvents = new List<ElapsedEventUnit>();

		internal static WorkflowTimer Default
		{
			get
			{
				if (workflowTimer == null)
				{
					workflowTimer = new WorkflowTimer();
				}
				return workflowTimer;
			}
		}

		private WorkflowTimer()
		{
			timer = new System.Windows.Forms.Timer();
			timer.Interval = 50;
			timer.Tick += OnTimer;
			timer.Stop();
		}

		~WorkflowTimer()
		{
			Dispose(disposing: false);
		}

		public void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		private void Dispose(bool disposing)
		{
			if (timer != null)
			{
				if (timer.Enabled)
				{
					timer.Stop();
				}
				timer.Dispose();
				timer = null;
			}
		}

		internal void Subscribe(int elapsedInterval, EventHandler elapsedEventHandler)
		{
			elapsedEvents.Add(new ElapsedEventUnit(elapsedInterval / 50, elapsedEventHandler));
			if (!timer.Enabled)
			{
				timer.Start();
			}
		}

		internal void Unsubscribe(EventHandler elapsedEventHandler)
		{
			List<ElapsedEventUnit> list = new List<ElapsedEventUnit>();
			foreach (ElapsedEventUnit elapsedEvent in elapsedEvents)
			{
				if (elapsedEvent.elapsedEventHandler == elapsedEventHandler)
				{
					list.Add(elapsedEvent);
				}
			}
			foreach (ElapsedEventUnit item in list)
			{
				elapsedEvents.Remove(item);
			}
			if (elapsedEvents.Count == 0 && timer.Enabled)
			{
				timer.Stop();
			}
		}

		private void OnTimer(object sender, EventArgs e)
		{
			List<ElapsedEventUnit> list = new List<ElapsedEventUnit>(elapsedEvents);
			foreach (ElapsedEventUnit item in list)
			{
				item.elapsedTime++;
				if (item.elapsedInterval <= item.elapsedTime)
				{
					item.elapsedTime = 0;
					item.elapsedEventHandler(this, EventArgs.Empty);
				}
			}
		}
	}
	internal abstract class WorkflowLayout : IDisposable
	{
		[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
		public enum LayoutUpdateReason
		{
			LayoutChanged,
			ZoomChanged
		}

		protected IServiceProvider serviceProvider;

		protected WorkflowView parentView;

		public abstract float Scaling { get; }

		public abstract Size Extent { get; }

		public abstract Point RootDesignerAlignment { get; }

		public WorkflowLayout(IServiceProvider serviceProvider)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			this.serviceProvider = serviceProvider;
			parentView = this.serviceProvider.GetService(typeof(WorkflowView)) as WorkflowView;
			if (parentView == null)
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(WorkflowView).FullName));
			}
		}

		public virtual void Dispose()
		{
		}

		public abstract bool IsCoOrdInLayout(Point logicalCoOrd);

		public abstract Rectangle MapInRectangleToLayout(Rectangle logicalRectangle);

		public abstract Rectangle MapOutRectangleFromLayout(Rectangle logicalRectangle);

		public abstract Point MapInCoOrdToLayout(Point logicalPoint);

		public abstract Point MapOutCoOrdFromLayout(Point logicalPoint);

		public abstract void OnPaint(PaintEventArgs e, ViewPortData viewPortData);

		public abstract void OnPaintWorkflow(PaintEventArgs e, ViewPortData viewPortData);

		public abstract void Update(Graphics graphics, LayoutUpdateReason reason);
	}
	internal abstract class DefaultWorkflowLayout : WorkflowLayout
	{
		public static Size Separator = new Size(30, 30);

		public override float Scaling => 1f;

		public override Size Extent
		{
			get
			{
				Size size = ((parentView.RootDesigner != null) ? parentView.RootDesigner.Size : Size.Empty);
				Size size2 = new Size(size.Width + Separator.Width * 2, size.Height + Separator.Height * 2);
				Size viewPortSize = parentView.ViewPortSize;
				return new Size(Math.Max(size2.Width, viewPortSize.Width), Math.Max(size2.Height, viewPortSize.Height));
			}
		}

		public override Point RootDesignerAlignment => new Point(Separator);

		public DefaultWorkflowLayout(IServiceProvider serviceProvider)
			: base(serviceProvider)
		{
		}

		public override bool IsCoOrdInLayout(Point logicalCoOrd)
		{
			return true;
		}

		public override Rectangle MapInRectangleToLayout(Rectangle logicalRectangle)
		{
			return logicalRectangle;
		}

		public override Rectangle MapOutRectangleFromLayout(Rectangle logicalRectangle)
		{
			return logicalRectangle;
		}

		public override Point MapInCoOrdToLayout(Point logicalPoint)
		{
			return logicalPoint;
		}

		public override Point MapOutCoOrdFromLayout(Point logicalPoint)
		{
			return logicalPoint;
		}

		public override void Update(Graphics graphics, LayoutUpdateReason reason)
		{
		}

		public override void OnPaint(PaintEventArgs e, ViewPortData viewPortData)
		{
			Graphics graphics = e.Graphics;
			Bitmap memoryBitmap = viewPortData.MemoryBitmap;
			graphics.FillRectangle(rect: new Rectangle(Point.Empty, memoryBitmap.Size), brush: AmbientTheme.WorkspaceBackgroundBrush);
			if (parentView.RootDesigner == null || parentView.RootDesigner.Bounds.Width < 0 || parentView.RootDesigner.Bounds.Height < 0)
			{
				return;
			}
			GraphicsContainer container = graphics.BeginContainer();
			Matrix matrix = new Matrix();
			matrix.Scale(viewPortData.Scaling.Width, viewPortData.Scaling.Height, MatrixOrder.Prepend);
			Point[] array = new Point[1] { viewPortData.LogicalViewPort.Location };
			matrix.TransformPoints(array);
			matrix.Translate(-array[0].X + viewPortData.ShadowDepth.Width, -array[0].Y + viewPortData.ShadowDepth.Height, MatrixOrder.Append);
			graphics.Transform = matrix;
			using (Region clip2 = new Region(ActivityDesignerPaint.GetDesignerPath(parentView.RootDesigner, enableRoundedCorners: false)))
			{
				Region clip = graphics.Clip;
				graphics.Clip = clip2;
				AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
				graphics.FillRectangle(Brushes.White, parentView.RootDesigner.Bounds);
				if (ambientTheme.WorkflowWatermarkImage != null)
				{
					ActivityDesignerPaint.DrawImage(graphics, ambientTheme.WorkflowWatermarkImage, parentView.RootDesigner.Bounds, new Rectangle(Point.Empty, ambientTheme.WorkflowWatermarkImage.Size), ambientTheme.WatermarkAlignment, 0.25f, grayscale: false);
				}
				graphics.Clip = clip;
			}
			graphics.EndContainer(container);
		}

		public override void OnPaintWorkflow(PaintEventArgs e, ViewPortData viewPortData)
		{
			Graphics graphics = e.Graphics;
			Bitmap memoryBitmap = viewPortData.MemoryBitmap;
			Rectangle rectangle = new Rectangle(Point.Empty, memoryBitmap.Size);
			ActivityDesignerPaint.DrawImage(graphics, memoryBitmap, rectangle, rectangle, DesignerContentAlignment.Fill, 1f, WorkflowTheme.CurrentTheme.AmbientTheme.DrawGrayscale);
		}
	}
	internal sealed class ActivityRootLayout : DefaultWorkflowLayout
	{
		public override Size Extent
		{
			get
			{
				Size size = ((parentView.RootDesigner != null) ? parentView.RootDesigner.Size : Size.Empty);
				Size size2 = new Size(size.Width + DefaultWorkflowLayout.Separator.Width * 2, size.Height + DefaultWorkflowLayout.Separator.Height * 2);
				Size viewPortSize = parentView.ViewPortSize;
				viewPortSize.Width = (int)((float)viewPortSize.Width / ((float)parentView.Zoom / 100f));
				viewPortSize.Height = (int)((float)viewPortSize.Height / ((float)parentView.Zoom / 100f));
				return new Size(Math.Max(size2.Width, viewPortSize.Width), Math.Max(size2.Height, viewPortSize.Height));
			}
		}

		internal ActivityRootLayout(IServiceProvider serviceProvider)
			: base(serviceProvider)
		{
		}

		public override void OnPaint(PaintEventArgs e, ViewPortData viewPortData)
		{
			base.OnPaint(e, viewPortData);
			Graphics graphics = e.Graphics;
			if (parentView.RootDesigner != null && parentView.RootDesigner.Bounds.Width >= 0 && parentView.RootDesigner.Bounds.Height >= 0)
			{
				GraphicsContainer container = graphics.BeginContainer();
				Matrix matrix = new Matrix();
				matrix.Scale(viewPortData.Scaling.Width, viewPortData.Scaling.Height, MatrixOrder.Prepend);
				Point[] array = new Point[1] { viewPortData.LogicalViewPort.Location };
				matrix.TransformPoints(array);
				matrix.Translate(-array[0].X + viewPortData.ShadowDepth.Width, -array[0].Y + viewPortData.ShadowDepth.Height, MatrixOrder.Append);
				graphics.Transform = matrix;
				Rectangle bounds = parentView.RootDesigner.Bounds;
				graphics.ExcludeClip(bounds);
				bounds.Inflate(DefaultWorkflowLayout.Separator.Width / 2, DefaultWorkflowLayout.Separator.Height / 2);
				ActivityDesignerPaint.DrawDropShadow(graphics, bounds, AmbientTheme.WorkflowBorderPen.Color, 4, LightSourcePosition.Left | LightSourcePosition.Top, 0.2f, roundEdges: false);
				graphics.FillRectangle(WorkflowTheme.CurrentTheme.AmbientTheme.BackgroundBrush, bounds);
				graphics.DrawRectangle(AmbientTheme.WorkflowBorderPen, bounds);
				graphics.EndContainer(container);
			}
		}
	}
	internal sealed class WorkflowRootLayout : DefaultWorkflowLayout
	{
		private Size Offset
		{
			get
			{
				Size extent = Extent;
				Size size = parentView.ClientSizeToLogical(parentView.ViewPortSize);
				size.Width = Math.Max(size.Width, extent.Width);
				size.Height = Math.Max(size.Height, extent.Height);
				return new Size(Math.Max(0, (size.Width - extent.Width) / 2), Math.Max(0, (size.Height - extent.Height) / 2));
			}
		}

		public WorkflowRootLayout(IServiceProvider serviceProvider)
			: base(serviceProvider)
		{
		}

		public override Rectangle MapInRectangleToLayout(Rectangle logicalRectangle)
		{
			Size offset = Offset;
			logicalRectangle.X -= offset.Width;
			logicalRectangle.Y -= offset.Height;
			return logicalRectangle;
		}

		public override Rectangle MapOutRectangleFromLayout(Rectangle logicalRectangle)
		{
			Size offset = Offset;
			logicalRectangle.X += offset.Width;
			logicalRectangle.Y += offset.Height;
			return logicalRectangle;
		}

		public override Point MapInCoOrdToLayout(Point logicalPoint)
		{
			Size offset = Offset;
			logicalPoint.Offset(-offset.Width, -offset.Height);
			return logicalPoint;
		}

		public override Point MapOutCoOrdFromLayout(Point logicalPoint)
		{
			Size offset = Offset;
			logicalPoint.Offset(offset.Width, offset.Height);
			return logicalPoint;
		}
	}
	internal sealed class PrintPreviewLayout : WorkflowLayout
	{
		private struct PageLayoutData
		{
			public Rectangle LogicalPageBounds;

			public Rectangle PageBounds;

			public Rectangle ViewablePageBounds;

			public Point Position;

			public PageLayoutData(Rectangle logicalPageBounds, Rectangle pageBounds, Rectangle viewablePageBounds, Point rowColumnPos)
			{
				LogicalPageBounds = logicalPageBounds;
				PageBounds = pageBounds;
				ViewablePageBounds = viewablePageBounds;
				Position = rowColumnPos;
			}
		}

		private static Size DefaultPageSeparator = new Size(30, 30);

		private static Margins DefaultPageMargins = new Margins(20, 20, 20, 20);

		private WorkflowPrintDocument printDocument;

		private ArrayList pageLayoutInfo = new ArrayList();

		private Margins headerFooterMargins = new Margins(0, 0, 0, 0);

		private Size pageSeparator = DefaultPageSeparator;

		private Margins pageMargins = DefaultPageMargins;

		private Size rowColumns = new Size(1, 1);

		private float scaling = 1f;

		private Size pageSize = Size.Empty;

		private DateTime previewTime = DateTime.Now;

		public override float Scaling => scaling;

		public override Size Extent
		{
			get
			{
				Size empty = Size.Empty;
				empty.Width = rowColumns.Width * pageSize.Width + (rowColumns.Width + 1) * PageSeparator.Width;
				empty.Height = rowColumns.Height * pageSize.Height + (rowColumns.Height + 1) * PageSeparator.Height;
				return empty;
			}
		}

		public override Point RootDesignerAlignment
		{
			get
			{
				Point empty = Point.Empty;
				Size size = new Size(pageSize.Width - (PageMargins.Left + PageMargins.Right), pageSize.Height - (PageMargins.Top + PageMargins.Bottom));
				Size size2 = new Size(rowColumns.Width * size.Width, rowColumns.Height * size.Height);
				Size size3 = ((parentView.RootDesigner != null) ? parentView.RootDesigner.Size : Size.Empty);
				Size selectionSize = WorkflowTheme.CurrentTheme.AmbientTheme.SelectionSize;
				if (printDocument.PageSetupData.CenterHorizontally)
				{
					empty.X = (size2.Width - size3.Width) / 2;
				}
				empty.X = Math.Max(empty.X, selectionSize.Width + selectionSize.Width / 2);
				if (printDocument.PageSetupData.CenterVertically)
				{
					empty.Y = (size2.Height - size3.Height) / 2;
				}
				empty.Y = Math.Max(empty.Y, selectionSize.Height + selectionSize.Height / 2);
				return empty;
			}
		}

		private Size PageSeparator
		{
			get
			{
				return pageSeparator;
			}
			set
			{
				pageSeparator = value;
			}
		}

		private Margins PageMargins
		{
			get
			{
				return pageMargins;
			}
			set
			{
				pageMargins = value;
			}
		}

		internal PrintPreviewLayout(IServiceProvider serviceProvider, WorkflowPrintDocument printDoc)
			: base(serviceProvider)
		{
			printDocument = printDoc;
		}

		public override bool IsCoOrdInLayout(Point logicalCoOrd)
		{
			foreach (PageLayoutData item in pageLayoutInfo)
			{
				if (item.ViewablePageBounds.Contains(logicalCoOrd))
				{
					return true;
				}
			}
			return false;
		}

		public override Rectangle MapInRectangleToLayout(Rectangle logicalRectangle)
		{
			Rectangle rectangle = Rectangle.Empty;
			foreach (PageLayoutData item in pageLayoutInfo)
			{
				Rectangle rectangle2 = logicalRectangle;
				rectangle2.Intersect(item.ViewablePageBounds);
				if (!rectangle2.IsEmpty)
				{
					int x = rectangle2.X;
					Rectangle viewablePageBounds = item.ViewablePageBounds;
					int x2 = x - viewablePageBounds.X;
					int y = rectangle2.Y;
					viewablePageBounds = item.ViewablePageBounds;
					Point point = new Point(x2, y - viewablePageBounds.Y);
					viewablePageBounds = item.ViewablePageBounds;
					int width = viewablePageBounds.Width - rectangle2.Width;
					viewablePageBounds = item.ViewablePageBounds;
					Size size = new Size(width, viewablePageBounds.Height - rectangle2.Height);
					size.Width -= point.X;
					size.Height -= point.Y;
					Rectangle empty = Rectangle.Empty;
					viewablePageBounds = item.LogicalPageBounds;
					empty.X = viewablePageBounds.X + point.X;
					viewablePageBounds = item.LogicalPageBounds;
					empty.Y = viewablePageBounds.Y + point.Y;
					viewablePageBounds = item.LogicalPageBounds;
					empty.Width = viewablePageBounds.Width - point.X;
					empty.Width -= size.Width;
					viewablePageBounds = item.LogicalPageBounds;
					empty.Height = viewablePageBounds.Height - point.Y;
					empty.Height -= size.Height;
					rectangle = (rectangle.IsEmpty ? empty : Rectangle.Union(rectangle, empty));
				}
			}
			return rectangle;
		}

		public override Rectangle MapOutRectangleFromLayout(Rectangle logicalRectangle)
		{
			Rectangle rectangle = Rectangle.Empty;
			foreach (PageLayoutData item in pageLayoutInfo)
			{
				Rectangle rectangle2 = logicalRectangle;
				rectangle2.Intersect(item.LogicalPageBounds);
				if (!rectangle2.IsEmpty)
				{
					int x = rectangle2.X;
					Rectangle logicalPageBounds = item.LogicalPageBounds;
					int x2 = x - logicalPageBounds.X;
					int y = rectangle2.Y;
					logicalPageBounds = item.LogicalPageBounds;
					Point point = new Point(x2, y - logicalPageBounds.Y);
					logicalPageBounds = item.LogicalPageBounds;
					int width = logicalPageBounds.Width - rectangle2.Width;
					logicalPageBounds = item.LogicalPageBounds;
					Size size = new Size(width, logicalPageBounds.Height - rectangle2.Height);
					size.Width -= point.X;
					size.Height -= point.Y;
					Rectangle empty = Rectangle.Empty;
					logicalPageBounds = item.ViewablePageBounds;
					empty.X = logicalPageBounds.X + point.X;
					logicalPageBounds = item.ViewablePageBounds;
					empty.Y = logicalPageBounds.Y + point.Y;
					logicalPageBounds = item.ViewablePageBounds;
					empty.Width = logicalPageBounds.Width - point.X;
					empty.Width -= size.Width;
					logicalPageBounds = item.ViewablePageBounds;
					empty.Height = logicalPageBounds.Height - point.Y;
					empty.Height -= size.Height;
					rectangle = (rectangle.IsEmpty ? empty : Rectangle.Union(rectangle, empty));
				}
			}
			return rectangle;
		}

		public override Point MapInCoOrdToLayout(Point logicalPoint)
		{
			foreach (PageLayoutData item in pageLayoutInfo)
			{
				Rectangle pageBounds = item.PageBounds;
				if (pageBounds.Contains(logicalPoint))
				{
					int x = logicalPoint.X;
					pageBounds = item.ViewablePageBounds;
					int x2 = x - pageBounds.Left;
					int y = logicalPoint.Y;
					pageBounds = item.ViewablePageBounds;
					Point point = new Point(x2, y - pageBounds.Top);
					pageBounds = item.LogicalPageBounds;
					int x3 = pageBounds.Left + point.X;
					pageBounds = item.LogicalPageBounds;
					logicalPoint = new Point(x3, pageBounds.Top + point.Y);
					break;
				}
			}
			return logicalPoint;
		}

		public override Point MapOutCoOrdFromLayout(Point logicalPoint)
		{
			foreach (PageLayoutData item in pageLayoutInfo)
			{
				Rectangle logicalPageBounds = item.LogicalPageBounds;
				if (logicalPageBounds.Contains(logicalPoint))
				{
					int x = logicalPoint.X;
					logicalPageBounds = item.LogicalPageBounds;
					int x2 = x - logicalPageBounds.Left;
					int y = logicalPoint.Y;
					logicalPageBounds = item.LogicalPageBounds;
					Point point = new Point(x2, y - logicalPageBounds.Top);
					logicalPageBounds = item.ViewablePageBounds;
					int x3 = logicalPageBounds.Left + point.X;
					logicalPageBounds = item.ViewablePageBounds;
					logicalPoint = new Point(x3, logicalPageBounds.Top + point.Y);
					break;
				}
			}
			return logicalPoint;
		}

		public override void OnPaint(PaintEventArgs e, ViewPortData viewPortData)
		{
			Graphics graphics = e.Graphics;
			AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
			Bitmap memoryBitmap = viewPortData.MemoryBitmap;
			graphics.FillRectangle(Brushes.White, new Rectangle(Point.Empty, memoryBitmap.Size));
			if (ambientTheme.WorkflowWatermarkImage == null)
			{
				return;
			}
			GraphicsContainer container = graphics.BeginContainer();
			Matrix matrix = new Matrix();
			matrix.Scale(viewPortData.Scaling.Width, viewPortData.Scaling.Height, MatrixOrder.Prepend);
			matrix.Invert();
			Point[] array = new Point[2]
			{
				viewPortData.Translation,
				new Point(viewPortData.ViewPortSize)
			};
			matrix.TransformPoints(array);
			Rectangle rect = new Rectangle(array[0], new Size(array[1]));
			matrix = new Matrix();
			matrix.Scale(viewPortData.Scaling.Width / (float)parentView.Zoom * 100f, viewPortData.Scaling.Height / (float)parentView.Zoom * 100f);
			Matrix matrix2 = new Matrix();
			matrix2.Scale((float)parentView.Zoom / 100f, (float)parentView.Zoom / 100f);
			graphics.Transform = matrix2;
			foreach (PageLayoutData item in pageLayoutInfo)
			{
				Rectangle pageBounds = item.PageBounds;
				if (pageBounds.IntersectsWith(rect))
				{
					Rectangle empty = Rectangle.Empty;
					pageBounds = item.LogicalPageBounds;
					empty.X = pageBounds.X - viewPortData.LogicalViewPort.X;
					pageBounds = item.LogicalPageBounds;
					empty.Y = pageBounds.Y - viewPortData.LogicalViewPort.Y;
					pageBounds = item.LogicalPageBounds;
					empty.Width = pageBounds.Width;
					pageBounds = item.LogicalPageBounds;
					empty.Height = pageBounds.Height;
					array = new Point[2]
					{
						empty.Location,
						new Point(empty.Size)
					};
					matrix.TransformPoints(array);
					empty.Location = array[0];
					empty.Size = new Size(array[1]);
					ActivityDesignerPaint.DrawImage(graphics, ambientTheme.WorkflowWatermarkImage, empty, new Rectangle(Point.Empty, ambientTheme.WorkflowWatermarkImage.Size), ambientTheme.WatermarkAlignment, 0.25f, grayscale: false);
				}
			}
			graphics.EndContainer(container);
		}

		public override void OnPaintWorkflow(PaintEventArgs e, ViewPortData viewPortData)
		{
			Graphics graphics = e.Graphics;
			Bitmap memoryBitmap = viewPortData.MemoryBitmap;
			AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
			GraphicsContainer container = graphics.BeginContainer();
			graphics.FillRectangle(rect: new Rectangle(Point.Empty, memoryBitmap.Size), brush: AmbientTheme.WorkspaceBackgroundBrush);
			using Font font = new Font(ambientTheme.Font.FontFamily, ambientTheme.Font.Size / scaling, ambientTheme.Font.Style);
			int num = 0;
			Matrix transform = new Matrix();
			Matrix matrix = new Matrix();
			matrix.Scale(viewPortData.Scaling.Width, viewPortData.Scaling.Height, MatrixOrder.Prepend);
			matrix.Invert();
			Point[] array = new Point[2]
			{
				viewPortData.Translation,
				new Point(viewPortData.ViewPortSize)
			};
			matrix.TransformPoints(array);
			matrix.Invert();
			Rectangle rect2 = new Rectangle(array[0], new Size(array[1]));
			WorkflowPrintDocument.HeaderFooterData headerFooterData = new WorkflowPrintDocument.HeaderFooterData();
			headerFooterData.HeaderFooterMargins = headerFooterMargins;
			headerFooterData.PrintTime = previewTime;
			headerFooterData.TotalPages = pageLayoutInfo.Count;
			headerFooterData.Scaling = scaling;
			headerFooterData.Font = font;
			WorkflowDesignerLoader workflowDesignerLoader = serviceProvider.GetService(typeof(WorkflowDesignerLoader)) as WorkflowDesignerLoader;
			headerFooterData.FileName = ((workflowDesignerLoader != null) ? workflowDesignerLoader.FileName : string.Empty);
			Matrix matrix2 = new Matrix();
			matrix2.Scale(viewPortData.Scaling.Width, viewPortData.Scaling.Height, MatrixOrder.Prepend);
			matrix2.Translate(-viewPortData.Translation.X, -viewPortData.Translation.Y, MatrixOrder.Append);
			foreach (PageLayoutData item in pageLayoutInfo)
			{
				num++;
				Rectangle pageBounds = item.PageBounds;
				if (!pageBounds.IntersectsWith(rect2))
				{
					continue;
				}
				pageBounds = item.PageBounds;
				if (pageBounds.Width <= 0)
				{
					continue;
				}
				pageBounds = item.PageBounds;
				if (pageBounds.Height > 0)
				{
					graphics.Transform = matrix2;
					graphics.FillRectangle(Brushes.White, item.PageBounds);
					ActivityDesignerPaint.DrawDropShadow(graphics, item.PageBounds, Color.Black, 4, LightSourcePosition.Left | LightSourcePosition.Top, 0.2f, roundEdges: false);
					Rectangle logicalPageBounds = item.LogicalPageBounds;
					logicalPageBounds.Intersect(viewPortData.LogicalViewPort);
					if (!logicalPageBounds.IsEmpty)
					{
						graphics.Transform = transform;
						Point empty = Point.Empty;
						pageBounds = item.ViewablePageBounds;
						int x = pageBounds.X;
						pageBounds = item.LogicalPageBounds;
						empty.X = x + Math.Abs(pageBounds.X - logicalPageBounds.X);
						pageBounds = item.ViewablePageBounds;
						int y = pageBounds.Y;
						pageBounds = item.LogicalPageBounds;
						empty.Y = y + Math.Abs(pageBounds.Y - logicalPageBounds.Y);
						array = new Point[1] { empty };
						matrix.TransformPoints(array);
						empty = new Point(array[0].X - viewPortData.Translation.X, array[0].Y - viewPortData.Translation.Y);
						Rectangle empty2 = Rectangle.Empty;
						empty2.X = logicalPageBounds.X - viewPortData.LogicalViewPort.X;
						empty2.Y = logicalPageBounds.Y - viewPortData.LogicalViewPort.Y;
						empty2.Width = logicalPageBounds.Width;
						empty2.Height = logicalPageBounds.Height;
						array = new Point[2]
						{
							empty2.Location,
							new Point(empty2.Size)
						};
						matrix.TransformPoints(array);
						empty2.Location = array[0];
						empty2.Size = new Size(array[1]);
						ActivityDesignerPaint.DrawImage(graphics, memoryBitmap, new Rectangle(empty, empty2.Size), empty2, DesignerContentAlignment.Fill, 1f, WorkflowTheme.CurrentTheme.AmbientTheme.DrawGrayscale);
					}
					graphics.Transform = matrix2;
					graphics.DrawRectangle(Pens.Black, item.PageBounds);
					Pen foregroundPen = ambientTheme.ForegroundPen;
					pageBounds = item.ViewablePageBounds;
					int x2 = pageBounds.Left - 3;
					pageBounds = item.ViewablePageBounds;
					int y2 = pageBounds.Top - 3;
					pageBounds = item.ViewablePageBounds;
					int width = pageBounds.Width + 6;
					pageBounds = item.ViewablePageBounds;
					graphics.DrawRectangle(foregroundPen, x2, y2, width, pageBounds.Height + 6);
					headerFooterData.PageBounds = item.PageBounds;
					headerFooterData.PageBoundsWithoutMargin = item.ViewablePageBounds;
					headerFooterData.CurrentPage = num;
					if (printDocument.PageSetupData.HeaderTemplate.Length > 0)
					{
						printDocument.PrintHeaderFooter(graphics, drawHeader: true, headerFooterData);
					}
					if (printDocument.PageSetupData.FooterTemplate.Length > 0)
					{
						printDocument.PrintHeaderFooter(graphics, drawHeader: false, headerFooterData);
					}
				}
			}
			graphics.EndContainer(container);
		}

		public override void Update(Graphics graphics, LayoutUpdateReason reason)
		{
			if (reason == LayoutUpdateReason.ZoomChanged)
			{
				return;
			}
			if (graphics == null)
			{
				throw new ArgumentException("graphics");
			}
			Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
			Size paperSize = GetPaperSize(graphics);
			Margins adjustedMargins = GetAdjustedMargins(graphics);
			Size size = ((parentView.RootDesigner != null) ? parentView.RootDesigner.Size : Size.Empty);
			if (!size.IsEmpty)
			{
				Size selectionSize = WorkflowTheme.CurrentTheme.AmbientTheme.SelectionSize;
				size.Width += 3 * selectionSize.Width;
				size.Height += 3 * selectionSize.Height;
			}
			if (printDocument.PageSetupData.AdjustToScaleFactor)
			{
				scaling = (float)printDocument.PageSetupData.ScaleFactor / 100f;
			}
			else
			{
				Size size2 = new Size(paperSize.Width - (adjustedMargins.Left + adjustedMargins.Right), paperSize.Height - (adjustedMargins.Top + adjustedMargins.Bottom));
				size2.Width = Math.Max(size2.Width, 1);
				size2.Height = Math.Max(size2.Height, 1);
				PointF pointF = new PointF((float)printDocument.PageSetupData.PagesWide * (float)size2.Width / (float)size.Width, (float)printDocument.PageSetupData.PagesTall * (float)size2.Height / (float)size.Height);
				scaling = Math.Min(pointF.X, pointF.Y);
				scaling = (float)(Math.Floor((double)scaling * 1000.0) / 1000.0);
			}
			pageSize = paperSize;
			pageSize.Width = Convert.ToInt32(Math.Ceiling((float)pageSize.Width / scaling));
			pageSize.Height = Convert.ToInt32(Math.Ceiling((float)pageSize.Height / scaling));
			if (serviceProvider.GetService(typeof(IDesignerOptionService)) is IDesignerOptionService designerOptionService)
			{
				object optionValue = designerOptionService.GetOptionValue("WinOEDesigner", "PageSeparator");
				PageSeparator = ((optionValue != null) ? ((Size)optionValue) : DefaultPageSeparator);
			}
			PageSeparator = new Size(Convert.ToInt32(Math.Ceiling((float)PageSeparator.Width / scaling)), Convert.ToInt32(Math.Ceiling((float)PageSeparator.Height / scaling)));
			PageMargins = adjustedMargins;
			PageMargins.Left = Convert.ToInt32((float)PageMargins.Left / scaling);
			PageMargins.Right = Convert.ToInt32((float)PageMargins.Right / scaling);
			PageMargins.Top = Convert.ToInt32((float)PageMargins.Top / scaling);
			PageMargins.Bottom = Convert.ToInt32((float)PageMargins.Bottom / scaling);
			headerFooterMargins.Top = Convert.ToInt32((float)printDocument.PageSetupData.HeaderMargin / scaling);
			headerFooterMargins.Bottom = Convert.ToInt32((float)printDocument.PageSetupData.FooterMargin / scaling);
			previewTime = DateTime.Now;
			Size size3 = new Size(pageSize.Width - (PageMargins.Left + PageMargins.Right), pageSize.Height - (PageMargins.Top + PageMargins.Bottom));
			size3.Width = Math.Max(size3.Width, 1);
			size3.Height = Math.Max(size3.Height, 1);
			rowColumns.Width = size.Width / size3.Width;
			rowColumns.Width += ((size.Width % size3.Width > 1) ? 1 : 0);
			rowColumns.Width = Math.Max(1, rowColumns.Width);
			rowColumns.Height = size.Height / size3.Height;
			rowColumns.Height += ((size.Height % size3.Height > 1) ? 1 : 0);
			rowColumns.Height = Math.Max(1, rowColumns.Height);
			pageLayoutInfo.Clear();
			for (int i = 0; i < rowColumns.Height; i++)
			{
				for (int j = 0; j < rowColumns.Width; j++)
				{
					Point empty = Point.Empty;
					empty.X = j * pageSize.Width + (j + 1) * PageSeparator.Width;
					empty.Y = i * pageSize.Height + (i + 1) * PageSeparator.Height;
					Point empty2 = Point.Empty;
					empty2.X = empty.X + PageMargins.Left;
					empty2.Y = empty.Y + PageMargins.Top;
					Rectangle logicalPageBounds = new Rectangle(j * size3.Width, i * size3.Height, size3.Width, size3.Height);
					Rectangle pageBounds = new Rectangle(empty, pageSize);
					Rectangle viewablePageBounds = new Rectangle(empty2, size3);
					pageLayoutInfo.Add(new PageLayoutData(logicalPageBounds, pageBounds, viewablePageBounds, new Point(j, i)));
				}
			}
		}

		private Size GetPaperSize(Graphics graphics)
		{
			Size empty = Size.Empty;
			PaperSize paperSize = printDocument.DefaultPageSettings.PaperSize;
			printDocument.DefaultPageSettings.PaperSize = paperSize;
			if (printDocument.PageSetupData.Landscape)
			{
				empty.Width = Math.Max(paperSize.Height, 1);
				empty.Height = Math.Max(paperSize.Width, 1);
			}
			else
			{
				empty.Width = Math.Max(paperSize.Width, 1);
				empty.Height = Math.Max(paperSize.Height, 1);
			}
			return empty;
		}

		private Margins GetAdjustedMargins(Graphics graphics)
		{
			Margins margins = printDocument.PageSetupData.Margins;
			if (printDocument.PageSetupData.Landscape)
			{
				int left = margins.Left;
				margins.Left = margins.Right;
				margins.Right = left;
				left = margins.Bottom;
				margins.Bottom = margins.Top;
				margins.Top = left;
			}
			Margins margins2 = new Margins();
			using (Graphics graphics2 = printDocument.PrinterSettings.CreateMeasurementGraphics())
			{
				margins2 = printDocument.GetHardMargins(graphics2);
			}
			return new Margins(Math.Max(margins.Left, margins2.Left), Math.Max(margins.Right, margins2.Right), Math.Max(margins.Top, margins2.Top), Math.Max(margins.Bottom, margins2.Bottom));
		}
	}
	[ToolboxItem(false)]
	internal sealed class WorkflowPrintDocument : PrintDocument
	{
		internal sealed class HeaderFooterData
		{
			internal Font Font;

			internal Rectangle PageBounds;

			internal Rectangle PageBoundsWithoutMargin;

			internal Margins HeaderFooterMargins;

			internal DateTime PrintTime;

			internal int CurrentPage;

			internal int TotalPages;

			internal float Scaling;

			internal string FileName;
		}

		private WorkflowView workflowView;

		private PageSetupData pageSetupData;

		private PrintPreviewLayout previewLayout;

		private Point totalPrintablePages = Point.Empty;

		private Point currentPrintablePage = Point.Empty;

		private Point workflowAlignment = Point.Empty;

		private float scaling;

		private DateTime printTime;

		private const int MaxHeaderFooterLines = 5;

		internal PrintPreviewLayout PrintPreviewLayout => previewLayout;

		internal PageSetupData PageSetupData => pageSetupData;

		public WorkflowPrintDocument(WorkflowView workflowView)
		{
			pageSetupData = new PageSetupData();
			this.workflowView = workflowView;
			previewLayout = new PrintPreviewLayout(this.workflowView, this);
		}

		protected override void Dispose(bool disposing)
		{
			try
			{
				if (disposing && previewLayout != null)
				{
					previewLayout.Dispose();
					previewLayout = null;
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		protected override void OnBeginPrint(PrintEventArgs printArgs)
		{
			base.OnBeginPrint(printArgs);
			currentPrintablePage = Point.Empty;
			bool flag = base.PrinterSettings.IsValid && PrinterSettings.InstalledPrinters.Count > 0 && new ArrayList(PrinterSettings.InstalledPrinters).Contains(base.PrinterSettings.PrinterName);
			if (!flag)
			{
				DesignerHelpers.ShowError(workflowView, DR.GetString("SelectedPrinterIsInvalidErrorMessage"));
			}
			printArgs.Cancel = !flag || workflowView.RootDesigner == null;
		}

		protected override void OnPrintPage(PrintPageEventArgs printPageArg)
		{
			base.OnPrintPage(printPageArg);
			AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
			Graphics graphics = printPageArg.Graphics;
			graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
			graphics.SmoothingMode = SmoothingMode.HighQuality;
			if (currentPrintablePage.IsEmpty)
			{
				PrepareToPrint(printPageArg);
			}
			Margins hardMargins = GetHardMargins(graphics);
			Margins margins = new Margins(Math.Max(printPageArg.PageSettings.Margins.Left, hardMargins.Left), Math.Max(printPageArg.PageSettings.Margins.Right, hardMargins.Right), Math.Max(printPageArg.PageSettings.Margins.Top, hardMargins.Top), Math.Max(printPageArg.PageSettings.Margins.Bottom, hardMargins.Bottom));
			Size size = new Size(printPageArg.PageBounds.Size.Width - (margins.Left + margins.Right), printPageArg.PageBounds.Size.Height - (margins.Top + margins.Bottom));
			Rectangle rectangle = new Rectangle(margins.Left, margins.Top, size.Width, size.Height);
			Region region = new Region(rectangle);
			try
			{
				graphics.TranslateTransform(-hardMargins.Left, -hardMargins.Top);
				graphics.FillRectangle(ambientTheme.BackgroundBrush, rectangle);
				graphics.DrawRectangle(ambientTheme.ForegroundPen, rectangle);
				if (ambientTheme.WorkflowWatermarkImage != null)
				{
					ActivityDesignerPaint.DrawImage(graphics, ambientTheme.WorkflowWatermarkImage, rectangle, new Rectangle(Point.Empty, ambientTheme.WorkflowWatermarkImage.Size), ambientTheme.WatermarkAlignment, 0.25f, grayscale: false);
				}
				Matrix transform = graphics.Transform;
				Region clip = graphics.Clip;
				graphics.Clip = region;
				graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
				Point point = new Point(currentPrintablePage.X * size.Width - workflowAlignment.X, currentPrintablePage.Y * size.Height - workflowAlignment.Y);
				graphics.TranslateTransform(rectangle.Left - point.X, rectangle.Top - point.Y);
				graphics.ScaleTransform(scaling, scaling);
				Size empty = Size.Empty;
				empty.Width = Convert.ToInt32(Math.Ceiling((float)size.Width / scaling));
				empty.Height = Convert.ToInt32(Math.Ceiling((float)size.Height / scaling));
				Point empty2 = Point.Empty;
				empty2.X = Convert.ToInt32(Math.Ceiling((float)workflowAlignment.X / scaling));
				empty2.Y = Convert.ToInt32(Math.Ceiling((float)workflowAlignment.Y / scaling));
				Rectangle viewPort = new Rectangle(currentPrintablePage.X * empty.Width - empty2.X, currentPrintablePage.Y * empty.Height - empty2.Y, empty.Width, empty.Height);
				using (PaintEventArgs e = new PaintEventArgs(graphics, workflowView.RootDesigner.Bounds))
				{
					((IWorkflowDesignerMessageSink)workflowView.RootDesigner).OnPaint(e, viewPort);
				}
				graphics.Clip = clip;
				graphics.Transform = transform;
				HeaderFooterData headerFooterData = new HeaderFooterData();
				headerFooterData.Font = ambientTheme.Font;
				headerFooterData.PageBounds = printPageArg.PageBounds;
				headerFooterData.PageBoundsWithoutMargin = rectangle;
				headerFooterData.HeaderFooterMargins = new Margins(0, 0, pageSetupData.HeaderMargin, pageSetupData.FooterMargin);
				headerFooterData.PrintTime = printTime;
				headerFooterData.CurrentPage = currentPrintablePage.X + currentPrintablePage.Y * totalPrintablePages.X + 1;
				headerFooterData.TotalPages = totalPrintablePages.X * totalPrintablePages.Y;
				headerFooterData.Scaling = scaling;
				WorkflowDesignerLoader workflowDesignerLoader = ((IServiceProvider)workflowView).GetService(typeof(WorkflowDesignerLoader)) as WorkflowDesignerLoader;
				headerFooterData.FileName = ((workflowDesignerLoader != null) ? workflowDesignerLoader.FileName : string.Empty);
				if (pageSetupData.HeaderTemplate.Length > 0)
				{
					PrintHeaderFooter(graphics, drawHeader: true, headerFooterData);
				}
				if (pageSetupData.FooterTemplate.Length > 0)
				{
					PrintHeaderFooter(graphics, drawHeader: false, headerFooterData);
				}
				printPageArg.HasMorePages = MoveNextPage();
			}
			catch (Exception ex)
			{
				DesignerHelpers.ShowError(workflowView, DR.GetString("SelectedPrinterIsInvalidErrorMessage") + "\n" + ex.Message);
				printPageArg.Cancel = true;
				printPageArg.HasMorePages = false;
			}
			finally
			{
				region.Dispose();
			}
			if (!printPageArg.HasMorePages)
			{
				workflowView.PerformLayout();
			}
		}

		internal Margins GetHardMargins(Graphics graphics)
		{
			IntPtr hdc = graphics.GetHdc();
			Point point = new Point(Math.Max(NativeMethods.GetDeviceCaps(hdc, 88), 1), Math.Max(NativeMethods.GetDeviceCaps(hdc, 90), 1));
			int num = (int)((float)NativeMethods.GetDeviceCaps(hdc, 8) * 100f / (float)point.X);
			int num2 = (int)((float)NativeMethods.GetDeviceCaps(hdc, 10) * 100f / (float)point.Y);
			int num3 = (int)((float)NativeMethods.GetDeviceCaps(hdc, 110) * 100f / (float)point.X);
			int num4 = (int)((float)NativeMethods.GetDeviceCaps(hdc, 111) * 100f / (float)point.Y);
			int num5 = (int)((float)NativeMethods.GetDeviceCaps(hdc, 112) * 100f / (float)point.X);
			int num6 = (int)((float)NativeMethods.GetDeviceCaps(hdc, 113) * 100f / (float)point.Y);
			int right = num3 - num - num5;
			int bottom = num4 - num2 - num6;
			graphics.ReleaseHdc(hdc);
			return new Margins(num5, right, num6, bottom);
		}

		internal void PrintHeaderFooter(Graphics graphics, bool drawHeader, HeaderFooterData headerFooterPrintData)
		{
			string text = (drawHeader ? pageSetupData.HeaderTemplate : pageSetupData.FooterTemplate);
			text = text.Replace("{#}", headerFooterPrintData.CurrentPage.ToString(CultureInfo.CurrentCulture));
			text = text.Replace("{##}", headerFooterPrintData.TotalPages.ToString(CultureInfo.CurrentCulture));
			text = text.Replace("{Date}", headerFooterPrintData.PrintTime.ToShortDateString());
			text = text.Replace("{Time}", headerFooterPrintData.PrintTime.ToShortTimeString());
			text = text.Replace("{FullFileName}", headerFooterPrintData.FileName);
			text = text.Replace("{FileName}", Path.GetFileName(headerFooterPrintData.FileName));
			text = text.Replace("{User}", SystemInformation.UserName);
			string[] array = text.Split(new char[2] { '\n', '\r' }, 6, StringSplitOptions.RemoveEmptyEntries);
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i < Math.Min(array.Length, 5); i++)
			{
				stringBuilder.Append(array[i]);
				stringBuilder.Append("\r\n");
			}
			text = stringBuilder.ToString();
			Rectangle empty = Rectangle.Empty;
			SizeF sizeF = graphics.MeasureString(text, headerFooterPrintData.Font);
			empty.Size = new Size(Convert.ToInt32(Math.Ceiling(sizeF.Width)), Convert.ToInt32(Math.Ceiling(sizeF.Height)));
			empty.Width = Math.Min(headerFooterPrintData.PageBoundsWithoutMargin.Width, empty.Width);
			HorizontalAlignment horizontalAlignment = (drawHeader ? pageSetupData.HeaderAlignment : pageSetupData.FooterAlignment);
			StringFormat stringFormat = new StringFormat();
			stringFormat.Trimming = StringTrimming.EllipsisCharacter;
			switch (horizontalAlignment)
			{
			case HorizontalAlignment.Left:
				empty.X = headerFooterPrintData.PageBoundsWithoutMargin.Left;
				stringFormat.Alignment = StringAlignment.Near;
				break;
			case HorizontalAlignment.Center:
				empty.X = headerFooterPrintData.PageBoundsWithoutMargin.Left + (headerFooterPrintData.PageBoundsWithoutMargin.Width - empty.Width) / 2;
				stringFormat.Alignment = StringAlignment.Center;
				break;
			case HorizontalAlignment.Right:
				empty.X = headerFooterPrintData.PageBoundsWithoutMargin.Left + (headerFooterPrintData.PageBoundsWithoutMargin.Width - empty.Width);
				stringFormat.Alignment = StringAlignment.Far;
				break;
			}
			if (drawHeader)
			{
				empty.Y = headerFooterPrintData.PageBounds.Top + headerFooterPrintData.HeaderFooterMargins.Top;
				stringFormat.LineAlignment = StringAlignment.Near;
			}
			else
			{
				empty.Y = headerFooterPrintData.PageBounds.Bottom - headerFooterPrintData.HeaderFooterMargins.Bottom - empty.Size.Height;
				stringFormat.LineAlignment = StringAlignment.Far;
			}
			graphics.DrawString(text, headerFooterPrintData.Font, WorkflowTheme.CurrentTheme.AmbientTheme.ForegroundBrush, empty, stringFormat);
		}

		private void PrepareToPrint(PrintPageEventArgs printPageArg)
		{
			Graphics graphics = printPageArg.Graphics;
			Size selectionSize = WorkflowTheme.CurrentTheme.AmbientTheme.SelectionSize;
			((IWorkflowDesignerMessageSink)workflowView.RootDesigner).OnLayoutSize(graphics);
			((IWorkflowDesignerMessageSink)workflowView.RootDesigner).OnLayoutPosition(graphics);
			workflowView.RootDesigner.Location = Point.Empty;
			Size size = workflowView.RootDesigner.Size;
			size.Width += 3 * selectionSize.Width;
			size.Height += 3 * selectionSize.Height;
			Size size2 = printPageArg.PageBounds.Size;
			Margins hardMargins = GetHardMargins(graphics);
			Margins margins = new Margins(Math.Max(printPageArg.PageSettings.Margins.Left, hardMargins.Left), Math.Max(printPageArg.PageSettings.Margins.Right, hardMargins.Right), Math.Max(printPageArg.PageSettings.Margins.Top, hardMargins.Top), Math.Max(printPageArg.PageSettings.Margins.Bottom, hardMargins.Bottom));
			Size size3 = new Size(size2.Width - (margins.Left + margins.Right), size2.Height - (margins.Top + margins.Bottom));
			size3.Width = Math.Max(size3.Width, 1);
			size3.Height = Math.Max(size3.Height, 1);
			if (pageSetupData.AdjustToScaleFactor)
			{
				scaling = (float)pageSetupData.ScaleFactor / 100f;
			}
			else
			{
				float val = (float)pageSetupData.PagesWide * (float)size3.Width / (float)size.Width;
				float val2 = (float)pageSetupData.PagesTall * (float)size3.Height / (float)size.Height;
				scaling = Math.Min(val, val2);
				scaling = (float)(Math.Floor((double)scaling * 1000.0) / 1000.0);
			}
			totalPrintablePages.X = Convert.ToInt32(Math.Ceiling(scaling * (float)size.Width / (float)size3.Width));
			totalPrintablePages.X = Math.Max(totalPrintablePages.X, 1);
			totalPrintablePages.Y = Convert.ToInt32(Math.Ceiling(scaling * (float)size.Height / (float)size3.Height));
			totalPrintablePages.Y = Math.Max(totalPrintablePages.Y, 1);
			workflowAlignment = Point.Empty;
			if (pageSetupData.CenterHorizontally)
			{
				workflowAlignment.X = (int)(((float)totalPrintablePages.X * (float)size3.Width / scaling - (float)size.Width) / 2f * scaling);
			}
			if (pageSetupData.CenterVertically)
			{
				workflowAlignment.Y = (int)(((float)totalPrintablePages.Y * (float)size3.Height / scaling - (float)size.Height) / 2f * scaling);
			}
			workflowAlignment.X = Math.Max(workflowAlignment.X, selectionSize.Width + selectionSize.Width / 2);
			workflowAlignment.Y = Math.Max(workflowAlignment.Y, selectionSize.Height + selectionSize.Height / 2);
			printTime = DateTime.Now;
		}

		private bool MoveNextPage()
		{
			currentPrintablePage.X++;
			if (currentPrintablePage.X < totalPrintablePages.X)
			{
				return true;
			}
			currentPrintablePage.X = 0;
			currentPrintablePage.Y++;
			return currentPrintablePage.Y < totalPrintablePages.Y;
		}
	}
	internal sealed class PageSetupData
	{
		internal static readonly int DefaultScaleFactor = 100;

		internal static readonly int DefaultMinScaleFactor = 10;

		internal static readonly int DefaultMaxScaleFactor = 400;

		internal static readonly int DefaultPages = 1;

		internal static readonly int DefaultHeaderMargin = 50;

		internal static readonly int DefaultFooterMargin = 50;

		private Margins margins;

		private bool landscape;

		private int headerMargin = DefaultHeaderMargin;

		private int footerMargin = DefaultFooterMargin;

		private string headerTemplate = string.Empty;

		private string footerTemplate = string.Empty;

		private HorizontalAlignment headerAlignment = HorizontalAlignment.Center;

		private HorizontalAlignment footerAlignment = HorizontalAlignment.Center;

		private bool adjustToScaleFactor = true;

		private int scaleFactor = DefaultScaleFactor;

		private int pagesWide = DefaultPages;

		private int pagesTall = DefaultPages;

		private bool centerHorizontally;

		private bool centerVertically;

		private bool headerCustom;

		private bool footerCustom;

		private static readonly string WinOEPrintingSubKey = DesignerHelpers.DesignerPerUserRegistryKey + "\\Printing";

		private const string RegistryHeaderTemplate = "HeaderTemplate";

		private const string RegistryHeaderMarging = "HeaderMargin";

		private const string RegistryHeaderCustom = "HeaderCustom";

		private const string RegistryHeaderAlignment = "HeaderAlignment";

		private const string RegistryFooterTemplate = "FooterTemplate";

		private const string RegistryFooterMarging = "FooterMargin";

		private const string RegistryFooterCustom = "FooterCustom";

		private const string RegistryFooterAlignment = "FooterAlignment";

		private const string RegistryCenterHorizontally = "CenterHorizontally";

		private const string RegistryCenterVertically = "CenterVertically";

		public bool Landscape
		{
			get
			{
				return landscape;
			}
			set
			{
				landscape = value;
			}
		}

		public bool AdjustToScaleFactor
		{
			get
			{
				return adjustToScaleFactor;
			}
			set
			{
				adjustToScaleFactor = value;
			}
		}

		public int ScaleFactor
		{
			get
			{
				return scaleFactor;
			}
			set
			{
				if (value >= DefaultMinScaleFactor && value <= DefaultMaxScaleFactor)
				{
					scaleFactor = value;
				}
			}
		}

		public int PagesWide
		{
			get
			{
				if (pagesWide >= 1)
				{
					return pagesWide;
				}
				return 1;
			}
			set
			{
				if (value > 0)
				{
					pagesWide = value;
				}
			}
		}

		public int PagesTall
		{
			get
			{
				if (pagesTall >= 1)
				{
					return pagesTall;
				}
				return 1;
			}
			set
			{
				if (value > 0)
				{
					pagesTall = value;
				}
			}
		}

		public Margins Margins
		{
			get
			{
				return margins;
			}
			set
			{
				margins = value;
			}
		}

		public int HeaderMargin
		{
			get
			{
				return headerMargin;
			}
			set
			{
				if (value >= 0)
				{
					headerMargin = value;
				}
			}
		}

		public int FooterMargin
		{
			get
			{
				return footerMargin;
			}
			set
			{
				if (value >= 0)
				{
					footerMargin = value;
				}
			}
		}

		public string HeaderTemplate
		{
			get
			{
				return headerTemplate;
			}
			set
			{
				headerTemplate = value;
			}
		}

		public string FooterTemplate
		{
			get
			{
				return footerTemplate;
			}
			set
			{
				footerTemplate = value;
			}
		}

		public HorizontalAlignment HeaderAlignment
		{
			get
			{
				return headerAlignment;
			}
			set
			{
				headerAlignment = value;
			}
		}

		public HorizontalAlignment FooterAlignment
		{
			get
			{
				return footerAlignment;
			}
			set
			{
				footerAlignment = value;
			}
		}

		public bool HeaderCustom
		{
			get
			{
				return headerCustom;
			}
			set
			{
				headerCustom = value;
			}
		}

		public bool FooterCustom
		{
			get
			{
				return footerCustom;
			}
			set
			{
				footerCustom = value;
			}
		}

		public bool CenterHorizontally
		{
			get
			{
				return centerHorizontally;
			}
			set
			{
				centerHorizontally = value;
			}
		}

		public bool CenterVertically
		{
			get
			{
				return centerVertically;
			}
			set
			{
				centerVertically = value;
			}
		}

		internal PageSetupData()
		{
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(WinOEPrintingSubKey);
			if (registryKey != null)
			{
				try
				{
					object obj = null;
					obj = registryKey.GetValue("HeaderAlignment");
					if (obj != null && obj is int)
					{
						headerAlignment = (HorizontalAlignment)obj;
					}
					obj = registryKey.GetValue("FooterAlignment");
					if (obj != null && obj is int)
					{
						footerAlignment = (HorizontalAlignment)obj;
					}
					obj = registryKey.GetValue("HeaderMargin");
					if (obj != null && obj is int)
					{
						headerMargin = (int)obj;
					}
					obj = registryKey.GetValue("FooterMargin");
					if (obj != null && obj is int)
					{
						footerMargin = (int)obj;
					}
					obj = registryKey.GetValue("HeaderTemplate");
					if (obj != null && obj is string)
					{
						headerTemplate = (string)obj;
					}
					obj = registryKey.GetValue("FooterTemplate");
					if (obj != null && obj is string)
					{
						footerTemplate = (string)obj;
					}
					obj = registryKey.GetValue("HeaderCustom");
					if (obj != null && obj is int)
					{
						headerCustom = Convert.ToBoolean((int)obj);
					}
					obj = registryKey.GetValue("FooterCustom");
					if (obj != null && obj is int)
					{
						footerCustom = Convert.ToBoolean((int)obj);
					}
					obj = registryKey.GetValue("CenterHorizontally");
					if (obj != null && obj is int)
					{
						centerHorizontally = Convert.ToBoolean((int)obj);
					}
					obj = registryKey.GetValue("CenterVertically");
					if (obj != null && obj is int)
					{
						centerVertically = Convert.ToBoolean((int)obj);
					}
				}
				finally
				{
					registryKey.Close();
				}
			}
			PrinterSettings printerSettings = new PrinterSettings();
			landscape = printerSettings.DefaultPageSettings.Landscape;
			margins = printerSettings.DefaultPageSettings.Margins;
		}

		public void StorePropertiesToRegistry()
		{
			RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(WinOEPrintingSubKey);
			if (registryKey != null)
			{
				try
				{
					registryKey.SetValue("HeaderAlignment", (int)headerAlignment);
					registryKey.SetValue("FooterAlignment", (int)footerAlignment);
					registryKey.SetValue("HeaderMargin", headerMargin);
					registryKey.SetValue("FooterMargin", footerMargin);
					registryKey.SetValue("HeaderTemplate", headerTemplate);
					registryKey.SetValue("FooterTemplate", footerTemplate);
					registryKey.SetValue("HeaderCustom", Convert.ToInt32(headerCustom));
					registryKey.SetValue("FooterCustom", Convert.ToInt32(footerCustom));
					registryKey.SetValue("CenterHorizontally", Convert.ToInt32(centerHorizontally));
					registryKey.SetValue("CenterVertically", Convert.ToInt32(centerVertically));
				}
				finally
				{
					registryKey.Close();
				}
			}
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum ThemeType
	{
		Default,
		System,
		UserDefined
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum DesignerGeometry
	{
		Rectangle,
		RoundedRectangle
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum TextQuality
	{
		Aliased,
		AntiAliased
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum DesignerSize
	{
		Small,
		Medium,
		Large
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum DesignerContentAlignment
	{
		Left = 1,
		Top = 2,
		Right = 4,
		Bottom = 8,
		Center = 16,
		TopLeft = 3,
		TopCenter = 18,
		TopRight = 6,
		CenterLeft = 17,
		CenterRight = 20,
		BottomLeft = 9,
		BottomCenter = 24,
		BottomRight = 12,
		Fill = 32
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum LineAnchor
	{
		None,
		Arrow,
		ArrowAnchor,
		Diamond,
		DiamondAnchor,
		Round,
		RoundAnchor,
		Rectangle,
		RectangleAnchor,
		RoundedRectangle,
		RoundedRectangleAnchor
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum AmbientProperty
	{
		DesignerSize,
		OperatingSystemSetting
	}
	[AttributeUsage(AttributeTargets.Class)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ActivityDesignerThemeAttribute : Attribute
	{
		private Type designerThemeType;

		private string xml = string.Empty;

		public Type DesignerThemeType => designerThemeType;

		public string Xml
		{
			get
			{
				return xml;
			}
			set
			{
				xml = value;
			}
		}

		public ActivityDesignerThemeAttribute(Type designerThemeType)
		{
			this.designerThemeType = designerThemeType;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowTheme : IDisposable
	{
		private class ThemeCollection : KeyedCollection<string, DesignerTheme>
		{
			protected override string GetKeyForItem(DesignerTheme item)
			{
				return item.ApplyTo;
			}
		}

		private static readonly string WorkflowThemesSubKey;

		private const string ThemeTypeKey = "ThemeType";

		private const string ThemePathKey = "ThemeFilePath";

		private const string ThemeResourceNS = "System.Workflow.ComponentModel.Design.ActivityDesignerThemes.";

		internal const string DefaultThemeFileExtension = "*.wtm";

		internal static string DefaultNamespace;

		private static IUIService uiService;

		private static Font defaultFont;

		private static WorkflowTheme currentTheme;

		private static bool enableChangeNotification;

		private ThemeType themeType = ThemeType.UserDefined;

		private string name = string.Empty;

		private string version = "1.0";

		private string description = DR.GetString("DefaultThemeDescription");

		private string filePath = string.Empty;

		private ThemeCollection designerThemes = new ThemeCollection();

		private bool readOnly;

		internal static IUIService UIService
		{
			get
			{
				return uiService;
			}
			set
			{
				uiService = value;
				defaultFont = null;
				CurrentTheme.AmbientTheme.UpdateFont();
			}
		}

		public static string RegistryKeyPath => DesignerHelpers.DesignerPerUserRegistryKey + "\\" + WorkflowThemesSubKey;

		public static WorkflowTheme CurrentTheme
		{
			get
			{
				if (currentTheme == null)
				{
					currentTheme = CreateStandardTheme(ThemeType.Default);
					currentTheme.ReadOnly = true;
				}
				return currentTheme;
			}
			set
			{
				if (currentTheme == value)
				{
					return;
				}
				if (value == null)
				{
					throw new ArgumentNullException("value");
				}
				WorkflowTheme workflowTheme = currentTheme;
				currentTheme = value;
				currentTheme.ReadOnly = true;
				if (EnableChangeNotification)
				{
					if (workflowTheme != null)
					{
						((IDisposable)workflowTheme).Dispose();
						workflowTheme = null;
					}
					FireThemeChange();
				}
			}
		}

		public static bool EnableChangeNotification
		{
			get
			{
				return enableChangeNotification;
			}
			set
			{
				if (enableChangeNotification != value)
				{
					enableChangeNotification = value;
				}
			}
		}

		public static string LookupPath
		{
			get
			{
				string text = string.Empty;
				try
				{
					text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
					if (string.IsNullOrEmpty(text))
					{
						text = new Uri(Assembly.GetExecutingAssembly().CodeBase).AbsolutePath;
					}
					text = Path.Combine(text, "Windows Workflow Foundation" + Path.DirectorySeparatorChar + "Themes");
					text += Path.DirectorySeparatorChar;
				}
				catch
				{
				}
				return text;
			}
		}

		public static IDictionary<ThemeType, string[]> StandardThemes
		{
			get
			{
				Dictionary<ThemeType, string[]> dictionary = new Dictionary<ThemeType, string[]>();
				dictionary.Add(ThemeType.Default, new string[2]
				{
					DR.GetString("DefaultTheme"),
					DR.GetString("DefaultThemeDescription")
				});
				dictionary.Add(ThemeType.System, new string[2]
				{
					DR.GetString("OSTheme"),
					DR.GetString("SystemThemeDescription")
				});
				return dictionary;
			}
		}

		public string Name
		{
			get
			{
				return name;
			}
			set
			{
				if (ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				name = value;
			}
		}

		public string Version
		{
			get
			{
				return version;
			}
			set
			{
				if (ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				version = value;
			}
		}

		public string Description
		{
			get
			{
				return description;
			}
			set
			{
				if (ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				description = value;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public string FilePath
		{
			get
			{
				return filePath;
			}
			set
			{
				if (ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				filePath = value;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public string ContainingFileDirectory
		{
			get
			{
				string result = string.Empty;
				if (filePath.Length > 0)
				{
					try
					{
						result = Path.GetDirectoryName(filePath) + Path.DirectorySeparatorChar;
					}
					catch
					{
					}
				}
				return result;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public IList DesignerThemes => designerThemes;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public AmbientTheme AmbientTheme => GetTheme(typeof(WorkflowView)) as AmbientTheme;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public ThemeType Type => themeType;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public bool ReadOnly
		{
			get
			{
				return readOnly;
			}
			set
			{
				readOnly = value;
			}
		}

		public static event EventHandler ThemeChanged;

		static WorkflowTheme()
		{
			WorkflowThemesSubKey = "Themes";
			DefaultNamespace = typeof(WorkflowTheme).Namespace.Replace(".", "_");
			uiService = null;
			defaultFont = null;
			currentTheme = null;
			enableChangeNotification = true;
			currentTheme = LoadThemeSettingFromRegistry();
			if (currentTheme != null)
			{
				currentTheme.ReadOnly = true;
			}
		}

		public WorkflowTheme()
		{
			filePath = GenerateThemeFilePath();
			if (filePath != null && filePath.Length > 0)
			{
				name = Path.GetFileNameWithoutExtension(filePath);
			}
		}

		~WorkflowTheme()
		{
			Dispose(disposing: false);
		}

		void IDisposable.Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		private void Dispose(bool disposing)
		{
			foreach (DesignerTheme designerTheme in designerThemes)
			{
				((IDisposable)designerTheme).Dispose();
			}
			designerThemes.Clear();
		}

		internal static Font GetDefaultFont()
		{
			if (defaultFont == null)
			{
				if (UIService != null)
				{
					defaultFont = UIService.Styles["DialogFont"] as Font;
				}
				if (defaultFont == null)
				{
					defaultFont = Control.DefaultFont;
				}
			}
			return defaultFont;
		}

		public static string GenerateThemeFilePath()
		{
			string lookupPath = LookupPath;
			string text = Path.Combine(lookupPath, DR.GetString("MyFavoriteTheme") + ".wtm");
			int num = 1;
			while (File.Exists(text))
			{
				text = Path.Combine(lookupPath, DR.GetString("MyFavoriteTheme") + num.ToString(CultureInfo.InvariantCulture) + ".wtm");
				num++;
			}
			return text;
		}

		public static WorkflowTheme LoadThemeSettingFromRegistry()
		{
			WorkflowTheme workflowTheme = null;
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(RegistryKeyPath);
			if (registryKey != null)
			{
				ThemeType themeType = ThemeType.Default;
				try
				{
					object value = registryKey.GetValue("ThemeType");
					if (value is string)
					{
						themeType = (ThemeType)Enum.Parse(typeof(ThemeType), (string)value, ignoreCase: true);
					}
					if (themeType == ThemeType.UserDefined)
					{
						value = registryKey.GetValue("ThemeFilePath");
						string text = ((value is string) ? ((string)value) : string.Empty);
						if (File.Exists(text))
						{
							string extension = Path.GetExtension(text);
							if (extension.Equals("*.wtm".Replace("*", ""), StringComparison.Ordinal))
							{
								workflowTheme = Load(text);
							}
						}
					}
				}
				catch
				{
				}
				finally
				{
					if (workflowTheme == null)
					{
						if (themeType == ThemeType.UserDefined)
						{
							themeType = ThemeType.Default;
						}
						workflowTheme = CreateStandardTheme(themeType);
					}
					registryKey.Close();
				}
			}
			return workflowTheme;
		}

		public static void SaveThemeSettingToRegistry()
		{
			RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(RegistryKeyPath);
			if (registryKey == null)
			{
				return;
			}
			try
			{
				registryKey.SetValue("ThemeType", CurrentTheme.themeType);
				if (CurrentTheme.themeType == ThemeType.UserDefined)
				{
					registryKey.SetValue("ThemeFilePath", CurrentTheme.FilePath);
				}
				else
				{
					registryKey.SetValue("ThemeFilePath", string.Empty);
				}
			}
			catch
			{
			}
			finally
			{
				registryKey.Close();
			}
		}

		public static WorkflowTheme CreateStandardTheme(ThemeType standardThemeType)
		{
			WorkflowTheme workflowTheme = null;
			switch (standardThemeType)
			{
			case ThemeType.Default:
				workflowTheme = new WorkflowTheme();
				workflowTheme.AmbientTheme.UseDefaultFont();
				break;
			case ThemeType.System:
				workflowTheme = new WorkflowTheme();
				workflowTheme.AmbientTheme.UseOperatingSystemSettings = true;
				break;
			default:
				return null;
			}
			string[] array = StandardThemes[standardThemeType];
			if (array != null)
			{
				workflowTheme.Name = array[0];
				workflowTheme.themeType = standardThemeType;
				workflowTheme.Description = array[1];
				workflowTheme.FilePath = LookupPath;
			}
			return workflowTheme;
		}

		internal static void FireThemeChange()
		{
			if (WorkflowTheme.ThemeChanged != null)
			{
				WorkflowTheme.ThemeChanged(currentTheme, EventArgs.Empty);
			}
		}

		public static WorkflowTheme Load(string themeFilePath)
		{
			DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager();
			using (designerSerializationManager.CreateSession())
			{
				return Load(designerSerializationManager, themeFilePath);
			}
		}

		public static WorkflowTheme Load(IDesignerSerializationManager serializationManager, string themeFilePath)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			WorkflowTheme workflowTheme = null;
			if (themeFilePath != null && File.Exists(themeFilePath))
			{
				XmlReader xmlReader = XmlReader.Create(themeFilePath);
				ThemeSerializationProvider provider = new ThemeSerializationProvider();
				try
				{
					serializationManager.AddSerializationProvider(provider);
					WorkflowMarkupSerializer workflowMarkupSerializer = new WorkflowMarkupSerializer();
					workflowTheme = workflowMarkupSerializer.Deserialize(serializationManager, xmlReader) as WorkflowTheme;
				}
				finally
				{
					serializationManager.RemoveSerializationProvider(provider);
					xmlReader.Close();
				}
				if (workflowTheme != null)
				{
					workflowTheme.filePath = themeFilePath;
				}
			}
			return workflowTheme;
		}

		public void Save(string themeFilePath)
		{
			if (themeFilePath == null || themeFilePath.Length == 0)
			{
				throw new ArgumentException(DR.GetString("ThemePathNotValid"), "themeFilePath");
			}
			DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager();
			using (designerSerializationManager.CreateSession())
			{
				WorkflowMarkupSerializationManager workflowMarkupSerializationManager = new WorkflowMarkupSerializationManager(designerSerializationManager);
				XmlWriter xmlWriter = null;
				ThemeSerializationProvider provider = new ThemeSerializationProvider();
				try
				{
					string directoryName = Path.GetDirectoryName(themeFilePath);
					if (directoryName.Length > 0 && !Directory.Exists(directoryName))
					{
						Directory.CreateDirectory(directoryName);
					}
					xmlWriter = Helpers.CreateXmlWriter(themeFilePath);
					workflowMarkupSerializationManager.AddSerializationProvider(provider);
					WorkflowMarkupSerializer workflowMarkupSerializer = new WorkflowMarkupSerializer();
					workflowMarkupSerializer.Serialize(workflowMarkupSerializationManager, xmlWriter, this);
				}
				finally
				{
					workflowMarkupSerializationManager.RemoveSerializationProvider(provider);
					xmlWriter?.Close();
				}
				filePath = themeFilePath;
			}
		}

		public WorkflowTheme Clone()
		{
			WorkflowTheme workflowTheme = null;
			DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager();
			using (designerSerializationManager.CreateSession())
			{
				ThemeSerializationProvider provider = new ThemeSerializationProvider();
				StringWriter stringWriter = new StringWriter(new StringBuilder(), CultureInfo.InvariantCulture);
				StringReader stringReader = null;
				try
				{
					((IDesignerSerializationManager)designerSerializationManager).AddSerializationProvider((IDesignerSerializationProvider)provider);
					WorkflowMarkupSerializer workflowMarkupSerializer = new WorkflowMarkupSerializer();
					using (XmlWriter writer = Helpers.CreateXmlWriter(stringWriter))
					{
						workflowMarkupSerializer.Serialize(designerSerializationManager, writer, this);
					}
					stringReader = new StringReader(stringWriter.ToString());
					using XmlReader reader = XmlReader.Create(stringReader);
					workflowTheme = workflowMarkupSerializer.Deserialize(designerSerializationManager, reader) as WorkflowTheme;
				}
				finally
				{
					((IDesignerSerializationManager)designerSerializationManager).RemoveSerializationProvider((IDesignerSerializationProvider)provider);
					stringReader.Close();
					stringWriter.Close();
				}
			}
			if (workflowTheme != null)
			{
				workflowTheme.filePath = filePath;
				foreach (DesignerTheme designerTheme in workflowTheme.DesignerThemes)
				{
					designerTheme.Initialize();
				}
			}
			return workflowTheme;
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public ActivityDesignerTheme GetDesignerTheme(ActivityDesigner designer)
		{
			if (designer == null)
			{
				throw new ArgumentNullException("designer");
			}
			return GetTheme(designer.GetType()) as ActivityDesignerTheme;
		}

		internal DesignerTheme GetTheme(Type designerType)
		{
			bool flag = ReadOnly;
			DesignerTheme designerTheme = (designerThemes.Contains(designerType.FullName) ? designerThemes[designerType.FullName] : null);
			try
			{
				ReadOnly = false;
				if (designerTheme == null || (designerTheme.DesignerType != null && !designerType.Equals(designerTheme.DesignerType)))
				{
					bool flag2 = designerTheme != null;
					AttributeCollection attributes = TypeDescriptor.GetAttributes(designerType);
					if (!(attributes[typeof(ActivityDesignerThemeAttribute)] is ActivityDesignerThemeAttribute activityDesignerThemeAttribute))
					{
						throw new InvalidOperationException(DR.GetString("Error_ThemeAttributeMissing", designerType.FullName));
					}
					if (activityDesignerThemeAttribute.DesignerThemeType == null)
					{
						throw new InvalidOperationException(DR.GetString("Error_ThemeTypeMissing", designerType.FullName));
					}
					if (activityDesignerThemeAttribute.Xml.Length > 0)
					{
						Stream manifestResourceStream = designerType.Assembly.GetManifestResourceStream(designerType, activityDesignerThemeAttribute.Xml);
						if (manifestResourceStream == null)
						{
							manifestResourceStream = designerType.Assembly.GetManifestResourceStream("System.Workflow.ComponentModel.Design.ActivityDesignerThemes." + activityDesignerThemeAttribute.Xml);
						}
						XmlReader xmlReader = ((manifestResourceStream != null) ? XmlReader.Create(manifestResourceStream) : null);
						if (xmlReader == null)
						{
							xmlReader = XmlReader.Create(new StringReader(activityDesignerThemeAttribute.Xml));
						}
						if (xmlReader != null)
						{
							DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager();
							using (designerSerializationManager.CreateSession())
							{
								ThemeSerializationProvider provider = new ThemeSerializationProvider();
								try
								{
									((IDesignerSerializationManager)designerSerializationManager).AddSerializationProvider((IDesignerSerializationProvider)provider);
									((IDesignerSerializationManager)designerSerializationManager).Context.Push(this);
									WorkflowMarkupSerializer workflowMarkupSerializer = new WorkflowMarkupSerializer();
									designerTheme = workflowMarkupSerializer.Deserialize(designerSerializationManager, xmlReader) as DesignerTheme;
									if (designerTheme != null && !activityDesignerThemeAttribute.DesignerThemeType.IsAssignableFrom(designerTheme.GetType()))
									{
										((IDesignerSerializationManager)designerSerializationManager).ReportError((object)new WorkflowMarkupSerializationException(DR.GetString("ThemeTypesMismatch", activityDesignerThemeAttribute.DesignerThemeType.FullName, designerTheme.GetType().FullName)));
										designerTheme = null;
									}
									if (designerSerializationManager.Errors.Count > 0)
									{
										string text = string.Empty;
										foreach (object error in designerSerializationManager.Errors)
										{
											text = text + error.ToString() + "\\n";
										}
									}
								}
								finally
								{
									((IDesignerSerializationManager)designerSerializationManager).RemoveSerializationProvider((IDesignerSerializationProvider)provider);
									xmlReader.Close();
								}
							}
						}
					}
					if (designerTheme == null)
					{
						try
						{
							designerTheme = Activator.CreateInstance(activityDesignerThemeAttribute.DesignerThemeType, this) as DesignerTheme;
						}
						catch
						{
							designerTheme = new ActivityDesignerTheme(this);
						}
					}
					designerTheme.DesignerType = designerType;
					designerTheme.ApplyTo = designerType.FullName;
					designerTheme.Initialize();
					if (flag2)
					{
						designerThemes.Remove(designerType.FullName);
					}
					designerThemes.Add(designerTheme);
				}
				if (designerTheme.DesignerType == null)
				{
					designerTheme.DesignerType = designerType;
				}
			}
			finally
			{
				ReadOnly = flag;
			}
			return designerTheme;
		}

		internal void AmbientPropertyChanged(AmbientProperty ambientProperty)
		{
			foreach (DesignerTheme designerTheme in designerThemes)
			{
				bool flag = ReadOnly;
				ReadOnly = false;
				designerTheme.OnAmbientPropertyChanged(ambientProperty);
				ReadOnly = flag;
			}
		}
	}
	[DesignerSerializer(typeof(ThemeSerializer), typeof(WorkflowMarkupSerializer))]
	[TypeConverter(typeof(ThemeTypeConverter))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public abstract class DesignerTheme : IDisposable, IPropertyValueProvider
	{
		private class ThemeSerializer : WorkflowMarkupSerializer
		{
			protected override object CreateInstance(WorkflowMarkupSerializationManager serializationManager, Type type)
			{
				if (typeof(DesignerTheme).IsAssignableFrom(type))
				{
					return Activator.CreateInstance(type, serializationManager.Context[typeof(WorkflowTheme)]);
				}
				return base.CreateInstance(serializationManager, type);
			}
		}

		private WorkflowTheme workflowTheme;

		private Type designerType;

		private string designerTypeName = string.Empty;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		protected WorkflowTheme ContainingTheme => workflowTheme;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public virtual Type DesignerType
		{
			get
			{
				return designerType;
			}
			set
			{
				if (ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				designerType = value;
			}
		}

		[Browsable(false)]
		public virtual string ApplyTo
		{
			get
			{
				return designerTypeName;
			}
			set
			{
				if (ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				designerTypeName = value;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public bool ReadOnly
		{
			get
			{
				if (workflowTheme != null)
				{
					return workflowTheme.ReadOnly;
				}
				return false;
			}
			internal set
			{
				if (workflowTheme != null)
				{
					workflowTheme.ReadOnly = value;
				}
			}
		}

		protected DesignerTheme(WorkflowTheme theme)
		{
			workflowTheme = theme;
		}

		~DesignerTheme()
		{
			Dispose(disposing: false);
		}

		void IDisposable.Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		public virtual void Initialize()
		{
		}

		protected virtual void Dispose(bool disposing)
		{
		}

		public virtual void OnAmbientPropertyChanged(AmbientProperty ambientProperty)
		{
		}

		ICollection IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context)
		{
			return GetPropertyValues(context);
		}

		internal virtual ICollection GetPropertyValues(ITypeDescriptorContext context)
		{
			return new object[0];
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityDesignerTheme : DesignerTheme
	{
		private static readonly Size[] DesignerSizes = new Size[3]
		{
			new Size(90, 40),
			new Size(130, 41),
			new Size(110, 50)
		};

		private static readonly Size[] ImageSizes = new Size[3]
		{
			new Size(16, 16),
			new Size(16, 16),
			new Size(24, 24)
		};

		private string designerImagePath = string.Empty;

		private Color foreColor = Color.Black;

		private Color borderColor = Color.Black;

		private DashStyle borderStyle;

		private Color backColorStart = Color.White;

		private Color backColorEnd = Color.Empty;

		private LinearGradientMode backgroundStyle;

		private Image designerImage;

		private Pen foregroundPen;

		private Pen borderPen;

		private Brush foregroundBrush;

		private Brush backgroundBrush;

		private Rectangle backgroundBrushRect;

		[DispId(1)]
		[SRDescription("ImageDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ImageBrowserEditor), typeof(UITypeEditor))]
		public virtual string DesignerImagePath
		{
			get
			{
				return designerImagePath;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				if (value != null && value.Length > 0 && value.Contains(Path.DirectorySeparatorChar.ToString()) && Path.IsPathRooted(value))
				{
					value = DesignerHelpers.GetRelativePath(base.ContainingTheme.ContainingFileDirectory, value);
					if (!DesignerHelpers.IsValidImageResource(this, base.ContainingTheme.ContainingFileDirectory, value))
					{
						throw new InvalidOperationException(DR.GetString("Error_InvalidImageResource"));
					}
				}
				designerImagePath = value;
				if (designerImage != null)
				{
					designerImage.Dispose();
					designerImage = null;
				}
			}
		}

		[DispId(2)]
		[SRDescription("ForeColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public virtual Color ForeColor
		{
			get
			{
				return foreColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				foreColor = value;
				if (foregroundPen != null)
				{
					foregroundPen.Dispose();
					foregroundPen = null;
				}
				if (foregroundBrush != null)
				{
					foregroundBrush.Dispose();
					foregroundBrush = null;
				}
			}
		}

		[DispId(3)]
		[SRDescription("BorderColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public virtual Color BorderColor
		{
			get
			{
				return borderColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				borderColor = value;
				if (borderPen != null)
				{
					borderPen.Dispose();
					borderPen = null;
				}
			}
		}

		[DispId(4)]
		[SRDescription("BorderStyleDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[TypeConverter(typeof(FilteredEnumConverter))]
		public virtual DashStyle BorderStyle
		{
			get
			{
				return borderStyle;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				if (value == DashStyle.Custom)
				{
					throw new Exception(DR.GetString("CustomStyleNotSupported"));
				}
				borderStyle = value;
				if (borderPen != null)
				{
					borderPen.Dispose();
					borderPen = null;
				}
			}
		}

		[DispId(5)]
		[SRDescription("BackColorStartDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public virtual Color BackColorStart
		{
			get
			{
				return backColorStart;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				backColorStart = value;
				if (backgroundBrush != null)
				{
					backgroundBrush.Dispose();
					backgroundBrush = null;
				}
			}
		}

		[DispId(6)]
		[SRDescription("BackColorEndDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public virtual Color BackColorEnd
		{
			get
			{
				return backColorEnd;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				backColorEnd = value;
				if (backgroundBrush != null)
				{
					backgroundBrush.Dispose();
					backgroundBrush = null;
				}
			}
		}

		[DispId(7)]
		[SRDescription("BackgroundStyleDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual LinearGradientMode BackgroundStyle
		{
			get
			{
				return backgroundStyle;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				backgroundStyle = value;
				if (backgroundBrush != null)
				{
					backgroundBrush.Dispose();
					backgroundBrush = null;
				}
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Pen ForegroundPen
		{
			get
			{
				if (foregroundPen == null)
				{
					foregroundPen = new Pen(foreColor, BorderWidth);
				}
				return foregroundPen;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Brush ForegroundBrush
		{
			get
			{
				if (foregroundBrush == null)
				{
					foregroundBrush = new SolidBrush(foreColor);
				}
				return foregroundBrush;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Pen BorderPen
		{
			get
			{
				if (borderPen == null)
				{
					borderPen = new Pen(borderColor, BorderWidth);
					borderPen.DashStyle = borderStyle;
				}
				return borderPen;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Size Size => DesignerSizes[(int)base.ContainingTheme.AmbientTheme.DesignerSize];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public DesignerGeometry DesignerGeometry
		{
			get
			{
				if (base.ContainingTheme.AmbientTheme.DrawRounded)
				{
					return DesignerGeometry.RoundedRectangle;
				}
				return DesignerGeometry.Rectangle;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Image DesignerImage
		{
			get
			{
				if (designerImage == null && designerImagePath.Length > 0)
				{
					designerImage = DesignerHelpers.GetImageFromPath(this, base.ContainingTheme.ContainingFileDirectory, designerImagePath);
				}
				return designerImage;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Size ImageSize => ImageSizes[(int)base.ContainingTheme.AmbientTheme.DesignerSize];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Font Font => base.ContainingTheme.AmbientTheme.Font;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Font BoldFont => base.ContainingTheme.AmbientTheme.BoldFont;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public int BorderWidth => base.ContainingTheme.AmbientTheme.BorderWidth;

		public ActivityDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
		}

		protected override void Dispose(bool disposing)
		{
			try
			{
				if (designerImage != null)
				{
					designerImage.Dispose();
					designerImage = null;
				}
				if (foregroundPen != null)
				{
					foregroundPen.Dispose();
					foregroundPen = null;
				}
				if (foregroundBrush != null)
				{
					foregroundBrush.Dispose();
					foregroundBrush = null;
				}
				if (borderPen != null)
				{
					borderPen.Dispose();
					borderPen = null;
				}
				if (backgroundBrush != null)
				{
					backgroundBrush.Dispose();
					backgroundBrush = null;
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		public override void Initialize()
		{
			base.Initialize();
			if (base.ContainingTheme.AmbientTheme.UseOperatingSystemSettings)
			{
				ApplySystemColors();
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Brush GetBackgroundBrush(Rectangle rectangle)
		{
			if (backgroundBrush == null || backgroundBrushRect != rectangle)
			{
				if (backgroundBrush != null)
				{
					backgroundBrush.Dispose();
				}
				backgroundBrushRect = rectangle;
				if (backColorStart == backColorEnd)
				{
					backgroundBrush = new SolidBrush(backColorStart);
				}
				else
				{
					backgroundBrush = new LinearGradientBrush(backgroundBrushRect, backColorStart, backColorEnd, backgroundStyle);
				}
			}
			return backgroundBrush;
		}

		public override void OnAmbientPropertyChanged(AmbientProperty ambientProperty)
		{
			switch (ambientProperty)
			{
			case AmbientProperty.DesignerSize:
				ForeColor = foreColor;
				BorderColor = borderColor;
				break;
			case AmbientProperty.OperatingSystemSetting:
				ApplySystemColors();
				break;
			}
		}

		private void ApplySystemColors()
		{
			ForeColor = SystemColors.ControlText;
			BorderColor = SystemColors.ControlDark;
			BackColorStart = SystemColors.Control;
			BackColorEnd = SystemColors.ControlLight;
		}

		internal override ICollection GetPropertyValues(ITypeDescriptorContext context)
		{
			object[] result = new object[0];
			if (string.Equals(context.PropertyDescriptor.Name, "BorderStyle", StringComparison.Ordinal))
			{
				result = new object[5]
				{
					DashStyle.Solid,
					DashStyle.Dash,
					DashStyle.DashDot,
					DashStyle.DashDotDot,
					DashStyle.Dot
				};
			}
			return result;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class CompositeDesignerTheme : ActivityDesignerTheme
	{
		internal static readonly Pen ExpandButtonForegoundPen = new Pen(Color.Black, 1f);

		internal static readonly Pen ExpandButtonBorderPen = new Pen(Color.FromArgb(123, 154, 181), 1f);

		private static readonly Size[] ExpandButtonSizes = new Size[3]
		{
			new Size(8, 8),
			new Size(8, 8),
			new Size(12, 12)
		};

		private static readonly Size[] ConnectorSizes = new Size[3]
		{
			new Size(15, 30),
			new Size(15, 19),
			new Size(25, 50)
		};

		private DesignerContentAlignment watermarkAlignment = DesignerContentAlignment.BottomRight;

		private string watermarkImagePath = string.Empty;

		private bool dropShadow;

		private LineAnchor startCap;

		private LineAnchor endCap = LineAnchor.ArrowAnchor;

		private Brush expandButtonBackBrush;

		private Rectangle expandButtonRectangle = Rectangle.Empty;

		private Image watermarkImage;

		[DispId(8)]
		[SRDescription("WatermarkDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ImageBrowserEditor), typeof(UITypeEditor))]
		public virtual string WatermarkImagePath
		{
			get
			{
				return watermarkImagePath;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				if (!string.IsNullOrEmpty(value) && value.Contains(Path.DirectorySeparatorChar.ToString()) && Path.IsPathRooted(value))
				{
					value = DesignerHelpers.GetRelativePath(base.ContainingTheme.ContainingFileDirectory, value);
					if (!DesignerHelpers.IsValidImageResource(this, base.ContainingTheme.ContainingFileDirectory, value))
					{
						throw new InvalidOperationException(DR.GetString("Error_InvalidImageResource"));
					}
				}
				watermarkImagePath = value;
				if (watermarkImage != null)
				{
					watermarkImage.Dispose();
					watermarkImage = null;
				}
			}
		}

		[DispId(9)]
		[DefaultValue(DesignerContentAlignment.BottomRight)]
		[SRDescription("WatermarkAlignmentDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual DesignerContentAlignment WatermarkAlignment
		{
			get
			{
				return watermarkAlignment;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				watermarkAlignment = value;
			}
		}

		[DefaultValue(false)]
		[DispId(10)]
		[SRDescription("DropShadowDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual bool ShowDropShadow
		{
			get
			{
				return dropShadow;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				dropShadow = value;
			}
		}

		[DefaultValue(LineAnchor.None)]
		[DispId(11)]
		[SRDescription("ConnectorStartCapDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual LineAnchor ConnectorStartCap
		{
			get
			{
				return startCap;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				startCap = value;
			}
		}

		[DefaultValue(LineAnchor.ArrowAnchor)]
		[DispId(12)]
		[SRDescription("ConnectorEndCapDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual LineAnchor ConnectorEndCap
		{
			get
			{
				return endCap;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				endCap = value;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public virtual Size ConnectorSize
		{
			get
			{
				if (DesignerType != null && typeof(FreeformActivityDesigner).IsAssignableFrom(DesignerType))
				{
					int height = ConnectorSizes[(int)base.ContainingTheme.AmbientTheme.DesignerSize].Height;
					return new Size(height, height);
				}
				return ConnectorSizes[(int)base.ContainingTheme.AmbientTheme.DesignerSize];
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public virtual Size ExpandButtonSize => ExpandButtonSizes[(int)base.ContainingTheme.AmbientTheme.DesignerSize];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Image WatermarkImage
		{
			get
			{
				if (watermarkImage == null && watermarkImagePath.Length > 0)
				{
					watermarkImage = DesignerHelpers.GetImageFromPath(this, base.ContainingTheme.ContainingFileDirectory, watermarkImagePath);
				}
				return watermarkImage;
			}
		}

		public CompositeDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
		}

		protected override void Dispose(bool disposing)
		{
			try
			{
				if (expandButtonBackBrush != null)
				{
					expandButtonBackBrush.Dispose();
					expandButtonBackBrush = null;
				}
				if (watermarkImage != null)
				{
					watermarkImage.Dispose();
					watermarkImage = null;
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		public override void Initialize()
		{
			base.Initialize();
			if (base.ContainingTheme.AmbientTheme.UseOperatingSystemSettings)
			{
				ApplySystemColors();
			}
		}

		public Brush GetExpandButtonBackgroundBrush(Rectangle rectangle)
		{
			if (expandButtonBackBrush == null || expandButtonRectangle != rectangle)
			{
				if (expandButtonBackBrush != null)
				{
					expandButtonBackBrush.Dispose();
				}
				expandButtonRectangle = rectangle;
				expandButtonBackBrush = new LinearGradientBrush(expandButtonRectangle, Color.White, Color.FromArgb(173, 170, 156), LinearGradientMode.ForwardDiagonal);
			}
			return expandButtonBackBrush;
		}

		public override void OnAmbientPropertyChanged(AmbientProperty ambientProperty)
		{
			base.OnAmbientPropertyChanged(ambientProperty);
			if (ambientProperty == AmbientProperty.OperatingSystemSetting)
			{
				ApplySystemColors();
			}
		}

		private void ApplySystemColors()
		{
			BackColorStart = Color.Empty;
			BackColorEnd = Color.Empty;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityPreviewDesignerTheme : CompositeDesignerTheme
	{
		internal static readonly Bitmap LeftScrollImage = DR.GetImage("MoveLeft") as Bitmap;

		internal static readonly Bitmap LeftScrollImageUp = DR.GetImage("MoveLeftUp") as Bitmap;

		internal static readonly Bitmap RightScrollImage = DR.GetImage("MoveRight") as Bitmap;

		internal static readonly Bitmap RightScrollImageUp = DR.GetImage("MoveRightUp") as Bitmap;

		internal static readonly Bitmap PreviewButtonImage = DR.GetImage("PreviewModeIcon") as Bitmap;

		internal static readonly Bitmap EditButtonImage = DR.GetImage("EditModeIcon") as Bitmap;

		internal static readonly Bitmap PreviewImage = DR.GetImage("PreviewIndicator") as Bitmap;

		private static readonly Size[] ItemSizes = new Size[3]
		{
			new Size(20, 20),
			new Size(20, 20),
			new Size(30, 30)
		};

		private static readonly Size[] PreviewButtonSizes = new Size[3]
		{
			new Size(16, 16),
			new Size(16, 16),
			new Size(20, 20)
		};

		private static readonly Size[] PreviewWindowSizes = new Size[3]
		{
			new Size(172, 120),
			new Size(172, 120),
			new Size(212, 160)
		};

		private const int DefaultItemCount = 5;

		private Color previewForeColor = Color.WhiteSmoke;

		private Color previewBackColor = Color.White;

		private Color previewBorderColor = Color.Gray;

		private Brush previewForegroundBrush;

		private Brush previewBackgroundBrush;

		private Pen previewBorderPen;

		[DispId(13)]
		[SRDescription("PreviewForeColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public Color PreviewForeColor
		{
			get
			{
				return previewForeColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				previewForeColor = value;
				if (previewForegroundBrush != null)
				{
					previewForegroundBrush.Dispose();
					previewForegroundBrush = null;
				}
			}
		}

		[DispId(14)]
		[SRDescription("PreviewBackColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public Color PreviewBackColor
		{
			get
			{
				return previewBackColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				previewBackColor = value;
				if (previewBackgroundBrush != null)
				{
					previewBackgroundBrush.Dispose();
					previewBackgroundBrush = null;
				}
			}
		}

		[DispId(15)]
		[SRDescription("PreviewBorderColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public Color PreviewBorderColor
		{
			get
			{
				return previewBorderColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				previewBorderColor = value;
				if (previewBorderPen != null)
				{
					previewBorderPen.Dispose();
					previewBorderPen = null;
				}
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		internal Size PreviewItemSize => ItemSizes[(int)base.ContainingTheme.AmbientTheme.DesignerSize];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		internal int PreviewItemCount => 5;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		internal Size PreviewWindowSize => PreviewWindowSizes[(int)base.ContainingTheme.AmbientTheme.DesignerSize];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		internal Size PreviewButtonSize => PreviewButtonSizes[(int)base.ContainingTheme.AmbientTheme.DesignerSize];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		internal Pen PreviewBorderPen
		{
			get
			{
				if (previewBorderPen == null)
				{
					previewBorderPen = new Pen(previewBorderColor, base.BorderWidth);
				}
				return previewBorderPen;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		internal Brush PreviewForegroundBrush
		{
			get
			{
				if (previewForegroundBrush == null)
				{
					previewForegroundBrush = new SolidBrush(previewForeColor);
				}
				return previewForegroundBrush;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		internal Brush PreviewBackgroundBrush
		{
			get
			{
				if (previewBackgroundBrush == null)
				{
					previewBackgroundBrush = new SolidBrush(previewBackColor);
				}
				return previewBackgroundBrush;
			}
		}

		public ActivityPreviewDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
		}

		protected override void Dispose(bool disposing)
		{
			try
			{
				if (previewForegroundBrush != null)
				{
					previewForegroundBrush.Dispose();
					previewForegroundBrush = null;
				}
				if (previewBackgroundBrush != null)
				{
					previewBackgroundBrush.Dispose();
					previewBackgroundBrush = null;
				}
				if (previewBorderPen != null)
				{
					previewBorderPen.Dispose();
					previewBorderPen = null;
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		public override void Initialize()
		{
			base.Initialize();
			if (base.ContainingTheme.AmbientTheme.UseOperatingSystemSettings)
			{
				ApplySystemColors();
			}
		}

		public override void OnAmbientPropertyChanged(AmbientProperty ambientProperty)
		{
			base.OnAmbientPropertyChanged(ambientProperty);
			switch (ambientProperty)
			{
			case AmbientProperty.DesignerSize:
				PreviewBorderColor = previewBorderColor;
				break;
			case AmbientProperty.OperatingSystemSetting:
				ApplySystemColors();
				break;
			}
		}

		private void ApplySystemColors()
		{
			PreviewForeColor = SystemColors.ButtonFace;
			PreviewBackColor = SystemColors.Window;
			PreviewBorderColor = SystemColors.ControlDarkDark;
			BorderColor = SystemColors.ControlDarkDark;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class AmbientTheme : DesignerTheme
	{
		internal const float WatermarkTransparency = 0.25f;

		internal const int ArcDiameter = 8;

		internal const int DropShadowWidth = 4;

		internal static Color TransparentColor = Color.FromArgb(255, 0, 255);

		internal static readonly Image ConfigErrorImage = DR.GetImage("ConfigError");

		internal static readonly Image ScrollIndicatorImage = DR.GetImage("ArrowLeft");

		internal static readonly Image DropIndicatorImage = DR.GetImage("DropShapeShort");

		internal static readonly Image LockImage = DR.GetImage("PreviewIndicator");

		internal static readonly Image ReadOnlyImage = DR.GetImage("ReadOnly");

		internal static readonly Pen SmartTagBorderPen = new Pen(Color.Black, 1f);

		internal static readonly Pen MagnifierPen = new Pen(Color.Black, 2f);

		internal static readonly Pen WorkflowBorderPen = new Pen(Color.FromArgb(127, 157, 185), 1f);

		internal static readonly Brush WorkspaceBackgroundBrush = new SolidBrush(Color.FromArgb(234, 234, 236));

		internal static readonly Brush FadeBrush = new SolidBrush(Color.FromArgb(120, 255, 255, 255));

		internal static readonly Brush DisabledBrush = new SolidBrush(Color.FromArgb(40, Color.Gray));

		internal static readonly Brush PageShadowBrush = new SolidBrush(Color.FromArgb(75, 75, 75));

		internal const float ScrollIndicatorTransparency = 0.7f;

		internal static readonly Size DragImageMargins = new Size(4, 4);

		internal static readonly Size DragImageTextSize = new Size(100, 60);

		internal static readonly Size DragImageIconSize = new Size(16, 16);

		internal const int MinZoom = 10;

		internal const int MaxZoom = 400;

		internal const int ScrollUnit = 25;

		internal const int MinShadowDepth = 0;

		internal const int MaxShadowDepth = 8;

		private static float[] fontSizes = null;

		private static readonly Size[] GridSizes = new Size[3]
		{
			new Size(30, 30),
			new Size(40, 40),
			new Size(60, 60)
		};

		private static readonly Size[] MarginSizes = new Size[3]
		{
			new Size(2, 2),
			new Size(4, 4),
			new Size(6, 6)
		};

		private static readonly Size[] SelectionSizes = new Size[3]
		{
			new Size(2, 2),
			new Size(4, 4),
			new Size(6, 6)
		};

		private static readonly Size[] GlyphSizes = new Size[3]
		{
			new Size(10, 10),
			new Size(14, 14),
			new Size(18, 18)
		};

		private static readonly Size[] ScrollIndicatorSizes = new Size[3]
		{
			new Size(24, 24),
			new Size(32, 32),
			new Size(40, 40)
		};

		private static readonly Size[] DropIndicatorSizes = new Size[3]
		{
			new Size(8, 8),
			new Size(12, 12),
			new Size(16, 16)
		};

		private static readonly Size[] MagnifierSizes = new Size[3]
		{
			new Size(50, 50),
			new Size(100, 100),
			new Size(150, 150)
		};

		private static readonly int[] BorderWidths = new int[3] { 1, 1, 3 };

		private const int DefaultShadowDepth = 6;

		private bool useOperatingSystemSettings;

		private bool showConfigErrors = true;

		private bool drawShadow;

		private bool drawGrayscale;

		private Color dropIndicatorColor = Color.Green;

		private Color selectionForeColor = Color.Blue;

		private Color selectionPatternColor = Color.DarkGray;

		private Color foreColor = Color.Gray;

		private Color backColor = Color.White;

		private Color commentIndicatorColor = Color.FromArgb(49, 198, 105);

		private Color readonlyIndicatorColor = Color.Gray;

		private DesignerContentAlignment watermarkAlignment = DesignerContentAlignment.BottomRight;

		private string watermarkImagePath = string.Empty;

		private bool useDefaultFont;

		private bool showGrid;

		private DashStyle gridStyle = DashStyle.Dash;

		private Color gridColor = Color.FromArgb(192, 192, 192);

		private string fontName = WorkflowTheme.GetDefaultFont().FontFamily.Name;

		private TextQuality textQuality;

		private DesignerSize designerStyle = DesignerSize.Medium;

		private bool drawRounded = true;

		private bool showDesignerBorder = true;

		private Font font;

		private Font boldFont;

		private Pen foregroundPen;

		private Pen selectionForegroundPen;

		private Pen selectionPatternPen;

		private Pen majorGridPen;

		private Pen minorGridPen;

		private Pen dropIndicatorPen;

		private Pen commentIndicatorPen;

		private Brush backgroundBrush;

		private Brush foregroundBrush;

		private Brush selectionForegroundBrush;

		private Brush dropIndicatorBrush;

		private Brush commentIndicatorBrush;

		private Brush readonlyIndicatorBrush;

		private Brush majorGridBrush;

		private Brush minorGridBrush;

		private Image watermarkImage;

		private static float[] FontSizes
		{
			get
			{
				if (fontSizes == null)
				{
					fontSizes = new float[3]
					{
						WorkflowTheme.GetDefaultFont().SizeInPoints - 2f,
						WorkflowTheme.GetDefaultFont().SizeInPoints,
						WorkflowTheme.GetDefaultFont().SizeInPoints + 2f
					};
				}
				return fontSizes;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public virtual bool UseOperatingSystemSettings
		{
			get
			{
				return useOperatingSystemSettings;
			}
			internal set
			{
				useOperatingSystemSettings = value;
				if (useOperatingSystemSettings)
				{
					SystemEvents.UserPreferenceChanged += OnOperatingSystemSettingsChanged;
					OnOperatingSystemSettingsChanged(this, new UserPreferenceChangedEventArgs(UserPreferenceCategory.Color));
				}
				else
				{
					SystemEvents.UserPreferenceChanged -= OnOperatingSystemSettingsChanged;
				}
			}
		}

		[DispId(1)]
		[SRDescription("FontDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("WorkflowAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[TypeConverter(typeof(FontFamilyConverter))]
		public virtual string FontName
		{
			get
			{
				return fontName;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				if (value == null || value.Length == 0)
				{
					throw new Exception(DR.GetString("EmptyFontFamilyNotSupported"));
				}
				try
				{
					new Font(value, FontSize)?.Dispose();
				}
				catch (Exception innerException)
				{
					throw new Exception(DR.GetString("FontFamilyNotSupported", value), innerException);
				}
				fontName = value;
				if (font != null)
				{
					font.Dispose();
					font = null;
				}
				if (boldFont != null)
				{
					boldFont.Dispose();
					boldFont = null;
				}
			}
		}

		[DefaultValue(TextQuality.Aliased)]
		[DispId(2)]
		[SRDescription("TextQualityDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("WorkflowAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual TextQuality TextQuality
		{
			get
			{
				return textQuality;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				textQuality = value;
			}
		}

		[DispId(3)]
		[DefaultValue(true)]
		[SRDescription("ShowConfigErrorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("WorkflowAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual bool ShowConfigErrors
		{
			get
			{
				return showConfigErrors;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				showConfigErrors = value;
			}
		}

		[DefaultValue(false)]
		[DispId(6)]
		[SRDescription("GrayscaleWorkflowDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("WorkflowAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual bool DrawGrayscale
		{
			get
			{
				return drawGrayscale;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				drawGrayscale = value;
			}
		}

		[DispId(7)]
		[SRDescription("DropHiliteDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public virtual Color DropIndicatorColor
		{
			get
			{
				return dropIndicatorColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				dropIndicatorColor = value;
				if (dropIndicatorPen != null)
				{
					dropIndicatorPen.Dispose();
					dropIndicatorPen = null;
				}
				if (dropIndicatorBrush != null)
				{
					dropIndicatorBrush.Dispose();
					dropIndicatorBrush = null;
				}
			}
		}

		[DispId(8)]
		[SRDescription("SelectionForegroundDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public virtual Color SelectionForeColor
		{
			get
			{
				return selectionForeColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				selectionForeColor = value;
				if (selectionForegroundPen != null)
				{
					selectionForegroundPen.Dispose();
					selectionForegroundPen = null;
				}
				if (selectionForegroundBrush != null)
				{
					selectionForegroundBrush.Dispose();
					selectionForegroundBrush = null;
				}
			}
		}

		[DispId(9)]
		[SRDescription("SelectionPatternDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public virtual Color SelectionPatternColor
		{
			get
			{
				return selectionPatternColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				selectionPatternColor = value;
				if (selectionPatternPen != null)
				{
					selectionPatternPen.Dispose();
					selectionPatternPen = null;
				}
			}
		}

		[DispId(10)]
		[SRDescription("WorkflowForegroundDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public virtual Color ForeColor
		{
			get
			{
				return foreColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				foreColor = value;
				if (foregroundPen != null)
				{
					foregroundPen.Dispose();
					foregroundPen = null;
				}
				if (foregroundBrush != null)
				{
					foregroundBrush.Dispose();
					foregroundBrush = null;
				}
			}
		}

		[DispId(11)]
		[SRDescription("CommentColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public virtual Color CommentIndicatorColor
		{
			get
			{
				return commentIndicatorColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				commentIndicatorColor = value;
				if (commentIndicatorPen != null)
				{
					commentIndicatorPen.Dispose();
					commentIndicatorPen = null;
				}
				if (commentIndicatorBrush != null)
				{
					commentIndicatorBrush.Dispose();
					commentIndicatorBrush = null;
				}
			}
		}

		[DispId(12)]
		[SRDescription("LockColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public virtual Color ReadonlyIndicatorColor
		{
			get
			{
				return readonlyIndicatorColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				readonlyIndicatorColor = value;
				if (readonlyIndicatorBrush != null)
				{
					readonlyIndicatorBrush.Dispose();
					readonlyIndicatorBrush = null;
				}
			}
		}

		[DispId(13)]
		[SRDescription("WorkflowBackgroundDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public virtual Color BackColor
		{
			get
			{
				return backColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				backColor = value;
				if (backgroundBrush != null)
				{
					backgroundBrush.Dispose();
					backgroundBrush = null;
				}
			}
		}

		[DefaultValue(false)]
		[DispId(14)]
		[SRDescription("WorkflowShadowDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("WorkflowAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual bool DrawShadow
		{
			get
			{
				return drawShadow;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				drawShadow = value;
			}
		}

		[DispId(15)]
		[SRDescription("WorkflowWatermarkDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ImageBrowserEditor), typeof(UITypeEditor))]
		public virtual string WatermarkImagePath
		{
			get
			{
				return watermarkImagePath;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				if (!string.IsNullOrEmpty(value) && value.Contains(Path.DirectorySeparatorChar.ToString()) && Path.IsPathRooted(value))
				{
					value = DesignerHelpers.GetRelativePath(base.ContainingTheme.ContainingFileDirectory, value);
					if (!DesignerHelpers.IsValidImageResource(this, base.ContainingTheme.ContainingFileDirectory, value))
					{
						throw new InvalidOperationException(DR.GetString("Error_InvalidImageResource"));
					}
				}
				watermarkImagePath = value;
				if (watermarkImage != null)
				{
					watermarkImage.Dispose();
					watermarkImage = null;
				}
			}
		}

		[DispId(16)]
		[DefaultValue(DesignerContentAlignment.BottomRight)]
		[SRDescription("WatermarkAlignmentDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual DesignerContentAlignment WatermarkAlignment
		{
			get
			{
				return watermarkAlignment;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				watermarkAlignment = value;
			}
		}

		[DefaultValue(false)]
		[DispId(17)]
		[SRDescription("ShowGridDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual bool ShowGrid
		{
			get
			{
				return showGrid;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				showGrid = value;
			}
		}

		[DefaultValue(DashStyle.Dash)]
		[DispId(18)]
		[SRDescription("GridStyleDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual DashStyle GridStyle
		{
			get
			{
				return gridStyle;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				gridStyle = value;
				if (majorGridPen != null)
				{
					majorGridPen.Dispose();
					majorGridPen = null;
				}
				if (minorGridPen != null)
				{
					minorGridPen.Dispose();
					minorGridPen = null;
				}
			}
		}

		[DispId(19)]
		[SRDescription("GridColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[Editor(typeof(ColorPickerEditor), typeof(UITypeEditor))]
		[TypeConverter(typeof(ColorPickerConverter))]
		public virtual Color GridColor
		{
			get
			{
				return gridColor;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				gridColor = value;
				if (majorGridPen != null)
				{
					majorGridPen.Dispose();
					majorGridPen = null;
				}
				if (majorGridBrush != null)
				{
					majorGridBrush.Dispose();
					majorGridBrush = null;
				}
				if (minorGridPen != null)
				{
					minorGridPen.Dispose();
					minorGridPen = null;
				}
				if (minorGridBrush != null)
				{
					minorGridBrush.Dispose();
					minorGridBrush = null;
				}
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[DefaultValue(DesignerSize.Medium)]
		[DispId(20)]
		[SRDescription("DesignerSizeDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ActivityAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual DesignerSize DesignerSize
		{
			get
			{
				return designerStyle;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				designerStyle = value;
				base.ContainingTheme.AmbientPropertyChanged(AmbientProperty.DesignerSize);
			}
		}

		[DefaultValue(true)]
		[DispId(21)]
		[SRDescription("DrawRoundedDesignersDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ActivityAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual bool DrawRounded
		{
			get
			{
				return drawRounded;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				drawRounded = value;
			}
		}

		[DefaultValue(true)]
		[DispId(24)]
		[SRDescription("DesignerBorderDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
		[SRCategory("ActivityAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
		public virtual bool ShowDesignerBorder
		{
			get
			{
				return showDesignerBorder;
			}
			set
			{
				if (base.ReadOnly)
				{
					throw new InvalidOperationException(DR.GetString("ThemePropertyReadOnly"));
				}
				showDesignerBorder = value;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public virtual Size Margin => MarginSizes[(int)designerStyle];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public virtual Size SelectionSize => SelectionSizes[(int)designerStyle];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public virtual Size GlyphSize => GlyphSizes[(int)designerStyle];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		internal Size ScrollIndicatorSize => ScrollIndicatorSizes[(int)designerStyle];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		internal Size DropIndicatorSize => DropIndicatorSizes[(int)designerStyle];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		internal Size MagnifierSize => MagnifierSizes[(int)designerStyle];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		internal int ShadowDepth
		{
			get
			{
				if (!drawShadow)
				{
					return 0;
				}
				return 6;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public virtual Size GridSize => GridSizes[(int)designerStyle];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public virtual int BorderWidth => BorderWidths[(int)base.ContainingTheme.AmbientTheme.DesignerSize];

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Pen MajorGridPen
		{
			get
			{
				if (majorGridPen == null)
				{
					majorGridPen = new Pen(gridColor, 1f);
					majorGridPen.DashStyle = DashStyle.Dash;
				}
				return majorGridPen;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Brush MajorGridBrush
		{
			get
			{
				if (majorGridBrush == null)
				{
					majorGridBrush = new SolidBrush(gridColor);
				}
				return majorGridBrush;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Pen MinorGridPen
		{
			get
			{
				if (minorGridPen == null)
				{
					Color color = Color.FromArgb(gridColor.A, Math.Min(gridColor.R + 32, 255), Math.Min(gridColor.G + 32, 255), Math.Min(gridColor.B + 32, 255));
					minorGridPen = new Pen(color, 1f);
					minorGridPen.DashStyle = DashStyle.Dot;
				}
				return minorGridPen;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		internal Brush MinorGridBrush
		{
			get
			{
				if (minorGridBrush == null)
				{
					Color color = Color.FromArgb(gridColor.A, Math.Min(gridColor.R + 32, 255), Math.Min(gridColor.G + 32, 255), Math.Min(gridColor.B + 32, 255));
					minorGridBrush = new SolidBrush(color);
				}
				return minorGridBrush;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Pen SelectionPatternPen
		{
			get
			{
				if (selectionPatternPen == null)
				{
					selectionPatternPen = new Pen(selectionPatternColor, 1f);
					selectionPatternPen.DashStyle = DashStyle.Dot;
				}
				return selectionPatternPen;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Pen SelectionForegroundPen
		{
			get
			{
				if (selectionForegroundPen == null)
				{
					selectionForegroundPen = new Pen(selectionForeColor, 1f);
				}
				return selectionForegroundPen;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Brush SelectionForegroundBrush
		{
			get
			{
				if (selectionForegroundBrush == null)
				{
					selectionForegroundBrush = new SolidBrush(selectionForeColor);
				}
				return selectionForegroundBrush;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Pen DropIndicatorPen
		{
			get
			{
				if (dropIndicatorPen == null)
				{
					dropIndicatorPen = new Pen(dropIndicatorColor, BorderWidth);
				}
				return dropIndicatorPen;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Brush DropIndicatorBrush
		{
			get
			{
				if (dropIndicatorBrush == null)
				{
					dropIndicatorBrush = new SolidBrush(dropIndicatorColor);
				}
				return dropIndicatorBrush;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Pen ForegroundPen
		{
			get
			{
				if (foregroundPen == null)
				{
					foregroundPen = new Pen(foreColor, 1f);
					foregroundPen.DashStyle = DashStyle.Dot;
				}
				return foregroundPen;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Pen CommentIndicatorPen
		{
			get
			{
				if (commentIndicatorPen == null)
				{
					commentIndicatorPen = new Pen(commentIndicatorColor, 1f);
				}
				return commentIndicatorPen;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Brush CommentIndicatorBrush
		{
			get
			{
				if (commentIndicatorBrush == null)
				{
					commentIndicatorBrush = new SolidBrush(Color.FromArgb(40, commentIndicatorColor));
				}
				return commentIndicatorBrush;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Brush ReadonlyIndicatorBrush
		{
			get
			{
				if (readonlyIndicatorBrush == null)
				{
					readonlyIndicatorBrush = new SolidBrush(Color.FromArgb(20, readonlyIndicatorColor));
				}
				return readonlyIndicatorBrush;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Brush ForegroundBrush
		{
			get
			{
				if (foregroundBrush == null)
				{
					foregroundBrush = new SolidBrush(foreColor);
				}
				return foregroundBrush;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Brush BackgroundBrush
		{
			get
			{
				if (backgroundBrush == null)
				{
					backgroundBrush = new SolidBrush(backColor);
				}
				return backgroundBrush;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Image WorkflowWatermarkImage
		{
			get
			{
				if (watermarkImage == null && watermarkImagePath.Length > 0)
				{
					watermarkImage = DesignerHelpers.GetImageFromPath(this, base.ContainingTheme.ContainingFileDirectory, watermarkImagePath);
				}
				return watermarkImage;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Font Font
		{
			get
			{
				if (font == null)
				{
					if (fontName == null || fontName.Length == 0)
					{
						fontName = WorkflowTheme.GetDefaultFont().FontFamily.Name;
					}
					ArrayList arrayList = new ArrayList(SupportedFonts);
					if (!arrayList.Contains(fontName))
					{
						fontName = WorkflowTheme.GetDefaultFont().FontFamily.Name;
					}
					font = new Font(fontName, FontSize);
				}
				return font;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public Font BoldFont
		{
			get
			{
				if (boldFont == null)
				{
					if (fontName == null || fontName.Length == 0)
					{
						fontName = WorkflowTheme.GetDefaultFont().FontFamily.Name;
					}
					ArrayList arrayList = new ArrayList(SupportedFonts);
					if (!arrayList.Contains(fontName))
					{
						fontName = WorkflowTheme.GetDefaultFont().FontFamily.Name;
					}
					boldFont = new Font(fontName, FontSize, FontStyle.Bold);
				}
				return boldFont;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		private float FontSize
		{
			get
			{
				if (useOperatingSystemSettings)
				{
					return SystemInformation.MenuFont.SizeInPoints;
				}
				return FontSizes[(int)DesignerSize];
			}
		}

		internal static string[] SupportedFonts
		{
			get
			{
				ArrayList arrayList = new ArrayList();
				FontFamily[] families = FontFamily.Families;
				foreach (FontFamily fontFamily in families)
				{
					arrayList.Add(fontFamily.Name);
				}
				arrayList.Sort(CaseInsensitiveComparer.Default);
				return (string[])arrayList.ToArray(typeof(string));
			}
		}

		public AmbientTheme(WorkflowTheme theme)
			: base(theme)
		{
		}

		protected override void Dispose(bool disposing)
		{
			try
			{
				UseOperatingSystemSettings = false;
				if (font != null)
				{
					font.Dispose();
					font = null;
				}
				if (boldFont != null)
				{
					boldFont.Dispose();
					boldFont = null;
				}
				if (watermarkImage != null)
				{
					watermarkImage.Dispose();
					watermarkImage = null;
				}
				if (foregroundPen != null)
				{
					foregroundPen.Dispose();
					foregroundPen = null;
				}
				if (foregroundBrush != null)
				{
					foregroundBrush.Dispose();
					foregroundBrush = null;
				}
				if (backgroundBrush != null)
				{
					backgroundBrush.Dispose();
					backgroundBrush = null;
				}
				if (dropIndicatorPen != null)
				{
					dropIndicatorPen.Dispose();
					dropIndicatorPen = null;
				}
				if (selectionPatternPen != null)
				{
					selectionPatternPen.Dispose();
					selectionPatternPen = null;
				}
				if (selectionForegroundPen != null)
				{
					selectionForegroundPen.Dispose();
					selectionForegroundPen = null;
				}
				if (majorGridPen != null)
				{
					majorGridPen.Dispose();
					majorGridPen = null;
				}
				if (majorGridBrush != null)
				{
					majorGridBrush.Dispose();
					majorGridBrush = null;
				}
				if (minorGridPen != null)
				{
					minorGridPen.Dispose();
					minorGridPen = null;
				}
				if (minorGridBrush != null)
				{
					minorGridBrush.Dispose();
					minorGridBrush = null;
				}
				if (commentIndicatorPen != null)
				{
					commentIndicatorPen.Dispose();
					commentIndicatorPen = null;
				}
				if (commentIndicatorBrush != null)
				{
					commentIndicatorBrush.Dispose();
					commentIndicatorBrush = null;
				}
				if (readonlyIndicatorBrush != null)
				{
					readonlyIndicatorBrush.Dispose();
					readonlyIndicatorBrush = null;
				}
				if (dropIndicatorBrush != null)
				{
					dropIndicatorBrush.Dispose();
					dropIndicatorBrush = null;
				}
				if (selectionForegroundBrush != null)
				{
					selectionForegroundBrush.Dispose();
					selectionForegroundBrush = null;
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		public override void Initialize()
		{
			base.Initialize();
			if (useOperatingSystemSettings)
			{
				ApplySystemColors();
			}
		}

		internal void UseDefaultFont()
		{
			useDefaultFont = true;
		}

		internal void UpdateFont()
		{
			if (useDefaultFont)
			{
				bool readOnly = base.ReadOnly;
				base.ReadOnly = false;
				FontName = WorkflowTheme.GetDefaultFont().FontFamily.Name;
				base.ReadOnly = readOnly;
			}
		}

		public override void OnAmbientPropertyChanged(AmbientProperty ambientProperty)
		{
			base.OnAmbientPropertyChanged(ambientProperty);
			switch (ambientProperty)
			{
			case AmbientProperty.DesignerSize:
				DropIndicatorColor = dropIndicatorColor;
				FontName = fontName;
				break;
			case AmbientProperty.OperatingSystemSetting:
				ApplySystemColors();
				break;
			}
		}

		private void OnOperatingSystemSettingsChanged(object sender, UserPreferenceChangedEventArgs e)
		{
			if (e.Category == UserPreferenceCategory.Color || e.Category == UserPreferenceCategory.VisualStyle)
			{
				base.ContainingTheme.AmbientPropertyChanged(AmbientProperty.OperatingSystemSetting);
				WorkflowTheme.FireThemeChange();
			}
		}

		private void ApplySystemColors()
		{
			DropIndicatorColor = SystemColors.HotTrack;
			SelectionForeColor = SystemColors.Highlight;
			SelectionPatternColor = SystemColors.Highlight;
			ForeColor = SystemColors.WindowText;
			CommentIndicatorColor = SystemColors.GrayText;
			ReadonlyIndicatorColor = SystemColors.GrayText;
			BackColor = SystemColors.Window;
			GridColor = SystemColors.InactiveBorder;
			FontName = WorkflowTheme.GetDefaultFont().FontFamily.Name;
		}

		internal override ICollection GetPropertyValues(ITypeDescriptorContext context)
		{
			object[] result = new object[0];
			if (string.Equals(context.PropertyDescriptor.Name, "GridStyle", StringComparison.Ordinal))
			{
				result = new object[3]
				{
					DashStyle.Solid,
					DashStyle.Dash,
					DashStyle.Dot
				};
			}
			return result;
		}
	}
	internal sealed class ThemeTypeConverter : ExpandableObjectConverter
	{
		private sealed class PropertyDescriptorSorter : IComparer
		{
			int IComparer.Compare(object obj1, object obj2)
			{
				PropertyDescriptor propertyDescriptor = obj1 as PropertyDescriptor;
				PropertyDescriptor propertyDescriptor2 = obj2 as PropertyDescriptor;
				DispIdAttribute dispIdAttribute = propertyDescriptor.Attributes[typeof(DispIdAttribute)] as DispIdAttribute;
				DispIdAttribute dispIdAttribute2 = propertyDescriptor2.Attributes[typeof(DispIdAttribute)] as DispIdAttribute;
				if (dispIdAttribute == null)
				{
					return 1;
				}
				if (dispIdAttribute2 == null)
				{
					return -1;
				}
				return dispIdAttribute.Value - dispIdAttribute2.Value;
			}
		}

		public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
		{
			if (destinationType == typeof(string) && context.PropertyDescriptor != null)
			{
				return string.Empty;
			}
			return base.ConvertTo(context, culture, value, destinationType);
		}

		public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
		{
			PropertyDescriptorCollection properties = base.GetProperties(context, value, attributes);
			return properties.Sort(new PropertyDescriptorSorter());
		}
	}
	internal sealed class ColorPickerConverter : ColorConverter
	{
		public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
		{
			return false;
		}
	}
	internal sealed class FilteredEnumConverter : PropertyValueProviderTypeConverter
	{
		public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
		{
			return sourceType == typeof(string);
		}

		public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
		{
			return Enum.Parse(context.PropertyDescriptor.PropertyType, (string)value);
		}
	}
	internal sealed class FontFamilyConverter : TypeConverter
	{
		public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
		{
			return true;
		}

		public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
		{
			return true;
		}

		public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
		{
			return new StandardValuesCollection(AmbientTheme.SupportedFonts);
		}
	}
	internal sealed class ImageBrowserEditor : UITypeEditor
	{
		public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
		{
			return UITypeEditorEditStyle.Modal;
		}

		public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.AddExtension = true;
			openFileDialog.DefaultExt = "*.wtm";
			openFileDialog.CheckFileExists = true;
			openFileDialog.Filter = DR.GetString("ImageFileFilter");
			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				return openFileDialog.FileName;
			}
			return value;
		}
	}
	internal sealed class ColorPickerEditor : UITypeEditor
	{
		public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
		{
			return UITypeEditorEditStyle.Modal;
		}

		public override bool GetPaintValueSupported(ITypeDescriptorContext context)
		{
			if (context != null)
			{
				return context.PropertyDescriptor != null;
			}
			return false;
		}

		public override void PaintValue(PaintValueEventArgs e)
		{
			base.PaintValue(e);
			if (!(e.Value is Color))
			{
				return;
			}
			Color color = (Color)e.Value;
			if (color != Color.Empty)
			{
				using (Brush brush = new SolidBrush(color))
				{
					e.Graphics.FillRectangle(brush, e.Bounds);
				}
			}
		}

		public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.AllowFullOpen = true;
			colorDialog.FullOpen = true;
			colorDialog.AnyColor = true;
			colorDialog.Color = ((value is Color) ? ((Color)value) : Color.White);
			if (colorDialog.ShowDialog() == DialogResult.OK)
			{
				return colorDialog.Color;
			}
			return value;
		}
	}
	internal sealed class ThemeSerializationProvider : WorkflowMarkupSerializationProvider
	{
		public override object GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType)
		{
			if (serializerType.IsAssignableFrom(typeof(WorkflowMarkupSerializer)))
			{
				if (typeof(Color) == objectType)
				{
					return new ColorMarkupSerializer();
				}
				if (typeof(Size) == objectType)
				{
					return new SizeMarkupSerializer();
				}
			}
			return base.GetSerializer(manager, currentSerializer, objectType, serializerType);
		}
	}
	[Flags]
	internal enum LightSourcePosition
	{
		Left = 1,
		Right = 2,
		Top = 4,
		Bottom = 8,
		Center = 0x10
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public static class ActivityDesignerPaint
	{
		internal enum XpThemeColorStyles
		{
			Blue,
			Silver,
			Green
		}

		[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
		private enum XpSchemeColorIndex
		{
			FgGnd,
			BkGnd,
			Border,
			Highlight,
			Shadow
		}

		private sealed class Hdc : IDisposable
		{
			private Graphics graphics;

			private HandleRef hdc;

			private HandleRef oldPen;

			private HandleRef oldPenEx;

			private HandleRef oldBrush;

			private int oldGraphicsMode;

			internal Hdc(Graphics graphics)
			{
				this.graphics = graphics;
				NativeMethods.XFORM xform = new NativeMethods.XFORM(this.graphics.Transform);
				hdc = new HandleRef(this, this.graphics.GetHdc());
				oldGraphicsMode = NativeMethods.SetGraphicsMode(hdc, 2);
				if (oldGraphicsMode == 0)
				{
					throw new Win32Exception(Marshal.GetLastWin32Error());
				}
				if (NativeMethods.SetWorldTransform(hdc, xform) == 0)
				{
					throw new Win32Exception(Marshal.GetLastWin32Error());
				}
				IntPtr currentObject = NativeMethods.GetCurrentObject(hdc, 1u);
				if (currentObject == IntPtr.Zero)
				{
					throw new Win32Exception(Marshal.GetLastWin32Error());
				}
				oldPen = new HandleRef(this, currentObject);
				currentObject = NativeMethods.GetCurrentObject(hdc, 11u);
				if (currentObject == IntPtr.Zero)
				{
					throw new Win32Exception(Marshal.GetLastWin32Error());
				}
				oldPenEx = new HandleRef(this, currentObject);
				currentObject = NativeMethods.GetCurrentObject(hdc, 2u);
				if (currentObject == IntPtr.Zero)
				{
					throw new Win32Exception(Marshal.GetLastWin32Error());
				}
				oldBrush = new HandleRef(this, currentObject);
			}

			void IDisposable.Dispose()
			{
				if (graphics != null)
				{
					IntPtr intPtr = NativeMethods.SelectObject(hdc, oldPen);
					if (intPtr == IntPtr.Zero)
					{
						Win32Exception ex = new Win32Exception();
						string message = ex.Message;
					}
					intPtr = NativeMethods.SelectObject(hdc, oldPenEx);
					if (intPtr == IntPtr.Zero)
					{
						Win32Exception ex2 = new Win32Exception();
						string message = ex2.Message;
					}
					intPtr = NativeMethods.SelectObject(hdc, oldBrush);
					if (intPtr == IntPtr.Zero)
					{
						Win32Exception ex3 = new Win32Exception();
						string message = ex3.Message;
					}
					if (NativeMethods.SetWorldTransform(hdc, new NativeMethods.XFORM()) == 0)
					{
						Win32Exception ex4 = new Win32Exception();
						string message = ex4.Message;
					}
					if (NativeMethods.SetGraphicsMode(hdc, oldGraphicsMode) == 0)
					{
						Win32Exception ex5 = new Win32Exception();
						string message = ex5.Message;
					}
					graphics.ReleaseHdc();
					graphics = null;
				}
			}

			internal void DrawGrid(HPen majorGridPen, HPen minorGridPen, Rectangle viewableRectangle, Size gridUnit, bool showMinorGrid)
			{
				try
				{
					Point empty = Point.Empty;
					empty.X = viewableRectangle.X - viewableRectangle.X % gridUnit.Width;
					empty.Y = viewableRectangle.Y - viewableRectangle.Y % gridUnit.Height;
					IntPtr intPtr = NativeMethods.SelectObject(hdc, majorGridPen.Handle);
					if (intPtr == IntPtr.Zero)
					{
						throw new Win32Exception(Marshal.GetLastWin32Error());
					}
					for (int i = empty.X; i <= viewableRectangle.Right; i += Math.Max(gridUnit.Width, 1))
					{
						if (i >= viewableRectangle.Left)
						{
							if (!NativeMethods.MoveToEx(hdc, i, viewableRectangle.Top + 1, null))
							{
								throw new Win32Exception(Marshal.GetLastWin32Error());
							}
							if (!NativeMethods.LineTo(hdc, i, viewableRectangle.Bottom - 1))
							{
								throw new Win32Exception(Marshal.GetLastWin32Error());
							}
						}
						if (showMinorGrid && i + gridUnit.Width / 2 >= viewableRectangle.Left && i + gridUnit.Width / 2 <= viewableRectangle.Right)
						{
							intPtr = NativeMethods.SelectObject(hdc, minorGridPen.Handle);
							if (intPtr == IntPtr.Zero)
							{
								throw new Win32Exception(Marshal.GetLastWin32Error());
							}
							if (!NativeMethods.MoveToEx(hdc, i + gridUnit.Width / 2, viewableRectangle.Top + 1, null))
							{
								throw new Win32Exception(Marshal.GetLastWin32Error());
							}
							if (!NativeMethods.LineTo(hdc, i + gridUnit.Width / 2, viewableRectangle.Bottom - 1))
							{
								throw new Win32Exception(Marshal.GetLastWin32Error());
							}
							intPtr = NativeMethods.SelectObject(hdc, majorGridPen.Handle);
							if (intPtr == IntPtr.Zero)
							{
								throw new Win32Exception(Marshal.GetLastWin32Error());
							}
						}
					}
					for (int j = empty.Y; j <= viewableRectangle.Bottom; j += Math.Max(gridUnit.Height, 1))
					{
						if (j >= viewableRectangle.Top)
						{
							if (!NativeMethods.MoveToEx(hdc, viewableRectangle.Left + 1, j, null))
							{
								throw new Win32Exception(Marshal.GetLastWin32Error());
							}
							if (!NativeMethods.LineTo(hdc, viewableRectangle.Right - 1, j))
							{
								throw new Win32Exception(Marshal.GetLastWin32Error());
							}
						}
						if (showMinorGrid && j + gridUnit.Height / 2 >= viewableRectangle.Top && j + gridUnit.Height / 2 <= viewableRectangle.Bottom)
						{
							intPtr = NativeMethods.SelectObject(hdc, minorGridPen.Handle);
							if (intPtr == IntPtr.Zero)
							{
								throw new Win32Exception(Marshal.GetLastWin32Error());
							}
							if (!NativeMethods.MoveToEx(hdc, viewableRectangle.Left + 1, j + gridUnit.Height / 2, null))
							{
								throw new Win32Exception(Marshal.GetLastWin32Error());
							}
							if (!NativeMethods.LineTo(hdc, viewableRectangle.Right - 1, j + gridUnit.Height / 2))
							{
								throw new Win32Exception(Marshal.GetLastWin32Error());
							}
							intPtr = NativeMethods.SelectObject(hdc, majorGridPen.Handle);
							if (intPtr == IntPtr.Zero)
							{
								throw new Win32Exception(Marshal.GetLastWin32Error());
							}
						}
					}
				}
				finally
				{
					IntPtr intPtr2 = NativeMethods.SelectObject(hdc, oldPen);
					if (intPtr2 == IntPtr.Zero)
					{
						throw new Win32Exception(Marshal.GetLastWin32Error());
					}
				}
			}
		}

		private sealed class HPen : IDisposable
		{
			private Pen pen;

			private HandleRef hpen;

			internal HandleRef Handle => hpen;

			internal HPen(Pen pen)
			{
				this.pen = pen;
				IntPtr intPtr = NativeMethods.ExtCreatePen((int)((DashStyle)7 | ((pen.DashStyle < DashStyle.DashDotDot) ? pen.DashStyle : DashStyle.Solid)), 1, new NativeMethods.LOGBRUSH(0, ColorTranslator.ToWin32(pen.Color), 0), 2, new int[2] { 1, 1 });
				if (intPtr == IntPtr.Zero)
				{
					throw new Win32Exception(Marshal.GetLastWin32Error());
				}
				hpen = new HandleRef(this, intPtr);
			}

			void IDisposable.Dispose()
			{
				if (pen != null)
				{
					if (NativeMethods.DeleteObject(hpen) == 0)
					{
						Win32Exception ex = new Win32Exception();
						string message = ex.Message;
					}
					pen = null;
				}
			}
		}

		private static Color[,] XPColorSchemes = new Color[3, 5]
		{
			{
				Color.FromArgb(0, 60, 165),
				Color.FromArgb(255, 255, 255),
				Color.FromArgb(181, 186, 214),
				Color.FromArgb(66, 142, 255),
				Color.FromArgb(181, 195, 231)
			},
			{
				Color.FromArgb(49, 68, 115),
				Color.FromArgb(255, 255, 255),
				Color.FromArgb(186, 187, 201),
				Color.FromArgb(126, 124, 124),
				Color.FromArgb(206, 207, 216)
			},
			{
				Color.FromArgb(86, 102, 45),
				Color.FromArgb(255, 255, 255),
				Color.FromArgb(210, 219, 197),
				Color.FromArgb(114, 146, 29),
				Color.FromArgb(212, 220, 190)
			}
		};

		internal static Size MeasureString(Graphics graphics, Font font, string text, StringAlignment alignment, Size maxSize)
		{
			SizeF empty = SizeF.Empty;
			if (maxSize.IsEmpty)
			{
				empty = graphics.MeasureString(text, font);
			}
			else
			{
				StringFormat stringFormat = new StringFormat();
				stringFormat.Alignment = alignment;
				stringFormat.LineAlignment = StringAlignment.Center;
				stringFormat.Trimming = StringTrimming.EllipsisCharacter;
				stringFormat.FormatFlags = StringFormatFlags.NoClip;
				empty = graphics.MeasureString(text, font, new SizeF(maxSize.Width, maxSize.Height), stringFormat);
			}
			return new Size(Convert.ToInt32(Math.Ceiling(empty.Width)), Convert.ToInt32(Math.Ceiling(empty.Height)));
		}

		public static void DrawText(Graphics graphics, Font font, string text, Rectangle boundingRect, StringAlignment alignment, TextQuality textQuality, Brush textBrush)
		{
			if (graphics == null)
			{
				throw new ArgumentNullException("graphics");
			}
			if (font == null)
			{
				throw new ArgumentNullException("font");
			}
			if (text == null)
			{
				throw new ArgumentNullException("text");
			}
			if (textBrush == null)
			{
				throw new ArgumentNullException("textBrush");
			}
			if (!boundingRect.IsEmpty)
			{
				StringFormat stringFormat = new StringFormat();
				stringFormat.Alignment = alignment;
				stringFormat.LineAlignment = StringAlignment.Center;
				stringFormat.Trimming = StringTrimming.EllipsisCharacter;
				stringFormat.FormatFlags = StringFormatFlags.FitBlackBox | StringFormatFlags.NoClip;
				TextRenderingHint textRenderingHint = graphics.TextRenderingHint;
				graphics.TextRenderingHint = ((textQuality == TextQuality.AntiAliased) ? TextRenderingHint.AntiAlias : TextRenderingHint.SystemDefault);
				graphics.DrawString(text, font, textBrush, boundingRect, stringFormat);
				graphics.TextRenderingHint = textRenderingHint;
			}
		}

		public static void DrawImage(Graphics graphics, Image image, Rectangle destination, DesignerContentAlignment alignment)
		{
			if (image == null)
			{
				throw new ArgumentNullException("image");
			}
			DrawImage(graphics, image, destination, new Rectangle(Point.Empty, image.Size), alignment, 1f, grayscale: false);
		}

		internal static void DrawImage(Graphics graphics, Image image, Rectangle destination, float transparency)
		{
			if (image == null)
			{
				throw new ArgumentNullException("image");
			}
			DrawImage(graphics, image, destination, new Rectangle(Point.Empty, image.Size), DesignerContentAlignment.Center, transparency, grayscale: false);
		}

		public static void DrawImage(Graphics graphics, Image image, Rectangle destination, Rectangle source, DesignerContentAlignment alignment, float transparency, bool grayscale)
		{
			if (graphics == null)
			{
				throw new ArgumentNullException("graphics");
			}
			if (image == null)
			{
				throw new ArgumentNullException("image");
			}
			if (destination.IsEmpty)
			{
				throw new ArgumentNullException("destination");
			}
			if (source.IsEmpty)
			{
				throw new ArgumentNullException("source");
			}
			if (transparency < 0f || transparency > 1f)
			{
				throw new ArgumentNullException("transparency");
			}
			Rectangle rectangleFromAlignment = GetRectangleFromAlignment(alignment, destination, source.Size);
			if (image != null && !rectangleFromAlignment.IsEmpty)
			{
				ColorMatrix colorMatrix = new ColorMatrix();
				if (grayscale)
				{
					colorMatrix.Matrix00 = 1f / 3f;
					colorMatrix.Matrix01 = 1f / 3f;
					colorMatrix.Matrix02 = 1f / 3f;
					colorMatrix.Matrix10 = 1f / 3f;
					colorMatrix.Matrix11 = 1f / 3f;
					colorMatrix.Matrix12 = 1f / 3f;
					colorMatrix.Matrix20 = 1f / 3f;
					colorMatrix.Matrix21 = 1f / 3f;
					colorMatrix.Matrix22 = 1f / 3f;
				}
				colorMatrix.Matrix33 = transparency;
				ImageAttributes imageAttributes = new ImageAttributes();
				imageAttributes.SetColorMatrix(colorMatrix);
				graphics.DrawImage(image, rectangleFromAlignment, source.X, source.Y, source.Width, source.Height, GraphicsUnit.Pixel, imageAttributes);
			}
		}

		internal static Rectangle GetRectangleFromAlignment(DesignerContentAlignment alignment, Rectangle destination, Size size)
		{
			if (size.IsEmpty || destination.IsEmpty)
			{
				return Rectangle.Empty;
			}
			Rectangle result = Rectangle.Empty;
			result.Width = Math.Min(size.Width, destination.Width);
			result.Height = Math.Min(size.Height, destination.Height);
			if ((alignment & DesignerContentAlignment.Fill) > (DesignerContentAlignment)0)
			{
				result = destination;
			}
			else
			{
				if ((alignment & DesignerContentAlignment.Left) > (DesignerContentAlignment)0)
				{
					result.X = destination.Left;
				}
				else if ((alignment & DesignerContentAlignment.Right) > (DesignerContentAlignment)0)
				{
					result.X = destination.Right - result.Width;
				}
				else
				{
					result.X = destination.Left + destination.Width / 2 - result.Width / 2;
				}
				if ((alignment & DesignerContentAlignment.Top) > (DesignerContentAlignment)0)
				{
					result.Y = destination.Top;
				}
				else if ((alignment & DesignerContentAlignment.Bottom) > (DesignerContentAlignment)0)
				{
					result.Y = destination.Bottom - result.Height;
				}
				else
				{
					result.Y = destination.Top + destination.Height / 2 - result.Height / 2;
				}
			}
			return result;
		}

		internal static void DrawSelection(Graphics graphics, Rectangle boundingRect, bool isPrimary, Size selectionSize, Rectangle[] grabHandles)
		{
			InterpolationMode interpolationMode = graphics.InterpolationMode;
			SmoothingMode smoothingMode = graphics.SmoothingMode;
			graphics.InterpolationMode = InterpolationMode.High;
			graphics.SmoothingMode = SmoothingMode.None;
			Rectangle rect = boundingRect;
			rect.Inflate(selectionSize.Width, selectionSize.Height);
			rect.Inflate(-selectionSize.Width / 2, -selectionSize.Height / 2);
			graphics.DrawRectangle(WorkflowTheme.CurrentTheme.AmbientTheme.SelectionPatternPen, rect);
			rect.Inflate(selectionSize.Width / 2, selectionSize.Height / 2);
			DrawGrabHandles(graphics, grabHandles, isPrimary);
			graphics.InterpolationMode = interpolationMode;
			graphics.SmoothingMode = smoothingMode;
		}

		internal static void DrawGrabHandles(Graphics graphics, Rectangle[] grabHandles, bool isPrimary)
		{
			foreach (Rectangle rect in grabHandles)
			{
				if (isPrimary)
				{
					graphics.FillRectangle(Brushes.White, rect);
					graphics.DrawRectangle(WorkflowTheme.CurrentTheme.AmbientTheme.SelectionForegroundPen, rect);
					continue;
				}
				Pen selectionPatternPen = WorkflowTheme.CurrentTheme.AmbientTheme.SelectionPatternPen;
				DashStyle dashStyle = selectionPatternPen.DashStyle;
				selectionPatternPen.DashStyle = DashStyle.Solid;
				graphics.FillRectangle(Brushes.White, rect);
				graphics.DrawRectangle(selectionPatternPen, rect);
				selectionPatternPen.DashStyle = dashStyle;
			}
		}

		public static void Draw3DButton(Graphics graphics, Image image, Rectangle bounds, float transparency, ButtonState buttonState)
		{
			if (graphics == null)
			{
				throw new ArgumentNullException("graphics");
			}
			int alpha = Math.Max(0, Convert.ToInt32(transparency * 255f));
			using SolidBrush brush = new SolidBrush(Color.FromArgb(alpha, SystemColors.Control));
			using Pen pen2 = new Pen(Color.FromArgb(alpha, SystemColors.ControlLightLight));
			using Pen pen = new Pen(Color.FromArgb(alpha, SystemColors.ControlDark));
			using Pen pen3 = new Pen(Color.FromArgb(alpha, SystemColors.ControlDarkDark));
			graphics.FillRectangle(brush, bounds);
			switch (buttonState)
			{
			case ButtonState.Normal:
			case ButtonState.Inactive:
				graphics.DrawLine(pen2, bounds.Left + 1, bounds.Bottom - 1, bounds.Left + 1, bounds.Top + 1);
				graphics.DrawLine(pen2, bounds.Left + 1, bounds.Top + 1, bounds.Right - 1, bounds.Top + 1);
				graphics.DrawLine(pen, bounds.Left + 1, bounds.Bottom - 1, bounds.Right - 1, bounds.Bottom - 1);
				graphics.DrawLine(pen, bounds.Right - 1, bounds.Bottom - 1, bounds.Right - 1, bounds.Top + 1);
				graphics.DrawLine(pen3, bounds.Left, bounds.Bottom, bounds.Right, bounds.Bottom);
				graphics.DrawLine(pen3, bounds.Right, bounds.Bottom, bounds.Right, bounds.Top);
				break;
			case ButtonState.Pushed:
				graphics.DrawRectangle(pen, bounds);
				bounds.Offset(1, 1);
				break;
			}
			if (image != null)
			{
				bounds.Inflate(-2, -2);
				DrawImage(graphics, image, bounds, new Rectangle(Point.Empty, image.Size), DesignerContentAlignment.Fill, transparency, buttonState == ButtonState.Inactive);
			}
		}

		internal static void DrawGrid(Graphics graphics, Rectangle viewableRectangle)
		{
			AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
			if (ambientTheme.GridStyle == DashStyle.Dot)
			{
				Point empty = Point.Empty;
				empty.X = viewableRectangle.X - viewableRectangle.X % ambientTheme.GridSize.Width;
				empty.Y = viewableRectangle.Y - viewableRectangle.Y % ambientTheme.GridSize.Height;
				for (int i = empty.X; i <= viewableRectangle.Right; i += Math.Max(ambientTheme.GridSize.Width, 1))
				{
					for (int j = empty.Y; j <= viewableRectangle.Bottom; j += Math.Max(ambientTheme.GridSize.Height, 1))
					{
						graphics.FillRectangle(ambientTheme.MajorGridBrush, new Rectangle(new Point(i, j), new Size(1, 1)));
						if (i + ambientTheme.GridSize.Width / 2 >= viewableRectangle.Left && i + ambientTheme.GridSize.Width / 2 <= viewableRectangle.Right && j + ambientTheme.GridSize.Height / 2 >= viewableRectangle.Top && j + ambientTheme.GridSize.Height / 2 <= viewableRectangle.Bottom)
						{
							graphics.FillRectangle(ambientTheme.MinorGridBrush, new Rectangle(new Point(i + ambientTheme.GridSize.Width / 2, j + ambientTheme.GridSize.Height / 2), new Size(1, 1)));
						}
					}
				}
				return;
			}
			using Hdc hdc = new Hdc(graphics);
			using HPen majorGridPen = new HPen(ambientTheme.MajorGridPen);
			using HPen minorGridPen = new HPen(ambientTheme.MinorGridPen);
			hdc.DrawGrid(majorGridPen, minorGridPen, viewableRectangle, ambientTheme.GridSize, showMinorGrid: true);
		}

		public static void DrawExpandButton(Graphics graphics, Rectangle boundingRect, bool drawExpanded, CompositeDesignerTheme compositeDesignerTheme)
		{
			if (graphics == null)
			{
				throw new ArgumentNullException("graphics");
			}
			if (compositeDesignerTheme == null)
			{
				throw new ArgumentNullException("compositeDesignerTheme");
			}
			if (!boundingRect.IsEmpty)
			{
				graphics.FillRectangle(compositeDesignerTheme.GetExpandButtonBackgroundBrush(boundingRect), boundingRect);
				graphics.DrawRectangle(CompositeDesignerTheme.ExpandButtonBorderPen, boundingRect);
				graphics.DrawLine(CompositeDesignerTheme.ExpandButtonForegoundPen, boundingRect.Left + 2, boundingRect.Top + boundingRect.Height / 2, boundingRect.Right - 2, boundingRect.Top + boundingRect.Height / 2);
				if (drawExpanded)
				{
					graphics.DrawLine(CompositeDesignerTheme.ExpandButtonForegoundPen, boundingRect.Left + boundingRect.Width / 2, boundingRect.Top + 2, boundingRect.Left + boundingRect.Width / 2, boundingRect.Bottom - 2);
				}
			}
		}

		public static void DrawRoundedRectangle(Graphics graphics, Pen drawingPen, Rectangle rectangle, int radius)
		{
			if (graphics == null)
			{
				throw new ArgumentNullException("graphics");
			}
			if (drawingPen == null)
			{
				throw new ArgumentNullException("drawingPen");
			}
			GraphicsPath graphicsPath = null;
			graphicsPath = GetRoundedRectanglePath(rectangle, checked(radius * 2));
			graphics.DrawPath(drawingPen, graphicsPath);
			graphicsPath.Dispose();
		}

		internal static void DrawDropShadow(Graphics graphics, Rectangle shadowSourceRectangle, Color baseColor, int shadowDepth, LightSourcePosition lightSourcePosition, float lightSourceIntensity, bool roundEdges)
		{
			if (graphics == null)
			{
				throw new ArgumentNullException("graphics");
			}
			if (shadowSourceRectangle.IsEmpty || shadowSourceRectangle.Width < 0 || shadowSourceRectangle.Height < 0)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidShadowRectangle"), "shadowRectangle");
			}
			if (shadowDepth < 1 || shadowDepth > 12)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidShadowDepth"), "shadowDepth");
			}
			if (lightSourceIntensity <= 0f || lightSourceIntensity > 1f)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidLightSource"), "lightSourceIntensity");
			}
			Rectangle rectangle = shadowSourceRectangle;
			Size empty = Size.Empty;
			if ((lightSourcePosition & LightSourcePosition.Center) > (LightSourcePosition)0)
			{
				rectangle.Inflate(shadowDepth, shadowDepth);
			}
			if ((lightSourcePosition & LightSourcePosition.Left) > (LightSourcePosition)0)
			{
				empty.Width += shadowDepth + 1;
			}
			else if ((lightSourcePosition & LightSourcePosition.Right) > (LightSourcePosition)0)
			{
				empty.Width -= shadowDepth + 1;
			}
			if ((lightSourcePosition & LightSourcePosition.Top) > (LightSourcePosition)0)
			{
				empty.Height += shadowDepth + 1;
			}
			else if ((lightSourcePosition & LightSourcePosition.Bottom) > (LightSourcePosition)0)
			{
				empty.Height -= shadowDepth + 1;
			}
			rectangle.Offset(empty.Width, empty.Height);
			GraphicsContainer container = graphics.BeginContainer();
			GraphicsPath graphicsPath = new GraphicsPath();
			if (roundEdges)
			{
				graphicsPath.AddPath(GetRoundedRectanglePath(shadowSourceRectangle, 8), connect: true);
			}
			else
			{
				graphicsPath.AddRectangle(shadowSourceRectangle);
			}
			try
			{
				using Region region = new Region(graphicsPath);
				graphics.SmoothingMode = SmoothingMode.AntiAlias;
				graphics.ExcludeClip(region);
				Color color = Color.FromArgb(Convert.ToInt32(40f * lightSourceIntensity), baseColor);
				int num = Math.Max(40 / shadowDepth, 2);
				for (int i = 0; i < shadowDepth; i++)
				{
					rectangle.Inflate(-1, -1);
					using (Brush brush = new SolidBrush(color))
					{
						using GraphicsPath graphicsPath2 = new GraphicsPath();
						if (roundEdges)
						{
							graphicsPath2.AddPath(GetRoundedRectanglePath(rectangle, 8), connect: true);
						}
						else
						{
							graphicsPath2.AddRectangle(rectangle);
						}
						graphics.FillPath(brush, graphicsPath2);
					}
					color = Color.FromArgb(color.A + num, color.R, color.G, color.B);
				}
			}
			finally
			{
				graphics.EndContainer(container);
			}
		}

		internal static void DrawDesignerBackground(Graphics graphics, ActivityDesigner designer)
		{
			ActivityDesignerTheme designerTheme = designer.DesignerTheme;
			CompositeDesignerTheme compositeDesignerTheme = designerTheme as CompositeDesignerTheme;
			Rectangle bounds = designer.Bounds;
			Point location = bounds.Location;
			bounds.Location = Point.Empty;
			Matrix transform = graphics.Transform;
			graphics.TranslateTransform(location.X, location.Y);
			GraphicsPath designerPath = GetDesignerPath(designer, new Point(-location.X, -location.Y), Size.Empty, DesignerEdges.None);
			RectangleF bounds2 = designerPath.GetBounds();
			Rectangle rectangle = new Rectangle(0, 0, Convert.ToInt32(Math.Ceiling(bounds2.Width)), Convert.ToInt32(Math.Ceiling(bounds2.Height)));
			graphics.FillPath(designerTheme.GetBackgroundBrush(rectangle), designerPath);
			bool flag = designer is CompositeActivityDesigner && ((CompositeActivityDesigner)designer).Expanded;
			if (compositeDesignerTheme != null && flag && compositeDesignerTheme.WatermarkImage != null)
			{
				Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
				rectangle.Inflate(-margin.Width, -margin.Height);
				DrawImage(graphics, compositeDesignerTheme.WatermarkImage, rectangle, new Rectangle(Point.Empty, compositeDesignerTheme.WatermarkImage.Size), compositeDesignerTheme.WatermarkAlignment, 0.25f, grayscale: false);
			}
			if (WorkflowTheme.CurrentTheme.AmbientTheme.ShowDesignerBorder)
			{
				graphics.DrawPath(designerTheme.BorderPen, designerPath);
			}
			designerPath.Dispose();
			graphics.Transform = transform;
		}

		internal static GraphicsPath GetDesignerPath(ActivityDesigner designer, bool enableRoundedCorners)
		{
			return GetDesignerPath(designer, Point.Empty, Size.Empty, DesignerEdges.None, enableRoundedCorners);
		}

		internal static GraphicsPath GetDesignerPath(ActivityDesigner designer, Point offset, Size inflate, DesignerEdges edgeToInflate)
		{
			return GetDesignerPath(designer, offset, inflate, edgeToInflate, enableRoundedCorners: true);
		}

		internal static GraphicsPath GetDesignerPath(ActivityDesigner designer, Point offset, Size inflate, DesignerEdges edgeToInflate, bool enableRoundedCorners)
		{
			GraphicsPath graphicsPath = new GraphicsPath();
			Rectangle bounds = designer.Bounds;
			bounds.Offset(offset);
			if ((edgeToInflate & DesignerEdges.Left) > DesignerEdges.None)
			{
				bounds.X -= inflate.Width;
				bounds.Width += inflate.Width;
			}
			if ((edgeToInflate & DesignerEdges.Right) > DesignerEdges.None)
			{
				bounds.Width += inflate.Width;
			}
			if ((edgeToInflate & DesignerEdges.Top) > DesignerEdges.None)
			{
				bounds.Y -= inflate.Height;
				bounds.Height += inflate.Height;
			}
			if ((edgeToInflate & DesignerEdges.Bottom) > DesignerEdges.None)
			{
				bounds.Height += inflate.Height;
			}
			if (designer == ActivityDesigner.GetSafeRootDesigner(designer.Activity.Site) && ((IWorkflowRootDesigner)designer).InvokingDesigner == null)
			{
				graphicsPath.AddRectangle(bounds);
			}
			else
			{
				ActivityDesignerTheme designerTheme = designer.DesignerTheme;
				if (enableRoundedCorners && designerTheme != null && designerTheme.DesignerGeometry == DesignerGeometry.RoundedRectangle)
				{
					graphicsPath.AddPath(GetRoundedRectanglePath(bounds, 8), connect: true);
				}
				else
				{
					graphicsPath.AddRectangle(bounds);
				}
			}
			return graphicsPath;
		}

		internal static void DrawInvalidDesignerIndicator(Graphics graphics, ActivityDesigner activityDesigner)
		{
			Rectangle bounds = activityDesigner.Bounds;
			graphics.DrawRectangle(Pens.Red, bounds);
			graphics.DrawLine(Pens.Red, bounds.Left, bounds.Top, bounds.Right, bounds.Bottom);
			graphics.DrawLine(Pens.Red, bounds.Right, bounds.Top, bounds.Left, bounds.Bottom);
		}

		internal static void DrawConnectors(Graphics graphics, Pen pen, Point[] points, Size connectorCapSize, Size maxCapSize, LineAnchor startConnectorCap, LineAnchor endConnectorCap)
		{
			if (points.GetLength(0) < 2)
			{
				return;
			}
			GraphicsPath graphicsPath = null;
			float capinset = 0f;
			if (startConnectorCap != 0)
			{
				Point[] array = new Point[2]
				{
					points[0],
					points[1]
				};
				int num = ((array[0].Y == array[1].Y) ? connectorCapSize.Width : connectorCapSize.Height);
				num += num % 2;
				num = Math.Min(Math.Min(num, maxCapSize.Width), maxCapSize.Height);
				graphicsPath = GetLineCap(startConnectorCap, num, out capinset);
				if (graphicsPath != null && (int)startConnectorCap % 2 == 0 && (array[0].X == array[1].X || array[0].Y == array[1].Y))
				{
					Matrix transform = graphics.Transform;
					graphics.TranslateTransform(array[0].X, array[0].Y);
					if (array[0].Y == array[1].Y)
					{
						graphics.RotateTransform((array[0].X < array[1].X) ? 90f : 270f);
					}
					else
					{
						graphics.RotateTransform((array[0].Y < array[1].Y) ? 180f : 0f);
					}
					using (Brush brush = new SolidBrush(pen.Color))
					{
						graphics.FillPath(brush, graphicsPath);
						graphics.DrawPath(pen, graphicsPath);
					}
					graphics.Transform = ((transform != null) ? transform : new Matrix());
				}
			}
			GraphicsPath graphicsPath2 = null;
			float capinset2 = 0f;
			if (endConnectorCap != 0)
			{
				Point[] array2 = new Point[2]
				{
					points[points.GetLength(0) - 2],
					points[points.GetLength(0) - 1]
				};
				int num2 = ((array2[0].Y == array2[1].Y) ? connectorCapSize.Width : connectorCapSize.Height);
				num2 += num2 % 2;
				num2 = Math.Min(Math.Min(num2, maxCapSize.Width), maxCapSize.Height);
				graphicsPath2 = GetLineCap(endConnectorCap, num2, out capinset2);
				if (graphicsPath2 != null && (int)endConnectorCap % 2 == 0 && (array2[0].X == array2[1].X || array2[0].Y == array2[1].Y))
				{
					Matrix transform2 = graphics.Transform;
					graphics.TranslateTransform(array2[1].X, array2[1].Y);
					if (array2[0].Y == array2[1].Y)
					{
						graphics.RotateTransform((array2[0].X < array2[1].X) ? 270f : 90f);
					}
					else
					{
						graphics.RotateTransform((array2[0].Y < array2[1].Y) ? 0f : 180f);
					}
					using (Brush brush2 = new SolidBrush(pen.Color))
					{
						graphics.FillPath(brush2, graphicsPath2);
						graphics.DrawPath(pen, graphicsPath2);
					}
					graphics.Transform = ((transform2 != null) ? transform2 : new Matrix());
				}
			}
			if (graphicsPath != null)
			{
				CustomLineCap customLineCap = new CustomLineCap(null, graphicsPath);
				customLineCap.WidthScale = 1f / pen.Width;
				customLineCap.BaseInset = capinset;
				pen.CustomStartCap = customLineCap;
			}
			if (graphicsPath2 != null)
			{
				CustomLineCap customLineCap2 = new CustomLineCap(null, graphicsPath2);
				customLineCap2.WidthScale = 1f / pen.Width;
				customLineCap2.BaseInset = capinset2;
				pen.CustomEndCap = customLineCap2;
			}
			graphics.DrawLines(pen, points);
			if (graphicsPath != null)
			{
				CustomLineCap customStartCap = pen.CustomStartCap;
				pen.StartCap = LineCap.Flat;
				customStartCap.Dispose();
			}
			if (graphicsPath2 != null)
			{
				CustomLineCap customEndCap = pen.CustomEndCap;
				pen.EndCap = LineCap.Flat;
				customEndCap.Dispose();
			}
		}

		internal static GraphicsPath GetLineCap(LineAnchor lineCap, int capsize, out float capinset)
		{
			capinset = 0f;
			capinset = capsize;
			Size size = new Size(capsize, capsize);
			GraphicsPath graphicsPath = new GraphicsPath();
			switch (lineCap)
			{
			case LineAnchor.Arrow:
			case LineAnchor.ArrowAnchor:
			{
				int radius = size.Height / 3;
				graphicsPath.AddLine(size.Width / 2, -size.Height, 0, 0);
				graphicsPath.AddLine(0, 0, -size.Width / 2, -size.Height);
				graphicsPath.AddLine(-size.Width / 2, -size.Height, 0, -size.Height + radius);
				graphicsPath.AddLine(0, -size.Height + radius, size.Width / 2, -size.Height);
				capinset = size.Height - radius;
				break;
			}
			case LineAnchor.Diamond:
			case LineAnchor.DiamondAnchor:
				graphicsPath.AddLine(0, -size.Height, size.Width / 2, -size.Height / 2);
				graphicsPath.AddLine(size.Width / 2, -size.Height / 2, 0, 0);
				graphicsPath.AddLine(0, 0, -size.Width / 2, -size.Height / 2);
				graphicsPath.AddLine(-size.Width / 2, -size.Height / 2, 0, -size.Height);
				break;
			case LineAnchor.Round:
			case LineAnchor.RoundAnchor:
				graphicsPath.AddEllipse(new Rectangle(-size.Width / 2, -size.Height, size.Width, size.Height));
				break;
			case LineAnchor.Rectangle:
			case LineAnchor.RectangleAnchor:
				graphicsPath.AddRectangle(new Rectangle(-size.Width / 2, -size.Height, size.Width, size.Height));
				break;
			case LineAnchor.RoundedRectangle:
			case LineAnchor.RoundedRectangleAnchor:
			{
				int radius = size.Height / 4;
				graphicsPath.AddPath(GetRoundedRectanglePath(new Rectangle(-size.Width / 2, -size.Height, size.Width, size.Height), radius), connect: true);
				break;
			}
			}
			graphicsPath.CloseFigure();
			return graphicsPath;
		}

		public static GraphicsPath GetRoundedRectanglePath(Rectangle rectangle, int radius)
		{
			if (rectangle.IsEmpty)
			{
				throw new ArgumentException(SR.GetString("Error_EmptyRectangleValue"), "rectangle");
			}
			if (radius <= 0)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidRadiusValue"), "radius");
			}
			int num = radius * 2;
			GraphicsPath graphicsPath = new GraphicsPath();
			graphicsPath.AddLine(rectangle.Left, rectangle.Bottom - radius, rectangle.Left, rectangle.Top + radius);
			graphicsPath.AddArc(rectangle.Left, rectangle.Top, num, num, 180f, 90f);
			graphicsPath.AddLine(rectangle.Left + radius, rectangle.Top, rectangle.Right - radius, rectangle.Top);
			graphicsPath.AddArc(rectangle.Right - num, rectangle.Top, num, num, 270f, 90f);
			graphicsPath.AddLine(rectangle.Right, rectangle.Top + radius, rectangle.Right, rectangle.Bottom - radius);
			graphicsPath.AddArc(rectangle.Right - num, rectangle.Bottom - num, num, num, 0f, 90f);
			graphicsPath.AddLine(rectangle.Right - radius, rectangle.Bottom, rectangle.Left + radius, rectangle.Bottom);
			graphicsPath.AddArc(rectangle.Left, rectangle.Bottom - num, num, num, 90f, 90f);
			graphicsPath.CloseFigure();
			return graphicsPath;
		}

		internal static GraphicsPath GetScrollIndicatorPath(Rectangle bounds, ScrollButton button)
		{
			GraphicsPath graphicsPath = new GraphicsPath();
			if (!bounds.IsEmpty)
			{
				switch (button)
				{
				case ScrollButton.Left:
				case ScrollButton.Right:
				{
					int num3 = bounds.Height + bounds.Height % 2;
					int num4 = num3 / 2;
					Size size2 = new Size(num3 / 2, num3);
					if (button == ScrollButton.Right)
					{
						graphicsPath.AddLine(bounds.Left + (bounds.Width - size2.Width) / 2, bounds.Top, bounds.Left + (bounds.Width - size2.Width) / 2, bounds.Top + size2.Height);
						graphicsPath.AddLine(bounds.Left + (bounds.Width - size2.Width) / 2, bounds.Top + size2.Height, bounds.Left + (bounds.Width - size2.Width) / 2 + size2.Width, bounds.Top + num4);
						graphicsPath.AddLine(bounds.Left + (bounds.Width - size2.Width) / 2 + size2.Width, bounds.Top + num4, bounds.Left + (bounds.Width - size2.Width) / 2, bounds.Top);
					}
					else
					{
						graphicsPath.AddLine(bounds.Left + (bounds.Width - size2.Width) / 2, bounds.Top + num4, bounds.Left + (bounds.Width - size2.Width) / 2 + size2.Width, bounds.Top + size2.Height);
						graphicsPath.AddLine(bounds.Left + (bounds.Width - size2.Width) / 2 + size2.Width, bounds.Top + size2.Height, bounds.Left + (bounds.Width - size2.Width) / 2 + size2.Width, bounds.Top);
						graphicsPath.AddLine(bounds.Left + (bounds.Width - size2.Width) / 2 + size2.Width, bounds.Top, bounds.Left + (bounds.Width - size2.Width) / 2, bounds.Top + num4);
					}
					break;
				}
				case ScrollButton.Up:
				case ScrollButton.Down:
				{
					int num = bounds.Width + bounds.Width % 2;
					int num2 = num / 2;
					Size size = new Size(num, num / 2);
					if (button == ScrollButton.Down)
					{
						graphicsPath.AddLine(bounds.Left, bounds.Top + (bounds.Height - size.Height) / 2, bounds.Left + size.Width, bounds.Top + (bounds.Height - size.Height) / 2);
						graphicsPath.AddLine(bounds.Left + size.Width, bounds.Top + (bounds.Height - size.Height) / 2, bounds.Left + num2, bounds.Top + (bounds.Height - size.Height) / 2 + size.Height);
						graphicsPath.AddLine(bounds.Left + num2, bounds.Top + (bounds.Height - size.Height) / 2 + size.Height, bounds.Left, bounds.Top + (bounds.Height - size.Height) / 2);
					}
					else
					{
						graphicsPath.AddLine(bounds.Left + num2, bounds.Top + (bounds.Height - size.Height) / 2, bounds.Left + size.Width, bounds.Top + (bounds.Height - size.Height) / 2 + size.Height);
						graphicsPath.AddLine(bounds.Left + size.Width, bounds.Top + (bounds.Height - size.Height) / 2 + size.Height, bounds.Left, bounds.Top + (bounds.Height - size.Height) / 2 + size.Height);
						graphicsPath.AddLine(bounds.Left, bounds.Top + (bounds.Height - size.Height) / 2 + size.Height, bounds.Left + num2, bounds.Top + (bounds.Height - size.Height) / 2);
					}
					break;
				}
				}
			}
			graphicsPath.CloseFigure();
			return graphicsPath;
		}

		internal static GraphicsPath[] GetPagePaths(Rectangle pageBounds, int pageFoldSize, DesignerContentAlignment foldAlignment)
		{
			GraphicsPath[] array = new GraphicsPath[2];
			switch (foldAlignment)
			{
			case DesignerContentAlignment.TopLeft:
				array[0] = new GraphicsPath();
				array[0].AddLine(pageBounds.Left, pageBounds.Top + pageFoldSize, pageBounds.Left + pageFoldSize, pageBounds.Top + pageFoldSize);
				array[0].AddLine(pageBounds.Left + pageFoldSize, pageBounds.Top + pageFoldSize, pageBounds.Left + pageFoldSize, pageBounds.Top);
				array[0].AddLine(pageBounds.Left + pageFoldSize, pageBounds.Top, pageBounds.Right, pageBounds.Top);
				array[0].AddLine(pageBounds.Right, pageBounds.Top, pageBounds.Right, pageBounds.Bottom);
				array[0].AddLine(pageBounds.Right, pageBounds.Bottom, pageBounds.Left, pageBounds.Bottom);
				array[0].AddLine(pageBounds.Left, pageBounds.Bottom, pageBounds.Left, pageBounds.Top + pageFoldSize);
				array[1] = new GraphicsPath();
				array[1].AddLine(pageBounds.Left, pageBounds.Top + pageFoldSize, pageBounds.Left + pageFoldSize, pageBounds.Top + pageFoldSize);
				array[1].AddLine(pageBounds.Left + pageFoldSize, pageBounds.Top + pageFoldSize, pageBounds.Left + pageFoldSize, pageBounds.Top);
				array[1].AddLine(pageBounds.Left + pageFoldSize, pageBounds.Top, pageBounds.Left, pageBounds.Top + pageFoldSize);
				break;
			case DesignerContentAlignment.BottomLeft:
				array[0] = new GraphicsPath();
				array[0].AddLine(pageBounds.Left, pageBounds.Top, pageBounds.Right, pageBounds.Top);
				array[0].AddLine(pageBounds.Right, pageBounds.Top, pageBounds.Right, pageBounds.Bottom);
				array[0].AddLine(pageBounds.Right, pageBounds.Bottom, pageBounds.Left + pageFoldSize, pageBounds.Bottom);
				array[0].AddLine(pageBounds.Left + pageFoldSize, pageBounds.Bottom, pageBounds.Left + pageFoldSize, pageBounds.Bottom - pageFoldSize);
				array[0].AddLine(pageBounds.Left + pageFoldSize, pageBounds.Bottom - pageFoldSize, pageBounds.Left, pageBounds.Bottom - pageFoldSize);
				array[0].AddLine(pageBounds.Left, pageBounds.Bottom - pageFoldSize, pageBounds.Left, pageBounds.Top);
				array[1] = new GraphicsPath();
				array[1].AddLine(pageBounds.Left + pageFoldSize, pageBounds.Bottom, pageBounds.Left + pageFoldSize, pageBounds.Bottom - pageFoldSize);
				array[1].AddLine(pageBounds.Left + pageFoldSize, pageBounds.Bottom - pageFoldSize, pageBounds.Left, pageBounds.Bottom - pageFoldSize);
				array[1].AddLine(pageBounds.Left, pageBounds.Bottom - pageFoldSize, pageBounds.Left + pageFoldSize, pageBounds.Bottom);
				break;
			case DesignerContentAlignment.TopRight:
				array[0] = new GraphicsPath();
				array[0].AddLine(pageBounds.Left, pageBounds.Top, pageBounds.Right - pageFoldSize, pageBounds.Top);
				array[0].AddLine(pageBounds.Right - pageFoldSize, pageBounds.Top, pageBounds.Right - pageFoldSize, pageBounds.Top + pageFoldSize);
				array[0].AddLine(pageBounds.Right - pageFoldSize, pageBounds.Top + pageFoldSize, pageBounds.Right, pageBounds.Top + pageFoldSize);
				array[0].AddLine(pageBounds.Right, pageBounds.Top + pageFoldSize, pageBounds.Right, pageBounds.Bottom);
				array[0].AddLine(pageBounds.Right, pageBounds.Bottom, pageBounds.Left, pageBounds.Bottom);
				array[0].AddLine(pageBounds.Left, pageBounds.Bottom, pageBounds.Left, pageBounds.Top);
				array[1] = new GraphicsPath();
				array[1].AddLine(pageBounds.Right - pageFoldSize, pageBounds.Top, pageBounds.Right - pageFoldSize, pageBounds.Top + pageFoldSize);
				array[1].AddLine(pageBounds.Right - pageFoldSize, pageBounds.Top + pageFoldSize, pageBounds.Right, pageBounds.Top + pageFoldSize);
				array[1].AddLine(pageBounds.Right, pageBounds.Top + pageFoldSize, pageBounds.Right - pageFoldSize, pageBounds.Top);
				break;
			case DesignerContentAlignment.BottomRight:
				array[0] = new GraphicsPath();
				array[0].AddLine(pageBounds.Left, pageBounds.Top, pageBounds.Right, pageBounds.Top);
				array[0].AddLine(pageBounds.Right, pageBounds.Top, pageBounds.Right, pageBounds.Bottom - pageFoldSize);
				array[0].AddLine(pageBounds.Right, pageBounds.Bottom - pageFoldSize, pageBounds.Right - pageFoldSize, pageBounds.Bottom - pageFoldSize);
				array[0].AddLine(pageBounds.Right - pageFoldSize, pageBounds.Bottom - pageFoldSize, pageBounds.Right - pageFoldSize, pageBounds.Bottom);
				array[0].AddLine(pageBounds.Right - pageFoldSize, pageBounds.Bottom, pageBounds.Left, pageBounds.Bottom);
				array[0].AddLine(pageBounds.Left, pageBounds.Bottom, pageBounds.Left, pageBounds.Top);
				array[1] = new GraphicsPath();
				array[1].AddLine(pageBounds.Right, pageBounds.Bottom - pageFoldSize, pageBounds.Right - pageFoldSize, pageBounds.Bottom - pageFoldSize);
				array[1].AddLine(pageBounds.Right - pageFoldSize, pageBounds.Bottom - pageFoldSize, pageBounds.Right - pageFoldSize, pageBounds.Bottom);
				array[1].AddLine(pageBounds.Right - pageFoldSize, pageBounds.Bottom, pageBounds.Right, pageBounds.Bottom - pageFoldSize);
				break;
			}
			return array;
		}
	}
	internal static class UnsafeNativeMethods
	{
		internal const int S_OK = 0;

		internal const int S_FALSE = 1;

		internal static readonly int GWL_EXSTYLE = -20;

		internal static readonly int WS_EX_LAYOUTRTL = 4194304;

		[DllImport("user32", CharSet = CharSet.Auto, SetLastError = true)]
		internal static extern int GetWindowLong(IntPtr hWnd, int nIndex);
	}
	internal static class DesignerHelpers
	{
		private static readonly string WorkflowDesignerSubKey = "Workflow Designer";

		internal const string DeclarativeRulesRef = "System.Workflow.Activities.Rules.RuleConditionReference, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";

		internal const string SequentialWorkflowTypeRef = "System.Workflow.Activities.SequentialWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";

		internal const string StateMachineWorkflowTypeRef = "System.Workflow.Activities.StateMachineWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";

		internal const string EventHandlersTypeRef = "System.Workflow.Activities.EventHandlersActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";

		internal const string IfElseBranchTypeRef = "System.Workflow.Activities.IfElseBranchActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";

		internal const string CodeActivityTypeRef = "System.Workflow.Activities.CodeActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";

		private static bool ShowingMenu = false;

		internal static string DesignerPerUserRegistryKey => Helpers.PerUserRegistryKey + "\\" + WorkflowDesignerSubKey;

		internal static Point SnapToGrid(Point location)
		{
			AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
			if (ambientTheme.ShowGrid)
			{
				Size gridSize = WorkflowTheme.CurrentTheme.AmbientTheme.GridSize;
				gridSize.Width /= 2;
				gridSize.Height /= 2;
				location.X = location.X / gridSize.Width * gridSize.Width + ((location.X % gridSize.Width > gridSize.Width / 2) ? gridSize.Width : 0);
				location.Y = location.Y / gridSize.Height * gridSize.Height + ((location.Y % gridSize.Height > gridSize.Height / 2) ? gridSize.Height : 0);
			}
			return location;
		}

		internal static bool AreAssociatedDesignersMovable(ICollection components)
		{
			foreach (object component in components)
			{
				Activity activity = component as Activity;
				if (activity == null)
				{
					activity = ((component is HitTestInfo { AssociatedDesigner: not null } hitTestInfo) ? hitTestInfo.AssociatedDesigner.Activity : null);
				}
				ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
				if (designer != null && designer.IsLocked)
				{
					return false;
				}
			}
			return true;
		}

		internal static Activity GetNextSelectableActivity(Activity currentActivity)
		{
			CompositeActivityDesigner compositeActivityDesigner = ActivityDesigner.GetDesigner(currentActivity)?.ParentDesigner;
			if (compositeActivityDesigner == null)
			{
				return null;
			}
			DesignerNavigationDirection direction = ((compositeActivityDesigner is ParallelActivityDesigner || compositeActivityDesigner is ActivityPreviewDesigner) ? DesignerNavigationDirection.Right : DesignerNavigationDirection.Down);
			Activity activity = null;
			object nextSelectableObject = compositeActivityDesigner.GetNextSelectableObject(currentActivity, direction);
			while (activity == null && nextSelectableObject != null && nextSelectableObject != currentActivity)
			{
				activity = nextSelectableObject as Activity;
				nextSelectableObject = compositeActivityDesigner.GetNextSelectableObject(nextSelectableObject, direction);
			}
			if (activity == null)
			{
				direction = ((!(compositeActivityDesigner is ParallelActivityDesigner) && !(compositeActivityDesigner is ActivityPreviewDesigner)) ? DesignerNavigationDirection.Up : DesignerNavigationDirection.Left);
				nextSelectableObject = compositeActivityDesigner.GetNextSelectableObject(currentActivity, direction);
				while (activity == null && nextSelectableObject != null && nextSelectableObject != currentActivity)
				{
					activity = nextSelectableObject as Activity;
					nextSelectableObject = compositeActivityDesigner.GetNextSelectableObject(nextSelectableObject, direction);
				}
			}
			if (activity == null)
			{
				activity = compositeActivityDesigner.Activity;
			}
			return activity;
		}

		internal static void SerializeDesignerStates(IDesignerHost designerHost, BinaryWriter writer)
		{
			writer.Write(designerHost.Container.Components.Count);
			foreach (IComponent component in designerHost.Container.Components)
			{
				writer.Write(component.Site.Name);
				int offset = (int)writer.BaseStream.Length;
				writer.Write(0);
				if (designerHost.GetDesigner(component) is ActivityDesigner activityDesigner)
				{
					int num = (int)writer.BaseStream.Length;
					((IPersistUIState)activityDesigner).SaveViewState(writer);
					writer.Seek(offset, SeekOrigin.Begin);
					writer.Write((int)writer.BaseStream.Length - num);
					writer.Seek(0, SeekOrigin.End);
				}
			}
		}

		internal static bool DeserializeDesignerStates(IDesignerHost designerHost, BinaryReader reader)
		{
			int num = reader.ReadInt32();
			bool result = num != designerHost.Container.Components.Count;
			for (int i = 0; i < num; i++)
			{
				string name = reader.ReadString();
				int num2 = reader.ReadInt32();
				if (designerHost.Container.Components[name] != null)
				{
					if (designerHost.GetDesigner(designerHost.Container.Components[name]) is ActivityDesigner activityDesigner)
					{
						((IPersistUIState)activityDesigner).LoadViewState(reader);
						continue;
					}
					result = true;
					reader.BaseStream.Position += num2;
				}
				else
				{
					result = true;
					reader.BaseStream.Position += num2;
				}
			}
			return result;
		}

		internal static void MakePropertiesReadOnly(IServiceProvider serviceProvider, object topComponent)
		{
			Hashtable hashtable = new Hashtable();
			Queue queue = new Queue();
			queue.Enqueue(topComponent);
			while (queue.Count > 0)
			{
				object obj = queue.Dequeue();
				if (hashtable[obj.GetHashCode()] != null)
				{
					continue;
				}
				hashtable[obj.GetHashCode()] = obj;
				TypeDescriptor.AddProvider(new ReadonlyTypeDescriptonProvider(TypeDescriptor.GetProvider(obj)), obj);
				PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(obj, new Attribute[1] { BrowsableAttribute.Yes });
				foreach (PropertyDescriptor item in properties)
				{
					if (item.PropertyType.IsPrimitive)
					{
						continue;
					}
					object value = item.GetValue(obj);
					if (value != null)
					{
						TypeConverter converter = TypeDescriptor.GetConverter(value);
						TypeDescriptorContext context = new TypeDescriptorContext(serviceProvider, item, obj);
						if (converter.GetPropertiesSupported(context))
						{
							TypeDescriptor.AddProvider(new ReadonlyTypeDescriptonProvider(TypeDescriptor.GetProvider(value)), value);
							queue.Enqueue(value);
						}
					}
				}
			}
		}

		internal static void UpdateSiteName(Activity activity, string newID)
		{
			if (activity == null)
			{
				throw new ArgumentException("activity");
			}
			string name = newID;
			if (Helpers.IsActivityLocked(activity))
			{
				name = InternalHelpers.GenerateQualifiedNameForLockedActivity(activity, newID);
			}
			((IComponent)activity).Site.Name = name;
			if (!(activity is CompositeActivity))
			{
				return;
			}
			Activity[] nestedActivities = Helpers.GetNestedActivities(activity as CompositeActivity);
			foreach (Activity activity2 in nestedActivities)
			{
				if (Helpers.IsActivityLocked(activity2))
				{
					Activity declaringActivity = Helpers.GetDeclaringActivity(activity2);
					((IComponent)activity2).Site.Name = ((IComponent)declaringActivity).Site.Name + "." + activity2.Name;
				}
			}
		}

		internal static DialogResult ShowMessage(IServiceProvider serviceProvider, string message, string title, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton)
		{
			IWin32Window win32Window = null;
			win32Window = ((!(serviceProvider.GetService(typeof(IUIService)) is IUIService iUIService)) ? Form.ActiveForm : iUIService.GetDialogOwnerWindow());
			Control control = win32Window as Control;
			MessageBoxOptions options = (MessageBoxOptions)0;
			if (win32Window != null)
			{
				if (control != null)
				{
					options = ((control.RightToLeft == RightToLeft.Yes) ? ((MessageBoxOptions)0) : ((MessageBoxOptions)0));
				}
				else if (win32Window.Handle != IntPtr.Zero)
				{
					int windowLong = UnsafeNativeMethods.GetWindowLong(win32Window.Handle, UnsafeNativeMethods.GWL_EXSTYLE);
					if (Marshal.GetLastWin32Error() == 0 && (windowLong & UnsafeNativeMethods.WS_EX_LAYOUTRTL) == UnsafeNativeMethods.WS_EX_LAYOUTRTL)
					{
						options = (MessageBoxOptions)0;
					}
				}
				return MessageBox.Show(win32Window, message, title, buttons, icon, defaultButton, options);
			}
			return MessageBox.Show(message, title, buttons, icon, defaultButton, options);
		}

		internal static void ShowHelpFromKeyword(IServiceProvider serviceProvider, string helpKeyword)
		{
			if (serviceProvider.GetService(typeof(IHelpService)) is IHelpService helpService)
			{
				helpService.ShowHelpFromKeyword(helpKeyword);
			}
			else
			{
				ShowError(serviceProvider, DR.GetString("NoHelpAvailable"));
			}
		}

		internal static void ShowError(IServiceProvider serviceProvider, string message)
		{
			ShowMessage(serviceProvider, message, DR.GetString("WorkflowDesignerTitle"), MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1);
		}

		internal static void ShowError(IServiceProvider serviceProvider, Exception e)
		{
			if (e != CheckoutException.Canceled)
			{
				while (e is TargetInvocationException && e.InnerException != null)
				{
					e = e.InnerException;
				}
				string text = e.Message;
				if (text == null || text.Length == 0)
				{
					text = e.ToString();
				}
				ShowMessage(serviceProvider, text, DR.GetString("WorkflowDesignerTitle"), MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1);
			}
		}

		internal static bool IsValidImageResource(DesignerTheme designerTheme, string directory, string path)
		{
			Image imageFromPath = GetImageFromPath(designerTheme, directory, path);
			bool result = imageFromPath != null;
			imageFromPath?.Dispose();
			return result;
		}

		internal static string GetRelativePath(string pathFrom, string pathTo)
		{
			Uri uri = new Uri(pathFrom);
			string text = Uri.UnescapeDataString(uri.MakeRelativeUri(new Uri(pathTo)).ToString());
			text = text.Replace(Path.AltDirectorySeparatorChar, Path.DirectorySeparatorChar);
			if (!text.Contains(Path.DirectorySeparatorChar.ToString()))
			{
				text = "." + Path.DirectorySeparatorChar + text;
			}
			return text;
		}

		internal static Image GetImageFromPath(DesignerTheme designerTheme, string directory, string path)
		{
			Bitmap bitmap = null;
			if (path.Contains(Path.DirectorySeparatorChar.ToString()) && directory.Length > 0)
			{
				string text = Uri.UnescapeDataString(new Uri(new Uri(directory), path).LocalPath);
				if (File.Exists(text))
				{
					try
					{
						bitmap = new Bitmap(text);
					}
					catch
					{
					}
				}
			}
			else if (designerTheme.DesignerType != null)
			{
				int num = path.LastIndexOf('.');
				if (num > 0)
				{
					string text2 = path.Substring(0, num);
					string text3 = path.Substring(num + 1);
					if (text2 != null && text2.Length > 0 && text3 != null && text3.Length > 0)
					{
						try
						{
							ResourceManager resourceManager = new ResourceManager(text2, designerTheme.DesignerType.Assembly);
							bitmap = resourceManager.GetObject(text3) as Bitmap;
						}
						catch
						{
						}
					}
				}
			}
			bitmap?.MakeTransparent(AmbientTheme.TransparentColor);
			return bitmap;
		}

		internal static DesignerVerb[] GetDesignerActionVerbs(ActivityDesigner designer, ReadOnlyCollection<DesignerAction> designerActions)
		{
			List<DesignerVerb> list = new List<DesignerVerb>();
			for (int i = 0; i < designerActions.Count; i++)
			{
				DesignerVerb designerVerb = new DesignerVerb(designerActions[i].Text, new EventHandler(OnExecuteDesignerAction).Invoke, new CommandID(WorkflowMenuCommands.MenuGuid, WorkflowMenuCommands.VerbGroupDesignerActions + i));
				designerVerb.Properties[DesignerUserDataKeys.DesignerAction] = designerActions[i];
				designerVerb.Properties[DesignerUserDataKeys.Designer] = designer;
				list.Add(designerVerb);
			}
			return list.ToArray();
		}

		internal static void ShowDesignerVerbs(ActivityDesigner designer, Point location, ICollection<DesignerVerb> designerVerbs)
		{
			if (ShowingMenu || designerVerbs.Count == 0)
			{
				return;
			}
			if (!(designer.Activity.Site.GetService(typeof(IMenuCommandService)) is IMenuCommandService menuCommandService))
			{
				throw new Exception(SR.GetString("General_MissingService", typeof(IMenuCommandService).FullName));
			}
			try
			{
				foreach (DesignerVerb designerVerb in designerVerbs)
				{
					menuCommandService.AddCommand(designerVerb);
				}
				ShowingMenu = true;
				menuCommandService.ShowContextMenu(WorkflowMenuCommands.DesignerActionsMenu, location.X - 2, location.Y + 1);
			}
			finally
			{
				ShowingMenu = false;
				foreach (DesignerVerb designerVerb2 in designerVerbs)
				{
					menuCommandService.RemoveCommand(designerVerb2);
				}
			}
		}

		private static void OnExecuteDesignerAction(object sender, EventArgs e)
		{
			if (sender is DesignerVerb designerVerb && designerVerb.Properties[DesignerUserDataKeys.DesignerAction] is DesignerAction designerAction && designerVerb.Properties[DesignerUserDataKeys.Designer] is ActivityDesigner activityDesigner)
			{
				activityDesigner.OnExecuteDesignerAction(designerAction);
			}
		}

		internal static string CreateUniqueMethodName(IComponent component, string propName, Type delegateType)
		{
			IServiceProvider site = component.Site;
			if (site == null)
			{
				throw new ArgumentException("component");
			}
			if (!(site.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
			}
			ITypeProvider typeProvider = (ITypeProvider)site.GetService(typeof(ITypeProvider));
			if (typeProvider == null)
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(ITypeProvider).FullName));
			}
			string text = null;
			if (site.GetService(typeof(IReferenceService)) is IReferenceService referenceService)
			{
				text = referenceService.GetName(component);
			}
			else
			{
				ISite site2 = component.Site;
				if (site2 != null)
				{
					text = site2.Name;
				}
			}
			if (text == null)
			{
				text = component.GetType().Name;
			}
			text = text.Replace('.', '_');
			text = text.Replace('/', '_') + "_" + propName;
			text = text.Replace('(', '_');
			text = text.Replace(')', '_');
			text = text.Replace(" ", "");
			DelegateTypeInfo delegateTypeInfo = new DelegateTypeInfo(delegateType);
			if (!(designerHost.RootComponent is Activity activity))
			{
				Activity activity2 = component as Activity;
				throw new InvalidOperationException(SR.GetString("Error_CantCreateMethod", (activity2 != null) ? activity2.QualifiedName : string.Empty));
			}
			Type dataSourceClass = Helpers.GetDataSourceClass(activity, site);
			if (dataSourceClass == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_CantCreateMethod", activity.QualifiedName));
			}
			BindingFlags bindingAttr = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy;
			MethodInfo[] methods = dataSourceClass.GetMethods(bindingAttr);
			ArrayList arrayList = new ArrayList();
			MethodInfo[] array = methods;
			foreach (MethodInfo methodInfo in array)
			{
				if (methodInfo.GetParameters().Length != delegateTypeInfo.Parameters.Length)
				{
					continue;
				}
				bool flag = true;
				for (int j = 0; j < delegateTypeInfo.Parameters.Length; j++)
				{
					ParameterInfo parameterInfo = methodInfo.GetParameters()[j];
					CodeParameterDeclarationExpression codeParameterDeclarationExpression = delegateTypeInfo.Parameters[j];
					FieldDirection direction = codeParameterDeclarationExpression.Direction;
					if ((direction == FieldDirection.In && !parameterInfo.IsIn) || (direction == FieldDirection.Out && !parameterInfo.IsOut) || (direction == FieldDirection.Ref && (!parameterInfo.IsIn || !parameterInfo.IsOut)) || !Helpers.TypesEqual(codeParameterDeclarationExpression.Type, parameterInfo.ParameterType))
					{
						flag = false;
						break;
					}
				}
				if (flag)
				{
					arrayList.Add(methodInfo.Name);
				}
			}
			int num = 0;
			bool flag2 = true;
			string text2 = text;
			MemberInfo[] members = dataSourceClass.GetMembers();
			while (flag2 && num < int.MaxValue)
			{
				flag2 = false;
				foreach (string item in arrayList)
				{
					if (string.Compare(item, text2, StringComparison.OrdinalIgnoreCase) == 0)
					{
						flag2 = true;
						break;
					}
				}
				if (!flag2)
				{
					MemberInfo[] array2 = members;
					foreach (MemberInfo memberInfo in array2)
					{
						if (!(memberInfo is MethodInfo) && string.Compare(memberInfo.Name, text2, StringComparison.OrdinalIgnoreCase) == 0)
						{
							flag2 = true;
							break;
						}
					}
				}
				if (!flag2)
				{
					MethodInfo method = designerHost.RootComponent.GetType().GetMethod(text2, bindingAttr, null, delegateTypeInfo.ParameterTypes, null);
					if (method != null && !method.IsPrivate)
					{
						flag2 = true;
					}
				}
				if (flag2)
				{
					string text3 = text;
					int num2 = ++num;
					text2 = text3 + "_" + num2.ToString(CultureInfo.InvariantCulture);
				}
			}
			return text2;
		}

		internal static string GenerateUniqueIdentifier(IServiceProvider serviceProvider, string baseIdentifier, string[] existingNames)
		{
			CodeDomProvider codeDomProvider = null;
			if (serviceProvider != null)
			{
				codeDomProvider = serviceProvider.GetService(typeof(CodeDomProvider)) as CodeDomProvider;
				if (codeDomProvider == null && serviceProvider.GetService(typeof(IIdentifierCreationService)) is IdentifierCreationService identifierCreationService)
				{
					codeDomProvider = identifierCreationService.Provider;
				}
			}
			if (codeDomProvider != null)
			{
				baseIdentifier = codeDomProvider.CreateValidIdentifier(baseIdentifier);
			}
			baseIdentifier = baseIdentifier.Replace('.', '_');
			baseIdentifier = baseIdentifier.Replace('/', '_');
			baseIdentifier = baseIdentifier.Replace('(', '_');
			baseIdentifier = baseIdentifier.Replace(')', '_');
			baseIdentifier = baseIdentifier.Replace(" ", "");
			ArrayList arrayList = new ArrayList(existingNames);
			int num = 1;
			string text = string.Format(CultureInfo.InvariantCulture, "{0}{1}", new object[2] { baseIdentifier, num });
			arrayList.Sort();
			while (arrayList.BinarySearch(text.ToLowerInvariant(), StringComparer.OrdinalIgnoreCase) >= 0)
			{
				text = string.Format(CultureInfo.InvariantCulture, "{0}{1}", new object[2] { baseIdentifier, num });
				num++;
			}
			return text;
		}

		internal static IDictionary<string, string> GetDeclarativeRules(Activity activity)
		{
			IDictionary<string, string> dictionary = new Dictionary<string, string>();
			Type type = Type.GetType("System.Workflow.Activities.Rules.RuleConditionReference, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", throwOnError: false);
			if (type != null)
			{
				PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(activity);
				foreach (PropertyDescriptor item in properties)
				{
					object value = item.GetValue(activity);
					if (value == null || !type.IsAssignableFrom(value.GetType()))
					{
						continue;
					}
					PropertyDescriptor propertyDescriptor2 = TypeDescriptor.GetConverter(value).GetProperties(new TypeDescriptorContext(activity.Site, null, value), value)["ConditionName"];
					PropertyDescriptor propertyDescriptor3 = TypeDescriptor.GetConverter(value).GetProperties(new TypeDescriptorContext(activity.Site, null, value), value)["Expression"];
					if (propertyDescriptor2 == null || propertyDescriptor3 == null)
					{
						continue;
					}
					string text = propertyDescriptor2.GetValue(value) as string;
					object value2 = propertyDescriptor3.GetValue(value);
					if (!string.IsNullOrEmpty(text) && !dictionary.ContainsKey(text))
					{
						string text2 = ((value2 != null) ? (propertyDescriptor3.Converter.ConvertTo(new TypeDescriptorContext(activity.Site, null, value), Thread.CurrentThread.CurrentUICulture, value2, typeof(string)) as string) : null);
						if (text2 == null)
						{
							text2 = string.Empty;
						}
						dictionary.Add(text, text2);
					}
				}
			}
			return dictionary;
		}

		internal static void RefreshDesignerActions(IServiceProvider serviceProvider)
		{
			if (serviceProvider == null || !(serviceProvider.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
			{
				return;
			}
			foreach (object component in designerHost.Container.Components)
			{
				if (component is Activity activity)
				{
					ActivityDesigner.GetDesigner(activity)?.RefreshDesignerActions();
				}
			}
		}

		internal static bool AreComponentsRemovable(ICollection components)
		{
			if (components == null)
			{
				throw new ArgumentNullException("components");
			}
			foreach (object component in components)
			{
				Activity activity = component as Activity;
				ConnectorHitTestInfo connectorHitTestInfo = component as ConnectorHitTestInfo;
				if (activity == null && connectorHitTestInfo == null)
				{
					return false;
				}
				if (activity != null)
				{
					ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
					if (designer != null && designer.IsLocked)
					{
						return false;
					}
				}
				if (connectorHitTestInfo != null && !(connectorHitTestInfo.AssociatedDesigner is FreeformActivityDesigner))
				{
					return false;
				}
			}
			return true;
		}
	}
	internal static class DesignerUserDataKeys
	{
		internal static readonly Guid DesignerAction = new Guid("3BD4A275-FCCD-49f0-B617-765CE63B4340");

		internal static readonly Guid DesignerVerb = new Guid("07E3C73A-5908-4ed1-8578-D1423B7481A2");

		internal static readonly Guid Image = new Guid("B4C2B905-A6D3-4cd6-A91A-5005A02B9676");

		internal static readonly Guid ViewActivity = new Guid("06B3FD23-2309-40a9-917E-831B9E160DB0");

		internal static readonly Guid PreviewActivity = new Guid("109316ED-A8A5-489f-ABD3-460E5C4C0529");

		internal static readonly Guid DesignerView = new Guid("94B8FC95-2D8A-4e27-93D5-73FA4BEBC315");

		internal static readonly Guid TemplateActivityIndex = new Guid("8EA852B4-48FC-45d3-91BE-CA4CF23E9114");

		internal static readonly Guid MoveBranchKey = new Guid("D43D31AA-3C43-4a65-8071-51288B491FBA");

		internal static readonly Guid Designer = new Guid("CF82A1DD-FD3E-4feb-8AED-EE1CAED551D7");

		internal static readonly Guid Activity = new Guid("10BDBBD7-8C63-46e8-B3B8-5006E70820B8");

		internal static readonly Guid ZOrderKey = new Guid("8F424588-5227-4273-A594-713454275670");
	}
	internal static class DesignerGeometryHelper
	{
		internal static DesignerEdges ClosestEdgeToPoint(Point point, Rectangle rect, DesignerEdges edgesToConsider)
		{
			List<double> list = new List<double>();
			List<DesignerEdges> list2 = new List<DesignerEdges>();
			if ((edgesToConsider & DesignerEdges.Left) > DesignerEdges.None)
			{
				list.Add(DistanceFromPointToLineSegment(point, new Point[2]
				{
					new Point(rect.Left, rect.Top),
					new Point(rect.Left, rect.Bottom)
				}));
				list2.Add(DesignerEdges.Left);
			}
			if ((edgesToConsider & DesignerEdges.Top) > DesignerEdges.None)
			{
				list.Add(DistanceFromPointToLineSegment(point, new Point[2]
				{
					new Point(rect.Left, rect.Top),
					new Point(rect.Right, rect.Top)
				}));
				list2.Add(DesignerEdges.Top);
			}
			if ((edgesToConsider & DesignerEdges.Right) > DesignerEdges.None)
			{
				list.Add(DistanceFromPointToLineSegment(point, new Point[2]
				{
					new Point(rect.Right, rect.Top),
					new Point(rect.Right, rect.Bottom)
				}));
				list2.Add(DesignerEdges.Right);
			}
			if ((edgesToConsider & DesignerEdges.Bottom) > DesignerEdges.None)
			{
				list.Add(DistanceFromPointToLineSegment(point, new Point[2]
				{
					new Point(rect.Left, rect.Bottom),
					new Point(rect.Right, rect.Bottom)
				}));
				list2.Add(DesignerEdges.Bottom);
			}
			if (list.Count > 0)
			{
				double num = list[0];
				for (int i = 1; i < list.Count; i++)
				{
					num = Math.Min(num, list[i]);
				}
				return list2[list.IndexOf(num)];
			}
			return DesignerEdges.None;
		}

		internal static Rectangle RectangleFromLineSegments(Point[] segments)
		{
			if (segments.Length == 0)
			{
				return Rectangle.Empty;
			}
			Point location = segments[0];
			Point point = segments[0];
			for (int i = 0; i < segments.Length; i++)
			{
				Point point2 = segments[i];
				location.X = Math.Min(location.X, point2.X);
				location.Y = Math.Min(location.Y, point2.Y);
				point.X = Math.Max(point.X, point2.X);
				point.Y = Math.Max(point.Y, point2.Y);
			}
			Rectangle result = new Rectangle(location, new Size(point.X - location.X, point.Y - location.Y));
			result.Inflate(4, 4);
			return result;
		}

		internal static bool PointOnLineSegment(Point point, Point[] line, Size hitAreaSize)
		{
			Rectangle rectangle = RectangleFromLineSegments(line);
			rectangle.Inflate(hitAreaSize);
			if (rectangle.Contains(point))
			{
				double num = DistanceFromPointToLineSegment(point, line);
				if (num < (double)hitAreaSize.Width && num < (double)hitAreaSize.Height)
				{
					return true;
				}
			}
			return false;
		}

		internal static double DistanceFromPointToRectangle(Point point, Rectangle rect)
		{
			List<double> list = new List<double>();
			list.Add(DistanceBetweenPoints(point, new Point(rect.Left, rect.Top)));
			list.Add(DistanceBetweenPoints(point, new Point(rect.Left + rect.Width / 2, rect.Top)));
			list.Add(DistanceBetweenPoints(point, new Point(rect.Right, rect.Top)));
			list.Add(DistanceBetweenPoints(point, new Point(rect.Right, rect.Top + rect.Height / 2)));
			list.Add(DistanceBetweenPoints(point, new Point(rect.Right, rect.Bottom)));
			list.Add(DistanceBetweenPoints(point, new Point(rect.Right + rect.Width / 2, rect.Bottom)));
			list.Add(DistanceBetweenPoints(point, new Point(rect.Left, rect.Bottom)));
			list.Add(DistanceBetweenPoints(point, new Point(rect.Left, rect.Bottom - rect.Height / 2)));
			double num = list[0];
			for (int i = 1; i < list.Count; i++)
			{
				num = Math.Min(num, list[i]);
			}
			return num;
		}

		internal static double DistanceFromPointToLineSegment(Point point, Point[] line)
		{
			int num = Math.Abs((point.Y - line[0].Y) * (line[1].X - line[0].X) - (point.X - line[0].X) * (line[1].Y - line[0].Y));
			return Math.Sqrt(Math.Pow(num, 2.0) / (Math.Pow(line[1].X - line[0].X, 2.0) + Math.Pow(line[1].Y - line[0].Y, 2.0)));
		}

		internal static float SlopeOfLineSegment(Point start, Point end)
		{
			if (start.X == end.X)
			{
				return float.MaxValue;
			}
			if (start.Y == end.Y)
			{
				return 0f;
			}
			return (float)(end.Y - start.Y) / (float)(end.X - start.X);
		}

		internal static double DistanceBetweenPoints(Point point1, Point point2)
		{
			return Math.Sqrt(Math.Pow(point2.X - point1.X, 2.0) + Math.Pow(point2.Y - point1.Y, 2.0));
		}

		internal static double DistanceOfLineSegments(Point[] segments)
		{
			double num = 0.0;
			for (int i = 1; i < segments.Length; i++)
			{
				num += DistanceBetweenPoints(segments[i - 1], segments[i]);
			}
			return num;
		}

		internal static Point MidPointOfLineSegment(Point point1, Point point2)
		{
			return new Point((point1.X + point2.X) / 2, (point1.Y + point2.Y) / 2);
		}
	}
	internal sealed class IDPropertyDescriptor : DynamicPropertyDescriptor
	{
		internal IDPropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor actualPropDesc)
			: base(serviceProvider, actualPropDesc)
		{
		}

		public override bool CanResetValue(object component)
		{
			return false;
		}

		public override void SetValue(object component, object value)
		{
			if (component is Activity activity)
			{
				ISite site = PropertyDescriptorUtils.GetSite(base.ServiceProvider, component);
				if (site == null)
				{
					throw new Exception(SR.GetString("General_MissingService", typeof(ISite).FullName));
				}
				if (!(site.GetService(typeof(IIdentifierCreationService)) is IIdentifierCreationService identifierCreationService))
				{
					throw new Exception(SR.GetString("General_MissingService", typeof(IIdentifierCreationService).FullName));
				}
				string text = value as string;
				identifierCreationService.ValidateIdentifier(activity, text);
				DesignerHelpers.UpdateSiteName(activity, text);
				base.SetValue(component, value);
			}
		}
	}
	internal sealed class NamePropertyDescriptor : DynamicPropertyDescriptor
	{
		public override string Category => SR.GetString("Activity");

		public override string Description => SR.GetString("RootActivityNameDesc");

		internal NamePropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor actualPropDesc)
			: base(serviceProvider, actualPropDesc)
		{
		}

		public override void SetValue(object component, object value)
		{
			if (!(component is Activity activity))
			{
				return;
			}
			if (!(activity.Site.GetService(typeof(IIdentifierCreationService)) is IIdentifierCreationService identifierCreationService))
			{
				throw new Exception(SR.GetString("General_MissingService", typeof(IIdentifierCreationService).FullName));
			}
			string text = value as string;
			identifierCreationService.ValidateIdentifier(activity, text);
			bool ignoreCase = CompilerHelpers.GetSupportedLanguage(activity.Site) == SupportedLanguages.VB;
			Type dataSourceClass = Helpers.GetDataSourceClass(Helpers.GetRootActivity(activity), activity.Site);
			if (dataSourceClass != null)
			{
				MemberInfo memberInfo = ActivityBindPropertyDescriptor.FindMatchingMember(text, dataSourceClass, ignoreCase);
				if (memberInfo != null)
				{
					throw new ArgumentException(SR.GetString("Error_ActivityNameExist", text));
				}
			}
			if (!(activity.Site.GetService(typeof(IMemberCreationService)) is IMemberCreationService memberCreationService))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IMemberCreationService).FullName));
			}
			if (!(activity.Site.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
			}
			string text2 = text;
			int num = designerHost.RootComponentClassName.LastIndexOf('.');
			if (num > 0)
			{
				text2 = designerHost.RootComponentClassName.Substring(0, num + 1) + text;
			}
			memberCreationService.UpdateTypeName(((Activity)designerHost.RootComponent).GetValue(WorkflowMarkupSerializer.XClassProperty) as string, text2);
			((Activity)designerHost.RootComponent).SetValue(WorkflowMarkupSerializer.XClassProperty, text2);
			base.SetValue(component, value);
			DesignerHelpers.UpdateSiteName((Activity)designerHost.RootComponent, text);
		}

		public override bool CanResetValue(object component)
		{
			return false;
		}
	}
	internal static class PropertyDescriptorFilter
	{
		internal static PropertyDescriptorCollection FilterProperties(IServiceProvider serviceProvider, object propertyOwner, PropertyDescriptorCollection props)
		{
			Hashtable hashtable = new Hashtable();
			foreach (PropertyDescriptor prop in props)
			{
				if (!hashtable.ContainsKey(prop.Name))
				{
					hashtable.Add(prop.Name, prop);
				}
			}
			FilterProperties(serviceProvider, propertyOwner, hashtable);
			PropertyDescriptor[] array = new PropertyDescriptor[hashtable.Count];
			hashtable.Values.CopyTo(array, 0);
			return new PropertyDescriptorCollection(array);
		}

		internal static void FilterProperties(IServiceProvider serviceProvider, object propertyOwner, IDictionary props)
		{
			InternalFilterProperties(serviceProvider, propertyOwner, props);
			if (propertyOwner == null)
			{
				return;
			}
			foreach (PropertyDescriptor propertiesForEvent in GetPropertiesForEvents(serviceProvider, propertyOwner))
			{
				if (!props.Contains(propertiesForEvent.Name))
				{
					props.Add(propertiesForEvent.Name, propertiesForEvent);
				}
			}
		}

		private static void InternalFilterProperties(IServiceProvider serviceProvider, object propertyOwner, IDictionary properties)
		{
			Hashtable hashtable = new Hashtable();
			foreach (object key in properties.Keys)
			{
				PropertyDescriptor propertyDescriptor = properties[key] as PropertyDescriptor;
				if (string.Equals(propertyDescriptor.Name, "Name", StringComparison.Ordinal) && typeof(Activity).IsAssignableFrom(propertyDescriptor.ComponentType))
				{
					if (propertyOwner is Activity activity && activity == Helpers.GetRootActivity(activity))
					{
						hashtable[key] = new NamePropertyDescriptor(serviceProvider, propertyDescriptor);
					}
					else
					{
						hashtable[key] = new IDPropertyDescriptor(serviceProvider, propertyDescriptor);
					}
				}
				else if (!(propertyDescriptor is ActivityBindPropertyDescriptor) && ActivityBindPropertyDescriptor.IsBindableProperty(propertyDescriptor))
				{
					if (typeof(Type).IsAssignableFrom(propertyDescriptor.PropertyType) && !(propertyDescriptor is ParameterInfoBasedPropertyDescriptor))
					{
						propertyDescriptor = new TypePropertyDescriptor(serviceProvider, propertyDescriptor);
					}
					hashtable[key] = new ActivityBindPropertyDescriptor(serviceProvider, propertyDescriptor, propertyOwner);
				}
				else if (typeof(Type).IsAssignableFrom(propertyDescriptor.PropertyType))
				{
					hashtable[key] = new TypePropertyDescriptor(serviceProvider, propertyDescriptor);
				}
				else
				{
					hashtable[key] = new DynamicPropertyDescriptor(serviceProvider, propertyDescriptor);
				}
			}
			foreach (object key2 in hashtable.Keys)
			{
				properties[key2] = hashtable[key2];
			}
		}

		internal static PropertyDescriptorCollection GetPropertiesForEvents(IServiceProvider serviceProvider, object eventOwner)
		{
			List<PropertyDescriptor> list = new List<PropertyDescriptor>();
			if (serviceProvider.GetService(typeof(IEventBindingService)) is IEventBindingService eventBindingService)
			{
				foreach (EventDescriptor @event in TypeDescriptor.GetEvents(eventOwner))
				{
					if (@event.IsBrowsable)
					{
						PropertyDescriptor eventProperty = eventBindingService.GetEventProperty(@event);
						if (!(eventProperty is ActivityBindPropertyDescriptor) && ActivityBindPropertyDescriptor.IsBindableProperty(eventProperty))
						{
							list.Add(new ActivityBindPropertyDescriptor(serviceProvider, eventProperty, eventOwner));
						}
						else
						{
							list.Add(eventProperty);
						}
					}
				}
			}
			return new PropertyDescriptorCollection(list.ToArray());
		}
	}
	internal class ActivityBindPropertyDescriptor : DynamicPropertyDescriptor
	{
		private object propertyOwner;

		public override bool IsReadOnly => base.RealPropertyDescriptor.IsReadOnly;

		public override TypeConverter Converter
		{
			get
			{
				TypeConverter typeConverter = base.Converter;
				if (typeof(ActivityBindTypeConverter).IsAssignableFrom(typeConverter.GetType()))
				{
					return typeConverter;
				}
				return new ActivityBindTypeConverter();
			}
		}

		public override AttributeCollection Attributes
		{
			get
			{
				List<Attribute> list = new List<Attribute>();
				foreach (Attribute attribute in base.Attributes)
				{
					list.Add(attribute);
				}
				object editor = base.RealPropertyDescriptor.GetEditor(typeof(UITypeEditor));
				object obj = ((PropertyOwner != null) ? GetValue(PropertyOwner) : null);
				bool propertiesSupported = base.RealPropertyDescriptor.Converter.GetPropertiesSupported((PropertyOwner != null) ? new TypeDescriptorContext(base.ServiceProvider, base.RealPropertyDescriptor, PropertyOwner) : null);
				if (((editor == null && !propertiesSupported) || obj is ActivityBind) && !IsReadOnly)
				{
					list.Add(new EditorAttribute(typeof(BindUITypeEditor), typeof(UITypeEditor)));
				}
				return new AttributeCollection(list.ToArray());
			}
		}

		internal object PropertyOwner => propertyOwner;

		internal ActivityBindPropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor realPropertyDescriptor, object propertyOwner)
			: base(serviceProvider, realPropertyDescriptor)
		{
			this.propertyOwner = propertyOwner;
		}

		public override object GetEditor(Type editorBaseType)
		{
			object obj = base.GetEditor(editorBaseType);
			if (editorBaseType == typeof(UITypeEditor) && !IsReadOnly)
			{
				object obj2 = ((PropertyOwner != null) ? GetValue(PropertyOwner) : null);
				bool propertiesSupported = base.RealPropertyDescriptor.Converter.GetPropertiesSupported((PropertyOwner != null) ? new TypeDescriptorContext(base.ServiceProvider, base.RealPropertyDescriptor, PropertyOwner) : null);
				if (obj2 is ActivityBind || (obj == null && !propertiesSupported))
				{
					obj = new BindUITypeEditor();
				}
			}
			return obj;
		}

		public override object GetValue(object component)
		{
			object obj = null;
			DependencyObject dependencyObject = component as DependencyObject;
			DependencyProperty dependencyProperty = DependencyProperty.FromName(Name, ComponentType);
			if (dependencyObject != null && dependencyProperty != null && dependencyObject.IsBindingSet(dependencyProperty))
			{
				obj = dependencyObject.GetBinding(dependencyProperty);
			}
			if (!(obj is ActivityBind))
			{
				obj = base.GetValue(component);
			}
			return obj;
		}

		public override void SetValue(object component, object value)
		{
			object value2 = GetValue(component);
			ActivityBind activityBind = value as ActivityBind;
			DependencyObject dependencyObject = component as DependencyObject;
			DependencyProperty dependencyProperty = DependencyProperty.FromName(Name, ComponentType);
			if (dependencyObject != null && dependencyProperty != null && activityBind != null)
			{
				ComponentChangeDispatcher componentChangeDispatcher = new ComponentChangeDispatcher(base.ServiceProvider, dependencyObject, this);
				try
				{
					if (dependencyProperty.IsEvent && base.ServiceProvider != null && base.ServiceProvider.GetService(typeof(IEventBindingService)) is IEventBindingService eventBindingService)
					{
						EventDescriptor @event = eventBindingService.GetEvent(base.RealPropertyDescriptor);
						if (@event != null)
						{
							base.RealPropertyDescriptor.SetValue(component, null);
						}
					}
					dependencyObject.SetBinding(dependencyProperty, activityBind);
					base.OnValueChanged(dependencyObject, EventArgs.Empty);
				}
				finally
				{
					componentChangeDispatcher.Dispose();
				}
			}
			else
			{
				if (dependencyObject != null && dependencyProperty != null && dependencyObject.IsBindingSet(dependencyProperty))
				{
					ComponentChangeDispatcher componentChangeDispatcher2 = new ComponentChangeDispatcher(base.ServiceProvider, dependencyObject, this);
					try
					{
						dependencyObject.RemoveProperty(dependencyProperty);
						base.OnValueChanged(dependencyObject, EventArgs.Empty);
					}
					finally
					{
						componentChangeDispatcher2.Dispose();
					}
				}
				base.SetValue(component, value);
			}
			if (value2 != value && ((value2 is ActivityBind && !(value is ActivityBind)) || (!(value2 is ActivityBind) && value is ActivityBind)))
			{
				TypeDescriptor.Refresh(component);
			}
		}

		internal static IList<MemberInfo> GetBindableMembers(object obj, ITypeDescriptorContext context)
		{
			List<MemberInfo> list = new List<MemberInfo>();
			Activity activity = ((context.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost) ? (designerHost.RootComponent as Activity) : null);
			Type type = ((obj == activity) ? Helpers.GetDataSourceClass(activity, context) : obj.GetType());
			Type baseType = PropertyDescriptorUtils.GetBaseType(context.PropertyDescriptor, context.Instance, context);
			if (type != null && baseType != null)
			{
				bool flag = DependencyProperty.FromName(context.PropertyDescriptor.Name, context.PropertyDescriptor.ComponentType)?.IsEvent ?? false;
				BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy;
				if (obj == activity)
				{
					bindingFlags |= BindingFlags.NonPublic;
				}
				MemberInfo[] members = type.GetMembers(bindingFlags);
				foreach (MemberInfo memberInfo in members)
				{
					object[] customAttributes = memberInfo.GetCustomAttributes(typeof(DebuggerNonUserCodeAttribute), inherit: false);
					if (customAttributes != null && customAttributes.Length != 0 && customAttributes[0] is DebuggerNonUserCodeAttribute)
					{
						continue;
					}
					object[] customAttributes2 = memberInfo.GetCustomAttributes(typeof(BrowsableAttribute), inherit: false);
					if (customAttributes2.Length != 0)
					{
						bool flag2 = false;
						if (customAttributes2[0] is BrowsableAttribute browsableAttribute)
						{
							flag2 = browsableAttribute.Browsable;
						}
						else
						{
							try
							{
								if (customAttributes2[0] is AttributeInfoAttribute attributeInfoAttribute && attributeInfoAttribute.AttributeInfo.ArgumentValues.Count > 0)
								{
									flag2 = (bool)attributeInfoAttribute.AttributeInfo.GetArgumentValueAs(context, 0, typeof(bool));
								}
							}
							catch
							{
							}
						}
						if (!flag2)
						{
							continue;
						}
					}
					if (!(memberInfo.DeclaringType == typeof(object)) || (!string.Equals(memberInfo.Name, "Equals", StringComparison.Ordinal) && !string.Equals(memberInfo.Name, "ReferenceEquals", StringComparison.Ordinal)))
					{
						bool flag3 = false;
						bool flag4 = false;
						bool flag5 = false;
						if (flag && memberInfo is EventInfo)
						{
							EventInfo eventInfo = memberInfo as EventInfo;
							MethodInfo addMethod = eventInfo.GetAddMethod();
							MethodInfo removeMethod = eventInfo.GetRemoveMethod();
							flag4 = (addMethod != null && addMethod.IsFamily) || (removeMethod != null && removeMethod.IsFamily) || (addMethod != null && addMethod.IsPublic) || (removeMethod != null && removeMethod.IsPublic);
							flag5 = (addMethod != null && addMethod.IsAssembly) || (removeMethod != null && removeMethod.IsAssembly);
							flag3 = TypeProvider.IsAssignable(baseType, eventInfo.EventHandlerType);
						}
						else if (memberInfo is FieldInfo)
						{
							FieldInfo fieldInfo = memberInfo as FieldInfo;
							flag4 = fieldInfo.IsFamily || fieldInfo.IsPublic;
							flag5 = fieldInfo.IsAssembly;
							flag3 = TypeProvider.IsAssignable(baseType, fieldInfo.FieldType);
						}
						else if (memberInfo is PropertyInfo)
						{
							PropertyInfo propertyInfo = memberInfo as PropertyInfo;
							MethodInfo getMethod = propertyInfo.GetGetMethod();
							MethodInfo setMethod = propertyInfo.GetSetMethod();
							flag4 = (getMethod != null && getMethod.IsFamily) || (setMethod != null && setMethod.IsFamily) || (getMethod != null && getMethod.IsPublic) || (setMethod != null && setMethod.IsPublic);
							flag5 = (getMethod != null && getMethod.IsAssembly) || (setMethod != null && setMethod.IsAssembly);
							flag3 = getMethod != null && TypeProvider.IsAssignable(baseType, propertyInfo.PropertyType);
						}
						if (memberInfo.DeclaringType != type && !flag4 && !(memberInfo.DeclaringType.Assembly == null && flag5))
						{
							flag3 = false;
						}
						if (flag3)
						{
							list.Add(memberInfo);
						}
					}
				}
			}
			return list.AsReadOnly();
		}

		internal static bool CreateField(ITypeDescriptorContext context, ActivityBind activityBind, bool throwOnError)
		{
			if (!string.IsNullOrEmpty(activityBind.Path))
			{
				Type baseType = PropertyDescriptorUtils.GetBaseType(context.PropertyDescriptor, context.Instance, context);
				Activity activity = PropertyDescriptorUtils.GetComponent(context) as Activity;
				if (activity != null && baseType != null)
				{
					activity = Helpers.ParseActivityForBind(activity, activityBind.Name);
					if (activity == Helpers.GetRootActivity(activity))
					{
						bool flag = CompilerHelpers.GetSupportedLanguage(context) == SupportedLanguages.VB;
						Type dataSourceClass = Helpers.GetDataSourceClass(activity, context);
						if (dataSourceClass != null)
						{
							string text = activityBind.Path;
							int num = text.IndexOfAny(new char[3] { '.', '/', '[' });
							if (num != -1)
							{
								text = text.Substring(0, num);
							}
							MemberInfo memberInfo = FindMatchingMember(text, dataSourceClass, flag);
							if (memberInfo != null)
							{
								Type fromType = null;
								bool flag2 = false;
								if (memberInfo is FieldInfo)
								{
									flag2 = ((FieldInfo)memberInfo).IsPrivate;
									fromType = ((FieldInfo)memberInfo).FieldType;
								}
								else if (memberInfo is PropertyInfo)
								{
									MethodInfo getMethod = ((PropertyInfo)memberInfo).GetGetMethod();
									MethodInfo setMethod = ((PropertyInfo)memberInfo).GetSetMethod();
									flag2 = (getMethod != null && getMethod.IsPrivate) || (setMethod != null && setMethod.IsPrivate);
								}
								else if (memberInfo is MethodInfo)
								{
									flag2 = ((MethodInfo)memberInfo).IsPrivate;
								}
								if (num != -1)
								{
									PathWalker pathWalker = new PathWalker();
									PathMemberInfoEventArgs finalEventArgs = null;
									pathWalker.MemberFound = (EventHandler<PathMemberInfoEventArgs>)Delegate.Combine(pathWalker.MemberFound, (EventHandler<PathMemberInfoEventArgs>)delegate(object sender, PathMemberInfoEventArgs eventArgs)
									{
										finalEventArgs = eventArgs;
									});
									if (!pathWalker.TryWalkPropertyPath(dataSourceClass, activityBind.Path))
									{
										if (throwOnError)
										{
											throw new InvalidOperationException(SR.GetString("Error_MemberWithSameNameExists", activityBind.Path, dataSourceClass.FullName));
										}
										return false;
									}
									fromType = BindHelpers.GetMemberType(finalEventArgs.MemberInfo);
								}
								if ((memberInfo.DeclaringType == dataSourceClass || !flag2) && memberInfo is FieldInfo && TypeProvider.IsAssignable(baseType, fromType))
								{
									return true;
								}
								if (throwOnError)
								{
									throw new InvalidOperationException(SR.GetString("Error_MemberWithSameNameExists", activityBind.Path, dataSourceClass.FullName));
								}
								return false;
							}
							Activity activity2 = null;
							if (string.Compare(activity.Name, text, flag ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal) == 0)
							{
								activity2 = activity;
							}
							else if (activity is CompositeActivity && activity is CompositeActivity)
							{
								Activity[] allNestedActivities = Helpers.GetAllNestedActivities(activity as CompositeActivity);
								foreach (Activity activity3 in allNestedActivities)
								{
									if (string.Compare(activity3.Name, text, flag ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal) == 0)
									{
										activity2 = activity3;
									}
								}
							}
							if (activity2 != null)
							{
								if (TypeProvider.IsAssignable(baseType, activity2.GetType()))
								{
									return true;
								}
								if (throwOnError)
								{
									throw new InvalidOperationException(SR.GetString("Error_MemberWithSameNameExists", activityBind.Path, dataSourceClass.FullName));
								}
								return false;
							}
							if (!(context.GetService(typeof(IMemberCreationService)) is IMemberCreationService memberCreationService))
							{
								if (throwOnError)
								{
									throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IMemberCreationService).FullName));
								}
							}
							else
							{
								if (context.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost)
								{
									memberCreationService.CreateField(designerHost.RootComponentClassName, activityBind.Path, baseType, null, MemberAttributes.Public, null, overwriteExisting: false);
									return true;
								}
								if (throwOnError)
								{
									throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
								}
							}
						}
					}
				}
				else
				{
					if (activity == null && throwOnError)
					{
						throw new InvalidOperationException(SR.GetString("Error_InvalidActivityIdentifier", activityBind.Name));
					}
					if (baseType == null && throwOnError)
					{
						throw new InvalidOperationException(SR.GetString("Error_PropertyTypeNotDefined", context.PropertyDescriptor.Name, typeof(ActivityBind).Name, typeof(IDynamicPropertyTypeProvider).Name));
					}
				}
			}
			return false;
		}

		internal static bool IsBindableProperty(PropertyDescriptor propertyDescriptor)
		{
			if (propertyDescriptor.PropertyType == typeof(ActivityBind))
			{
				return true;
			}
			if (propertyDescriptor.Converter is ActivityBindTypeConverter)
			{
				return true;
			}
			DependencyProperty dependencyProperty = DependencyProperty.FromName(propertyDescriptor.Name, propertyDescriptor.ComponentType);
			if (typeof(DependencyObject).IsAssignableFrom(propertyDescriptor.ComponentType) && dependencyProperty != null && !dependencyProperty.DefaultMetadata.IsMetaProperty)
			{
				return true;
			}
			return false;
		}

		internal static MemberInfo FindMatchingMember(string name, Type ownerType, bool ignoreCase)
		{
			MemberInfo result = null;
			MemberInfo[] members = ownerType.GetMembers(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
			foreach (MemberInfo memberInfo in members)
			{
				if (memberInfo.Name.Equals(name, ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal))
				{
					result = memberInfo;
					break;
				}
			}
			return result;
		}
	}
	internal sealed class ActivityBindNamePropertyDescriptor : DynamicPropertyDescriptor
	{
		private ITypeDescriptorContext context;

		public ActivityBindNamePropertyDescriptor(ITypeDescriptorContext context, PropertyDescriptor realPropertyDescriptor)
			: base(context, realPropertyDescriptor)
		{
			this.context = context;
		}

		public override object GetValue(object component)
		{
			object obj = base.GetValue(component);
			string text = obj as string;
			if (!string.IsNullOrEmpty(text))
			{
				Activity activity2 = ((PropertyDescriptorUtils.GetComponent(context) is Activity activity) ? Helpers.ParseActivityForBind(activity, text) : null);
				obj = ((activity2 != null) ? activity2.QualifiedName : text);
			}
			return obj;
		}

		public override void SetValue(object component, object value)
		{
			string text = value as string;
			if (string.IsNullOrEmpty(text))
			{
				throw new InvalidOperationException(SR.GetString("Error_ActivityIdentifierCanNotBeEmpty"));
			}
			if (PropertyDescriptorUtils.GetComponent(context) is Activity activity && Helpers.ParseActivityForBind(activity, text) == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_InvalidActivityIdentifier", text));
			}
			base.SetValue(component, value);
		}
	}
	internal sealed class ActivityBindPathPropertyDescriptor : DynamicPropertyDescriptor
	{
		private ITypeDescriptorContext context;

		internal ITypeDescriptorContext OuterPropertyContext => context;

		public ActivityBindPathPropertyDescriptor(ITypeDescriptorContext context, PropertyDescriptor realPropertyDescriptor)
			: base(context, realPropertyDescriptor)
		{
			this.context = context;
		}
	}
	internal sealed class ReadonlyTypeDescriptonProvider : TypeDescriptionProvider
	{
		internal ReadonlyTypeDescriptonProvider(TypeDescriptionProvider realProvider)
			: base(realProvider)
		{
		}

		public override ICustomTypeDescriptor GetTypeDescriptor(Type type, object instance)
		{
			ICustomTypeDescriptor typeDescriptor = base.GetTypeDescriptor(type, instance);
			return new ReadonlyTypeDescriptor(typeDescriptor);
		}
	}
	internal sealed class ReadonlyTypeDescriptor : CustomTypeDescriptor
	{
		internal ReadonlyTypeDescriptor(ICustomTypeDescriptor realTypeDescriptor)
			: base(realTypeDescriptor)
		{
		}

		public override AttributeCollection GetAttributes()
		{
			ArrayList arrayList = new ArrayList();
			foreach (Attribute attribute in base.GetAttributes())
			{
				if (!(attribute is EditorAttribute) && !(attribute is ReadOnlyAttribute))
				{
					arrayList.Add(attribute);
				}
			}
			arrayList.Add(new ReadOnlyAttribute(isReadOnly: true));
			return new AttributeCollection((Attribute[])arrayList.ToArray(typeof(Attribute)));
		}

		public override PropertyDescriptorCollection GetProperties()
		{
			PropertyDescriptorCollection properties = base.GetProperties();
			ArrayList arrayList = new ArrayList();
			foreach (PropertyDescriptor item in properties)
			{
				if (item.Attributes[typeof(BrowsableAttribute)] is BrowsableAttribute { Browsable: not false } && !(item is ReadonlyPropertyDescriptor))
				{
					arrayList.Add(new ReadonlyPropertyDescriptor(item));
				}
				else
				{
					arrayList.Add(item);
				}
			}
			return new PropertyDescriptorCollection((PropertyDescriptor[])arrayList.ToArray(typeof(PropertyDescriptor)));
		}

		public override EventDescriptorCollection GetEvents(Attribute[] attributes)
		{
			EventDescriptorCollection events = base.GetEvents(attributes);
			ArrayList arrayList = new ArrayList();
			foreach (EventDescriptor item in events)
			{
				if (item.Attributes[typeof(BrowsableAttribute)] is BrowsableAttribute { Browsable: not false })
				{
					arrayList.Add(new ReadonlyEventDescriptor(item));
				}
				else
				{
					arrayList.Add(item);
				}
			}
			return new EventDescriptorCollection((EventDescriptor[])arrayList.ToArray(typeof(EventDescriptor)));
		}
	}
	internal sealed class ReadonlyPropertyDescriptor : PropertyDescriptor
	{
		private PropertyDescriptor realPropertyDescriptor;

		public override string Category => realPropertyDescriptor.Category;

		public override AttributeCollection Attributes
		{
			get
			{
				ArrayList arrayList = new ArrayList();
				foreach (Attribute attribute in realPropertyDescriptor.Attributes)
				{
					if (!(attribute is EditorAttribute) && !(attribute is ReadOnlyAttribute))
					{
						arrayList.Add(attribute);
					}
				}
				arrayList.Add(new ReadOnlyAttribute(isReadOnly: true));
				return new AttributeCollection((Attribute[])arrayList.ToArray(typeof(Attribute)));
			}
		}

		public override TypeConverter Converter => realPropertyDescriptor.Converter;

		public override string Description => realPropertyDescriptor.Description;

		public override Type ComponentType => realPropertyDescriptor.ComponentType;

		public override Type PropertyType => realPropertyDescriptor.PropertyType;

		public override bool IsReadOnly => true;

		internal ReadonlyPropertyDescriptor(PropertyDescriptor descriptor)
			: base(descriptor, null)
		{
			realPropertyDescriptor = descriptor;
		}

		public override void ResetValue(object component)
		{
			realPropertyDescriptor.ResetValue(component);
		}

		public override bool CanResetValue(object component)
		{
			return false;
		}

		public override bool ShouldSerializeValue(object component)
		{
			return realPropertyDescriptor.ShouldSerializeValue(component);
		}

		public override object GetValue(object component)
		{
			return realPropertyDescriptor.GetValue(component);
		}

		public override void SetValue(object component, object value)
		{
		}
	}
	internal sealed class ReadonlyEventDescriptor : EventDescriptor
	{
		private EventDescriptor realEventDescriptor;

		public override string Category => realEventDescriptor.Category;

		public override AttributeCollection Attributes
		{
			get
			{
				ArrayList arrayList = new ArrayList();
				foreach (Attribute attribute in realEventDescriptor.Attributes)
				{
					if (!(attribute is EditorAttribute) && !(attribute is ReadOnlyAttribute))
					{
						arrayList.Add(attribute);
					}
				}
				arrayList.Add(new ReadOnlyAttribute(isReadOnly: true));
				return new AttributeCollection((Attribute[])arrayList.ToArray(typeof(Attribute)));
			}
		}

		public override string Description => realEventDescriptor.Description;

		public override Type ComponentType => realEventDescriptor.ComponentType;

		public override Type EventType => realEventDescriptor.EventType;

		public override bool IsMulticast => realEventDescriptor.IsMulticast;

		internal ReadonlyEventDescriptor(EventDescriptor e)
			: base(e, null)
		{
			realEventDescriptor = e;
		}

		public override void AddEventHandler(object component, Delegate value)
		{
		}

		public override void RemoveEventHandler(object component, Delegate value)
		{
		}
	}
	internal sealed class ReferenceService : IReferenceService, IDisposable
	{
		private sealed class ReferenceHolder
		{
			private string trailingName;

			private object reference;

			private IComponent sitedComponent;

			private string fullName;

			internal string Name
			{
				get
				{
					if (fullName == null)
					{
						if (sitedComponent != null && sitedComponent.Site != null && sitedComponent.Site.Name != null)
						{
							fullName = string.Format(CultureInfo.InvariantCulture, "{0}{1}", new object[2]
							{
								sitedComponent.Site.Name,
								trailingName
							});
						}
						else
						{
							fullName = string.Empty;
						}
					}
					return fullName;
				}
			}

			internal object Reference => reference;

			internal IComponent SitedComponent => sitedComponent;

			internal ReferenceHolder(string trailingName, object reference, IComponent sitedComponent)
			{
				this.trailingName = trailingName;
				this.reference = reference;
				this.sitedComponent = sitedComponent;
			}

			internal void ResetName()
			{
				fullName = null;
			}
		}

		private static readonly Attribute[] Attributes = new Attribute[1] { BrowsableAttribute.Yes };

		private IServiceProvider provider;

		private ArrayList addedComponents;

		private ArrayList removedComponents;

		private ArrayList changedComponents;

		private ArrayList references;

		internal ReferenceService(IServiceProvider provider)
		{
			this.provider = provider;
		}

		~ReferenceService()
		{
			Dispose(disposing: false);
		}

		private void CreateReferences(IComponent component)
		{
			CreateReferences(string.Empty, component, component);
		}

		private void CreateReferences(string trailingName, object reference, IComponent sitedComponent)
		{
			if (reference == null)
			{
				return;
			}
			references.Add(new ReferenceHolder(trailingName, reference, sitedComponent));
			foreach (PropertyDescriptor property in TypeDescriptor.GetProperties(reference, Attributes))
			{
				object obj = null;
				try
				{
					obj = property.GetValue(reference);
				}
				catch
				{
				}
				if (obj != null)
				{
					BrowsableAttribute[] array = (BrowsableAttribute[])obj.GetType().GetCustomAttributes(typeof(BrowsableAttribute), inherit: true);
					if (array.Length != 0 && array[0].Browsable)
					{
						CreateReferences(string.Format(CultureInfo.InvariantCulture, "{0}.{1}", new object[2] { trailingName, property.Name }), property.GetValue(reference), sitedComponent);
					}
				}
			}
		}

		private void EnsureReferences()
		{
			if (references == null)
			{
				if (provider == null)
				{
					throw new ObjectDisposedException("IReferenceService");
				}
				if (provider.GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
				{
					componentChangeService.ComponentAdded += OnComponentAdded;
					componentChangeService.ComponentRemoved += OnComponentRemoved;
					componentChangeService.ComponentRename += OnComponentRename;
					componentChangeService.ComponentChanged += OnComponentChanged;
				}
				TypeDescriptor.Refreshed += OnComponentRefreshed;
				if (!(provider.GetService(typeof(IContainer)) is IContainer container))
				{
					throw new InvalidOperationException();
				}
				references = new ArrayList(container.Components.Count);
				{
					foreach (IComponent component5 in container.Components)
					{
						CreateReferences(component5);
					}
					return;
				}
			}
			if (addedComponents != null && addedComponents.Count > 0)
			{
				ArrayList arrayList = new ArrayList(addedComponents);
				foreach (IComponent item in arrayList)
				{
					RemoveReferences(item);
					CreateReferences(item);
				}
				addedComponents.Clear();
			}
			if (removedComponents != null && removedComponents.Count > 0)
			{
				ArrayList arrayList2 = new ArrayList(removedComponents);
				foreach (IComponent item2 in arrayList2)
				{
					RemoveReferences(item2);
				}
				removedComponents.Clear();
			}
			if (changedComponents == null || changedComponents.Count <= 0)
			{
				return;
			}
			ArrayList arrayList3 = new ArrayList(changedComponents);
			foreach (IComponent item3 in arrayList3)
			{
				RemoveReferences(item3);
				CreateReferences(item3);
			}
			changedComponents.Clear();
		}

		private void OnComponentChanged(object sender, ComponentChangedEventArgs cevent)
		{
			IComponent component = ((IReferenceService)this).GetComponent(cevent.Component);
			if (component != null && (addedComponents == null || !addedComponents.Contains(component)) && (removedComponents == null || !removedComponents.Contains(component)))
			{
				if (changedComponents == null)
				{
					changedComponents = new ArrayList();
					changedComponents.Add(component);
				}
				else if (!changedComponents.Contains(component))
				{
					changedComponents.Add(component);
				}
			}
		}

		private void OnComponentAdded(object sender, ComponentEventArgs cevent)
		{
			if (addedComponents == null)
			{
				addedComponents = new ArrayList();
			}
			addedComponents.Add(cevent.Component);
			if (removedComponents != null)
			{
				removedComponents.Remove(cevent.Component);
			}
			if (changedComponents != null)
			{
				changedComponents.Remove(cevent.Component);
			}
		}

		private void OnComponentRemoved(object sender, ComponentEventArgs cevent)
		{
			if (removedComponents == null)
			{
				removedComponents = new ArrayList();
			}
			removedComponents.Add(cevent.Component);
			if (addedComponents != null)
			{
				addedComponents.Remove(cevent.Component);
			}
			if (changedComponents != null)
			{
				changedComponents.Remove(cevent.Component);
			}
		}

		private void OnComponentRename(object sender, ComponentRenameEventArgs cevent)
		{
			foreach (ReferenceHolder reference in references)
			{
				if (reference.SitedComponent == cevent.Component)
				{
					reference.ResetName();
					break;
				}
			}
		}

		private void OnComponentRefreshed(RefreshEventArgs e)
		{
			if (e.ComponentChanged != null)
			{
				OnComponentChanged(this, new ComponentChangedEventArgs(e.ComponentChanged, null, null, null));
			}
		}

		private void RemoveReferences(IComponent component)
		{
			if (references == null)
			{
				return;
			}
			int count = references.Count;
			for (int num = count - 1; num >= 0; num--)
			{
				if (((ReferenceHolder)references[num]).SitedComponent == component)
				{
					references.RemoveAt(num);
				}
			}
		}

		public void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		private void Dispose(bool disposing)
		{
			if (references != null && provider != null)
			{
				if (provider.GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
				{
					componentChangeService.ComponentAdded -= OnComponentAdded;
					componentChangeService.ComponentRemoved -= OnComponentRemoved;
					componentChangeService.ComponentRename -= OnComponentRename;
					componentChangeService.ComponentChanged -= OnComponentChanged;
				}
				TypeDescriptor.Refreshed -= OnComponentRefreshed;
				references = null;
				provider = null;
			}
		}

		IComponent IReferenceService.GetComponent(object reference)
		{
			if (reference == null)
			{
				throw new ArgumentNullException("reference");
			}
			EnsureReferences();
			foreach (ReferenceHolder reference2 in references)
			{
				if (reference2.Reference == reference)
				{
					return reference2.SitedComponent;
				}
			}
			return null;
		}

		string IReferenceService.GetName(object reference)
		{
			if (reference == null)
			{
				throw new ArgumentNullException("reference");
			}
			EnsureReferences();
			foreach (ReferenceHolder reference2 in references)
			{
				if (reference2.Reference == reference)
				{
					return reference2.Name;
				}
			}
			return null;
		}

		object IReferenceService.GetReference(string name)
		{
			if (name == null)
			{
				throw new ArgumentNullException("name");
			}
			EnsureReferences();
			foreach (ReferenceHolder reference in references)
			{
				if (string.Equals(reference.Name, name, StringComparison.OrdinalIgnoreCase))
				{
					return reference.Reference;
				}
			}
			return null;
		}

		object[] IReferenceService.GetReferences()
		{
			EnsureReferences();
			object[] array = new object[references.Count];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = ((ReferenceHolder)references[i]).Reference;
			}
			return array;
		}

		object[] IReferenceService.GetReferences(Type baseType)
		{
			if (baseType == null)
			{
				throw new ArgumentNullException("baseType");
			}
			EnsureReferences();
			ArrayList arrayList = new ArrayList(references.Count);
			foreach (ReferenceHolder reference2 in references)
			{
				object reference = reference2.Reference;
				if (baseType.IsAssignableFrom(reference.GetType()))
				{
					arrayList.Add(reference);
				}
			}
			object[] array = new object[arrayList.Count];
			arrayList.CopyTo(array, 0);
			return array;
		}
	}
	internal sealed class ConditionTypeConverter : TypeConverter
	{
		internal static readonly Type RuleConditionReferenceType;

		internal static readonly Type RuleDefinitionsType;

		internal static readonly Type CodeConditionType;

		internal static DependencyProperty DeclarativeConditionDynamicProp;

		private Hashtable conditionDecls = new Hashtable();

		static ConditionTypeConverter()
		{
			RuleConditionReferenceType = Type.GetType("System.Workflow.Activities.Rules.RuleDefinitions, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
			RuleDefinitionsType = Type.GetType("System.Workflow.Activities.Rules.RuleConditionReference, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
			CodeConditionType = Type.GetType("System.Workflow.Activities.CodeCondition, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
			DeclarativeConditionDynamicProp = (DependencyProperty)RuleConditionReferenceType.GetField("RuleDefinitionsProperty").GetValue(null);
		}

		public ConditionTypeConverter()
		{
			string key = CodeConditionType.FullName;
			object[] customAttributes = CodeConditionType.GetCustomAttributes(typeof(DisplayNameAttribute), inherit: false);
			if (customAttributes != null && customAttributes.Length != 0 && customAttributes[0] is DisplayNameAttribute)
			{
				key = ((DisplayNameAttribute)customAttributes[0]).DisplayName;
			}
			conditionDecls.Add(key, CodeConditionType);
			key = RuleDefinitionsType.FullName;
			customAttributes = RuleDefinitionsType.GetCustomAttributes(typeof(DisplayNameAttribute), inherit: false);
			if (customAttributes != null && customAttributes.Length != 0 && customAttributes[0] is DisplayNameAttribute)
			{
				key = ((DisplayNameAttribute)customAttributes[0]).DisplayName;
			}
			conditionDecls.Add(key, RuleDefinitionsType);
		}

		public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
		{
			if (sourceType == typeof(string))
			{
				return true;
			}
			return base.CanConvertFrom(context, sourceType);
		}

		public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
		{
			if (value is string)
			{
				if (((string)value).Length == 0 || (string)value == SR.GetString("NullConditionExpression"))
				{
					return null;
				}
				return Activator.CreateInstance(conditionDecls[value] as Type);
			}
			return base.ConvertFrom(context, culture, value);
		}

		public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
		{
			if (destinationType == typeof(string))
			{
				return true;
			}
			return base.CanConvertTo(context, destinationType);
		}

		public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
		{
			if (value == null)
			{
				return SR.GetString("NullConditionExpression");
			}
			object obj = null;
			if (destinationType == typeof(string) && value is ActivityCondition)
			{
				foreach (DictionaryEntry conditionDecl in conditionDecls)
				{
					if (value.GetType() == conditionDecl.Value)
					{
						obj = conditionDecl.Key;
						break;
					}
				}
			}
			if (obj == null)
			{
				obj = base.ConvertTo(context, culture, value, destinationType);
			}
			return obj;
		}

		public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
		{
			ArrayList arrayList = new ArrayList();
			arrayList.Add(null);
			foreach (object key in conditionDecls.Keys)
			{
				Type type = conditionDecls[key] as Type;
				arrayList.Add(Activator.CreateInstance(type));
			}
			return new StandardValuesCollection((ActivityCondition[])arrayList.ToArray(typeof(ActivityCondition)));
		}

		public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
		{
			return true;
		}

		public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
		{
			return true;
		}

		public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
		{
			PropertyDescriptorCollection result = new PropertyDescriptorCollection(new PropertyDescriptor[0]);
			TypeConverter converter = TypeDescriptor.GetConverter(value.GetType());
			if (converter != null && converter.GetType() != GetType() && converter.GetPropertiesSupported())
			{
				return converter.GetProperties(context, value, attributes);
			}
			IComponent component = PropertyDescriptorUtils.GetComponent(context);
			if (component != null)
			{
				result = PropertyDescriptorFilter.FilterProperties(component.Site, value, TypeDescriptor.GetProperties(value, new Attribute[1] { BrowsableAttribute.Yes }));
			}
			return result;
		}

		public override bool GetPropertiesSupported(ITypeDescriptorContext context)
		{
			return true;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityBindTypeConverter : TypeConverter
	{
		public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
		{
			ITypeDescriptorContext realContext = null;
			TypeConverter realTypeConverter = null;
			GetActualTypeConverterAndContext(context, out realTypeConverter, out realContext);
			if (realTypeConverter != null && realTypeConverter.GetType() != typeof(ActivityBindTypeConverter))
			{
				return realTypeConverter.CanConvertFrom(realContext, sourceType);
			}
			if (sourceType == typeof(string))
			{
				return true;
			}
			return base.CanConvertFrom(context, sourceType);
		}

		public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
		{
			if (destinationType == typeof(string) && context != null && context.PropertyDescriptor != null && context.PropertyDescriptor.GetValue(context.Instance) is ActivityBind)
			{
				return true;
			}
			ITypeDescriptorContext realContext = null;
			TypeConverter realTypeConverter = null;
			GetActualTypeConverterAndContext(context, out realTypeConverter, out realContext);
			if (realTypeConverter != null && realTypeConverter.GetType() != typeof(ActivityBindTypeConverter))
			{
				return realTypeConverter.CanConvertTo(realContext, destinationType);
			}
			if (destinationType == typeof(string))
			{
				return true;
			}
			return base.CanConvertTo(context, destinationType);
		}

		public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object valueToConvert)
		{
			if (!(valueToConvert is string text))
			{
				return base.ConvertFrom(context, culture, valueToConvert);
			}
			string value = text.Trim();
			string[] array = Parse(value);
			object obj = ((array.Length == 2) ? new ActivityBind(array[0], array[1]) : null);
			if (obj == null && (context == null || context.PropertyDescriptor == null))
			{
				return base.ConvertFrom(context, culture, valueToConvert);
			}
			if (obj == null)
			{
				ITypeDescriptorContext realContext = null;
				TypeConverter realTypeConverter = null;
				GetActualTypeConverterAndContext(context, out realTypeConverter, out realContext);
				obj = ((realTypeConverter == null || !(realTypeConverter.GetType() != typeof(ActivityBindTypeConverter)) || !realTypeConverter.CanConvertFrom(realContext, typeof(string))) ? valueToConvert : realTypeConverter.ConvertFrom(realContext, culture, value));
			}
			return obj;
		}

		public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
		{
			if (destinationType != typeof(string))
			{
				return base.ConvertTo(context, culture, value, destinationType);
			}
			string text = null;
			if (value is ActivityBind activityBind)
			{
				Activity activity = ((PropertyDescriptorUtils.GetComponent(context) is Activity context2) ? Helpers.ParseActivityForBind(context2, activityBind.Name) : null);
				return string.Format(CultureInfo.InvariantCulture, "Activity={0}, Path={1}", new object[2]
				{
					(activity != null) ? activity.QualifiedName : activityBind.Name,
					activityBind.Path
				});
			}
			ITypeDescriptorContext realContext = null;
			TypeConverter realTypeConverter = null;
			GetActualTypeConverterAndContext(context, out realTypeConverter, out realContext);
			if (realTypeConverter != null && realTypeConverter.GetType() != typeof(ActivityBindTypeConverter) && realTypeConverter.CanConvertTo(realContext, destinationType))
			{
				return realTypeConverter.ConvertTo(realContext, culture, value, destinationType) as string;
			}
			return base.ConvertTo(context, culture, value, destinationType) as string;
		}

		public override bool GetPropertiesSupported(ITypeDescriptorContext context)
		{
			bool result = false;
			if (context != null && context.PropertyDescriptor != null)
			{
				if (context.PropertyDescriptor.GetValue(context.Instance) is ActivityBind)
				{
					result = true;
				}
				else
				{
					ITypeDescriptorContext realContext = null;
					TypeConverter realTypeConverter = null;
					GetActualTypeConverterAndContext(context, out realTypeConverter, out realContext);
					if (realTypeConverter != null && realTypeConverter.GetType() != typeof(ActivityBindTypeConverter))
					{
						result = realTypeConverter.GetPropertiesSupported(realContext);
					}
				}
			}
			return result;
		}

		public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
		{
			ArrayList arrayList = new ArrayList();
			if (value is ActivityBind && context != null)
			{
				PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(value, new Attribute[1] { BrowsableAttribute.Yes });
				PropertyDescriptor propertyDescriptor = properties["Name"];
				if (propertyDescriptor != null)
				{
					arrayList.Add(new ActivityBindNamePropertyDescriptor(context, propertyDescriptor));
				}
				PropertyDescriptor propertyDescriptor2 = properties["Path"];
				if (propertyDescriptor2 != null)
				{
					arrayList.Add(new ActivityBindPathPropertyDescriptor(context, propertyDescriptor2));
				}
			}
			else if (context != null && context.PropertyDescriptor != null)
			{
				ITypeDescriptorContext realContext = null;
				TypeConverter realTypeConverter = null;
				GetActualTypeConverterAndContext(context, out realTypeConverter, out realContext);
				if (realTypeConverter != null && realTypeConverter.GetType() != typeof(ActivityBindTypeConverter))
				{
					arrayList.AddRange(realTypeConverter.GetProperties(realContext, value, attributes));
				}
			}
			return new PropertyDescriptorCollection((PropertyDescriptor[])arrayList.ToArray(typeof(PropertyDescriptor)));
		}

		public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
		{
			ArrayList arrayList = new ArrayList();
			if (context == null || context.PropertyDescriptor == null)
			{
				return new StandardValuesCollection(new ArrayList());
			}
			ITypeDescriptorContext realContext = null;
			TypeConverter realTypeConverter = null;
			GetActualTypeConverterAndContext(context, out realTypeConverter, out realContext);
			if (realTypeConverter != null && realTypeConverter.GetStandardValuesSupported(realContext) && realTypeConverter.GetType() != typeof(ActivityBindTypeConverter))
			{
				arrayList.AddRange(realTypeConverter.GetStandardValues(realContext));
			}
			return new StandardValuesCollection(arrayList.ToArray());
		}

		public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
		{
			bool result = false;
			if (context != null && context.PropertyDescriptor != null)
			{
				object obj = ((context.Instance != null) ? context.PropertyDescriptor.GetValue(context.Instance) : null);
				if (!(obj is ActivityBind))
				{
					ITypeDescriptorContext realContext = null;
					TypeConverter realTypeConverter = null;
					GetActualTypeConverterAndContext(context, out realTypeConverter, out realContext);
					if (realTypeConverter != null && realTypeConverter.GetType() != typeof(ActivityBindTypeConverter))
					{
						result = realTypeConverter.GetStandardValuesSupported(realContext);
					}
				}
			}
			return result;
		}

		public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
		{
			bool result = false;
			if (context != null && context.PropertyDescriptor != null)
			{
				object obj = ((context.Instance != null) ? context.PropertyDescriptor.GetValue(context.Instance) : null);
				if (!(obj is ActivityBind))
				{
					ITypeDescriptorContext realContext = null;
					TypeConverter realTypeConverter = null;
					GetActualTypeConverterAndContext(context, out realTypeConverter, out realContext);
					if (realTypeConverter != null && realTypeConverter.GetType() != typeof(ActivityBindTypeConverter))
					{
						result = realTypeConverter.GetStandardValuesExclusive(realContext);
					}
				}
			}
			return result;
		}

		private void GetActualTypeConverterAndContext(ITypeDescriptorContext currentContext, out TypeConverter realTypeConverter, out ITypeDescriptorContext realContext)
		{
			realContext = currentContext;
			realTypeConverter = null;
			if (currentContext != null && currentContext.PropertyDescriptor != null)
			{
				realTypeConverter = TypeDescriptor.GetConverter(currentContext.PropertyDescriptor.PropertyType);
				if (currentContext.PropertyDescriptor is ActivityBindPropertyDescriptor { RealPropertyDescriptor: not null } activityBindPropertyDescriptor && activityBindPropertyDescriptor.RealPropertyDescriptor.Converter != null && activityBindPropertyDescriptor.RealPropertyDescriptor.Converter.GetType() != typeof(ActivityBindTypeConverter))
				{
					realTypeConverter = activityBindPropertyDescriptor.RealPropertyDescriptor.Converter;
					realContext = new TypeDescriptorContext(currentContext, activityBindPropertyDescriptor.RealPropertyDescriptor, currentContext.Instance);
				}
			}
		}

		private string[] Parse(string value)
		{
			string[] array = value.Split(new char[1] { ',' }, 2);
			if (array.Length == 2)
			{
				string text = "Activity=";
				string text2 = "Path=";
				string text3 = array[0].Trim();
				string text4 = array[1].Trim();
				if (text3.StartsWith(text, StringComparison.OrdinalIgnoreCase) && text4.StartsWith(text2, StringComparison.OrdinalIgnoreCase))
				{
					text3 = text3.Substring(text.Length);
					text4 = text4.Substring(text2.Length);
					return new string[2] { text3, text4 };
				}
			}
			return new string[0];
		}
	}
	internal sealed class ActivityBindPathTypeConverter : PropertyValueProviderTypeConverter
	{
		public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
		{
			return new StringConverter().CanConvertFrom(context, sourceType);
		}

		public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
		{
			return new StringConverter().CanConvertTo(context, destinationType);
		}

		public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
		{
			return new StringConverter().ConvertFrom(context, culture, value);
		}

		public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
		{
			return new StringConverter().ConvertTo(context, culture, value, destinationType);
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	[PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]
	public class TypeBrowserEditor : UITypeEditor
	{
		private IWindowsFormsEditorService editorService;

		public override object EditValue(ITypeDescriptorContext typeDescriptorContext, IServiceProvider serviceProvider, object value)
		{
			if (typeDescriptorContext == null)
			{
				throw new ArgumentNullException("typeDescriptorContext");
			}
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			object result = value;
			editorService = (IWindowsFormsEditorService)serviceProvider.GetService(typeof(IWindowsFormsEditorService));
			if (editorService != null)
			{
				ITypeFilterProvider typeFilterProvider = null;
				TypeFilterProviderAttribute typeFilterProviderAttribute = null;
				if (typeDescriptorContext.PropertyDescriptor != null && typeDescriptorContext.PropertyDescriptor.Attributes != null)
				{
					typeFilterProviderAttribute = typeDescriptorContext.PropertyDescriptor.Attributes[typeof(TypeFilterProviderAttribute)] as TypeFilterProviderAttribute;
				}
				if (typeFilterProviderAttribute != null)
				{
					if (!(serviceProvider.GetService(typeof(ITypeProvider)) is ITypeProvider))
					{
						throw new Exception(SR.GetString("General_MissingService", typeof(ITypeProvider).FullName));
					}
					Type type = Type.GetType(typeFilterProviderAttribute.TypeFilterProviderTypeName);
					if (type != null)
					{
						typeFilterProvider = Activator.CreateInstance(type, serviceProvider) as ITypeFilterProvider;
					}
				}
				if (typeFilterProvider == null)
				{
					typeFilterProvider = ((typeDescriptorContext.Instance is object[]) ? ((object[])typeDescriptorContext.Instance)[0] : typeDescriptorContext.Instance) as ITypeFilterProvider;
				}
				if (typeFilterProvider == null)
				{
					typeFilterProvider = value as ITypeFilterProvider;
				}
				if (typeFilterProvider == null && serviceProvider.GetService(typeof(IReferenceService)) is IReferenceService referenceService)
				{
					IComponent component = referenceService.GetComponent(typeDescriptorContext.Instance);
					if (component is ITypeFilterProvider)
					{
						typeFilterProvider = component as ITypeFilterProvider;
					}
				}
				if (typeFilterProvider == null)
				{
					typeFilterProvider = typeDescriptorContext.PropertyDescriptor as ITypeFilterProvider;
				}
				string selectedTypeName = value as string;
				if (value != null && typeDescriptorContext.PropertyDescriptor.PropertyType != typeof(string) && typeDescriptorContext.PropertyDescriptor.Converter != null && typeDescriptorContext.PropertyDescriptor.Converter.CanConvertTo(typeof(string)))
				{
					selectedTypeName = typeDescriptorContext.PropertyDescriptor.Converter.ConvertTo(typeDescriptorContext, CultureInfo.CurrentCulture, value, typeof(string)) as string;
				}
				using TypeBrowserDialog typeBrowserDialog = new TypeBrowserDialog(serviceProvider, typeFilterProvider, selectedTypeName);
				if (DialogResult.OK == editorService.ShowDialog(typeBrowserDialog))
				{
					if (typeDescriptorContext.PropertyDescriptor.PropertyType == typeof(Type))
					{
						result = typeBrowserDialog.SelectedType;
					}
					else if (typeDescriptorContext.PropertyDescriptor.PropertyType == typeof(string))
					{
						result = typeBrowserDialog.SelectedType.FullName;
					}
					else if (typeDescriptorContext.PropertyDescriptor.Converter != null && typeDescriptorContext.PropertyDescriptor.Converter.CanConvertFrom(typeDescriptorContext, typeof(string)))
					{
						result = typeDescriptorContext.PropertyDescriptor.Converter.ConvertFrom(typeDescriptorContext, CultureInfo.CurrentCulture, typeBrowserDialog.SelectedType.FullName);
					}
				}
			}
			return result;
		}

		public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext typeDescriptorContext)
		{
			return UITypeEditorEditStyle.Modal;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	[PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]
	public class BindUITypeEditor : UITypeEditor
	{
		private const int MaxItems = 10;

		private IServiceProvider serviceProvider;

		public override object EditValue(ITypeDescriptorContext context, IServiceProvider serviceProvider, object value)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			this.serviceProvider = serviceProvider;
			object result = value;
			if (context != null && context.PropertyDescriptor is DynamicPropertyDescriptor)
			{
				try
				{
					using ActivityBindForm activityBindForm = new ActivityBindForm(this.serviceProvider, context);
					if (DialogResult.OK == activityBindForm.ShowDialog())
					{
						if (activityBindForm.CreateNew)
						{
							if (activityBindForm.CreateNewProperty)
							{
								List<CustomProperty> customProperties = CustomActivityDesignerHelper.GetCustomProperties(context);
								if (customProperties != null)
								{
									customProperties.Add(CustomProperty.CreateCustomProperty(this.serviceProvider, activityBindForm.NewMemberName, context.PropertyDescriptor, context.Instance));
									CustomActivityDesignerHelper.SetCustomProperties(customProperties, context);
								}
							}
							else
							{
								ActivityBindPropertyDescriptor.CreateField(context, activityBindForm.Binding, throwOnError: true);
							}
						}
						result = activityBindForm.Binding;
					}
				}
				catch (Exception ex)
				{
					string text = SR.GetString("Error_CanNotBindProperty", context.PropertyDescriptor.Name);
					if (!string.IsNullOrEmpty(ex.Message))
					{
						text = text + "\n\n" + ex.Message;
					}
					DesignerHelpers.ShowError(context, text);
				}
			}
			else
			{
				DesignerHelpers.ShowError(this.serviceProvider, SR.GetString("Error_MultipleSelectNotSupportedForBindAndPromote"));
			}
			return result;
		}

		public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext typeDescriptorContext)
		{
			return UITypeEditorEditStyle.Modal;
		}

		internal static object EditValue(ITypeDescriptorContext context)
		{
			object obj = null;
			if (context != null && context.PropertyDescriptor != null && context.Instance != null)
			{
				BindUITypeEditor bindUITypeEditor = new BindUITypeEditor();
				obj = context.PropertyDescriptor.GetValue(context.Instance);
				obj = bindUITypeEditor.EditValue(context, context, obj);
				try
				{
					context.PropertyDescriptor.SetValue(context.Instance, obj);
				}
				catch (Exception ex)
				{
					string text = SR.GetString("Error_CanNotBindProperty", context.PropertyDescriptor.Name);
					if (!string.IsNullOrEmpty(ex.Message))
					{
						text = text + "\n\n" + ex.Message;
					}
					DesignerHelpers.ShowError(context, text);
				}
			}
			return obj;
		}
	}
	[Serializable]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	[PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]
	public class ActivityToolboxItem : ToolboxItem
	{
		private const string ActivitySuffix = "Activity";

		public ActivityToolboxItem()
		{
		}

		public ActivityToolboxItem(Type type)
			: base(type)
		{
			if (!(type != null))
			{
				return;
			}
			if (type.Name != null)
			{
				string displayName = type.Name;
				if ((type.Assembly == Assembly.GetExecutingAssembly() || (type.Assembly != null && type.Assembly.FullName != null && type.Assembly.FullName.Equals("System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", StringComparison.OrdinalIgnoreCase))) && type.Name.EndsWith("Activity", StringComparison.Ordinal) && !type.Name.Equals("Activity", StringComparison.Ordinal))
				{
					displayName = type.Name.Substring(0, type.Name.Length - "Activity".Length);
				}
				base.DisplayName = displayName;
			}
			base.Description = ActivityDesigner.GetActivityDescription(type);
		}

		protected ActivityToolboxItem(SerializationInfo info, StreamingContext context)
		{
			Deserialize(info, context);
		}

		public virtual IComponent[] CreateComponentsWithUI(IDesignerHost host)
		{
			return CreateComponentsCore(host);
		}

		protected override IComponent[] CreateComponentsCore(IDesignerHost host)
		{
			Type type = GetType(host, base.AssemblyName, base.TypeName, reference: true);
			if (type == null && host != null)
			{
				type = host.GetType(base.TypeName);
			}
			if (type == null)
			{
				ITypeProviderCreator typeProviderCreator = null;
				if (host != null)
				{
					typeProviderCreator = (ITypeProviderCreator)host.GetService(typeof(ITypeProviderCreator));
				}
				if (typeProviderCreator != null)
				{
					Assembly transientAssembly = typeProviderCreator.GetTransientAssembly(base.AssemblyName);
					if (transientAssembly != null)
					{
						type = transientAssembly.GetType(base.TypeName);
					}
				}
				if (type == null)
				{
					type = GetType(host, base.AssemblyName, base.TypeName, reference: true);
				}
			}
			ArrayList arrayList = new ArrayList();
			if (type != null && typeof(IComponent).IsAssignableFrom(type))
			{
				arrayList.Add(TypeDescriptor.CreateInstance(null, type, null, null));
			}
			IComponent[] array = new IComponent[arrayList.Count];
			arrayList.CopyTo(array, 0);
			return array;
		}

		public static Image GetToolboxImage(Type activityType)
		{
			if (activityType == null)
			{
				throw new ArgumentNullException("activityType");
			}
			Image result = null;
			if (activityType != null)
			{
				object[] customAttributes = activityType.GetCustomAttributes(typeof(ToolboxBitmapAttribute), inherit: false);
				if (customAttributes != null && customAttributes.GetLength(0) == 0)
				{
					customAttributes = activityType.GetCustomAttributes(typeof(ToolboxBitmapAttribute), inherit: true);
				}
				ToolboxBitmapAttribute toolboxBitmapAttribute = ((customAttributes != null && customAttributes.GetLength(0) > 0) ? (customAttributes[0] as ToolboxBitmapAttribute) : null);
				if (toolboxBitmapAttribute != null)
				{
					result = toolboxBitmapAttribute.GetImage(activityType);
				}
			}
			return result;
		}

		public static string GetToolboxDisplayName(Type activityType)
		{
			if (activityType == null)
			{
				throw new ArgumentNullException("activityType");
			}
			string text = activityType.Name;
			object[] customAttributes = activityType.GetCustomAttributes(typeof(ToolboxItemAttribute), inherit: true);
			if (customAttributes != null && customAttributes.Length != 0 && customAttributes[0] is ToolboxItemAttribute toolboxItemAttribute && toolboxItemAttribute.ToolboxItemType != null)
			{
				try
				{
					if (Activator.CreateInstance(toolboxItemAttribute.ToolboxItemType, activityType) is ToolboxItem toolboxItem)
					{
						text = toolboxItem.DisplayName;
					}
				}
				catch
				{
				}
			}
			if (activityType.Assembly != null && activityType.Assembly.FullName != null && (activityType.Assembly.FullName.Equals("System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", StringComparison.OrdinalIgnoreCase) || activityType.Assembly.FullName.Equals(Assembly.GetExecutingAssembly().FullName, StringComparison.OrdinalIgnoreCase)) && text.EndsWith("Activity", StringComparison.Ordinal) && !text.Equals("Activity", StringComparison.Ordinal))
			{
				text = text.Substring(0, text.Length - "Activity".Length);
			}
			return text;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	[PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]
	public abstract class WorkflowDesignerLoader : BasicDesignerLoader
	{
		internal const string DesignerLayoutFileExtension = ".layout";

		private CustomActivityDesignerAdapter customActivityDesignerAdapter;

		private WorkflowDesignerEventsCoordinator eventsCoordinator;

		private Hashtable createdServices;

		private bool loadingDesignerLayout;

		public abstract string FileName { get; }

		public virtual bool InDebugMode => false;

		protected virtual TypeDescriptionProvider TargetFrameworkTypeDescriptionProvider => null;

		private string DesignerLayoutFileName
		{
			get
			{
				string text = FileName;
				if (!string.IsNullOrEmpty(text))
				{
					text = Path.Combine(Path.GetDirectoryName(text), Path.GetFileNameWithoutExtension(text));
					text += ".layout";
				}
				return text;
			}
		}

		static WorkflowDesignerLoader()
		{
			ComponentDispenser.RegisterComponentExtenders(typeof(CustomActivityDesignerAdapter), new IExtenderProvider[1]
			{
				new CustomActivityPropertyExtender()
			});
		}

		protected override void Initialize()
		{
			base.Initialize();
			Type type = Type.GetType("System.Workflow.Activities.InvokeWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
			if (type != null)
			{
				TypeDescriptor.AddAttributes(type, new DesignerAttribute(typeof(InvokeWorkflowDesigner), typeof(IDesigner)));
			}
			base.LoaderHost.AddService(typeof(WorkflowDesignerLoader), this);
			ServiceCreatorCallback callback = OnCreateService;
			if (base.LoaderHost.GetService(typeof(IWorkflowCompilerOptionsService)) == null)
			{
				base.LoaderHost.AddService(typeof(IWorkflowCompilerOptionsService), callback);
			}
			if (base.LoaderHost.GetService(typeof(IIdentifierCreationService)) == null)
			{
				base.LoaderHost.AddService(typeof(IIdentifierCreationService), callback);
			}
			if (base.LoaderHost.GetService(typeof(ComponentSerializationService)) == null)
			{
				base.LoaderHost.AddService(typeof(ComponentSerializationService), callback);
			}
			base.LoaderHost.RemoveService(typeof(IReferenceService));
			if (base.LoaderHost.GetService(typeof(IReferenceService)) == null)
			{
				base.LoaderHost.AddService(typeof(IReferenceService), callback);
			}
			if (base.LoaderHost.GetService(typeof(IDesignerVerbProviderService)) == null)
			{
				base.LoaderHost.AddService(typeof(IDesignerVerbProviderService), callback);
			}
			if (GetService(typeof(IExtenderProviderService)) is IExtenderProviderService extenderProviderService)
			{
				foreach (IExtenderProvider extender in ComponentDispenser.Extenders)
				{
					extenderProviderService.AddExtenderProvider(extender);
				}
			}
			customActivityDesignerAdapter = new CustomActivityDesignerAdapter(base.LoaderHost);
		}

		public override void Dispose()
		{
			if (eventsCoordinator != null)
			{
				((IDisposable)eventsCoordinator).Dispose();
				eventsCoordinator = null;
			}
			if (customActivityDesignerAdapter != null)
			{
				((IDisposable)customActivityDesignerAdapter).Dispose();
				customActivityDesignerAdapter = null;
			}
			if (GetService(typeof(IExtenderProviderService)) is IExtenderProviderService extenderProviderService)
			{
				foreach (IExtenderProvider extender in ComponentDispenser.Extenders)
				{
					extenderProviderService.RemoveExtenderProvider(extender);
				}
			}
			if (base.LoaderHost != null)
			{
				if (createdServices != null)
				{
					foreach (Type key in createdServices.Keys)
					{
						base.LoaderHost.RemoveService(key);
						OnDisposeService(key, createdServices[key]);
					}
					createdServices.Clear();
					createdServices = null;
				}
				base.LoaderHost.RemoveService(typeof(WorkflowDesignerLoader));
			}
			base.Dispose();
		}

		public abstract TextReader GetFileReader(string filePath);

		public abstract TextWriter GetFileWriter(string filePath);

		public virtual void ForceReload()
		{
			Reload(ReloadOptions.Force);
		}

		public override void Flush()
		{
			base.Flush();
		}

		private void AddTargetFrameworkProvider(IComponent component)
		{
			if (GetService(typeof(TypeDescriptionProviderService)) is TypeDescriptionProviderService typeDescriptionProviderService && component != null)
			{
				TypeDescriptor.AddProvider(typeDescriptionProviderService.GetProvider(component), component);
			}
		}

		public void AddActivityToDesigner(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (!(GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
			}
			if (activity.Parent == null && designerHost.RootComponent == null)
			{
				string text = activity.GetValue(WorkflowMarkupSerializer.XClassProperty) as string;
				string name = ((!string.IsNullOrEmpty(text)) ? Helpers.GetClassName(text) : Helpers.GetClassName(activity.GetType().FullName));
				designerHost.Container.Add(activity, name);
				AddTargetFrameworkProvider(activity);
			}
			else
			{
				designerHost.Container.Add(activity, activity.QualifiedName);
				AddTargetFrameworkProvider(activity);
			}
			if (activity is CompositeActivity)
			{
				Activity[] nestedActivities = Helpers.GetNestedActivities(activity as CompositeActivity);
				foreach (Activity activity2 in nestedActivities)
				{
					designerHost.Container.Add(activity2, activity2.QualifiedName);
					AddTargetFrameworkProvider(activity2);
				}
			}
		}

		public void RemoveActivityFromDesigner(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (!(GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
			}
			designerHost.DestroyComponent(activity);
			if (activity is CompositeActivity)
			{
				Activity[] nestedActivities = Helpers.GetNestedActivities(activity as CompositeActivity);
				foreach (Activity component in nestedActivities)
				{
					designerHost.DestroyComponent(component);
				}
			}
		}

		protected override void PerformLoad(IDesignerSerializationManager serializationManager)
		{
		}

		protected override void PerformFlush(IDesignerSerializationManager serializationManager)
		{
			SaveDesignerLayout();
		}

		protected override void OnEndLoad(bool successful, ICollection errors)
		{
			base.OnEndLoad(successful, errors);
			if (!successful)
			{
				return;
			}
			ActivityDesigner rootDesigner = ActivityDesigner.GetRootDesigner(base.LoaderHost);
			if (eventsCoordinator == null && (rootDesigner == null || rootDesigner.ParentDesigner == null))
			{
				eventsCoordinator = new WorkflowDesignerEventsCoordinator(base.LoaderHost);
			}
			try
			{
				loadingDesignerLayout = true;
				string designerLayoutFileName = DesignerLayoutFileName;
				IList layoutErrors = null;
				if (File.Exists(designerLayoutFileName))
				{
					LoadDesignerLayout(out layoutErrors);
				}
				else if (InDebugMode || (ActivityDesigner.GetRootDesigner(base.LoaderHost) != null && ActivityDesigner.GetRootDesigner(base.LoaderHost).ParentDesigner != null))
				{
					LoadDesignerLayoutFromResource(out layoutErrors);
				}
				if (layoutErrors == null)
				{
					return;
				}
				if (errors == null)
				{
					errors = new ArrayList();
				}
				if (!(errors is IList list))
				{
					return;
				}
				foreach (object item in layoutErrors)
				{
					list.Add(item);
				}
			}
			finally
			{
				loadingDesignerLayout = false;
			}
		}

		protected void LoadDesignerLayoutFromResource(Type type, string manifestResourceName, out IList errors)
		{
			if (type == null)
			{
				throw new ArgumentNullException("type");
			}
			if (manifestResourceName == null)
			{
				throw new ArgumentNullException("manifestResourceName");
			}
			if (manifestResourceName.Length == 0)
			{
				throw new ArgumentException(SR.GetString("Error_ParameterCannotBeEmpty"), "manifestResourceName");
			}
			errors = new ArrayList();
			Stream manifestResourceStream = type.Module.Assembly.GetManifestResourceStream(type, manifestResourceName);
			if (manifestResourceStream == null)
			{
				manifestResourceStream = type.Module.Assembly.GetManifestResourceStream(manifestResourceName);
			}
			if (manifestResourceStream == null)
			{
				return;
			}
			using XmlReader xmlReader = XmlReader.Create(manifestResourceStream);
			if (xmlReader != null)
			{
				LoadDesignerLayout(xmlReader, out errors);
			}
		}

		protected void LoadDesignerLayout(XmlReader layoutReader, out IList layoutLoadErrors)
		{
			if (layoutReader == null)
			{
				throw new ArgumentNullException("layoutReader");
			}
			ArrayList arrayList = (ArrayList)(layoutLoadErrors = new ArrayList());
			ActivityDesigner activityDesigner = null;
			if (GetService(typeof(IDesignerHost)) is IDesignerHost { RootComponent: not null } designerHost)
			{
				activityDesigner = designerHost.GetDesigner(designerHost.RootComponent) as ActivityDesigner;
			}
			if (activityDesigner != null)
			{
				if (activityDesigner.SupportsLayoutPersistence)
				{
					DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager(base.LoaderHost);
					using (designerSerializationManager.CreateSession())
					{
						WorkflowMarkupSerializationManager workflowMarkupSerializationManager = new WorkflowMarkupSerializationManager(designerSerializationManager);
						workflowMarkupSerializationManager.AddSerializationProvider(new ActivityDesignerLayoutSerializerProvider());
						try
						{
							new WorkflowMarkupSerializer().Deserialize(workflowMarkupSerializationManager, layoutReader);
							return;
						}
						catch (Exception innerException)
						{
							arrayList.Add(new WorkflowMarkupSerializationException(SR.GetString("Error_LayoutDeserialization"), innerException));
							return;
						}
						finally
						{
							if (designerSerializationManager.Errors != null)
							{
								arrayList.AddRange(designerSerializationManager.Errors);
							}
						}
					}
				}
				arrayList.Add(new WorkflowMarkupSerializationException(SR.GetString("Error_LayoutSerializationPersistenceSupport")));
			}
			else
			{
				arrayList.Add(new WorkflowMarkupSerializationException(SR.GetString("Error_LayoutSerializationRootDesignerNotFound")));
			}
		}

		protected void SaveDesignerLayout(XmlWriter layoutWriter, ActivityDesigner rootDesigner, out IList layoutSaveErrors)
		{
			if (layoutWriter == null)
			{
				throw new ArgumentNullException("layoutWriter");
			}
			if (rootDesigner == null)
			{
				throw new ArgumentNullException("rootDesigner");
			}
			ArrayList arrayList = (ArrayList)(layoutSaveErrors = new ArrayList());
			if (rootDesigner.SupportsLayoutPersistence)
			{
				DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager(base.LoaderHost);
				using (designerSerializationManager.CreateSession())
				{
					WorkflowMarkupSerializationManager workflowMarkupSerializationManager = new WorkflowMarkupSerializationManager(designerSerializationManager);
					workflowMarkupSerializationManager.AddSerializationProvider(new ActivityDesignerLayoutSerializerProvider());
					try
					{
						new WorkflowMarkupSerializer().Serialize(workflowMarkupSerializationManager, layoutWriter, rootDesigner);
						return;
					}
					catch (Exception innerException)
					{
						arrayList.Add(new WorkflowMarkupSerializationException(SR.GetString("Error_LayoutSerialization"), innerException));
						return;
					}
					finally
					{
						if (designerSerializationManager.Errors != null)
						{
							arrayList.AddRange(designerSerializationManager.Errors);
						}
					}
				}
			}
			arrayList.Add(new WorkflowMarkupSerializationException(SR.GetString("Error_LayoutSerializationPersistenceSupport")));
		}

		internal void SetModified(bool modified)
		{
			if (base.LoaderHost != null && !base.LoaderHost.Loading && !loadingDesignerLayout)
			{
				OnModifying();
				base.Modified = modified;
			}
		}

		internal static void AddActivityToDesigner(IServiceProvider serviceProvider, Activity activity)
		{
			if (!(serviceProvider.GetService(typeof(WorkflowDesignerLoader)) is WorkflowDesignerLoader workflowDesignerLoader))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(WorkflowDesignerLoader).FullName));
			}
			workflowDesignerLoader.AddActivityToDesigner(activity);
		}

		internal static void RemoveActivityFromDesigner(IServiceProvider serviceProvider, Activity activity)
		{
			if (!(serviceProvider.GetService(typeof(WorkflowDesignerLoader)) is WorkflowDesignerLoader workflowDesignerLoader))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(WorkflowDesignerLoader).FullName));
			}
			workflowDesignerLoader.RemoveActivityFromDesigner(activity);
		}

		private object OnCreateService(IServiceContainer container, Type serviceType)
		{
			object obj = null;
			if (serviceType == typeof(ComponentSerializationService))
			{
				obj = new XomlComponentSerializationService(base.LoaderHost);
			}
			else if (serviceType == typeof(IReferenceService))
			{
				obj = new ReferenceService(base.LoaderHost);
			}
			else if (serviceType == typeof(IIdentifierCreationService))
			{
				obj = new IdentifierCreationService(container, this);
			}
			else if (serviceType == typeof(IWorkflowCompilerOptionsService))
			{
				obj = new WorkflowCompilerOptionsService();
			}
			else if (serviceType == typeof(IDesignerVerbProviderService))
			{
				obj = new DesignerVerbProviderService();
			}
			if (obj != null)
			{
				if (createdServices == null)
				{
					createdServices = new Hashtable();
				}
				object obj2 = createdServices[serviceType];
				createdServices[serviceType] = obj;
				if (obj2 != null)
				{
					OnDisposeService(serviceType, obj2);
				}
			}
			return obj;
		}

		private void OnDisposeService(Type serviceType, object service)
		{
			if (serviceType == typeof(IReferenceService) && service is ReferenceService referenceService)
			{
				referenceService.Dispose();
			}
		}

		private void LoadDesignerLayoutFromResource(out IList layoutErrors)
		{
			layoutErrors = null;
			IWorkflowRootDesigner safeRootDesigner = ActivityDesigner.GetSafeRootDesigner(base.LoaderHost);
			if (safeRootDesigner != null && safeRootDesigner.SupportsLayoutPersistence)
			{
				Type type = safeRootDesigner.Component.GetType();
				string manifestResourceName = type.Name + ".layout";
				LoadDesignerLayoutFromResource(type, manifestResourceName, out layoutErrors);
			}
		}

		private void LoadDesignerLayout(out IList layoutErrors)
		{
			layoutErrors = null;
			string designerLayoutFileName = DesignerLayoutFileName;
			IWorkflowRootDesigner safeRootDesigner = ActivityDesigner.GetSafeRootDesigner(base.LoaderHost);
			if (safeRootDesigner == null || !safeRootDesigner.SupportsLayoutPersistence || !File.Exists(designerLayoutFileName))
			{
				return;
			}
			using TextReader textReader = GetFileReader(designerLayoutFileName);
			if (textReader != null)
			{
				using (XmlReader layoutReader = XmlReader.Create(textReader))
				{
					LoadDesignerLayout(layoutReader, out layoutErrors);
					return;
				}
			}
		}

		private void SaveDesignerLayout()
		{
			string designerLayoutFileName = DesignerLayoutFileName;
			ActivityDesigner safeRootDesigner = ActivityDesigner.GetSafeRootDesigner(base.LoaderHost);
			if (string.IsNullOrEmpty(designerLayoutFileName) || safeRootDesigner == null || !safeRootDesigner.SupportsLayoutPersistence)
			{
				return;
			}
			using TextWriter textWriter = GetFileWriter(designerLayoutFileName);
			if (textWriter != null)
			{
				IList layoutSaveErrors = null;
				using XmlWriter layoutWriter = Helpers.CreateXmlWriter(textWriter);
				SaveDesignerLayout(layoutWriter, safeRootDesigner, out layoutSaveErrors);
				return;
			}
		}
	}
	internal sealed class DesignerVerbProviderService : IDesignerVerbProviderService
	{
		private List<IDesignerVerbProvider> designerVerbProviders = new List<IDesignerVerbProvider>();

		ReadOnlyCollection<IDesignerVerbProvider> IDesignerVerbProviderService.VerbProviders => designerVerbProviders.AsReadOnly();

		public DesignerVerbProviderService()
		{
			((IDesignerVerbProviderService)this).AddVerbProvider((IDesignerVerbProvider)new FreeFormDesignerVerbProvider());
		}

		void IDesignerVerbProviderService.AddVerbProvider(IDesignerVerbProvider verbProvider)
		{
			if (!designerVerbProviders.Contains(verbProvider))
			{
				designerVerbProviders.Add(verbProvider);
			}
		}

		void IDesignerVerbProviderService.RemoveVerbProvider(IDesignerVerbProvider verbProvider)
		{
			designerVerbProviders.Remove(verbProvider);
		}
	}
	internal sealed class WorkflowDesignerEventsCoordinator : IDisposable
	{
		private class PropertyValueUIItemHandler
		{
			private DesignerAction action;

			internal PropertyValueUIItemHandler(DesignerAction action)
			{
				this.action = action;
			}

			internal void OnFixPropertyError(ITypeDescriptorContext context, PropertyDescriptor descriptor, PropertyValueUIItem invokedItem)
			{
				action.Invoke();
			}
		}

		private IDesignerLoaderHost serviceProvider;

		private bool typeSystemTypesChanged;

		private EventHandler refreshTypesHandler;

		private EventHandler refreshDesignerActionsHandler;

		private EventHandler refreshTasksHandler;

		public WorkflowDesignerEventsCoordinator(IDesignerLoaderHost serviceProvider)
		{
			this.serviceProvider = serviceProvider;
			this.serviceProvider.LoadComplete += OnDesignerReloaded;
			if (this.serviceProvider.GetService(typeof(IDesignerEventService)) is IDesignerEventService designerEventService)
			{
				designerEventService.ActiveDesignerChanged += OnActiveDesignerChanged;
			}
			if (this.serviceProvider.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider)
			{
				typeProvider.TypesChanged += OnTypeSystemTypesChanged;
			}
			if (this.serviceProvider.GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				selectionService.SelectionChanged += OnSelectionChanged;
			}
			if (this.serviceProvider.GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
			{
				componentChangeService.ComponentChanged += OnComponentChanged;
			}
			if (this.serviceProvider.GetService(typeof(IPropertyValueUIService)) is IPropertyValueUIService propertyValueUIService)
			{
				propertyValueUIService.AddPropertyValueUIHandler(OnPropertyGridAdornments);
			}
		}

		void IDisposable.Dispose()
		{
			if (serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				if (refreshTypesHandler != null)
				{
					workflowView.Idle -= refreshTypesHandler;
				}
				if (refreshDesignerActionsHandler != null)
				{
					workflowView.Idle -= refreshDesignerActionsHandler;
				}
				if (refreshTasksHandler != null)
				{
					workflowView.Idle -= refreshTasksHandler;
				}
			}
			refreshTypesHandler = null;
			refreshDesignerActionsHandler = null;
			refreshTasksHandler = null;
			if (serviceProvider.GetService(typeof(IExtendedUIService)) is IExtendedUIService extendedUIService)
			{
				extendedUIService.RemoveDesignerActions();
			}
			if (serviceProvider.GetService(typeof(IPropertyValueUIService)) is IPropertyValueUIService propertyValueUIService)
			{
				propertyValueUIService.RemovePropertyValueUIHandler(OnPropertyGridAdornments);
			}
			if (serviceProvider.GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
			{
				componentChangeService.ComponentChanged -= OnComponentChanged;
			}
			if (serviceProvider.GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				selectionService.SelectionChanged -= OnSelectionChanged;
			}
			if (serviceProvider.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider)
			{
				typeProvider.TypesChanged -= OnTypeSystemTypesChanged;
			}
			if (serviceProvider.GetService(typeof(IDesignerEventService)) is IDesignerEventService designerEventService)
			{
				designerEventService.ActiveDesignerChanged -= OnActiveDesignerChanged;
			}
			serviceProvider.LoadComplete -= OnDesignerReloaded;
		}

		private void OnDesignerReloaded(object sender, EventArgs e)
		{
			bool flag = refreshTypesHandler != null;
			bool flag2 = refreshDesignerActionsHandler != null;
			bool flag3 = refreshTasksHandler != null;
			refreshTypesHandler = null;
			refreshDesignerActionsHandler = null;
			refreshTasksHandler = null;
			if (flag || flag3 || flag2)
			{
				RefreshTypes();
				RefreshDesignerActions();
			}
		}

		private void OnTypeSystemTypesChanged(object sender, EventArgs e)
		{
			typeSystemTypesChanged = true;
			if (serviceProvider.GetService(typeof(IDesignerEventService)) is IDesignerEventService designerEventService && designerEventService.ActiveDesigner == serviceProvider.GetService(typeof(IDesignerHost)))
			{
				RefreshTypes();
			}
		}

		private void OnActiveDesignerChanged(object sender, ActiveDesignerEventArgs e)
		{
			if (e.NewDesigner == serviceProvider.GetService(typeof(IDesignerHost)) && typeSystemTypesChanged)
			{
				RefreshTypes();
			}
			else
			{
				RefreshTasks();
			}
		}

		private void OnComponentChanged(object sender, ComponentChangedEventArgs eventArgs)
		{
			RefreshDesignerActions();
		}

		private void RefreshTypes()
		{
			if (refreshTypesHandler == null && typeSystemTypesChanged && serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				refreshTypesHandler = OnRefreshTypes;
				workflowView.Idle += refreshTypesHandler;
			}
			typeSystemTypesChanged = false;
		}

		private void OnRefreshTypes(object sender, EventArgs e)
		{
			if (refreshTypesHandler != null)
			{
				if (serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
				{
					workflowView.Idle -= refreshTypesHandler;
				}
				refreshTypesHandler = null;
			}
			Activity activity = ((serviceProvider.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost) ? (designerHost.RootComponent as Activity) : null);
			if (activity == null)
			{
				return;
			}
			ITypeProvider typeProvider = serviceProvider.GetService(typeof(ITypeProvider)) as ITypeProvider;
			if (typeProvider != null)
			{
				Walker walker = new Walker();
				walker.FoundProperty += delegate(Walker w, WalkerEventArgs args)
				{
					if (args.CurrentValue != null && args.CurrentProperty != null && args.CurrentProperty.PropertyType == typeof(Type) && args.CurrentValue is Type)
					{
						Type type = typeProvider.GetType(((Type)args.CurrentValue).FullName);
						if (type != null)
						{
							args.CurrentProperty.SetValue(args.CurrentPropertyOwner, type, null);
							if (args.CurrentActivity != null)
							{
								TypeDescriptor.Refresh(args.CurrentActivity);
							}
						}
					}
					else if (args.CurrentProperty == null && args.CurrentValue is DependencyObject && !(args.CurrentValue is Activity))
					{
						walker.WalkProperties(args.CurrentActivity, args.CurrentValue);
					}
				};
				walker.FoundActivity += delegate(Walker w, WalkerEventArgs args)
				{
					if (args.CurrentActivity != null)
					{
						TypeDescriptor.Refresh(args.CurrentActivity);
						ActivityDesigner designer = ActivityDesigner.GetDesigner(args.CurrentActivity);
						designer?.RefreshDesignerActions();
						if (designer is InvokeWorkflowDesigner invokeWorkflowDesigner)
						{
							invokeWorkflowDesigner.RefreshTargetWorkflowType();
						}
					}
				};
				walker.Walk(activity);
			}
			if (serviceProvider.GetService(typeof(IPropertyValueUIService)) is IPropertyValueUIService propertyValueUIService)
			{
				propertyValueUIService.NotifyPropertyValueUIItemsChanged();
			}
			RefreshTasks();
			RefreshDesignerActions();
		}

		private void RefreshDesignerActions()
		{
			if (refreshDesignerActionsHandler == null && serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				refreshDesignerActionsHandler = OnRefreshDesignerActions;
				workflowView.Idle += refreshDesignerActionsHandler;
			}
		}

		private void OnRefreshDesignerActions(object sender, EventArgs e)
		{
			WorkflowView workflowView = serviceProvider.GetService(typeof(WorkflowView)) as WorkflowView;
			if (refreshDesignerActionsHandler != null)
			{
				if (workflowView != null)
				{
					workflowView.Idle -= refreshDesignerActionsHandler;
				}
				refreshDesignerActionsHandler = null;
			}
			DesignerHelpers.RefreshDesignerActions(serviceProvider);
			if (serviceProvider.GetService(typeof(IPropertyValueUIService)) is IPropertyValueUIService propertyValueUIService)
			{
				propertyValueUIService.NotifyPropertyValueUIItemsChanged();
			}
			RefreshTasks();
		}

		private void OnSelectionChanged(object sender, EventArgs e)
		{
			if (serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				workflowView.Invalidate();
			}
			RefreshTasks();
		}

		private void RefreshTasks()
		{
			if (refreshTasksHandler == null && serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				refreshTasksHandler = OnRefreshTasks;
				workflowView.Idle += refreshTasksHandler;
			}
		}

		private void OnRefreshTasks(object sender, EventArgs e)
		{
			WorkflowView workflowView = serviceProvider.GetService(typeof(WorkflowView)) as WorkflowView;
			if (refreshTasksHandler != null)
			{
				if (workflowView != null)
				{
					workflowView.Idle -= refreshTasksHandler;
				}
				refreshTasksHandler = null;
			}
			ISelectionService selectionService = serviceProvider.GetService(typeof(ISelectionService)) as ISelectionService;
			IExtendedUIService extendedUIService = serviceProvider.GetService(typeof(IExtendedUIService)) as IExtendedUIService;
			if (selectionService != null && extendedUIService != null)
			{
				extendedUIService.RemoveDesignerActions();
				IDesignerEventService designerEventService = (IDesignerEventService)serviceProvider.GetService(typeof(IDesignerEventService));
				if (designerEventService != null && designerEventService.ActiveDesigner == serviceProvider.GetService(typeof(IDesignerHost)))
				{
					foreach (object selectedComponent in selectionService.GetSelectedComponents())
					{
						ActivityDesigner activityDesigner = null;
						if (selectedComponent is HitTestInfo)
						{
							activityDesigner = ((HitTestInfo)selectedComponent).AssociatedDesigner;
						}
						else if (selectedComponent is Activity)
						{
							activityDesigner = ActivityDesigner.GetDesigner(selectedComponent as Activity);
						}
						if (activityDesigner != null)
						{
							extendedUIService.AddDesignerActions(new List<DesignerAction>(activityDesigner.DesignerActions).ToArray());
						}
					}
				}
			}
			workflowView?.Invalidate();
		}

		private void OnPropertyGridAdornments(ITypeDescriptorContext context, PropertyDescriptor propDesc, ArrayList valueUIItemList)
		{
			IComponent component = null;
			IReferenceService referenceService = serviceProvider.GetService(typeof(IReferenceService)) as IReferenceService;
			if (referenceService != null)
			{
				component = referenceService.GetComponent(context.Instance);
			}
			string text = string.Empty;
			if (propDesc.Attributes[typeof(DefaultPropertyAttribute)] is DefaultPropertyAttribute { Name: not null } defaultPropertyAttribute && defaultPropertyAttribute.Name.Length > 0)
			{
				text = propDesc.Name + "." + defaultPropertyAttribute.Name;
			}
			if (component == null)
			{
				return;
			}
			ActivityDesigner designer = ActivityDesigner.GetDesigner(component as Activity);
			if (designer == null)
			{
				return;
			}
			if (!designer.IsLocked && ActivityBindPropertyDescriptor.IsBindableProperty(propDesc) && !propDesc.IsReadOnly)
			{
				valueUIItemList.Add(new PropertyValueUIItem(DR.GetImage("Bind"), OnBindProperty, DR.GetString("BindProperty")));
			}
			string name = referenceService.GetName(component);
			string name2 = referenceService.GetName(context.Instance);
			name2 = ((name2.Length > name.Length) ? (name2.Substring(name.Length + 1, name2.Length - name.Length - 1) + "." + propDesc.Name) : string.Empty);
			foreach (DesignerAction designerAction in designer.DesignerActions)
			{
				string propertyName = designerAction.PropertyName;
				if (propertyName != null && propertyName.Length != 0 && (propertyName == propDesc.Name || propertyName == name2 || propertyName == text))
				{
					PropertyValueUIItemHandler @object = new PropertyValueUIItemHandler(designerAction);
					valueUIItemList.Add(new PropertyValueUIItem(designerAction.Image, @object.OnFixPropertyError, designerAction.Text));
					break;
				}
			}
		}

		private void OnBindProperty(ITypeDescriptorContext context, PropertyDescriptor descriptor, PropertyValueUIItem invokedItem)
		{
			BindUITypeEditor.EditValue(context);
		}
	}
	internal static class DR
	{
		internal const string ResourceSet = "System.Workflow.ComponentModel.Design.DesignerResources";

		private static ResourceManager resourceManager = new ResourceManager("System.Workflow.ComponentModel.Design.DesignerResources", Assembly.GetExecutingAssembly());

		internal const string ViewPreviousActivity = "ViewPreviousActivity";

		internal const string ViewNextActivity = "ViewNextActivity";

		internal const string PreviewActivity = "PreviewActivity";

		internal const string EditActivity = "EditActivity";

		internal const string GenerateEventHandlers = "GenerateEventHandlers";

		internal const string PromoteBindings = "PromoteBindings";

		internal const string BindSelectedProperty = "BindSelectedProperty";

		internal const string BindSelectedPropertyFormat = "BindSelectedPropertyFormat";

		internal const string BindProperty = "BindProperty";

		internal const string PackageFileInvalid = "PackageFileInvalid";

		internal const string PackageFileInvalidChars = "PackageFileInvalidChars";

		internal const string PackageFileDefault = "PackageFileDefault";

		internal const string PackageInvalidValidatorType = "PackageInvalidValidatorType";

		internal const string PackageFileExist = "PackageFileExist";

		internal const string OpenfileDialogTitle = "OpenfileDialogTitle";

		internal const string PackageAssemblyReferenceFilter = "PackageAssemblyReferenceFilter";

		internal const string CreatePackageTitle = "CreatePackageTitle";

		internal const string ActivitySetDefaultName = "ActivitySetDefaultName";

		internal const string ActivitySetNoName = "ActivitySetNoName";

		internal const string ActivitySetNoActivity = "ActivitySetNoActivity";

		internal const string ModifyPackageTitle = "ModifyPackageTitle";

		internal const string ViewPackageTitle = "ViewPackageTitle";

		internal const string ErrorInitPackage = "ErrorInitPackage";

		internal const string CheckAll = "CheckAll";

		internal const string NoHelpAvailable = "NoHelpAvailable";

		internal const string ActivitySetDefaultFileName = "ActivitySetDefaultFileName";

		internal const string TypeInvalid = "TypeInvalid";

		internal const string FilterDescription = "FilterDescription";

		internal const string Zoom400Mode = "Zoom400Mode";

		internal const string Zoom300Mode = "Zoom300Mode";

		internal const string Zoom200Mode = "Zoom200Mode";

		internal const string Zoom150Mode = "Zoom150Mode";

		internal const string Zoom100Mode = "Zoom100Mode";

		internal const string Zoom75Mode = "Zoom75Mode";

		internal const string Zoom50Mode = "Zoom50Mode";

		internal const string ZoomShowAll = "ZoomShowAll";

		internal const string ActivityInsertError = "ActivityInsertError";

		internal const string InvalidOperationBadClipboardFormat = "InvalidOperationBadClipboardFormat";

		internal const string ArgumentExceptionDesignerVerbIdsRange = "ArgumentExceptionDesignerVerbIdsRange";

		internal const string InvalidOperationStoreAlreadyClosed = "InvalidOperationStoreAlreadyClosed";

		internal const string InvalidOperationDeserializationReturnedNonActivity = "InvalidOperationDeserializationReturnedNonActivity";

		internal const string AccessibleAction = "AccessibleAction";

		internal const string LeftScrollButtonAccessibleDescription = "LeftScrollButtonAccessibleDescription";

		internal const string RightScrollButtonAccessibleDescription = "RightScrollButtonAccessibleDescription";

		internal const string ActivityDesignerAccessibleDescription = "ActivityDesignerAccessibleDescription";

		internal const string LeftScrollButtonAccessibleHelp = "LeftScrollButtonAccessibleHelp";

		internal const string RightScrollButtonAccessibleHelp = "RightScrollButtonAccessibleHelp";

		internal const string ActivityDesignerAccessibleHelp = "ActivityDesignerAccessibleHelp";

		internal const string LeftScrollButtonName = "LeftScrollButtonName";

		internal const string RightScrollButtonName = "RightScrollButtonName";

		internal const string SelectActivityDesc = "SelectActivityDesc";

		internal const string PreviewMode = "PreviewMode";

		internal const string EditMode = "EditMode";

		internal const string PreviewButtonAccessibleDescription = "PreviewButtonAccessibleDescription";

		internal const string PreviewButtonAccessibleHelp = "PreviewButtonAccessibleHelp";

		internal const string PreviewButtonName = "PreviewButtonName";

		internal const string CancelDescriptionString = "CancelDescriptionString";

		internal const string HeaderFooterStringNone = "HeaderFooterStringNone";

		internal const string HeaderFooterStringCustom = "HeaderFooterStringCustom";

		internal const string HeaderFooterFormat1 = "HeaderFooterFormat1";

		internal const string HeaderFooterFormat2 = "HeaderFooterFormat2";

		internal const string HeaderFooterFormat3 = "HeaderFooterFormat3";

		internal const string HeaderFooterFormat4 = "HeaderFooterFormat4";

		internal const string HeaderFooterFormat5 = "HeaderFooterFormat5";

		internal const string HeaderFooterFormat6 = "HeaderFooterFormat6";

		internal const string HeaderFooterFormat7 = "HeaderFooterFormat7";

		internal const string HeaderFooterFormat8 = "HeaderFooterFormat8";

		internal const string HeaderFooterFormat9 = "HeaderFooterFormat9";

		internal const string EnteredMarginsAreNotValidErrorMessage = "EnteredMarginsAreNotValidErrorMessage";

		internal const string ChildActivitiesNotConfigured = "ChildActivitiesNotConfigured";

		internal const string ConnectorAccessibleDescription = "ConnectorAccessibleDescription";

		internal const string ConnectorAccessibleHelp = "ConnectorAccessibleHelp";

		internal const string ConnectorDesc = "ConnectorDesc";

		internal const string WorkflowDesc = "WorkflowDesc";

		internal const string AddBranch = "AddBranch";

		internal const string DropActivitiesHere = "DropActivitiesHere";

		internal const string DesignerNotInitialized = "DesignerNotInitialized";

		internal const string MyFavoriteTheme = "MyFavoriteTheme";

		internal const string AmbientThemeException = "AmbientThemeException";

		internal const string ThemeTypesMismatch = "ThemeTypesMismatch";

		internal const string DesignerThemeException = "DesignerThemeException";

		internal const string CustomStyleNotSupported = "CustomStyleNotSupported";

		internal const string EmptyFontFamilyNotSupported = "EmptyFontFamilyNotSupported";

		internal const string FontFamilyNotSupported = "FontFamilyNotSupported";

		internal const string ContentAlignmentNotSupported = "ContentAlignmentNotSupported";

		internal const string ZoomLevelException2 = "ZoomLevelException2";

		internal const string ShadowDepthException = "ShadowDepthException";

		internal const string ThereIsNoPrinterInstalledErrorMessage = "ThereIsNoPrinterInstalledErrorMessage";

		internal const string WorkflowViewAccessibleDescription = "WorkflowViewAccessibleDescription";

		internal const string WorkflowViewAccessibleHelp = "WorkflowViewAccessibleHelp";

		internal const string WorkflowViewAccessibleName = "WorkflowViewAccessibleName";

		internal const string SelectedPrinterIsInvalidErrorMessage = "SelectedPrinterIsInvalidErrorMessage";

		internal const string ObjectDoesNotSupportIPropertyValuesProvider = "ObjectDoesNotSupportIPropertyValuesProvider";

		internal const string ThemeFileFilter = "ThemeFileFilter";

		internal const string ThemeConfig = "ThemeConfig";

		internal const string ThemeNameNotValid = "ThemeNameNotValid";

		internal const string ThemePathNotValid = "ThemePathNotValid";

		internal const string ThemeFileNotXml = "ThemeFileNotXml";

		internal const string UpdateRelativePaths = "UpdateRelativePaths";

		internal const string ThemeDescription = "ThemeDescription";

		internal const string ThemeFileCreationError = "ThemeFileCreationError";

		internal const string Preview = "Preview";

		internal const string ArgumentExceptionSmartActionIdsRange = "ArgumentExceptionSmartActionIdsRange";

		internal const string ActivitiesDesc = "ActivitiesDesc";

		internal const string MoveLeftDesc = "MoveLeftDesc";

		internal const string MoveRightDesc = "MoveRightDesc";

		internal const string DropExceptionsHere = "DropExceptionsHere";

		internal const string SpecifyTargetWorkflow = "SpecifyTargetWorkflow";

		internal const string ServiceHelpText = "ServiceHelpText";

		internal const string StartWorkFlow = "StartWorkFlow";

		internal const string Complete = "Complete";

		internal const string ServiceExceptions = "ServiceExceptions";

		internal const string ServiceEvents = "ServiceEvents";

		internal const string ServiceCompensation = "ServiceCompensation";

		internal const string ScopeDesc = "ScopeDesc";

		internal const string EventsDesc = "EventsDesc";

		internal const string InvokeWebServiceDisplayName = "InvokeWebServiceDisplayName";

		internal const string InvalidClassNameIdentifier = "InvalidClassNameIdentifier";

		internal const string InvalidBaseTypeOfCompanion = "InvalidBaseTypeOfCompanion";

		internal const string Error_InvalidActivity = "Error_InvalidActivity";

		internal const string Error_MultiviewSequentialActivityDesigner = "Error_MultiviewSequentialActivityDesigner";

		internal const string AddingBranch = "AddingBranch";

		internal const string WorkflowPrintDocumentNotFound = "WorkflowPrintDocumentNotFound";

		internal const string DefaultTheme = "DefaultTheme";

		internal const string DefaultThemeDescription = "DefaultThemeDescription";

		internal const string OSTheme = "OSTheme";

		internal const string SystemThemeDescription = "SystemThemeDescription";

		internal const string ActivitySetMessageBoxTitle = "ActivitySetMessageBoxTitle";

		internal const string ViewExceptions = "ViewExceptions";

		internal const string ViewEvents = "ViewEvents";

		internal const string ViewCompensation = "ViewCompensation";

		internal const string ViewCancelHandler = "ViewCancelHandler";

		internal const string ViewActivity = "ViewActivity";

		internal const string ThemeMessageBoxTitle = "ThemeMessageBoxTitle";

		internal const string InfoTipTitle = "InfoTipTitle";

		internal const string InfoTipId = "InfoTipId";

		internal const string InfoTipDescription = "InfoTipDescription";

		internal const string TypeBrowser_ProblemsLoadingAssembly = "TypeBrowser_ProblemsLoadingAssembly";

		internal const string TypeBrowser_UnableToLoadOneOrMoreTypes = "TypeBrowser_UnableToLoadOneOrMoreTypes";

		internal const string StartWorkflow = "StartWorkflow";

		internal const string EndWorkflow = "EndWorkflow";

		internal const string Error_FailedToDeserializeComponents = "Error_FailedToDeserializeComponents";

		internal const string Error_Reason = "Error_Reason";

		internal const string WorkflowDesignerTitle = "WorkflowDesignerTitle";

		internal const string RuleName = "RuleName";

		internal const string RuleExpression = "RuleExpression";

		internal const string DeclarativeRules = "DeclarativeRules";

		internal const string Error_ThemeAttributeMissing = "Error_ThemeAttributeMissing";

		internal const string Error_ThemeTypeMissing = "Error_ThemeTypeMissing";

		internal const string Error_ThemeTypesMismatch = "Error_ThemeTypesMismatch";

		internal const string ZOrderUndoDescription = "ZOrderUndoDescription";

		internal const string SendToBack = "SendToBack";

		internal const string BringToFront = "BringToFront";

		internal const string ResizeUndoDescription = "ResizeUndoDescription";

		internal const string FitToScreenDescription = "FitToScreenDescription";

		internal const string FitToWorkflowDescription = "FitToWorkflowDescription";

		internal const string BMPImageFormat = "BMPImageFormat";

		internal const string JPEGImageFormat = "JPEGImageFormat";

		internal const string PNGImageFormat = "PNGImageFormat";

		internal const string TIFFImageFormat = "TIFFImageFormat";

		internal const string WMFImageFormat = "WMFImageFormat";

		internal const string EXIFImageFormat = "EXIFImageFormat";

		internal const string EMFImageFormat = "EMFImageFormat";

		internal const string CustomEventType = "CustomEventType";

		internal const string CustomPropertyType = "CustomPropertyType";

		internal const string SaveWorkflowImageDialogTitle = "SaveWorkflowImageDialogTitle";

		internal const string ImageFileFilter = "ImageFileFilter";

		internal const string Rules = "Rules";

		internal const string More = "More";

		internal const string Empty = "Empty";

		internal const string InvalidDockingStyle = "InvalidDockingStyle";

		internal const string ButtonInformationMissing = "ButtonInformationMissing";

		internal const string InvalidDesignerSpecified = "InvalidDesignerSpecified";

		internal const string WorkflowViewNull = "WorkflowViewNull";

		internal const string Error_AddConnector1 = "Error_AddConnector1";

		internal const string Error_AddConnector2 = "Error_AddConnector2";

		internal const string Error_AddConnector3 = "Error_AddConnector3";

		internal const string Error_ConnectionPoint = "Error_ConnectionPoint";

		internal const string Error_Connector1 = "Error_Connector1";

		internal const string Error_Connector2 = "Error_Connector2";

		internal const string Error_WorkflowNotLoaded = "Error_WorkflowNotLoaded";

		internal const string Error_InvalidImageResource = "Error_InvalidImageResource";

		internal const string ThemePropertyReadOnly = "ThemePropertyReadOnly";

		internal const string Error_TabExistsWithSameId = "Error_TabExistsWithSameId";

		internal const string Error_WorkflowLayoutNull = "Error_WorkflowLayoutNull";

		internal const string BuildTargetWorkflow = "BuildTargetWorkflow";

		internal const string Activity = "Activity";

		internal const string MoveLeft = "MoveLeft";

		internal const string MoveLeftUp = "MoveLeftUp";

		internal const string MoveRight = "MoveRight";

		internal const string MoveRightUp = "MoveRightUp";

		internal const string PreviewModeIcon = "PreviewModeIcon";

		internal const string EditModeIcon = "EditModeIcon";

		internal const string PreviewIndicator = "PreviewIndicator";

		internal const string ReadOnly = "ReadOnly";

		internal const string ConfigError = "ConfigError";

		internal const string SmartTag = "SmartTag";

		internal const string ArrowLeft = "ArrowLeft";

		internal const string DropShapeShort = "DropShapeShort";

		internal const string FitToWorkflow = "FitToWorkflow";

		internal const string MoveAnchor = "MoveAnchor";

		internal const string Activities = "Activities";

		internal const string Compensation = "Compensation";

		internal const string SequenceArrow = "SequenceArrow";

		internal const string Exception = "Exception";

		internal const string Event = "Event";

		internal const string Start = "Start";

		internal const string End = "End";

		internal const string FitToScreen = "FitToScreen";

		internal const string Bind = "Bind";

		internal static string GetString(string resID, params object[] args)
		{
			return GetString(CultureInfo.CurrentUICulture, resID, args);
		}

		internal static string GetString(CultureInfo culture, string resID, params object[] args)
		{
			string text = resourceManager.GetString(resID, culture);
			if (args != null && args.Length != 0)
			{
				text = string.Format(culture, text, args);
			}
			return text;
		}

		internal static Image GetImage(string resID)
		{
			Image image = resourceManager.GetObject(resID) as Image;
			if (image is Bitmap bitmap)
			{
				bitmap.MakeTransparent(AmbientTheme.TransparentColor);
			}
			return image;
		}
	}
	internal abstract class ActivityHostDesigner : SequentialActivityDesigner
	{
		private class ContainedDesignSurface : DesignSurface
		{
			private CompositeActivityDesigner parentDesigner;

			internal ContainedDesignSurface(IServiceProvider parentServiceProvider, CompositeActivityDesigner parentDesigner)
				: base(parentServiceProvider)
			{
				this.parentDesigner = parentDesigner;
				if (base.ServiceContainer != null)
				{
					base.ServiceContainer.RemoveService(typeof(ISelectionService));
				}
			}

			protected override IDesigner CreateDesigner(IComponent component, bool rootDesigner)
			{
				IDesigner designer = base.CreateDesigner(component, rootDesigner);
				if (rootDesigner && designer is IWorkflowRootDesigner workflowRootDesigner)
				{
					workflowRootDesigner.InvokingDesigner = parentDesigner;
				}
				return designer;
			}
		}

		private sealed class ContainedDesignerLoader : WorkflowDesignerLoader
		{
			private Activity rootActivity;

			public override string FileName => string.Empty;

			internal ContainedDesignerLoader(Activity rootActivity)
			{
				this.rootActivity = rootActivity;
			}

			protected override void Initialize()
			{
				base.Initialize();
				ServiceCreatorCallback callback = OnCreateService;
				base.LoaderHost.RemoveService(typeof(IReferenceService));
				base.LoaderHost.AddService(typeof(IReferenceService), callback);
			}

			private object OnCreateService(IServiceContainer container, Type serviceType)
			{
				object result = null;
				if (serviceType == typeof(IReferenceService))
				{
					result = new ReferenceService(base.LoaderHost);
				}
				return result;
			}

			public override TextReader GetFileReader(string filePath)
			{
				return null;
			}

			public override TextWriter GetFileWriter(string filePath)
			{
				return null;
			}

			public override void ForceReload()
			{
			}

			protected override void PerformLoad(IDesignerSerializationManager serializationManager)
			{
				IDesignerHost designerHost = (IDesignerHost)GetService(typeof(IDesignerHost));
				if (rootActivity != null && rootActivity != null)
				{
					AddActivityToDesigner(rootActivity);
					SetBaseComponentClassName(rootActivity.GetType().FullName);
				}
			}

			public override void Flush()
			{
			}
		}

		private IWorkflowRootDesigner containedRootDesigner;

		private ContainedDesignerLoader containedLoader;

		private ContainedDesignSurface containedDesignSurface;

		private MemoryStream lastInvokedWorkflowState;

		public override ReadOnlyCollection<ActivityDesigner> ContainedDesigners
		{
			get
			{
				List<ActivityDesigner> list = new List<ActivityDesigner>();
				if (containedRootDesigner != null)
				{
					list.Add((ActivityDesigner)containedRootDesigner);
				}
				return list.AsReadOnly();
			}
		}

		protected abstract Activity RootActivity { get; }

		public ActivityHostDesigner()
		{
		}

		protected void RefreshHostedActivity()
		{
			if (containedRootDesigner != null)
			{
				lastInvokedWorkflowState = new MemoryStream();
				BinaryWriter writer = new BinaryWriter(lastInvokedWorkflowState);
				SaveViewState(writer);
			}
			containedRootDesigner = LoadHostedWorkflow();
			if (lastInvokedWorkflowState != null)
			{
				lastInvokedWorkflowState.Position = 0L;
				BinaryReader reader = new BinaryReader(lastInvokedWorkflowState);
				try
				{
					LoadViewState(reader);
				}
				catch
				{
				}
			}
			PerformLayout();
		}

		public override bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection<Activity> activitiesToInsert)
		{
			return false;
		}

		public override void InsertActivities(HitTestInfo insertLocation, ReadOnlyCollection<Activity> activitiesToInsert)
		{
		}

		public override bool CanRemoveActivities(ReadOnlyCollection<Activity> activitiesToRemove)
		{
			return false;
		}

		public override void RemoveActivities(ReadOnlyCollection<Activity> activitiesToRemove)
		{
		}

		protected override void Dispose(bool disposing)
		{
			try
			{
				if (disposing)
				{
					containedRootDesigner = null;
					containedLoader = null;
					if (containedDesignSurface != null)
					{
						containedDesignSurface.Dispose();
						containedDesignSurface = null;
					}
					if (lastInvokedWorkflowState != null)
					{
						lastInvokedWorkflowState.Close();
						lastInvokedWorkflowState = null;
					}
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		protected override void SaveViewState(BinaryWriter writer)
		{
			base.SaveViewState(writer);
			if (containedDesignSurface != null)
			{
				writer.Write(value: true);
				if (!(containedDesignSurface.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
				{
					throw new Exception(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
				}
				DesignerHelpers.SerializeDesignerStates(designerHost, writer);
			}
			else
			{
				writer.Write(value: false);
			}
		}

		protected override void LoadViewState(BinaryReader reader)
		{
			base.LoadViewState(reader);
			if (!reader.ReadBoolean())
			{
				return;
			}
			if (containedDesignSurface == null)
			{
				containedRootDesigner = LoadHostedWorkflow();
			}
			if (containedDesignSurface != null)
			{
				if (!(containedDesignSurface.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
				{
					throw new Exception(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
				}
				DesignerHelpers.DeserializeDesignerStates(designerHost, reader);
			}
		}

		private IWorkflowRootDesigner LoadHostedWorkflow()
		{
			if (RootActivity != null)
			{
				containedLoader = new ContainedDesignerLoader(RootActivity);
				containedDesignSurface = new ContainedDesignSurface(base.Activity.Site, this);
				if (!containedDesignSurface.IsLoaded)
				{
					containedDesignSurface.BeginLoad(containedLoader);
				}
				return ActivityDesigner.GetSafeRootDesigner(containedDesignSurface.GetService(typeof(IDesignerHost)) as IServiceProvider);
			}
			return null;
		}
	}
	[ActivityDesignerTheme(typeof(InvokeWorkflowDesignerTheme))]
	internal sealed class InvokeWorkflowDesigner : ActivityHostDesigner
	{
		internal const string InvokeWorkflowRef = "System.Workflow.Activities.InvokeWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";

		private static readonly ArrayList ReservedParameterNames = new ArrayList(new string[6] { "Name", "Enabled", "Description", "TargetWorkflow", "Invoking", "ParameterBindings" });

		private Type targetWorkflowType;

		protected override Activity RootActivity
		{
			get
			{
				if (targetWorkflowType == null || targetWorkflowType is DesignTimeType)
				{
					return null;
				}
				return Activator.CreateInstance(targetWorkflowType) as Activity;
			}
		}

		protected override void Initialize(Activity activity)
		{
			base.Initialize(activity);
			HelpText = DR.GetString("SpecifyTargetWorkflow");
			RefreshTargetWorkflowType();
		}

		protected override void PreFilterProperties(IDictionary properties)
		{
			base.PreFilterProperties(properties);
			if (!(targetWorkflowType != null))
			{
				return;
			}
			try
			{
				PropertyInfo[] properties2 = targetWorkflowType.GetProperties();
				foreach (PropertyInfo propertyInfo in properties2)
				{
					if (!propertyInfo.CanWrite || propertyInfo.DeclaringType == typeof(DependencyObject) || propertyInfo.DeclaringType == typeof(Activity) || propertyInfo.DeclaringType == typeof(CompositeActivity) || ((propertyInfo.DeclaringType == Type.GetType("System.Workflow.Activities.SequentialWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35") || propertyInfo.DeclaringType == Type.GetType("System.Workflow.Activities.StateMachineWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")) && string.Equals(propertyInfo.Name, "DynamicUpdateCondition", StringComparison.Ordinal)))
					{
						continue;
					}
					bool flag = false;
					Type baseType = targetWorkflowType;
					while (baseType != null && baseType is DesignTimeType)
					{
						baseType = baseType.BaseType;
					}
					if (baseType != null)
					{
						foreach (DependencyProperty item in DependencyProperty.FromType(baseType))
						{
							if (item.Name == propertyInfo.Name && item.DefaultMetadata.IsMetaProperty)
							{
								flag = true;
								break;
							}
						}
					}
					if (!flag)
					{
						PropertyDescriptor propertyDescriptor = new ParameterInfoBasedPropertyDescriptor(Type.GetType("System.Workflow.Activities.InvokeWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"), propertyInfo.Name, propertyInfo.PropertyType, ReservedParameterNames.Contains(propertyInfo.Name), DesignOnlyAttribute.Yes);
						properties[propertyDescriptor.Name] = propertyDescriptor;
					}
				}
			}
			catch (MissingMemberException)
			{
			}
		}

		protected override void OnActivityChanged(ActivityChangedEventArgs e)
		{
			base.OnActivityChanged(e);
			if (e.Member == null || !string.Equals(e.Member.Name, "TargetWorkflow", StringComparison.Ordinal))
			{
				return;
			}
			if (e.OldValue != e.NewValue && base.Activity != null)
			{
				PropertyInfo property = base.Activity.GetType().GetProperty("ParameterBindings", BindingFlags.Instance | BindingFlags.Public);
				if (property != null && property.GetValue(base.Activity, null) is WorkflowParameterBindingCollection workflowParameterBindingCollection)
				{
					workflowParameterBindingCollection.Clear();
				}
			}
			RefreshTargetWorkflowType();
		}

		internal void RefreshTargetWorkflowType()
		{
			if (base.Activity == null)
			{
				return;
			}
			ITypeFilterProvider typeFilterProvider = base.Activity as ITypeFilterProvider;
			Type type = base.Activity.GetType().InvokeMember("TargetWorkflow", BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy | BindingFlags.GetProperty | BindingFlags.ExactBinding, null, base.Activity, new object[0], CultureInfo.InvariantCulture) as Type;
			if (type != null && typeFilterProvider.CanFilterType(type, throwOnError: false))
			{
				ITypeProvider typeProvider = (ITypeProvider)GetService(typeof(ITypeProvider));
				if (typeProvider != null)
				{
					Type type2 = null;
					type2 = ((!(type.Assembly == null) || !(typeProvider.LocalAssembly != null)) ? typeProvider.GetType(type.FullName) : typeProvider.LocalAssembly.GetType(type.FullName));
					if (type2 != null)
					{
						type = type2;
					}
				}
			}
			else
			{
				type = null;
			}
			if (targetWorkflowType != type)
			{
				targetWorkflowType = type;
				RefreshHostedActivity();
				if (targetWorkflowType is DesignTimeType)
				{
					HelpText = DR.GetString("BuildTargetWorkflow");
				}
				else
				{
					HelpText = DR.GetString("SpecifyTargetWorkflow");
				}
			}
			TypeDescriptor.Refresh(base.Activity);
		}
	}
	internal sealed class InvokeWorkflowDesignerTheme : CompositeDesignerTheme
	{
		public InvokeWorkflowDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
			ShowDropShadow = false;
			ConnectorStartCap = LineAnchor.None;
			ConnectorEndCap = LineAnchor.ArrowAnchor;
			ForeColor = Color.FromArgb(255, 0, 0, 0);
			BorderColor = Color.FromArgb(255, 224, 224, 224);
			BorderStyle = DashStyle.Dash;
			BackColorStart = Color.FromArgb(0, 0, 0, 0);
			BackColorEnd = Color.FromArgb(0, 0, 0, 0);
		}
	}
	internal interface IConnectableDesigner
	{
		bool CanConnect(ConnectionPoint source, ConnectionPoint target);

		void OnConnected(ConnectionPoint source, ConnectionPoint target);
	}
	internal enum ZOrder
	{
		Foreground = 1,
		Background
	}
	[DesignerSerializer(typeof(FreeformActivityDesignerLayoutSerializer), typeof(WorkflowMarkupSerializer))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class FreeformActivityDesigner : CompositeActivityDesigner
	{
		internal class FreeformDesignerAccessibleObject : CompositeDesignerAccessibleObject
		{
			public FreeformDesignerAccessibleObject(FreeformActivityDesigner activityDesigner)
				: base(activityDesigner)
			{
			}

			public override AccessibleObject GetChild(int index)
			{
				FreeformActivityDesigner freeformActivityDesigner = (FreeformActivityDesigner)base.ActivityDesigner;
				if (freeformActivityDesigner.ShowConnectorsInForeground)
				{
					int count = freeformActivityDesigner.Connectors.Count;
					if (index < count)
					{
						return freeformActivityDesigner.Connectors[index].AccessibilityObject;
					}
					return freeformActivityDesigner.ContainedDesigners[index - count].AccessibilityObject;
				}
				int count2 = freeformActivityDesigner.ContainedDesigners.Count;
				if (index < count2)
				{
					return freeformActivityDesigner.ContainedDesigners[index].AccessibilityObject;
				}
				return freeformActivityDesigner.Connectors[index - count2].AccessibilityObject;
			}

			public override int GetChildCount()
			{
				FreeformActivityDesigner freeformActivityDesigner = (FreeformActivityDesigner)base.ActivityDesigner;
				return base.GetChildCount() + freeformActivityDesigner.Connectors.Count;
			}
		}

		private sealed class FreeFormConnectorSelectionGlyph : ConnectorSelectionGlyph
		{
			public override bool IsPrimarySelection => isPrimarySelectionGlyph;

			internal FreeFormConnectorSelectionGlyph(int connectorIndex, bool isPrimarySelectionGlyph)
				: base(connectorIndex, isPrimarySelectionGlyph)
			{
			}

			public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
			{
				return Rectangle.Empty;
			}

			protected override void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer)
			{
			}
		}

		[ProvideProperty("Location", typeof(Activity))]
		[ProvideProperty("Size", typeof(Activity))]
		private sealed class FreeFormDesignerPropertyExtender : IExtenderProvider
		{
			[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
			[DesignOnly(true)]
			[MergableProperty(false)]
			[Browsable(false)]
			public Point GetLocation(Activity activity)
			{
				Point result = Point.Empty;
				ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
				if (designer != null)
				{
					result = designer.Location;
				}
				return result;
			}

			public void SetLocation(Activity activity, Point location)
			{
				ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
				if (designer == null)
				{
					return;
				}
				FreeformActivityDesigner freeformActivityDesigner = ((designer.ParentDesigner != null) ? (designer.ParentDesigner as FreeformActivityDesigner) : (designer as FreeformActivityDesigner));
				if (freeformActivityDesigner != null)
				{
					designer.Location = location;
					if (freeformActivityDesigner.AutoSize)
					{
						freeformActivityDesigner.PerformLayout();
					}
				}
			}

			[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
			[DesignOnly(true)]
			[MergableProperty(false)]
			[Browsable(false)]
			public Size GetSize(Activity activity)
			{
				Size result = Size.Empty;
				ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
				if (designer != null)
				{
					result = designer.Size;
				}
				return result;
			}

			public void SetSize(Activity activity, Size size)
			{
				ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
				if (designer == null)
				{
					return;
				}
				FreeformActivityDesigner freeformActivityDesigner = ((designer.ParentDesigner != null) ? (designer.ParentDesigner as FreeformActivityDesigner) : (designer as FreeformActivityDesigner));
				if (freeformActivityDesigner != null)
				{
					designer.Size = size;
					if (freeformActivityDesigner.AutoSize)
					{
						freeformActivityDesigner.PerformLayout();
					}
				}
			}

			bool IExtenderProvider.CanExtend(object extendee)
			{
				bool result = false;
				if (extendee is Activity activity)
				{
					ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
					if (designer != null)
					{
						FreeformActivityDesigner freeformActivityDesigner = ((designer.ParentDesigner != null) ? (designer.ParentDesigner as FreeformActivityDesigner) : (designer as FreeformActivityDesigner));
						if (freeformActivityDesigner != null)
						{
							result = true;
						}
					}
				}
				return result;
			}
		}

		internal static Size DefaultAutoSizeMargin = new Size(40, 40);

		private FreeformDesignerAccessibleObject accessibilityObject;

		private bool autoSize = true;

		private AutoSizeMode autoSizeMode = AutoSizeMode.GrowOnly;

		private Size autoSizeMargin = DefaultAutoSizeMargin;

		private bool enableUserDrawnConnectors = true;

		private List<Connector> connectors = new List<Connector>();

		private bool retainContainedDesignerLocations;

		private List<ActivityDesigner> movedActivities;

		public override AccessibleObject AccessibilityObject
		{
			get
			{
				if (accessibilityObject == null)
				{
					accessibilityObject = new FreeformDesignerAccessibleObject(this);
				}
				return accessibilityObject;
			}
		}

		[DefaultValue(true)]
		public bool AutoSize
		{
			get
			{
				return autoSize;
			}
			set
			{
				if (autoSize != value)
				{
					autoSize = value;
					PerformLayout();
				}
			}
		}

		[DefaultValue(AutoSizeMode.GrowOnly)]
		public AutoSizeMode AutoSizeMode
		{
			get
			{
				return autoSizeMode;
			}
			set
			{
				if (autoSizeMode != value)
				{
					autoSizeMode = value;
					PerformLayout();
				}
			}
		}

		public Size AutoSizeMargin
		{
			get
			{
				Size result = autoSizeMargin;
				if (WorkflowTheme.CurrentTheme.AmbientTheme.ShowGrid)
				{
					Size gridSize = WorkflowTheme.CurrentTheme.AmbientTheme.GridSize;
					result.Width += gridSize.Width / 2;
					result.Height += gridSize.Height / 2;
				}
				return result;
			}
			set
			{
				if (!(autoSizeMargin == value))
				{
					autoSizeMargin = value;
					PerformLayout();
				}
			}
		}

		[DefaultValue(true)]
		public bool EnableUserDrawnConnectors
		{
			get
			{
				if (enableUserDrawnConnectors)
				{
					return base.IsEditable;
				}
				return false;
			}
			set
			{
				enableUserDrawnConnectors = value;
			}
		}

		public override bool CanExpandCollapse => false;

		public override object FirstSelectableObject
		{
			get
			{
				IList<ActivityDesigner> containedDesigners = ContainedDesigners;
				if (containedDesigners.Count <= 0)
				{
					return null;
				}
				return containedDesigners[0].Activity;
			}
		}

		public override object LastSelectableObject
		{
			get
			{
				IList<ActivityDesigner> containedDesigners = ContainedDesigners;
				if (containedDesigners.Count <= 0)
				{
					return null;
				}
				return containedDesigners[containedDesigners.Count - 1].Activity;
			}
		}

		public override Size MinimumSize
		{
			get
			{
				Size minimumSize = base.MinimumSize;
				if (base.Activity != null && ((IComponent)base.Activity).Site != null && !(base.ParentDesigner is FreeformActivityDesigner))
				{
					minimumSize.Width *= 4;
					minimumSize.Height *= 4;
				}
				if (base.IsRootDesigner && InvokingDesigner == null)
				{
					WorkflowView parentView = base.ParentView;
					minimumSize.Width = Math.Max(minimumSize.Width, parentView.ViewPortSize.Width - 2 * DefaultWorkflowLayout.Separator.Width);
					minimumSize.Height = Math.Max(minimumSize.Height, parentView.ViewPortSize.Height - 2 * DefaultWorkflowLayout.Separator.Height);
				}
				if (AutoSize)
				{
					Rectangle enclosingRectangle = GetEnclosingRectangle();
					if (!enclosingRectangle.IsEmpty)
					{
						minimumSize.Width = Math.Max(minimumSize.Width, enclosingRectangle.Width);
						minimumSize.Height = Math.Max(minimumSize.Height, enclosingRectangle.Height);
					}
				}
				return minimumSize;
			}
		}

		public override Point Location
		{
			get
			{
				return base.Location;
			}
			set
			{
				if (Location == value)
				{
					return;
				}
				ReadOnlyCollection<ActivityDesigner> containedDesigners = ContainedDesigners;
				List<Point> list = new List<Point>();
				if (retainContainedDesignerLocations)
				{
					foreach (ActivityDesigner item in containedDesigners)
					{
						list.Add(item.Location);
					}
				}
				else
				{
					Size size = new Size(value.X - base.Location.X, value.Y - base.Location.Y);
					FreeformActivityDesigner freeformActivityDesigner = this;
					Collection<Connector> collection = new Collection<Connector>();
					while (freeformActivityDesigner != null)
					{
						foreach (Connector connector in freeformActivityDesigner.Connectors)
						{
							if (connector.RenderingOwner == this)
							{
								collection.Add(connector);
							}
						}
						freeformActivityDesigner = freeformActivityDesigner.ParentDesigner as FreeformActivityDesigner;
					}
					foreach (Connector item2 in collection)
					{
						item2.Offset(size);
					}
				}
				base.Location = value;
				if (retainContainedDesignerLocations && containedDesigners.Count == list.Count)
				{
					for (int i = 0; i < containedDesigners.Count; i++)
					{
						containedDesigners[i].Location = list[i];
					}
				}
				Invalidate();
			}
		}

		public ReadOnlyCollection<Connector> Connectors => connectors.AsReadOnly();

		protected virtual bool ShowConnectorsInForeground => false;

		protected internal override bool EnableVisualResizing
		{
			get
			{
				if (AutoSize && AutoSizeMode == AutoSizeMode.GrowAndShrink)
				{
					return false;
				}
				return true;
			}
		}

		protected internal override ActivityDesignerGlyphCollection Glyphs
		{
			get
			{
				ActivityDesignerGlyphCollection activityDesignerGlyphCollection = new ActivityDesignerGlyphCollection();
				activityDesignerGlyphCollection.AddRange(base.Glyphs);
				if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
				{
					foreach (object selectedComponent in selectionService.GetSelectedComponents())
					{
						if (selectedComponent is ConnectorHitTestInfo connectorHitTestInfo && connectorHitTestInfo.AssociatedDesigner == this)
						{
							activityDesignerGlyphCollection.Add(new FreeFormConnectorSelectionGlyph(connectorHitTestInfo.MapToIndex(), connectorHitTestInfo == selectionService.PrimarySelection));
						}
					}
				}
				return activityDesignerGlyphCollection;
			}
		}

		internal override WorkflowLayout SupportedLayout => new WorkflowRootLayout(base.Activity.Site);

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		internal List<Connector> DesignerConnectors => new List<Connector>(connectors);

		private List<ActivityDesigner> MovingActivities
		{
			get
			{
				if (movedActivities == null)
				{
					movedActivities = new List<ActivityDesigner>();
				}
				return movedActivities;
			}
		}

		public event ConnectorEventHandler ConnectorAdded;

		public event ConnectorEventHandler ConnectorChanged;

		public event ConnectorEventHandler ConnectorRemoved;

		public Connector AddConnector(ConnectionPoint source, ConnectionPoint target)
		{
			if (source == null)
			{
				throw new ArgumentNullException("source");
			}
			if (source.AssociatedDesigner == null)
			{
				throw new ArgumentException("source", SR.GetString("Error_AssociatedDesignerMissing"));
			}
			if (target == null)
			{
				throw new ArgumentNullException("target");
			}
			if (target.AssociatedDesigner == null)
			{
				throw new ArgumentException("target", SR.GetString("Error_AssociatedDesignerMissing"));
			}
			FreeformActivityDesigner connectorContainer = ConnectionManager.GetConnectorContainer(source.AssociatedDesigner);
			if (this != connectorContainer)
			{
				throw new InvalidOperationException(DR.GetString("Error_AddConnector1"));
			}
			if ((base.Activity != source.AssociatedDesigner.Activity && !Helpers.IsChildActivity(base.Activity as CompositeActivity, source.AssociatedDesigner.Activity)) || (base.Activity != target.AssociatedDesigner.Activity && !Helpers.IsChildActivity(base.Activity as CompositeActivity, target.AssociatedDesigner.Activity)))
			{
				throw new ArgumentException(DR.GetString("Error_AddConnector2"));
			}
			Connector connector = CreateConnector(source, target);
			if (connector != null)
			{
				if (connectors.Contains(connector))
				{
					throw new InvalidOperationException(DR.GetString("Error_AddConnector3"));
				}
				connectors.Add(connector);
				connector.SetParent(this);
				OnConnectorAdded(new ConnectorEventArgs(connector));
			}
			PerformLayout();
			return connector;
		}

		public void RemoveConnector(Connector connector)
		{
			if (connector == null)
			{
				throw new ArgumentNullException("connector");
			}
			if (connectors.Contains(connector))
			{
				OnConnectorRemoved(new ConnectorEventArgs(connector));
				connector.SetParent(null);
				connectors.Remove(connector);
			}
		}

		public void SendToBack(ActivityDesigner containedDesigner)
		{
			if (containedDesigner == null)
			{
				throw new ArgumentNullException("containedDesigner");
			}
			if (!ContainedDesigners.Contains(containedDesigner))
			{
				throw new ArgumentException(DR.GetString("InvalidDesignerSpecified", "containedDesigner"));
			}
			UpdateZOrder(containedDesigner, ZOrder.Background);
		}

		public void BringToFront(ActivityDesigner containedDesigner)
		{
			if (containedDesigner == null)
			{
				throw new ArgumentNullException("containedDesigner");
			}
			if (!ContainedDesigners.Contains(containedDesigner))
			{
				throw new ArgumentException(DR.GetString("InvalidDesignerSpecified", "containedDesigner"));
			}
			UpdateZOrder(containedDesigner, ZOrder.Foreground);
		}

		public void MoveContainedDesigner(ActivityDesigner containedDesigner, Point newLocation)
		{
			if (containedDesigner == null)
			{
				throw new ArgumentNullException("containedDesigner");
			}
			if (!ContainedDesigners.Contains(containedDesigner))
			{
				throw new ArgumentException(DR.GetString("InvalidDesignerSpecified", "containedDesigner"));
			}
			SetDesignerBounds(containedDesigner, new Rectangle(newLocation, containedDesigner.Size));
			PerformLayout();
			Invalidate();
		}

		public void ResizeContainedDesigner(ActivityDesigner containedDesigner, Size newSize)
		{
			if (containedDesigner == null)
			{
				throw new ArgumentNullException("containedDesigner");
			}
			if (!ContainedDesigners.Contains(containedDesigner))
			{
				throw new ArgumentException(DR.GetString("InvalidDesignerSpecified", "containedDesigner"));
			}
			SetDesignerBounds(containedDesigner, new Rectangle(containedDesigner.Location, newSize));
			PerformLayout();
		}

		public override HitTestInfo HitTest(Point point)
		{
			HitTestInfo hitTestInfo = base.HitTest(point);
			ReadOnlyCollection<ActivityDesigner> containedDesigners = ContainedDesigners;
			WorkflowView parentView = base.ParentView;
			DragDropManager dragDropManager = GetService(typeof(DragDropManager)) as DragDropManager;
			if (parentView != null && dragDropManager != null && parentView.DragDropInProgress && hitTestInfo.AssociatedDesigner != null && dragDropManager.DraggedActivities.Contains(hitTestInfo.AssociatedDesigner.Activity) && hitTestInfo.AssociatedDesigner.Bounds.Contains(point))
			{
				if (base.Activity == hitTestInfo.AssociatedDesigner.Activity)
				{
					return HitTestInfo.Nowhere;
				}
				if (containedDesigners.Contains(hitTestInfo.AssociatedDesigner))
				{
					return new HitTestInfo(this, HitTestLocations.Designer);
				}
			}
			if (!(hitTestInfo is ConnectionPointHitTestInfo) && (hitTestInfo.HitLocation == HitTestLocations.None || hitTestInfo.AssociatedDesigner == this || ShowConnectorsInForeground))
			{
				for (int i = 0; i < connectors.Count; i++)
				{
					if (connectors[i].HitTest(point))
					{
						return new ConnectorHitTestInfo(this, HitTestLocations.Designer | HitTestLocations.Connector, i);
					}
				}
			}
			return hitTestInfo;
		}

		public override void MoveActivities(HitTestInfo moveLocation, ReadOnlyCollection<Activity> activitiesToMove)
		{
			if (moveLocation == null)
			{
				throw new ArgumentNullException("moveLocation");
			}
			if (activitiesToMove == null)
			{
				throw new ArgumentNullException("activitiesToMove");
			}
			FreeformActivityDesigner connectorContainer = ConnectionManager.GetConnectorContainer(this);
			try
			{
				connectorContainer.MovingActivities.Clear();
				if (connectorContainer != null && connectorContainer.Connectors.Count > 0)
				{
					foreach (Activity item in activitiesToMove)
					{
						ActivityDesigner designer = ActivityDesigner.GetDesigner(item);
						FreeformActivityDesigner connectorContainer2 = ConnectionManager.GetConnectorContainer(designer);
						if (connectorContainer2 == connectorContainer)
						{
							connectorContainer.MovingActivities.Add(designer);
						}
					}
				}
				base.MoveActivities(moveLocation, activitiesToMove);
			}
			finally
			{
				connectorContainer.MovingActivities.Clear();
			}
		}

		public override object GetNextSelectableObject(object current, DesignerNavigationDirection navigate)
		{
			object result = null;
			ArrayList arrayList = new ArrayList(ContainedDesigners);
			ActivityDesigner activityDesigner = ((current is Activity) ? ActivityDesigner.GetDesigner(current as Activity) : ActivityDesigner.GetParentDesigner(current));
			int num = ((activityDesigner != null) ? arrayList.IndexOf(activityDesigner) : (-1));
			if ((navigate == DesignerNavigationDirection.Left || navigate == DesignerNavigationDirection.Up) && num >= 0 && num < arrayList.Count)
			{
				result = ((ActivityDesigner)arrayList[(num > 0) ? (num - 1) : (arrayList.Count - 1)]).Activity;
			}
			else if ((navigate == DesignerNavigationDirection.Right || navigate == DesignerNavigationDirection.Down) && num <= arrayList.Count - 1)
			{
				result = ((ActivityDesigner)arrayList[(num < arrayList.Count - 1) ? (num + 1) : 0]).Activity;
			}
			return result;
		}

		protected override void Initialize(Activity activity)
		{
			base.Initialize(activity);
			EnsureDesignerExtender();
		}

		protected override void Dispose(bool disposing)
		{
			for (int i = 0; i < connectors.Count; i++)
			{
				((IDisposable)connectors[i]).Dispose();
			}
			connectors.Clear();
			base.Dispose(disposing);
		}

		protected override void OnContainedActivitiesChanging(ActivityCollectionChangeEventArgs listChangeArgs)
		{
			base.OnContainedActivitiesChanging(listChangeArgs);
			if (listChangeArgs.Action != ActivityCollectionChangeAction.Remove)
			{
				return;
			}
			FreeformActivityDesigner connectorContainer = ConnectionManager.GetConnectorContainer(this);
			List<Connector> list = new List<Connector>();
			for (ActivityDesigner activityDesigner = this; activityDesigner != null; activityDesigner = activityDesigner.ParentDesigner)
			{
				if (activityDesigner is FreeformActivityDesigner freeformActivityDesigner && freeformActivityDesigner.Connectors.Count > 0)
				{
					foreach (Activity removedItem in listChangeArgs.RemovedItems)
					{
						ActivityDesigner designer = ActivityDesigner.GetDesigner(removedItem);
						if (connectorContainer.MovingActivities.Contains(designer))
						{
							continue;
						}
						foreach (Connector connector in freeformActivityDesigner.Connectors)
						{
							if (designer == connector.Source.AssociatedDesigner || designer == connector.Target.AssociatedDesigner)
							{
								list.Add(connector);
							}
						}
					}
				}
			}
			foreach (Connector item in list)
			{
				item.ParentDesigner.RemoveConnector(item);
				((IDisposable)item).Dispose();
			}
		}

		protected internal virtual Connector CreateConnector(ConnectionPoint source, ConnectionPoint target)
		{
			return new Connector(source, target);
		}

		protected internal virtual bool CanConnectContainedDesigners(ConnectionPoint source, ConnectionPoint target)
		{
			if (((IConnectableDesigner)source.AssociatedDesigner).CanConnect(source, target))
			{
				return ((IConnectableDesigner)target.AssociatedDesigner).CanConnect(source, target);
			}
			return false;
		}

		protected internal virtual void OnContainedDesignersConnected(ConnectionPoint source, ConnectionPoint target)
		{
			((IConnectableDesigner)source.AssociatedDesigner).OnConnected(source, target);
			((IConnectableDesigner)target.AssociatedDesigner).OnConnected(source, target);
		}

		protected internal virtual bool CanResizeContainedDesigner(ActivityDesigner containedDesigner)
		{
			return containedDesigner is FreeformActivityDesigner;
		}

		protected virtual void OnConnectorAdded(ConnectorEventArgs e)
		{
			if (this.ConnectorAdded != null)
			{
				this.ConnectorAdded(this, e);
			}
		}

		protected internal virtual void OnConnectorChanged(ConnectorEventArgs e)
		{
			if (this.ConnectorChanged != null)
			{
				this.ConnectorChanged(this, e);
			}
		}

		protected virtual void OnConnectorRemoved(ConnectorEventArgs e)
		{
			if (this.ConnectorRemoved != null)
			{
				this.ConnectorRemoved(this, e);
			}
		}

		protected override void OnLayoutPosition(ActivityDesignerLayoutEventArgs e)
		{
			base.OnLayoutPosition(e);
			if (AutoSize)
			{
				Point point = Location;
				Rectangle enclosingRectangle = GetEnclosingRectangle();
				if (!enclosingRectangle.IsEmpty)
				{
					if (AutoSizeMode == AutoSizeMode.GrowOnly)
					{
						point.X = Math.Min(point.X, enclosingRectangle.Left);
						point.Y = Math.Min(point.Y, enclosingRectangle.Top);
					}
					else
					{
						point = enclosingRectangle.Location;
					}
				}
				retainContainedDesignerLocations = true;
				Location = point;
				retainContainedDesignerLocations = false;
			}
			foreach (Connector connector in connectors)
			{
				connector.OnLayout(e);
			}
		}

		protected override Size OnLayoutSize(ActivityDesignerLayoutEventArgs e)
		{
			Rectangle bounds = base.Bounds;
			Size minimumSize = bounds.Size;
			base.OnLayoutSize(e);
			if (AutoSize)
			{
				if (AutoSizeMode == AutoSizeMode.GrowOnly)
				{
					Rectangle enclosingRectangle = GetEnclosingRectangle();
					if (!enclosingRectangle.IsEmpty)
					{
						minimumSize.Width += Math.Max(bounds.Left - enclosingRectangle.Left, 0);
						minimumSize.Width += Math.Max(enclosingRectangle.Right - bounds.Right, 0);
						minimumSize.Height += Math.Max(bounds.Top - enclosingRectangle.Top, 0);
						minimumSize.Height += Math.Max(enclosingRectangle.Bottom - bounds.Bottom, 0);
					}
				}
				else
				{
					minimumSize = MinimumSize;
				}
			}
			return minimumSize;
		}

		protected override void OnThemeChange(ActivityDesignerTheme newTheme)
		{
			base.OnThemeChange(newTheme);
			if (!WorkflowTheme.CurrentTheme.AmbientTheme.ShowGrid)
			{
				return;
			}
			foreach (ActivityDesigner containedDesigner in ContainedDesigners)
			{
				containedDesigner.Location = DesignerHelpers.SnapToGrid(containedDesigner.Location);
			}
			PerformLayout();
		}

		protected override void OnDragOver(ActivityDragEventArgs e)
		{
			if ((e.KeyState & 8) == 8 && (e.AllowedEffect & DragDropEffects.Copy) == DragDropEffects.Copy)
			{
				e.Effect = DragDropEffects.Copy;
			}
			else if ((e.AllowedEffect & DragDropEffects.Move) == DragDropEffects.Move)
			{
				e.Effect = DragDropEffects.Move;
			}
		}

		protected override void OnDragDrop(ActivityDragEventArgs e)
		{
			if ((e.KeyState & 8) == 8 && (e.AllowedEffect & DragDropEffects.Copy) == DragDropEffects.Copy)
			{
				e.Effect = DragDropEffects.Copy;
			}
			else if ((e.AllowedEffect & DragDropEffects.Move) == DragDropEffects.Move)
			{
				e.Effect = DragDropEffects.Move;
			}
			List<Activity> list = new List<Activity>();
			List<Activity> list2 = new List<Activity>();
			foreach (Activity activity in e.Activities)
			{
				if (activity.Site == null || activity.Parent != base.Activity)
				{
					list.Add(activity);
				}
				if (activity.Site == null)
				{
					list2.Add(activity);
				}
			}
			if (list.Count > 0)
			{
				CompositeActivityDesigner.InsertActivities(this, new ConnectorHitTestInfo(this, HitTestLocations.Designer, ((CompositeActivity)base.Activity).Activities.Count), list.AsReadOnly(), SR.GetString("DragDropActivities"));
			}
			Point point = new Point(e.X, e.Y);
			Point[] designerLocations = FreeFormDragDropManager.GetDesignerLocations(e.DragInitiationPoint, point, e.Activities);
			if (designerLocations.Length != e.Activities.Count)
			{
				return;
			}
			for (int i = 0; i < e.Activities.Count; i++)
			{
				ActivityDesigner designer = ActivityDesigner.GetDesigner(e.Activities[i]);
				if (designer != null)
				{
					Point newLocation = (list2.Contains(designer.Activity) ? point : designerLocations[i]);
					MoveContainedDesigner(designer, newLocation);
				}
			}
		}

		public override void InsertActivities(HitTestInfo insertLocation, ReadOnlyCollection<Activity> activitiesToInsert)
		{
			base.InsertActivities(insertLocation, activitiesToInsert);
			if (!AutoSize)
			{
				return;
			}
			Size size = AutoSizeMargin;
			Point point = Location;
			foreach (Activity item in activitiesToInsert)
			{
				ActivityDesigner designer = ActivityDesigner.GetDesigner(item);
				if (designer.Location.IsEmpty)
				{
					designer.Location = new Point(point.X + size.Width, point.Y + size.Height);
				}
			}
		}

		protected override void OnResizing(ActivityDesignerResizeEventArgs e)
		{
			if (AutoSize)
			{
				if (AutoSizeMode == AutoSizeMode.GrowOnly)
				{
					Rectangle enclosingRectangle = GetEnclosingRectangle();
					if (!enclosingRectangle.IsEmpty)
					{
						Rectangle empty = Rectangle.Empty;
						empty.X = Math.Min(enclosingRectangle.Left, e.Bounds.Left);
						empty.Y = Math.Min(enclosingRectangle.Top, e.Bounds.Top);
						empty.Width = Math.Max(enclosingRectangle.Right - empty.Left, e.Bounds.Right - empty.Left);
						empty.Height = Math.Max(enclosingRectangle.Bottom - empty.Top, e.Bounds.Bottom - empty.Top);
						if (empty != e.Bounds)
						{
							e = new ActivityDesignerResizeEventArgs(e.SizingEdge, empty);
						}
					}
				}
				else
				{
					PerformLayout();
				}
			}
			retainContainedDesignerLocations = true;
			base.OnResizing(e);
			retainContainedDesignerLocations = false;
		}

		protected override void OnKeyDown(KeyEventArgs e)
		{
			if (e == null)
			{
				throw new ArgumentNullException("e");
			}
			ISelectionService selectionService = GetService(typeof(ISelectionService)) as ISelectionService;
			object obj = selectionService?.PrimarySelection;
			if (obj == null)
			{
				return;
			}
			List<Activity> list = new List<Activity>(Helpers.GetTopLevelActivities(selectionService.GetSelectedComponents()));
			if (e.KeyCode == Keys.Left || e.KeyCode == Keys.Right || e.KeyCode == Keys.Up || e.KeyCode == Keys.Down)
			{
				Size size = Size.Empty;
				if (e.KeyCode == Keys.Left)
				{
					size = new Size(-5, 0);
				}
				else if (e.KeyCode == Keys.Right)
				{
					size = new Size(5, 0);
				}
				else if (e.KeyCode == Keys.Up)
				{
					size = new Size(0, -5);
				}
				else if (e.KeyCode == Keys.Down)
				{
					size = new Size(0, 5);
				}
				foreach (Activity item in list)
				{
					ActivityDesigner designer = ActivityDesigner.GetDesigner(item);
					if (designer != null)
					{
						base.ParentView.InvalidateClientRectangle(new Rectangle(designer.Location, designer.Size));
						designer.Location += size;
						base.ParentView.InvalidateClientRectangle(new Rectangle(designer.Location, designer.Size));
					}
				}
				PerformLayout();
				e.Handled = true;
			}
			else if (e.KeyCode == Keys.Delete)
			{
				ICollection selectedComponents = selectionService.GetSelectedComponents();
				foreach (object item2 in selectedComponents)
				{
					if (!(item2 is ConnectorHitTestInfo { AssociatedDesigner: FreeformActivityDesigner { Connectors: var readOnlyCollection } associatedDesigner } connectorHitTestInfo))
					{
						continue;
					}
					int num = connectorHitTestInfo.MapToIndex();
					if (num < readOnlyCollection.Count)
					{
						selectionService.SetSelectedComponents(new object[1] { connectorHitTestInfo }, SelectionTypes.Remove);
						associatedDesigner.RemoveConnector(readOnlyCollection[num]);
						object obj2 = associatedDesigner;
						if (readOnlyCollection.Count > 0)
						{
							obj2 = new ConnectorHitTestInfo(associatedDesigner, HitTestLocations.Designer | HitTestLocations.Connector, (num > 0) ? (num - 1) : num);
						}
						selectionService.SetSelectedComponents(new object[1] { obj2 }, SelectionTypes.Replace);
					}
				}
				e.Handled = true;
			}
			if (!e.Handled)
			{
				base.OnKeyDown(e);
			}
		}

		internal static void SetDesignerBounds(ActivityDesigner designer, Rectangle bounds)
		{
			if (designer == null || designer.Activity == null || designer.Activity.Site == null)
			{
				return;
			}
			PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(designer);
			PropertyDescriptor propertyDescriptor = properties?["Size"];
			if (propertyDescriptor != null)
			{
				propertyDescriptor.SetValue(designer.Activity, bounds.Size);
			}
			else
			{
				designer.Size = bounds.Size;
			}
			PropertyDescriptor propertyDescriptor2 = properties?["Location"];
			if (propertyDescriptor2 != null)
			{
				propertyDescriptor2.SetValue(designer.Activity, bounds.Location);
			}
			else
			{
				designer.Location = bounds.Location;
			}
			if (designer.Activity.Site.GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				if (designer.ParentDesigner != null)
				{
					workflowView.InvalidateLogicalRectangle(designer.ParentDesigner.Bounds);
				}
				else
				{
					workflowView.Invalidate();
				}
			}
		}

		internal override void OnPaintContainedDesigners(ActivityDesignerPaintEventArgs e)
		{
			if (ShowConnectorsInForeground)
			{
				base.OnPaintContainedDesigners(e);
			}
			FreeformActivityDesigner connectorContainer = ConnectionManager.GetConnectorContainer(this);
			if (connectorContainer != null && base.Activity != null && base.Activity.Site != null)
			{
				Region region = null;
				Region clip = e.Graphics.Clip;
				try
				{
					if (clip != null)
					{
						region = new Region(connectorContainer.Bounds);
						region.Intersect(e.ViewPort);
						e.Graphics.Clip = region;
					}
					foreach (Connector connector in connectorContainer.Connectors)
					{
						if (this == connector.RenderingOwner)
						{
							connector.OnPaint(e);
						}
					}
				}
				finally
				{
					if (clip != null)
					{
						e.Graphics.Clip = clip;
						region.Dispose();
					}
				}
			}
			if (!ShowConnectorsInForeground)
			{
				base.OnPaintContainedDesigners(e);
			}
		}

		private Rectangle GetEnclosingRectangle()
		{
			Point point = new Point(int.MaxValue, int.MaxValue);
			Point point2 = new Point(int.MinValue, int.MinValue);
			foreach (ActivityDesigner containedDesigner in ContainedDesigners)
			{
				if (containedDesigner.IsVisible)
				{
					point.X = ((containedDesigner.Bounds.Left < point.X) ? containedDesigner.Bounds.Left : point.X);
					point.Y = ((containedDesigner.Bounds.Top < point.Y) ? containedDesigner.Bounds.Top : point.Y);
					point2.X = ((point2.X < containedDesigner.Bounds.Right) ? containedDesigner.Bounds.Right : point2.X);
					point2.Y = ((point2.Y < containedDesigner.Bounds.Bottom) ? containedDesigner.Bounds.Bottom : point2.Y);
				}
			}
			if (InvokingDesigner == null)
			{
				foreach (Connector connector in Connectors)
				{
					point.X = ((connector.Bounds.Left < point.X) ? connector.Bounds.Left : point.X);
					point.Y = ((connector.Bounds.Top < point.Y) ? connector.Bounds.Top : point.Y);
					point2.X = ((point2.X < connector.Bounds.Right) ? connector.Bounds.Right : point2.X);
					point2.Y = ((point2.Y < connector.Bounds.Bottom) ? connector.Bounds.Bottom : point2.Y);
				}
			}
			Rectangle empty = Rectangle.Empty;
			if (point.X != int.MaxValue && point2.X != int.MinValue)
			{
				empty.X = point.X;
				empty.Width = point2.X - point.X;
			}
			if (point.Y != int.MaxValue && point2.Y != int.MinValue)
			{
				empty.Y = point.Y;
				empty.Height = point2.Y - point.Y;
			}
			if (!empty.IsEmpty)
			{
				empty.Inflate(AutoSizeMargin);
			}
			return empty;
		}

		internal bool CanUpdateZOrder(ActivityDesigner activityDesigner, ZOrder zorder)
		{
			bool result = false;
			CompositeActivityDesigner compositeActivityDesigner = this;
			ActivityDesigner activityDesigner2 = activityDesigner;
			while (compositeActivityDesigner != null && activityDesigner2 != null)
			{
				if (compositeActivityDesigner is FreeformActivityDesigner)
				{
					ReadOnlyCollection<ActivityDesigner> containedDesigners = compositeActivityDesigner.ContainedDesigners;
					if (containedDesigners.Count > 1 && containedDesigners[(zorder != ZOrder.Background) ? (containedDesigners.Count - 1) : 0] != activityDesigner2)
					{
						result = true;
						break;
					}
				}
				activityDesigner2 = compositeActivityDesigner;
				compositeActivityDesigner = compositeActivityDesigner.ParentDesigner;
			}
			return result;
		}

		private void UpdateZOrder(ActivityDesigner activityDesigner, ZOrder zorder)
		{
			IDesignerHost designerHost = GetService(typeof(IDesignerHost)) as IDesignerHost;
			DesignerTransaction designerTransaction = null;
			if (designerHost != null)
			{
				designerTransaction = designerHost.CreateTransaction(DR.GetString("ZOrderUndoDescription", activityDesigner.Text));
			}
			try
			{
				bool flag = false;
				CompositeActivityDesigner compositeActivityDesigner = this;
				ActivityDesigner activityDesigner2 = activityDesigner;
				while (compositeActivityDesigner != null && activityDesigner2 != null)
				{
					if (compositeActivityDesigner is FreeformActivityDesigner)
					{
						ReadOnlyCollection<ActivityDesigner> containedDesigners = compositeActivityDesigner.ContainedDesigners;
						if (containedDesigners.Count > 1 && containedDesigners[(zorder != ZOrder.Background) ? (containedDesigners.Count - 1) : 0] != activityDesigner2)
						{
							int connector = ((zorder != ZOrder.Background) ? containedDesigners.Count : 0);
							compositeActivityDesigner.MoveActivities(new ConnectorHitTestInfo(this, HitTestLocations.Designer, connector), new List<Activity>(new Activity[1] { activityDesigner2.Activity }).AsReadOnly());
							flag = true;
						}
					}
					activityDesigner2 = compositeActivityDesigner;
					compositeActivityDesigner = compositeActivityDesigner.ParentDesigner;
				}
				if (flag)
				{
					Invalidate();
				}
				designerTransaction?.Commit();
			}
			catch (Exception ex)
			{
				designerTransaction?.Cancel();
				throw ex;
			}
		}

		private void EnsureDesignerExtender()
		{
			bool flag = true;
			if (GetService(typeof(IExtenderListService)) is IExtenderListService extenderListService)
			{
				IExtenderProvider[] extenderProviders = extenderListService.GetExtenderProviders();
				foreach (IExtenderProvider extenderProvider in extenderProviders)
				{
					if (extenderProvider.GetType() == typeof(FreeFormDesignerPropertyExtender))
					{
						flag = false;
						break;
					}
				}
			}
			if (flag && GetService(typeof(IExtenderProviderService)) is IExtenderProviderService extenderProviderService)
			{
				extenderProviderService.AddExtenderProvider(new FreeFormDesignerPropertyExtender());
				TypeDescriptor.Refresh(base.Activity);
			}
		}
	}
	internal sealed class FreeFormDesignerVerbProvider : IDesignerVerbProvider
	{
		ActivityDesignerVerbCollection IDesignerVerbProvider.GetVerbs(ActivityDesigner activityDesigner)
		{
			ActivityDesignerVerbCollection activityDesignerVerbCollection = new ActivityDesignerVerbCollection();
			if (activityDesigner.ParentDesigner is FreeformActivityDesigner)
			{
				ActivityDesignerVerb activityDesignerVerb = new ActivityDesignerVerb(activityDesigner, DesignerVerbGroup.Actions, DR.GetString("BringToFront"), OnZOrderChanged, OnZOrderStatusUpdate);
				activityDesignerVerb.Properties[DesignerUserDataKeys.ZOrderKey] = ZOrder.Foreground;
				activityDesignerVerbCollection.Add(activityDesignerVerb);
				activityDesignerVerb = new ActivityDesignerVerb(activityDesigner, DesignerVerbGroup.Actions, DR.GetString("SendToBack"), OnZOrderChanged, OnZOrderStatusUpdate);
				activityDesignerVerb.Properties[DesignerUserDataKeys.ZOrderKey] = ZOrder.Background;
				activityDesignerVerbCollection.Add(activityDesignerVerb);
			}
			return activityDesignerVerbCollection;
		}

		private void OnZOrderChanged(object sender, EventArgs e)
		{
			if (sender is ActivityDesignerVerb activityDesignerVerb && activityDesignerVerb.Properties.Contains(DesignerUserDataKeys.ZOrderKey) && activityDesignerVerb.ActivityDesigner.ParentDesigner is FreeformActivityDesigner freeformActivityDesigner)
			{
				if ((ZOrder)activityDesignerVerb.Properties[DesignerUserDataKeys.ZOrderKey] == ZOrder.Foreground)
				{
					freeformActivityDesigner.BringToFront(activityDesignerVerb.ActivityDesigner);
				}
				else if ((ZOrder)activityDesignerVerb.Properties[DesignerUserDataKeys.ZOrderKey] == ZOrder.Background)
				{
					freeformActivityDesigner.SendToBack(activityDesignerVerb.ActivityDesigner);
				}
			}
		}

		private void OnZOrderStatusUpdate(object sender, EventArgs e)
		{
			if (sender is ActivityDesignerVerb activityDesignerVerb && activityDesignerVerb.Properties.Contains(DesignerUserDataKeys.ZOrderKey) && activityDesignerVerb.ActivityDesigner.ParentDesigner is FreeformActivityDesigner freeformActivityDesigner)
			{
				activityDesignerVerb.Enabled = freeformActivityDesigner.CanUpdateZOrder(activityDesignerVerb.ActivityDesigner, (ZOrder)activityDesignerVerb.Properties[DesignerUserDataKeys.ZOrderKey]);
			}
		}
	}
	internal sealed class ConnectionPointHitTestInfo : HitTestInfo
	{
		private ConnectionPoint connectionPoint;

		internal ConnectionPoint ConnectionPoint => connectionPoint;

		internal ConnectionPointHitTestInfo(ConnectionPoint connectionPoint)
			: base(connectionPoint.AssociatedDesigner, HitTestLocations.Designer | HitTestLocations.Connector)
		{
			this.connectionPoint = connectionPoint;
		}
	}
	public delegate void ConnectorEventHandler(object sender, ConnectorEventArgs e);
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ConnectorEventArgs : EventArgs
	{
		private Connector connector;

		public Connector Connector => connector;

		internal ConnectorEventArgs(Connector connector)
		{
			this.connector = connector;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ConnectionPoint
	{
		private ActivityDesigner associatedDesigner;

		private DesignerEdges designerEdge;

		private int connectionIndex;

		public ActivityDesigner AssociatedDesigner => associatedDesigner;

		public int ConnectionIndex => connectionIndex;

		public DesignerEdges ConnectionEdge
		{
			get
			{
				DesignerEdges designerEdges = designerEdge;
				if (designerEdges != DesignerEdges.Left && designerEdges != DesignerEdges.Right && designerEdges != DesignerEdges.Top && designerEdges != DesignerEdges.Bottom)
				{
					designerEdges = DesignerGeometryHelper.ClosestEdgeToPoint(Location, associatedDesigner.Bounds, designerEdges);
				}
				return designerEdges;
			}
		}

		public virtual Point Location
		{
			get
			{
				IList<Point> connections = associatedDesigner.GetConnections(designerEdge);
				if (connectionIndex < connections.Count)
				{
					return connections[connectionIndex];
				}
				return Point.Empty;
			}
		}

		public virtual Rectangle Bounds
		{
			get
			{
				IList<Point> connections = associatedDesigner.GetConnections(DesignerEdges.All);
				if (connections.Count > 0)
				{
					Point location = Location;
					Size defaultSize = DefaultSize;
					return new Rectangle(new Point(location.X - defaultSize.Width / 2, location.Y - defaultSize.Height / 2), defaultSize);
				}
				return Rectangle.Empty;
			}
		}

		private Size DefaultSize
		{
			get
			{
				Size result = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
				result.Width += result.Width / 2;
				result.Height += result.Height / 2;
				if (associatedDesigner != null)
				{
					result = new Size(Math.Max(result.Width, (int)associatedDesigner.DesignerTheme.ForegroundPen.Width * 4), Math.Max(result.Height, (int)associatedDesigner.DesignerTheme.ForegroundPen.Width * 4));
				}
				return result;
			}
		}

		public ConnectionPoint(ActivityDesigner associatedDesigner, DesignerEdges designerEdge, int connectionIndex)
		{
			if (associatedDesigner == null)
			{
				throw new ArgumentNullException("associatedDesigner");
			}
			if (connectionIndex < 0 || connectionIndex >= associatedDesigner.GetConnections(designerEdge).Count)
			{
				throw new ArgumentException(DR.GetString("Error_ConnectionPoint"), "connectionIndex");
			}
			this.associatedDesigner = associatedDesigner;
			this.designerEdge = designerEdge;
			this.connectionIndex = connectionIndex;
		}

		public override bool Equals(object obj)
		{
			if (!(obj is ConnectionPoint connectionPoint))
			{
				return false;
			}
			if (connectionPoint.AssociatedDesigner == associatedDesigner && connectionPoint.designerEdge == designerEdge && connectionPoint.ConnectionIndex == connectionIndex)
			{
				return true;
			}
			return false;
		}

		public override int GetHashCode()
		{
			return associatedDesigner.GetHashCode() ^ designerEdge.GetHashCode() ^ connectionIndex.GetHashCode();
		}

		public void OnPaint(ActivityDesignerPaintEventArgs e, bool drawHighlighted)
		{
			Draw(e, Bounds);
		}

		internal static void Draw(ActivityDesignerPaintEventArgs e, Rectangle bounds)
		{
			bounds.Inflate(-1, -1);
			e.Graphics.FillEllipse(Brushes.White, bounds);
			e.Graphics.DrawEllipse(e.AmbientTheme.SelectionForegroundPen, bounds);
			bounds.Inflate(-1, -1);
			e.Graphics.FillEllipse(e.AmbientTheme.SelectionForegroundBrush, bounds);
		}
	}
	[DesignerSerializer(typeof(ConnectorLayoutSerializer), typeof(WorkflowMarkupSerializer))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class Connector : IDisposable
	{
		private AccessibleObject accessibilityObject;

		private FreeformActivityDesigner parentDesigner;

		private ConnectionPoint source;

		private ConnectionPoint target;

		private List<Point> segments = new List<Point>();

		private bool connectorModified;

		public virtual AccessibleObject AccessibilityObject
		{
			get
			{
				if (accessibilityObject == null)
				{
					accessibilityObject = new ConnectorAccessibleObject(this);
				}
				return accessibilityObject;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public ConnectionPoint Source
		{
			get
			{
				return source;
			}
			set
			{
				if (value == null)
				{
					throw new ArgumentNullException("value");
				}
				if (!source.Equals(value))
				{
					if (ConnectionManager.GetConnectorContainer(value.AssociatedDesigner) != ConnectionManager.GetConnectorContainer(target.AssociatedDesigner))
					{
						throw new ArgumentException(SR.GetString("Error_InvalidConnectorSource"), "value");
					}
					source = value;
					PerformLayout();
				}
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public ConnectionPoint Target
		{
			get
			{
				return target;
			}
			set
			{
				if (value == null)
				{
					throw new ArgumentNullException("value");
				}
				if (!target.Equals(value))
				{
					if (ConnectionManager.GetConnectorContainer(value.AssociatedDesigner) != ConnectionManager.GetConnectorContainer(source.AssociatedDesigner))
					{
						throw new ArgumentException(SR.GetString("Error_InvalidConnectorSource"), "value");
					}
					target = value;
					PerformLayout();
				}
			}
		}

		public virtual ReadOnlyCollection<Point> ConnectorSegments
		{
			get
			{
				List<Point> list = new List<Point>();
				if (source != null && target != null)
				{
					if (segments.Count == 0 || segments[0] != source.Location)
					{
						list.Add(source.Location);
					}
					list.AddRange(segments);
					if (segments.Count == 0 || segments[segments.Count - 1] != target.Location)
					{
						list.Add(target.Location);
					}
				}
				return list.AsReadOnly();
			}
		}

		public Rectangle Bounds
		{
			get
			{
				Rectangle result = DesignerGeometryHelper.RectangleFromLineSegments(new List<Point>(ConnectorSegments).ToArray());
				result.Inflate(1, 1);
				return result;
			}
		}

		public FreeformActivityDesigner ParentDesigner => parentDesigner;

		public bool ConnectorModified => connectorModified;

		protected WorkflowView ParentView => GetService(typeof(WorkflowView)) as WorkflowView;

		protected internal virtual ICollection<Rectangle> ExcludedRoutingRectangles => new Rectangle[0];

		internal FreeformActivityDesigner RenderingOwner
		{
			get
			{
				if (source == null || target == null)
				{
					return null;
				}
				List<FreeformActivityDesigner> list = new List<FreeformActivityDesigner>();
				ActivityDesigner associatedDesigner;
				for (associatedDesigner = target.AssociatedDesigner; associatedDesigner != null; associatedDesigner = associatedDesigner.ParentDesigner)
				{
					if (associatedDesigner is FreeformActivityDesigner item)
					{
						list.Add(item);
					}
				}
				associatedDesigner = source.AssociatedDesigner;
				while (associatedDesigner != null && (!(associatedDesigner is FreeformActivityDesigner item2) || !list.Contains(item2)))
				{
					associatedDesigner = associatedDesigner.ParentDesigner;
				}
				return associatedDesigner as FreeformActivityDesigner;
			}
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		internal string SourceActivity
		{
			get
			{
				string result = string.Empty;
				if (source != null)
				{
					result = source.AssociatedDesigner.Activity.QualifiedName;
				}
				return result;
			}
			set
			{
			}
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		internal int SourceConnectionIndex
		{
			get
			{
				int result = 0;
				if (source != null)
				{
					result = source.ConnectionIndex;
				}
				return result;
			}
			set
			{
			}
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		internal DesignerEdges SourceConnectionEdge
		{
			get
			{
				DesignerEdges result = DesignerEdges.None;
				if (source != null)
				{
					result = source.ConnectionEdge;
				}
				return result;
			}
			set
			{
			}
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		internal string TargetActivity
		{
			get
			{
				string result = string.Empty;
				if (target != null)
				{
					result = target.AssociatedDesigner.Activity.QualifiedName;
				}
				return result;
			}
			set
			{
			}
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		internal int TargetConnectionIndex
		{
			get
			{
				int result = 0;
				if (target != null)
				{
					result = target.ConnectionIndex;
				}
				return result;
			}
			set
			{
			}
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		internal DesignerEdges TargetConnectionEdge
		{
			get
			{
				DesignerEdges result = DesignerEdges.None;
				if (target != null)
				{
					result = target.ConnectionEdge;
				}
				return result;
			}
			set
			{
			}
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		internal List<Point> Segments => segments;

		public Connector(ConnectionPoint source, ConnectionPoint target)
		{
			if (source == null)
			{
				throw new ArgumentNullException("source");
			}
			if (target == null)
			{
				throw new ArgumentNullException("target");
			}
			if (ConnectionManager.GetConnectorContainer(source.AssociatedDesigner) != ConnectionManager.GetConnectorContainer(target.AssociatedDesigner))
			{
				throw new ArgumentException(DR.GetString("Error_Connector1"));
			}
			this.source = source;
			this.target = target;
		}

		void IDisposable.Dispose()
		{
		}

		public virtual bool HitTest(Point point)
		{
			Size selectionSize = WorkflowTheme.CurrentTheme.AmbientTheme.SelectionSize;
			ReadOnlyCollection<Point> connectorSegments = ConnectorSegments;
			for (int i = 1; i < connectorSegments.Count; i++)
			{
				if (DesignerGeometryHelper.PointOnLineSegment(point, new Point[2]
				{
					connectorSegments[i - 1],
					connectorSegments[i]
				}, selectionSize))
				{
					return true;
				}
			}
			return false;
		}

		public virtual void Offset(Size size)
		{
			for (int i = 0; i < segments.Count; i++)
			{
				segments[i] = new Point(segments[i].X + size.Width, segments[i].Y + size.Height);
			}
		}

		public override bool Equals(object obj)
		{
			if (!(obj is Connector connector))
			{
				return false;
			}
			if (connector.Source == source)
			{
				return connector.target == target;
			}
			return false;
		}

		public override int GetHashCode()
		{
			if (source != null && target != null)
			{
				return source.GetHashCode() ^ target.GetHashCode();
			}
			return base.GetHashCode();
		}

		public void Invalidate()
		{
			ParentView?.InvalidateLogicalRectangle(Bounds);
		}

		protected void PerformLayout()
		{
			ParentView?.PerformLayout(immediateUpdate: false);
		}

		protected internal void SetConnectorSegments(ICollection<Point> segments)
		{
			if (segments == null)
			{
				throw new ArgumentNullException("segments");
			}
			connectorModified = parentDesigner != null && segments.Count > 0;
			if (connectorModified)
			{
				Invalidate();
			}
			this.segments.Clear();
			this.segments.AddRange(segments);
			if (connectorModified)
			{
				Invalidate();
			}
		}

		protected internal virtual void OnLayout(ActivityDesignerLayoutEventArgs e)
		{
			if (segments.Count > 0 && (segments[0] != Source.Location || segments[segments.Count - 1] != Target.Location))
			{
				connectorModified = false;
			}
			if (!connectorModified && ParentDesigner != null)
			{
				Point[] collection = ActivityDesignerConnectorRouter.Route(Source.AssociatedDesigner.Activity.Site, Source, Target, ExcludedRoutingRectangles);
				segments.Clear();
				segments.AddRange(collection);
			}
		}

		protected internal virtual void OnPaint(ActivityDesignerPaintEventArgs e)
		{
			if (e.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme)
			{
				Size connectorCapSize = new Size(compositeDesignerTheme.ConnectorSize.Width / 5, compositeDesignerTheme.ConnectorSize.Height / 5);
				Size connectorSize = compositeDesignerTheme.ConnectorSize;
				ActivityDesignerPaint.DrawConnectors(e.Graphics, e.DesignerTheme.ForegroundPen, new List<Point>(ConnectorSegments).ToArray(), connectorCapSize, connectorSize, compositeDesignerTheme.ConnectorStartCap, compositeDesignerTheme.ConnectorEndCap);
			}
		}

		protected internal virtual void OnPaintSelected(ActivityDesignerPaintEventArgs e, bool primarySelection, Point[] segmentEditPoints)
		{
			if (e.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme)
			{
				using (Pen pen = new Pen(WorkflowTheme.CurrentTheme.AmbientTheme.SelectionForeColor, 1f))
				{
					Size connectorCapSize = new Size(compositeDesignerTheme.ConnectorSize.Width / 5, compositeDesignerTheme.ConnectorSize.Height / 5);
					Size connectorSize = compositeDesignerTheme.ConnectorSize;
					ActivityDesignerPaint.DrawConnectors(e.Graphics, pen, new List<Point>(ConnectorSegments).ToArray(), connectorCapSize, connectorSize, compositeDesignerTheme.ConnectorStartCap, compositeDesignerTheme.ConnectorEndCap);
				}
				if (source != null)
				{
					source.OnPaint(e, drawHighlighted: false);
				}
				ReadOnlyCollection<Point> connectorSegments = ConnectorSegments;
				for (int i = 1; i < connectorSegments.Count - 1; i++)
				{
					PaintEditPoints(e, connectorSegments[i], drawMidSegmentEditPoint: false);
				}
				for (int j = 0; j < segmentEditPoints.Length; j++)
				{
					PaintEditPoints(e, segmentEditPoints[j], drawMidSegmentEditPoint: true);
				}
				if (target != null)
				{
					target.OnPaint(e, drawHighlighted: false);
				}
			}
		}

		protected internal virtual void OnPaintEdited(ActivityDesignerPaintEventArgs e, Point[] segments, Point[] segmentEditPoints)
		{
			if (e.DesignerTheme is CompositeDesignerTheme compositeDesignerTheme)
			{
				using (Pen pen = new Pen(e.AmbientTheme.SelectionForegroundPen.Color, e.AmbientTheme.SelectionForegroundPen.Width))
				{
					pen.DashStyle = DashStyle.Dash;
					Size connectorCapSize = new Size(compositeDesignerTheme.ConnectorSize.Width / 5, compositeDesignerTheme.ConnectorSize.Height / 5);
					Size connectorSize = compositeDesignerTheme.ConnectorSize;
					ActivityDesignerPaint.DrawConnectors(e.Graphics, pen, segments, connectorCapSize, connectorSize, compositeDesignerTheme.ConnectorStartCap, compositeDesignerTheme.ConnectorEndCap);
				}
				if (source != null)
				{
					source.OnPaint(e, drawHighlighted: false);
				}
				for (int i = 1; i < segments.Length - 1; i++)
				{
					PaintEditPoints(e, segments[i], drawMidSegmentEditPoint: false);
				}
				for (int j = 0; j < segmentEditPoints.Length; j++)
				{
					PaintEditPoints(e, segmentEditPoints[j], drawMidSegmentEditPoint: true);
				}
				if (target != null)
				{
					target.OnPaint(e, drawHighlighted: false);
				}
			}
		}

		protected virtual object GetService(Type serviceType)
		{
			object result = null;
			if (parentDesigner != null && parentDesigner.Activity != null && parentDesigner.Activity.Site != null)
			{
				result = parentDesigner.Activity.Site.GetService(serviceType);
			}
			return result;
		}

		private void PaintEditPoints(ActivityDesignerPaintEventArgs e, Point point, bool drawMidSegmentEditPoint)
		{
			Size size = ((source != null) ? source.Bounds.Size : Size.Empty);
			if (size.IsEmpty)
			{
				return;
			}
			Rectangle rect = new Rectangle(point.X - size.Width / 2, point.Y - size.Height / 2, size.Width, size.Height);
			if (drawMidSegmentEditPoint)
			{
				using (GraphicsPath graphicsPath = new GraphicsPath())
				{
					graphicsPath.AddLine(new Point(rect.Left + rect.Width / 2, rect.Top), new Point(rect.Right, rect.Top + rect.Height / 2));
					graphicsPath.AddLine(new Point(rect.Right, rect.Top + rect.Height / 2), new Point(rect.Left + rect.Width / 2, rect.Bottom));
					graphicsPath.AddLine(new Point(rect.Left + rect.Width / 2, rect.Bottom), new Point(rect.Left, rect.Top + rect.Height / 2));
					graphicsPath.AddLine(new Point(rect.Left, rect.Top + rect.Height / 2), new Point(rect.Left + rect.Width / 2, rect.Top));
					e.Graphics.FillPath(Brushes.White, graphicsPath);
					e.Graphics.DrawPath(e.AmbientTheme.SelectionForegroundPen, graphicsPath);
					return;
				}
			}
			rect.Inflate(-1, -1);
			e.Graphics.FillEllipse(e.AmbientTheme.SelectionForegroundBrush, rect);
		}

		internal void SetConnectorModified(bool modified)
		{
			connectorModified = modified;
		}

		internal void SetParent(FreeformActivityDesigner parentDesigner)
		{
			WorkflowView parentView = ParentView;
			if (this.parentDesigner != null)
			{
				parentView?.InvalidateLogicalRectangle(this.parentDesigner.Bounds);
			}
			this.parentDesigner = parentDesigner;
			if (this.parentDesigner != null)
			{
				parentView?.InvalidateLogicalRectangle(this.parentDesigner.Bounds);
			}
		}

		internal static Connector GetConnectorFromSelectedObject(object selectedObject)
		{
			Connector result = null;
			if (selectedObject is ConnectorHitTestInfo connectorHitTestInfo)
			{
				FreeformActivityDesigner freeformActivityDesigner = connectorHitTestInfo.AssociatedDesigner as FreeformActivityDesigner;
				int num = connectorHitTestInfo.MapToIndex();
				if (freeformActivityDesigner != null && num >= 0 && num < freeformActivityDesigner.Connectors.Count)
				{
					result = freeformActivityDesigner.Connectors[num];
				}
			}
			return result;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ConnectorAccessibleObject : AccessibleObject
	{
		private Connector connector;

		public override Rectangle Bounds
		{
			get
			{
				WorkflowView parentView = connector.ParentDesigner.ParentView;
				Rectangle bounds = connector.Bounds;
				return new Rectangle(parentView.LogicalPointToScreen(bounds.Location), parentView.LogicalSizeToClient(bounds.Size));
			}
		}

		public override string Name
		{
			get
			{
				return connector.GetType().Name;
			}
			set
			{
			}
		}

		public override AccessibleObject Parent => connector.ParentDesigner.AccessibilityObject;

		public override AccessibleRole Role => AccessibleRole.Diagram;

		public ConnectorAccessibleObject(Connector connector)
		{
			if (connector == null)
			{
				throw new ArgumentNullException("connector");
			}
			this.connector = connector;
		}

		public override AccessibleObject HitTest(int x, int y)
		{
			WorkflowView parentView = connector.ParentDesigner.ParentView;
			if (connector.HitTest(parentView.ScreenPointToLogical(new Point(x, y))))
			{
				return this;
			}
			return null;
		}
	}
	internal sealed class ConnectorEditor
	{
		private sealed class EditPoint
		{
			[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
			public enum EditPointTypes
			{
				ConnectionEditPoint = 1,
				MultiSegmentEditPoint,
				MidSegmentEditPoint
			}

			private ConnectorEditor owner;

			private EditPointTypes editPointType;

			private Point point;

			private ConnectionPoint connectionPoint;

			public EditPointTypes Type => editPointType;

			public Point Location
			{
				get
				{
					return point;
				}
				set
				{
					point = value;
				}
			}

			public Rectangle Bounds
			{
				get
				{
					Size size = owner.Source.Bounds.Size;
					return new Rectangle(point.X - size.Width / 2, point.Y - size.Height / 2, size.Width, size.Height);
				}
			}

			public ConnectionPoint EditedConnectionPoint => connectionPoint;

			public EditPoint(ConnectorEditor owner, EditPointTypes editPointType, Point point)
			{
				this.owner = owner;
				this.editPointType = editPointType;
				this.point = point;
			}

			public EditPoint(ConnectorEditor owner, ConnectionPoint connectionPoint)
			{
				this.owner = owner;
				editPointType = EditPointTypes.ConnectionEditPoint;
				this.connectionPoint = connectionPoint;
				point = connectionPoint.Location;
			}
		}

		private IServiceProvider serviceProvider;

		private Connector editedConnector;

		private EditPoint activeEditPoint;

		private List<EditPoint> editPoints = new List<EditPoint>();

		public ConnectionPoint EditedConectionPoint
		{
			get
			{
				if (activeEditPoint != null)
				{
					return activeEditPoint.EditedConnectionPoint;
				}
				return null;
			}
		}

		public Connector EditedConnector => editedConnector;

		private ConnectionPoint Source => editedConnector.Source;

		private ConnectionPoint Target => editedConnector.Target;

		public ConnectorEditor(Connector connectorEdited)
		{
			editedConnector = connectorEdited;
			serviceProvider = editedConnector.Source.AssociatedDesigner.Activity.Site;
			CreateEditPoints();
		}

		public Cursor GetCursor(Point cursorPoint)
		{
			Cursor result = Cursors.Default;
			if (activeEditPoint != null)
			{
				result = ConnectionManager.NewConnectorCursor;
			}
			else
			{
				foreach (EditPoint editPoint in editPoints)
				{
					if (editPoint.Bounds.Contains(cursorPoint))
					{
						result = ConnectionManager.SnappedConnectionCursor;
						break;
					}
				}
			}
			return result;
		}

		public bool OnBeginEditing(Point point)
		{
			CreateEditPoints();
			EditPoint editPoint = null;
			for (int num = editPoints.Count - 1; num >= 0; num--)
			{
				if (editPoints[num].Bounds.Contains(point))
				{
					editPoint = editPoints[num];
					break;
				}
			}
			if (editPoint != null && (editPoint.EditedConnectionPoint == null || ConnectionManager.GetConnectorContainer(editPoint.EditedConnectionPoint.AssociatedDesigner) != null))
			{
				editPoint.Location = point;
				activeEditPoint = editPoint;
			}
			Invalidate();
			return activeEditPoint != null;
		}

		public void OnContinueEditing(Point point)
		{
			if (activeEditPoint != null)
			{
				Invalidate();
				UpdateEditPoints(point);
				Invalidate();
			}
		}

		public void OnEndEditing(Point point, bool commitChanges)
		{
			if (activeEditPoint == null)
			{
				return;
			}
			Invalidate();
			if (commitChanges)
			{
				UpdateEditPoints(point);
				EditPoint editPoint = activeEditPoint;
				activeEditPoint = null;
				UpdateEditPoints(point);
				bool flag = false;
				if (editPoint.Type == EditPoint.EditPointTypes.ConnectionEditPoint)
				{
					ConnectionManager connectionManager = GetService(typeof(ConnectionManager)) as ConnectionManager;
					FreeformActivityDesigner connectorContainer = ConnectionManager.GetConnectorContainer(editPoint.EditedConnectionPoint.AssociatedDesigner);
					if (connectionManager != null && connectionManager.SnappedConnectionPoint != null && connectorContainer != null)
					{
						ConnectionPoint connectionPoint = editedConnector.Source;
						ConnectionPoint connectionPoint2 = editedConnector.Target;
						if (connectionPoint2.Equals(editPoint.EditedConnectionPoint))
						{
							connectionPoint2 = connectionManager.SnappedConnectionPoint;
						}
						else if (connectionPoint.Equals(editPoint.EditedConnectionPoint))
						{
							connectionPoint = connectionManager.SnappedConnectionPoint;
						}
						if (connectorContainer == ConnectionManager.GetConnectorContainer(connectionPoint2.AssociatedDesigner) && connectorContainer.CanConnectContainedDesigners(connectionPoint, connectionPoint2))
						{
							editedConnector.Source = connectionPoint;
							editedConnector.Target = connectionPoint2;
							if (editedConnector.ParentDesigner == null)
							{
								editedConnector = connectorContainer.AddConnector(connectionPoint, connectionPoint2);
								if (GetService(typeof(WorkflowDesignerLoader)) is WorkflowDesignerLoader workflowDesignerLoader)
								{
									workflowDesignerLoader.SetModified(modified: true);
								}
							}
							connectorContainer.OnContainedDesignersConnected(connectionPoint, connectionPoint2);
						}
						flag = true;
					}
				}
				else
				{
					flag = true;
				}
				if (flag)
				{
					editedConnector.SetConnectorSegments(GetPointsFromEditPoints(editPoints));
					if (editedConnector.ParentDesigner != null)
					{
						editedConnector.ParentDesigner.OnConnectorChanged(new ConnectorEventArgs(editedConnector));
						if (GetService(typeof(WorkflowDesignerLoader)) is WorkflowDesignerLoader workflowDesignerLoader2)
						{
							workflowDesignerLoader2.SetModified(modified: true);
						}
					}
				}
				PerformLayout();
			}
			Invalidate();
		}

		public bool HitTest(Point point)
		{
			for (int i = 0; i < editPoints.Count; i++)
			{
				EditPoint editPoint = editPoints[i];
				if (editPoint.Bounds.Contains(point))
				{
					return true;
				}
			}
			return false;
		}

		public void OnPaint(ActivityDesignerPaintEventArgs e, bool drawSelected, bool drawPrimarySelection)
		{
			List<Point> list = new List<Point>();
			List<Point> list2 = new List<Point>();
			for (int i = 0; i < editPoints.Count; i++)
			{
				EditPoint editPoint = editPoints[i];
				if (editPoint.Type == EditPoint.EditPointTypes.ConnectionEditPoint || editPoint.Type == EditPoint.EditPointTypes.MultiSegmentEditPoint)
				{
					list.Add(editPoint.Location);
				}
				else
				{
					list2.Add(editPoint.Location);
				}
			}
			if (drawSelected)
			{
				editedConnector.OnPaintSelected(e, drawPrimarySelection, list2.ToArray());
			}
			if (activeEditPoint != null)
			{
				editedConnector.OnPaintEdited(e, list.ToArray(), list2.ToArray());
			}
		}

		private void PerformLayout()
		{
			if (GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				workflowView.PerformLayout(immediateUpdate: false);
			}
		}

		private void Invalidate()
		{
			if (GetService(typeof(WorkflowView)) is WorkflowView workflowView)
			{
				Rectangle logicalRectangle = DesignerGeometryHelper.RectangleFromLineSegments(GetPointsFromEditPoints(editPoints).ToArray());
				logicalRectangle.Inflate(1, 1);
				workflowView.InvalidateLogicalRectangle(logicalRectangle);
			}
		}

		private object GetService(Type serviceType)
		{
			object result = null;
			if (serviceProvider != null)
			{
				result = serviceProvider.GetService(serviceType);
			}
			return result;
		}

		private void CreateEditPoints()
		{
			editPoints.Clear();
			AddEditPoints(EditPoint.EditPointTypes.ConnectionEditPoint);
			AddEditPoints(EditPoint.EditPointTypes.MultiSegmentEditPoint);
			AddEditPoints(EditPoint.EditPointTypes.MidSegmentEditPoint);
			bool flag = ValidateEditPoints();
		}

		private void UpdateEditPoints(Point newPoint)
		{
			if (editPoints.Count < 2 || editPoints[0].Type != EditPoint.EditPointTypes.ConnectionEditPoint || editPoints[editPoints.Count - 1].Type != EditPoint.EditPointTypes.ConnectionEditPoint)
			{
				return;
			}
			RemoveEditPoints(EditPoint.EditPointTypes.MidSegmentEditPoint);
			if (activeEditPoint != null)
			{
				int num = editPoints.IndexOf(activeEditPoint);
				EditPoint editPoint = ((num > 0) ? editPoints[num - 1] : null);
				EditPoint editPoint2 = ((num < editPoints.Count - 1) ? editPoints[num + 1] : null);
				if (editPoint != null && editPoint.Type == EditPoint.EditPointTypes.ConnectionEditPoint)
				{
					float value = DesignerGeometryHelper.SlopeOfLineSegment(editPoint.Location, activeEditPoint.Location);
					Orientation orientation = ((!(Math.Abs(value) < 1f)) ? Orientation.Vertical : Orientation.Horizontal);
					int num2 = Convert.ToInt32(DesignerGeometryHelper.DistanceBetweenPoints(editPoint.Location, editPoint2?.Location ?? activeEditPoint.Location)) / 4;
					num2 = ((orientation != 0) ? (num2 * ((editPoint.Location.Y < activeEditPoint.Location.X) ? 1 : (-1))) : (num2 * ((editPoint.Location.X < activeEditPoint.Location.X) ? 1 : (-1))));
					num = editPoints.IndexOf(activeEditPoint);
					Point point = ((orientation == Orientation.Horizontal) ? new Point(editPoint.Location.X + num2, editPoint.Location.Y) : new Point(editPoint.Location.X, editPoint.Location.Y + num2));
					editPoint = new EditPoint(this, EditPoint.EditPointTypes.MultiSegmentEditPoint, point);
					editPoints.InsertRange(num, new EditPoint[2]
					{
						new EditPoint(this, EditPoint.EditPointTypes.MultiSegmentEditPoint, point),
						editPoint
					});
				}
				if (editPoint2 != null && editPoint2.Type == EditPoint.EditPointTypes.ConnectionEditPoint)
				{
					float value2 = DesignerGeometryHelper.SlopeOfLineSegment(activeEditPoint.Location, editPoint2.Location);
					Orientation orientation2 = ((!(Math.Abs(value2) < 1f)) ? Orientation.Vertical : Orientation.Horizontal);
					int num3 = Convert.ToInt32(DesignerGeometryHelper.DistanceBetweenPoints(editPoint?.Location ?? activeEditPoint.Location, editPoint2.Location)) / 4;
					num3 = ((orientation2 != 0) ? (num3 * ((activeEditPoint.Location.Y >= editPoint2.Location.Y) ? 1 : (-1))) : (num3 * ((activeEditPoint.Location.X >= editPoint2.Location.X) ? 1 : (-1))));
					num = editPoints.IndexOf(activeEditPoint);
					Point point2 = ((orientation2 == Orientation.Horizontal) ? new Point(editPoint2.Location.X + num3, editPoint2.Location.Y) : new Point(editPoint2.Location.X, editPoint2.Location.Y + num3));
					editPoint2 = new EditPoint(this, EditPoint.EditPointTypes.MultiSegmentEditPoint, point2);
					editPoints.InsertRange(num + 1, new EditPoint[2]
					{
						editPoint2,
						new EditPoint(this, EditPoint.EditPointTypes.MultiSegmentEditPoint, point2)
					});
				}
				if (activeEditPoint.Type == EditPoint.EditPointTypes.ConnectionEditPoint)
				{
					activeEditPoint.Location = newPoint;
					RemoveEditPoints(EditPoint.EditPointTypes.MultiSegmentEditPoint);
					object obj = null;
					object obj2 = null;
					if (activeEditPoint.EditedConnectionPoint.Equals(Target))
					{
						obj2 = newPoint;
						obj = Source;
					}
					else
					{
						obj = newPoint;
						obj2 = Target;
					}
					int num4 = ((editPoints.Count == 2) ? 1 : 0);
					List<EditPoint> list = new List<EditPoint>();
					Point[] array = ActivityDesignerConnectorRouter.Route(serviceProvider, obj, obj2, editedConnector.ExcludedRoutingRectangles);
					for (int i = num4; i < array.Length - num4; i++)
					{
						list.Add(new EditPoint(this, EditPoint.EditPointTypes.MultiSegmentEditPoint, array[i]));
					}
					editPoints.InsertRange(1, list.ToArray());
				}
				else if (activeEditPoint.Type == EditPoint.EditPointTypes.MultiSegmentEditPoint)
				{
					if (editPoint != null && editPoint.Type != EditPoint.EditPointTypes.ConnectionEditPoint && editPoint2 != null && editPoint2.Type != EditPoint.EditPointTypes.ConnectionEditPoint)
					{
						float value3 = DesignerGeometryHelper.SlopeOfLineSegment(editPoint.Location, activeEditPoint.Location);
						Orientation orientation3 = ((!(Math.Abs(value3) < 1f)) ? Orientation.Vertical : Orientation.Horizontal);
						editPoint.Location = ((orientation3 == Orientation.Horizontal) ? new Point(editPoint.Location.X, newPoint.Y) : new Point(newPoint.X, editPoint.Location.Y));
						value3 = DesignerGeometryHelper.SlopeOfLineSegment(activeEditPoint.Location, editPoint2.Location);
						orientation3 = ((!(Math.Abs(value3) < 1f)) ? Orientation.Vertical : Orientation.Horizontal);
						editPoint2.Location = ((orientation3 == Orientation.Horizontal) ? new Point(editPoint2.Location.X, newPoint.Y) : new Point(newPoint.X, editPoint2.Location.Y));
						activeEditPoint.Location = newPoint;
					}
				}
				else if (activeEditPoint.Type == EditPoint.EditPointTypes.MidSegmentEditPoint && editPoint != null && editPoint.Type != EditPoint.EditPointTypes.ConnectionEditPoint && editPoint2 != null && editPoint2.Type != EditPoint.EditPointTypes.ConnectionEditPoint)
				{
					float value4 = DesignerGeometryHelper.SlopeOfLineSegment(editPoint.Location, editPoint2.Location);
					if (Math.Abs(value4) < 1f || 1 == 0)
					{
						editPoint.Location = new Point(editPoint.Location.X, newPoint.Y);
						editPoint2.Location = new Point(editPoint2.Location.X, newPoint.Y);
						activeEditPoint.Location = new Point(activeEditPoint.Location.X, newPoint.Y);
					}
					else
					{
						editPoint.Location = new Point(newPoint.X, editPoint.Location.Y);
						editPoint2.Location = new Point(newPoint.X, editPoint2.Location.Y);
						activeEditPoint.Location = new Point(newPoint.X, activeEditPoint.Location.Y);
					}
				}
			}
			RemoveCoincidingEditPoints();
			AddEditPoints(EditPoint.EditPointTypes.MidSegmentEditPoint);
			bool flag = ValidateEditPoints();
		}

		private void AddEditPoints(EditPoint.EditPointTypes editPointType)
		{
			switch (editPointType)
			{
			case EditPoint.EditPointTypes.ConnectionEditPoint:
				if (editPoints.Count == 0 || !editPoints[0].EditedConnectionPoint.Equals(Source))
				{
					editPoints.Insert(0, new EditPoint(this, Source));
				}
				if (editPoints.Count < 2 || !editPoints[editPoints.Count - 1].EditedConnectionPoint.Equals(Target))
				{
					editPoints.Add(new EditPoint(this, Target));
				}
				break;
			case EditPoint.EditPointTypes.MidSegmentEditPoint:
			{
				int num = Source.Bounds.Width * 4;
				for (int j = 0; j < editPoints.Count - 1; j++)
				{
					if (editPoints[j].Type != EditPoint.EditPointTypes.MidSegmentEditPoint && editPoints[j + 1].Type != EditPoint.EditPointTypes.MidSegmentEditPoint && DesignerGeometryHelper.DistanceOfLineSegments(new Point[2]
					{
						editPoints[j].Location,
						editPoints[j + 1].Location
					}) > (double)num)
					{
						Point point = DesignerGeometryHelper.MidPointOfLineSegment(editPoints[j].Location, editPoints[j + 1].Location);
						editPoints.Insert(j + 1, new EditPoint(this, EditPoint.EditPointTypes.MidSegmentEditPoint, point));
					}
				}
				break;
			}
			case EditPoint.EditPointTypes.MultiSegmentEditPoint:
				if (editPoints.Count == 2)
				{
					List<Point> list = new List<Point>(editedConnector.ConnectorSegments);
					if (list.Count > 0 && list[0] == Source.Location)
					{
						list.RemoveAt(0);
					}
					if (list.Count > 0 && list[list.Count - 1] == Target.Location)
					{
						list.RemoveAt(list.Count - 1);
					}
					List<EditPoint> list2 = new List<EditPoint>();
					for (int i = 0; i < list.Count; i++)
					{
						list2.Add(new EditPoint(this, EditPoint.EditPointTypes.MultiSegmentEditPoint, list[i]));
					}
					editPoints.InsertRange(editPoints.Count - 1, list2.ToArray());
				}
				break;
			}
		}

		private void RemoveEditPoints(EditPoint.EditPointTypes editPointType)
		{
			List<EditPoint> list = new List<EditPoint>();
			for (int i = 0; i < editPoints.Count; i++)
			{
				EditPoint editPoint = editPoints[i];
				if (editPoint.Type == editPointType)
				{
					list.Add(editPoint);
				}
			}
			for (int j = 0; j < list.Count; j++)
			{
				EditPoint editPoint2 = list[j];
				if (editPoint2 != activeEditPoint)
				{
					editPoints.Remove(editPoint2);
				}
			}
		}

		private void RemoveCoincidingEditPoints()
		{
			if (editPoints.Count < 2 || editPoints[0].Type != EditPoint.EditPointTypes.ConnectionEditPoint || editPoints[editPoints.Count - 1].Type != EditPoint.EditPointTypes.ConnectionEditPoint || (activeEditPoint != null && activeEditPoint.Type == EditPoint.EditPointTypes.ConnectionEditPoint))
			{
				return;
			}
			RemoveEditPoints(EditPoint.EditPointTypes.MidSegmentEditPoint);
			List<EditPoint> list = new List<EditPoint>();
			for (int i = 0; i < editPoints.Count; i++)
			{
				if (editPoints[i].Type != EditPoint.EditPointTypes.MultiSegmentEditPoint || editPoints[i] == activeEditPoint || (i > 0 && editPoints[i - 1].Type == EditPoint.EditPointTypes.MidSegmentEditPoint) || (i < editPoints.Count - 1 && editPoints[i + 1].Type == EditPoint.EditPointTypes.MidSegmentEditPoint))
				{
					list.Add(editPoints[i]);
				}
			}
			for (int j = 1; j < editPoints.Count - 1; j++)
			{
				EditPoint editPoint = editPoints[j - 1];
				EditPoint editPoint2 = editPoints[j];
				EditPoint editPoint3 = editPoints[j + 1];
				if (list.Contains(editPoint2))
				{
					continue;
				}
				double num = DesignerGeometryHelper.DistanceOfLineSegments(new Point[2] { editPoint.Location, editPoint2.Location });
				if ((num < (double)editPoint2.Bounds.Width || num < (double)editPoint2.Bounds.Height) && editPoint3.Type == EditPoint.EditPointTypes.MultiSegmentEditPoint)
				{
					float num2 = DesignerGeometryHelper.SlopeOfLineSegment(editPoint2.Location, editPoint3.Location);
					editPoint3.Location = ((num2 < 1f) ? new Point(editPoint3.Location.X, editPoint.Location.Y) : new Point(editPoint.Location.X, editPoint3.Location.Y));
					editPoints.Remove(editPoint2);
					j--;
					continue;
				}
				num = DesignerGeometryHelper.DistanceOfLineSegments(new Point[2] { editPoint2.Location, editPoint3.Location });
				if ((num < (double)editPoint2.Bounds.Width || num < (double)editPoint2.Bounds.Height) && editPoint.Type == EditPoint.EditPointTypes.MultiSegmentEditPoint)
				{
					float num3 = DesignerGeometryHelper.SlopeOfLineSegment(editPoint.Location, editPoint2.Location);
					editPoint.Location = ((num3 < 1f) ? new Point(editPoint.Location.X, editPoint3.Location.Y) : new Point(editPoint3.Location.X, editPoint.Location.Y));
					editPoints.Remove(editPoint2);
					j--;
				}
			}
			for (int k = 1; k < editPoints.Count - 1; k++)
			{
				EditPoint editPoint4 = editPoints[k];
				EditPoint editPoint5 = editPoints[k - 1];
				EditPoint editPoint6 = editPoints[k + 1];
				if (!list.Contains(editPoint4))
				{
					float value = DesignerGeometryHelper.SlopeOfLineSegment(editPoint5.Location, editPoint4.Location);
					float value2 = DesignerGeometryHelper.SlopeOfLineSegment(editPoint4.Location, editPoint6.Location);
					if (Math.Abs(value) == Math.Abs(value2))
					{
						editPoints.Remove(editPoint4);
						k--;
					}
				}
			}
			for (int l = 0; l < editPoints.Count - 1; l++)
			{
				EditPoint editPoint7 = editPoints[l];
				EditPoint editPoint8 = editPoints[l + 1];
				float num4 = DesignerGeometryHelper.SlopeOfLineSegment(editPoint7.Location, editPoint8.Location);
				if (num4 != 0f && num4 != float.MaxValue)
				{
					Point point = ((num4 < 1f) ? new Point(editPoint8.Location.X, editPoint7.Location.Y) : new Point(editPoint7.Location.X, editPoint8.Location.Y));
					editPoints.Insert(l + 1, new EditPoint(this, EditPoint.EditPointTypes.MultiSegmentEditPoint, point));
				}
			}
		}

		private bool ValidateEditPoints()
		{
			if (editPoints.Count < 2)
			{
				return false;
			}
			ConnectionPoint editedConnectionPoint = editPoints[0].EditedConnectionPoint;
			if (editedConnectionPoint == null || !editedConnectionPoint.Equals(Source))
			{
				return false;
			}
			ConnectionPoint editedConnectionPoint2 = editPoints[editPoints.Count - 1].EditedConnectionPoint;
			if (editedConnectionPoint2 == null || !editedConnectionPoint2.Equals(Target))
			{
				return false;
			}
			for (int i = 0; i < editPoints.Count - 1; i++)
			{
				if (editPoints[i].Type == EditPoint.EditPointTypes.MidSegmentEditPoint && editPoints[i + 1].Type == EditPoint.EditPointTypes.MidSegmentEditPoint)
				{
					return false;
				}
			}
			return true;
		}

		private List<Point> GetPointsFromEditPoints(List<EditPoint> editPoints)
		{
			List<Point> list = new List<Point>();
			for (int i = 0; i < editPoints.Count; i++)
			{
				EditPoint editPoint = editPoints[i];
				if (editPoint.Type == EditPoint.EditPointTypes.ConnectionEditPoint || editPoint.Type == EditPoint.EditPointTypes.MultiSegmentEditPoint)
				{
					list.Add(editPoint.Location);
				}
			}
			return list;
		}
	}
	internal static class ActivityDesignerConnectorRouter
	{
		public static Point[] Route(IServiceProvider serviceProvider, object source, object target, ICollection<Rectangle> userDefinedRoutingObstacles)
		{
			GetRoutingObstacles(serviceProvider, source, target, out var rectanglesToExclude, out var linesToExclude, out var pointsToExclude);
			if (userDefinedRoutingObstacles != null)
			{
				rectanglesToExclude.AddRange(userDefinedRoutingObstacles);
			}
			ActivityDesigner safeRootDesigner = ActivityDesigner.GetSafeRootDesigner(serviceProvider);
			AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
			Point point = ((source is ConnectionPoint) ? ((ConnectionPoint)source).Location : ((Point)source));
			Point point2 = ((target is ConnectionPoint) ? ((ConnectionPoint)target).Location : ((Point)target));
			Point[] array = ConnectorRouter.Route(point, point2, new Size(2 * ambientTheme.Margin.Width, 2 * ambientTheme.Margin.Height), safeRootDesigner.Bounds, rectanglesToExclude.ToArray(), linesToExclude.ToArray(), pointsToExclude.ToArray());
			if (!AreAllSegmentsVerticalOrHorizontal(array))
			{
				array = ConnectorRouter.Route(point, point2, ambientTheme.Margin, safeRootDesigner.Bounds, new Rectangle[0], linesToExclude.ToArray(), new Point[0]);
			}
			if (!AreAllSegmentsVerticalOrHorizontal(array))
			{
				float num = DesignerGeometryHelper.SlopeOfLineSegment(point, point2);
				Point point3 = ((num < 1f) ? new Point(point2.X, point.Y) : new Point(point.X, point2.Y));
				array = new Point[3] { point, point3, point2 };
			}
			return array;
		}

		public static void GetRoutingObstacles(IServiceProvider serviceProvider, object source, object target, out List<Rectangle> rectanglesToExclude, out List<Point> linesToExclude, out List<Point> pointsToExclude)
		{
			AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
			ActivityDesigner safeRootDesigner = ActivityDesigner.GetSafeRootDesigner(serviceProvider);
			ConnectionPoint connectionPoint = source as ConnectionPoint;
			Point point = connectionPoint?.Location ?? ((Point)source);
			ActivityDesigner activityDesigner = ((connectionPoint != null) ? connectionPoint.AssociatedDesigner : safeRootDesigner.HitTest(point).AssociatedDesigner);
			ConnectionPoint connectionPoint2 = target as ConnectionPoint;
			Point point2 = connectionPoint2?.Location ?? ((Point)target);
			ActivityDesigner activityDesigner2 = ((connectionPoint2 != null) ? connectionPoint2.AssociatedDesigner : safeRootDesigner.HitTest(point2).AssociatedDesigner);
			Dictionary<int, ActivityDesigner> dictionary = new Dictionary<int, ActivityDesigner>();
			if (activityDesigner != null)
			{
				CompositeActivityDesigner parentDesigner = activityDesigner.ParentDesigner;
				while (parentDesigner != null && !dictionary.ContainsKey(parentDesigner.GetHashCode()))
				{
					dictionary.Add(parentDesigner.GetHashCode(), parentDesigner);
					parentDesigner = parentDesigner.ParentDesigner;
				}
			}
			if (activityDesigner2 != null)
			{
				CompositeActivityDesigner parentDesigner2 = activityDesigner2.ParentDesigner;
				while (parentDesigner2 != null && !dictionary.ContainsKey(parentDesigner2.GetHashCode()))
				{
					dictionary.Add(parentDesigner2.GetHashCode(), parentDesigner2);
					parentDesigner2 = parentDesigner2.ParentDesigner;
				}
			}
			rectanglesToExclude = new List<Rectangle>();
			pointsToExclude = new List<Point>();
			foreach (CompositeActivityDesigner value in dictionary.Values)
			{
				ReadOnlyCollection<ActivityDesigner> containedDesigners = value.ContainedDesigners;
				for (int i = 0; i < containedDesigners.Count; i++)
				{
					ActivityDesigner activityDesigner3 = containedDesigners[i];
					if (activityDesigner3.IsVisible && !dictionary.ContainsKey(activityDesigner3.GetHashCode()) && activityDesigner3 != activityDesigner && activityDesigner3 != activityDesigner2)
					{
						Rectangle bounds = activityDesigner3.Bounds;
						bounds.Inflate(ambientTheme.Margin);
						rectanglesToExclude.Add(bounds);
					}
				}
			}
			linesToExclude = new List<Point>();
			if (activityDesigner != null && activityDesigner == activityDesigner2 && !activityDesigner.IsRootDesigner)
			{
				linesToExclude.AddRange(GetDesignerEscapeCover(activityDesigner, new object[2] { source, target }));
				return;
			}
			if (activityDesigner != null && !activityDesigner.IsRootDesigner)
			{
				linesToExclude.AddRange(GetDesignerEscapeCover(activityDesigner, new object[1] { source }));
			}
			if (activityDesigner2 == null || activityDesigner2.IsRootDesigner)
			{
				return;
			}
			bool flag = true;
			for (CompositeActivityDesigner compositeActivityDesigner2 = activityDesigner?.ParentDesigner; compositeActivityDesigner2 != null; compositeActivityDesigner2 = ((activityDesigner != null) ? compositeActivityDesigner2.ParentDesigner : null))
			{
				if (activityDesigner2 == compositeActivityDesigner2)
				{
					flag = false;
					break;
				}
			}
			if (flag)
			{
				linesToExclude.AddRange(GetDesignerEscapeCover(activityDesigner2, new object[1] { target }));
			}
		}

		private static IList<Point> GetDesignerEscapeCover(ActivityDesigner designer, ICollection<object> escapeLocations)
		{
			Rectangle bounds = designer.Bounds;
			Dictionary<DesignerEdges, List<Point>> dictionary = new Dictionary<DesignerEdges, List<Point>>();
			foreach (object escapeLocation in escapeLocations)
			{
				DesignerEdges designerEdges = DesignerEdges.None;
				Point item = Point.Empty;
				if (escapeLocation is ConnectionPoint)
				{
					designerEdges = ((ConnectionPoint)escapeLocation).ConnectionEdge;
					item = ((ConnectionPoint)escapeLocation).Location;
				}
				else if (escapeLocation is Point)
				{
					item = (Point)escapeLocation;
					designerEdges = DesignerGeometryHelper.ClosestEdgeToPoint((Point)escapeLocation, bounds, DesignerEdges.All);
				}
				if (designerEdges != 0)
				{
					List<Point> list = null;
					if (!dictionary.ContainsKey(designerEdges))
					{
						list = new List<Point>();
						dictionary.Add(designerEdges, list);
					}
					else
					{
						list = dictionary[designerEdges];
					}
					list.Add(item);
				}
			}
			Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
			bounds.Inflate(margin);
			Dictionary<DesignerEdges, Point[]> dictionary2 = new Dictionary<DesignerEdges, Point[]>();
			dictionary2.Add(DesignerEdges.Left, new Point[2]
			{
				new Point(bounds.Left, bounds.Top),
				new Point(bounds.Left, bounds.Bottom)
			});
			dictionary2.Add(DesignerEdges.Top, new Point[2]
			{
				new Point(bounds.Left, bounds.Top),
				new Point(bounds.Right, bounds.Top)
			});
			dictionary2.Add(DesignerEdges.Right, new Point[2]
			{
				new Point(bounds.Right, bounds.Top),
				new Point(bounds.Right, bounds.Bottom)
			});
			dictionary2.Add(DesignerEdges.Bottom, new Point[2]
			{
				new Point(bounds.Left, bounds.Bottom),
				new Point(bounds.Right, bounds.Bottom)
			});
			List<Point> list2 = new List<Point>();
			foreach (DesignerEdges key in dictionary2.Keys)
			{
				if (dictionary.ContainsKey(key))
				{
					Point[] array = dictionary2[key];
					List<Point> list3 = dictionary[key];
					List<Point> list4 = new List<Point>();
					switch (key)
					{
					case DesignerEdges.Left:
					{
						list4.Add(new Point(array[0].X, array[0].Y));
						for (int k = 0; k < list3.Count; k++)
						{
							Point point3 = list3[k];
							if (point3.X > array[0].X && point3.Y > array[0].Y && point3.Y < array[1].Y)
							{
								list4.Add(new Point(array[0].X, point3.Y - 1));
								list4.Add(new Point(point3.X + 1, point3.Y - 1));
								list4.Add(new Point(point3.X + 1, point3.Y + 1));
								list4.Add(new Point(array[0].X, point3.Y + 1));
							}
						}
						list4.Add(new Point(array[0].X, array[1].Y));
						break;
					}
					case DesignerEdges.Right:
					{
						list4.Add(new Point(array[0].X, array[0].Y));
						for (int j = 0; j < list3.Count; j++)
						{
							Point point2 = list3[j];
							if (point2.X < array[0].X && point2.Y > array[0].Y && point2.Y < array[1].Y)
							{
								list4.Add(new Point(array[0].X, point2.Y - 1));
								list4.Add(new Point(point2.X - 1, point2.Y - 1));
								list4.Add(new Point(point2.X - 1, point2.Y + 1));
								list4.Add(new Point(array[0].X, point2.Y + 1));
							}
						}
						list4.Add(new Point(array[0].X, array[1].Y));
						break;
					}
					case DesignerEdges.Top:
					{
						list4.Add(new Point(array[0].X, array[0].Y));
						for (int l = 0; l < list3.Count; l++)
						{
							Point point4 = list3[l];
							if (point4.Y > array[0].Y && point4.X > array[0].X && point4.X < array[1].X)
							{
								list4.Add(new Point(point4.X - 1, array[0].Y));
								list4.Add(new Point(point4.X - 1, point4.Y + 1));
								list4.Add(new Point(point4.X + 1, point4.Y + 1));
								list4.Add(new Point(point4.X + 1, array[0].Y));
							}
						}
						list4.Add(new Point(array[1].X, array[0].Y));
						break;
					}
					case DesignerEdges.Bottom:
					{
						list4.Add(new Point(array[0].X, array[0].Y));
						for (int i = 0; i < list3.Count; i++)
						{
							Point point = list3[i];
							if (point.Y < array[0].Y && point.X > array[0].X && point.X < array[1].X)
							{
								list4.Add(new Point(point.X - 1, array[0].Y));
								list4.Add(new Point(point.X - 1, point.Y - 1));
								list4.Add(new Point(point.X + 1, point.Y - 1));
								list4.Add(new Point(point.X + 1, array[0].Y));
							}
						}
						list4.Add(new Point(array[1].X, array[0].Y));
						break;
					}
					}
					for (int m = 1; m < list4.Count; m++)
					{
						list2.Add(list4[m - 1]);
						list2.Add(list4[m]);
					}
				}
				else
				{
					list2.AddRange(dictionary2[key]);
				}
			}
			return list2.AsReadOnly();
		}

		private static bool AreAllSegmentsVerticalOrHorizontal(Point[] segments)
		{
			if (segments == null || segments.Length == 0)
			{
				return false;
			}
			for (int i = 1; i < segments.Length; i++)
			{
				if (segments[i - 1].X != segments[i].X && segments[i - 1].Y != segments[i].Y)
				{
					return false;
				}
			}
			return true;
		}
	}
	internal static class ConnectorRouter
	{
		private struct DistanceFromPoint
		{
			public ConnectorSegment ConnectorSegment;

			public Point P;

			public double Distance;

			public DistanceFromPoint(ConnectorSegment segment, Point z, Point p)
			{
				ConnectorSegment = segment;
				P = p;
				Distance = ConnectorSegment.DistanceBetweenPoints(z, p);
			}
		}

		private sealed class DistanceSorter : IComparer<DistanceFromPoint>
		{
			private DistanceSorter()
			{
			}

			public static void Sort(ref List<DistanceFromPoint> distances)
			{
				DistanceSorter comparer = new DistanceSorter();
				distances.Sort(comparer);
			}

			int IComparer<DistanceFromPoint>.Compare(DistanceFromPoint lhs, DistanceFromPoint rhs)
			{
				if (lhs.Distance == rhs.Distance)
				{
					return 0;
				}
				if (lhs.Distance > rhs.Distance)
				{
					return 1;
				}
				return -1;
			}
		}

		[DebuggerDisplay("Segment ( {A.X}, {A.Y} ) - ( {B.X},{B.Y} ), {Orientation}")]
		private sealed class ConnectorSegment
		{
			private Point point1;

			private Point point2;

			private Orientation orientation;

			public Point A => point1;

			public Point B => point2;

			public Orientation Orientation => orientation;

			public ConnectorSegment(Point point1, Point point2)
			{
				if (point1.X != point2.X && point1.Y != point2.Y)
				{
					throw new InvalidOperationException(SR.GetString("Error_InvalidConnectorSegment"));
				}
				this.point1 = point1;
				this.point2 = point2;
				orientation = ((this.point1.X == this.point2.X) ? Orientation.Vertical : Orientation.Horizontal);
			}

			public bool Covers(Point p)
			{
				if (orientation != 0)
				{
					if (p.Y >= Math.Min(point1.Y, point2.Y))
					{
						return p.Y <= Math.Max(point1.Y, point2.Y);
					}
					return false;
				}
				if (p.X >= Math.Min(point1.X, point2.X))
				{
					return p.X <= Math.Max(point1.X, point2.X);
				}
				return false;
			}

			public Point? Intersect(ConnectorSegment segment)
			{
				if (orientation == segment.Orientation)
				{
					return null;
				}
				ConnectorSegment connectorSegment = ((orientation == Orientation.Vertical) ? this : segment);
				ConnectorSegment connectorSegment2 = ((orientation == Orientation.Vertical) ? segment : this);
				if (connectorSegment.A.X < Math.Min(connectorSegment2.A.X, connectorSegment2.B.X) || connectorSegment.A.X > Math.Max(connectorSegment2.A.X, connectorSegment2.B.X))
				{
					return null;
				}
				if (connectorSegment2.A.Y < Math.Min(connectorSegment.A.Y, connectorSegment.B.Y) || connectorSegment2.A.Y > Math.Max(connectorSegment.A.Y, connectorSegment.B.Y))
				{
					return null;
				}
				return new Point(connectorSegment.A.X, connectorSegment2.A.Y);
			}

			public bool PointLiesOnThisLine(Point p)
			{
				if (orientation != 0)
				{
					return p.X == point1.X;
				}
				return p.Y == point1.Y;
			}

			public bool IsPointOnSegment(Point p)
			{
				if ((orientation == Orientation.Horizontal && p.Y != point1.Y) || (orientation == Orientation.Vertical && p.X != point1.X))
				{
					return false;
				}
				int num = ((orientation == Orientation.Horizontal) ? p.X : p.Y);
				int val = ((orientation == Orientation.Horizontal) ? point1.X : point1.Y);
				int val2 = ((orientation == Orientation.Horizontal) ? point2.X : point2.Y);
				if (num >= Math.Min(val, val2))
				{
					return num <= Math.Max(val, val2);
				}
				return false;
			}

			public ConnectorSegment PeprendecularThroughPoint(Point p)
			{
				Orientation orientation = ((this.orientation == Orientation.Horizontal) ? Orientation.Vertical : Orientation.Horizontal);
				Point point = new Point(p.X, p.Y);
				if (orientation == Orientation.Horizontal)
				{
					point.X = int.MaxValue;
				}
				else
				{
					point.Y = int.MaxValue;
				}
				return new ConnectorSegment(p, point);
			}

			public Point ExtendPointOutwards(Point p)
			{
				if (p != point1 && p != point2)
				{
					return p;
				}
				int num = ((orientation == Orientation.Horizontal) ? p.X : p.Y);
				int val = ((orientation == Orientation.Horizontal) ? point1.X : point1.Y);
				int val2 = ((orientation == Orientation.Horizontal) ? point2.X : point2.Y);
				num = ((num != Math.Min(val, val2)) ? (num + 1) : (num - 1));
				return new Point((orientation == Orientation.Horizontal) ? num : p.X, (orientation == Orientation.Horizontal) ? p.Y : num);
			}

			public static double DistanceBetweenPoints(Point p, Point q)
			{
				return Math.Sqrt((double)(p.X - q.X) * (double)(p.X - q.X) + (double)(p.Y - q.Y) * (double)(p.Y - q.Y));
			}

			public static ConnectorSegment ConstructBoundSegment(CoverSet coverSet, Point a, Point b)
			{
				if (a.X != b.X && a.Y != b.Y)
				{
					return null;
				}
				return ConstructBoundSegment(coverSet, a, (a.X == b.X) ? Orientation.Vertical : Orientation.Horizontal);
			}

			public static ConnectorSegment SegmentFromLeftToRightCover(CoverSet coverSet, Point p)
			{
				ConnectorSegment cover = coverSet.GetCover(p, DesignerEdges.Left);
				ConnectorSegment cover2 = coverSet.GetCover(p, DesignerEdges.Right);
				Point point = new Point(cover?.A.X ?? int.MinValue, p.Y);
				Point point2 = new Point(cover2?.A.X ?? int.MaxValue, p.Y);
				return new ConnectorSegment(point, point2);
			}

			public static ConnectorSegment SegmentFromBottomToTopCover(CoverSet coverSet, Point p)
			{
				ConnectorSegment cover = coverSet.GetCover(p, DesignerEdges.Bottom);
				ConnectorSegment cover2 = coverSet.GetCover(p, DesignerEdges.Top);
				Point point = new Point(p.X, cover?.A.Y ?? int.MinValue);
				Point point2 = new Point(p.X, cover2?.A.Y ?? int.MaxValue);
				return new ConnectorSegment(point, point2);
			}

			public static ConnectorSegment ConstructBoundSegment(CoverSet coverSet, Point a, Orientation orientation)
			{
				if (orientation != 0)
				{
					return SegmentFromBottomToTopCover(coverSet, a);
				}
				return SegmentFromLeftToRightCover(coverSet, a);
			}

			public override bool Equals(object obj)
			{
				if (!(obj is ConnectorSegment connectorSegment))
				{
					return false;
				}
				if (point1 == connectorSegment.A && point2 == connectorSegment.B)
				{
					return Orientation == connectorSegment.Orientation;
				}
				return false;
			}

			public override int GetHashCode()
			{
				return point1.GetHashCode() ^ point2.GetHashCode() ^ Orientation.GetHashCode();
			}
		}

		private sealed class CoverSet
		{
			private List<ConnectorSegment> verticalCovers = new List<ConnectorSegment>();

			private List<ConnectorSegment> horizontalCovers = new List<ConnectorSegment>();

			private List<ConnectorSegment> usedEscapeLine = new List<ConnectorSegment>();

			public CoverSet(Rectangle[] rectanglesToExclude, Point[] linesToExclude)
			{
				for (int i = 0; i < rectanglesToExclude.Length; i++)
				{
					Rectangle rectangle = rectanglesToExclude[i];
					AddCover(new ConnectorSegment(new Point(rectangle.Left, rectangle.Top), new Point(rectangle.Left, rectangle.Bottom)));
					AddCover(new ConnectorSegment(new Point(rectangle.Right, rectangle.Top), new Point(rectangle.Right, rectangle.Bottom)));
					AddCover(new ConnectorSegment(new Point(rectangle.Left, rectangle.Top), new Point(rectangle.Right, rectangle.Top)));
					AddCover(new ConnectorSegment(new Point(rectangle.Left, rectangle.Bottom), new Point(rectangle.Right, rectangle.Bottom)));
				}
				for (int j = 0; j < linesToExclude.Length / 2; j++)
				{
					AddCover(new ConnectorSegment(linesToExclude[j * 2], linesToExclude[j * 2 + 1]));
				}
			}

			public void ClearUsedLines()
			{
				usedEscapeLine.Clear();
			}

			public void AddCover(ConnectorSegment cover)
			{
				List<ConnectorSegment> list = ((cover.Orientation == Orientation.Vertical) ? verticalCovers : horizontalCovers);
				for (int i = 0; i < list.Count; i++)
				{
					ConnectorSegment connectorSegment = list[i];
					if (cover.IsPointOnSegment(connectorSegment.A) && cover.IsPointOnSegment(connectorSegment.B))
					{
						list.RemoveAt(i);
						break;
					}
					if (connectorSegment.IsPointOnSegment(cover.A) && connectorSegment.IsPointOnSegment(cover.B))
					{
						return;
					}
				}
				list.Add(cover);
			}

			public void AddUsedEscapeLine(ConnectorSegment segment)
			{
				usedEscapeLine.Add(segment);
			}

			public bool EscapeLineHasBeenUsed(ConnectorSegment segment, Point escapePoint)
			{
				for (int i = 0; i < usedEscapeLine.Count; i++)
				{
					ConnectorSegment connectorSegment = usedEscapeLine[i];
					if (connectorSegment.IsPointOnSegment(escapePoint))
					{
						return true;
					}
				}
				return false;
			}

			public ConnectorSegment GetCover(Point p, DesignerEdges side)
			{
				ConnectorSegment connectorSegment = null;
				int num = 0;
				if (side == DesignerEdges.Left || side == DesignerEdges.Right)
				{
					for (int i = 0; i < verticalCovers.Count; i++)
					{
						ConnectorSegment connectorSegment2 = verticalCovers[i];
						int num2 = ((side == DesignerEdges.Left) ? (p.X - connectorSegment2.A.X) : (connectorSegment2.A.X - p.X));
						if (num2 > 0 && connectorSegment2.Covers(p) && (connectorSegment == null || num > num2))
						{
							connectorSegment = connectorSegment2;
							num = num2;
						}
					}
				}
				else
				{
					for (int j = 0; j < horizontalCovers.Count; j++)
					{
						ConnectorSegment connectorSegment3 = horizontalCovers[j];
						int num3 = ((side == DesignerEdges.Bottom) ? (p.Y - connectorSegment3.A.Y) : (connectorSegment3.A.Y - p.Y));
						if (num3 > 0 && connectorSegment3.Covers(p) && (connectorSegment == null || num > num3))
						{
							connectorSegment = connectorSegment3;
							num = num3;
						}
					}
				}
				return connectorSegment;
			}

			public List<ConnectorSegment> GetCovers(Point p, DesignerEdges side)
			{
				List<ConnectorSegment> list = new List<ConnectorSegment>();
				if (side == DesignerEdges.Left || side == DesignerEdges.Right)
				{
					for (int i = 0; i < verticalCovers.Count; i++)
					{
						ConnectorSegment connectorSegment = verticalCovers[i];
						int num = ((side == DesignerEdges.Left) ? (p.X - connectorSegment.A.X) : (connectorSegment.A.X - p.X));
						if (num > 0 && connectorSegment.Covers(p))
						{
							list.Add(connectorSegment);
						}
					}
				}
				else
				{
					for (int j = 0; j < horizontalCovers.Count; j++)
					{
						ConnectorSegment connectorSegment2 = horizontalCovers[j];
						int num2 = ((side == DesignerEdges.Bottom) ? (p.Y - connectorSegment2.A.Y) : (connectorSegment2.A.Y - p.Y));
						if (num2 > 0 && connectorSegment2.Covers(p))
						{
							list.Add(connectorSegment2);
						}
					}
				}
				return list;
			}

			public bool IsEscapePoint(Point origin, Point escape, DesignerEdges side)
			{
				ConnectorSegment cover = GetCover(origin, side);
				int value = ((side != DesignerEdges.Left && side != DesignerEdges.Right) ? (cover.A.Y - escape.Y) : (cover.A.X - escape.X));
				if (cover.Covers(escape))
				{
					return false;
				}
				List<ConnectorSegment> covers = GetCovers(escape, side);
				for (int i = 0; i < covers.Count; i++)
				{
					ConnectorSegment connectorSegment = covers[i];
					if (connectorSegment == cover)
					{
						return false;
					}
					int value2 = ((side != DesignerEdges.Left && side != DesignerEdges.Right) ? Math.Abs(connectorSegment.A.Y - escape.Y) : Math.Abs(connectorSegment.A.X - escape.X));
					if (Math.Sign(value2) == Math.Sign(value) && Math.Abs(value2) < Math.Abs(value))
					{
						return false;
					}
				}
				return true;
			}
		}

		private static readonly Size DefaultSize = new Size(4, 4);

		public static Point[] Route(Point begin, Point end, Size margin, Rectangle enclosingRectangle, Rectangle[] rectanglesToExclude, Point[] linesToExclude, Point[] pointsToExclude)
		{
			List<Rectangle> list = new List<Rectangle>(rectanglesToExclude);
			if (!enclosingRectangle.IsEmpty)
			{
				begin.X = Math.Min(Math.Max(begin.X, enclosingRectangle.Left + 1), enclosingRectangle.Right - 1);
				begin.Y = Math.Min(Math.Max(begin.Y, enclosingRectangle.Top + 1), enclosingRectangle.Bottom - 1);
				list.Insert(0, enclosingRectangle);
			}
			List<Point> list2 = new List<Point>(linesToExclude);
			int num = Math.Max(margin.Width / 2, 1);
			int num2 = Math.Max(margin.Height / 2, 1);
			for (int i = 0; i < pointsToExclude.Length; i++)
			{
				Point point = pointsToExclude[i];
				list2.Add(new Point(point.X - num, point.Y));
				list2.Add(new Point(point.X + num, point.Y));
				list2.Add(new Point(point.X, point.Y - num2));
				list2.Add(new Point(point.X, point.Y + num2));
			}
			return GetRoutedLineSegments(begin, end, margin, list.ToArray(), list2.ToArray());
		}

		private static Point[] GetRoutedLineSegments(Point begin, Point end, Size margin, Rectangle[] rectanglesToExclude, Point[] linesToExclude)
		{
			if (rectanglesToExclude == null)
			{
				throw new ArgumentNullException("rectanglesToExclude");
			}
			if (linesToExclude == null)
			{
				throw new ArgumentNullException("linesToExclude");
			}
			if (linesToExclude.Length % 2 > 0)
			{
				throw new ArgumentException(DR.GetString("Error_Connector2"));
			}
			CoverSet coverSet = new CoverSet(rectanglesToExclude, linesToExclude);
			coverSet.ClearUsedLines();
			Point point = begin;
			Point point2 = end;
			List<Point> LeA = new List<Point>();
			List<Point> list = new List<Point>();
			List<ConnectorSegment> LhA = new List<ConnectorSegment>();
			List<ConnectorSegment> LvA = new List<ConnectorSegment>();
			List<ConnectorSegment> LhB = new List<ConnectorSegment>();
			List<ConnectorSegment> LvB = new List<ConnectorSegment>();
			Orientation orientationA = Orientation.Horizontal;
			Orientation orientation = Orientation.Horizontal;
			LeA.Add(begin);
			list.Add(end);
			bool noEscapeA = false;
			bool flag = false;
			Point? point3 = null;
			ConnectorSegment intersectionSegmentA = null;
			ConnectorSegment intersectionSegmentB = null;
			try
			{
				while (true)
				{
					if (noEscapeA)
					{
						if (flag)
						{
							break;
						}
						List<Point> list2 = LeA;
						LeA = list;
						list = list2;
						Point point4 = point;
						point = point2;
						point2 = point4;
						bool flag2 = noEscapeA;
						noEscapeA = flag;
						flag = flag2;
						Orientation orientation2 = orientationA;
						orientationA = orientation;
						orientation = orientation2;
						List<ConnectorSegment> list3 = LhA;
						LhA = LhB;
						LhB = list3;
						list3 = LvA;
						LvA = LvB;
						LvB = list3;
						continue;
					}
					Point z = LeA[LeA.Count - 1];
					Point targetPoint = point2;
					point3 = EscapeAlgorithm(coverSet, z, targetPoint, ref LeA, ref LhA, ref LvA, ref LhB, ref LvB, ref orientationA, out intersectionSegmentA, out intersectionSegmentB, margin, ref noEscapeA);
					if (point3.HasValue)
					{
						break;
					}
					List<Point> list4 = LeA;
					LeA = list;
					list = list4;
					Point point5 = point;
					point = point2;
					point2 = point5;
					bool flag3 = noEscapeA;
					noEscapeA = flag;
					flag = flag3;
					Orientation orientation3 = orientationA;
					orientationA = orientation;
					orientation = orientation3;
					List<ConnectorSegment> list5 = LhA;
					LhA = LhB;
					LhB = list5;
					list5 = LvA;
					LvA = LvB;
					LvB = list5;
				}
				if (!point3.HasValue)
				{
					return null;
				}
				List<Point> refinedPath = new List<Point>();
				LeA = FirstRefinementAlgorithm(LeA, point3.Value, intersectionSegmentA);
				list = FirstRefinementAlgorithm(list, point3.Value, intersectionSegmentB);
				for (int num = LeA.Count - 1; num >= 0; num--)
				{
					refinedPath.Add(LeA[num]);
				}
				refinedPath.Add(point3.Value);
				for (int i = 0; i < list.Count; i++)
				{
					refinedPath.Add(list[i]);
				}
				SecondRefinementAlgorithm(coverSet, ref refinedPath, margin);
				if (refinedPath.Count > 1 && refinedPath[refinedPath.Count - 1] == begin)
				{
					refinedPath.Reverse();
				}
				return refinedPath.ToArray();
			}
			catch
			{
				return null;
			}
		}

		private static Point? EscapeAlgorithm(CoverSet coverSet, Point Z, Point targetPoint, ref List<Point> LeA, ref List<ConnectorSegment> LhA, ref List<ConnectorSegment> LvA, ref List<ConnectorSegment> LhB, ref List<ConnectorSegment> LvB, ref Orientation orientationA, out ConnectorSegment intersectionSegmentA, out ConnectorSegment intersectionSegmentB, Size margin, ref bool noEscapeA)
		{
			Point? point = null;
			intersectionSegmentA = null;
			intersectionSegmentB = null;
			ConnectorSegment cover = coverSet.GetCover(Z, DesignerEdges.Left);
			ConnectorSegment cover2 = coverSet.GetCover(Z, DesignerEdges.Right);
			ConnectorSegment cover3 = coverSet.GetCover(Z, DesignerEdges.Bottom);
			ConnectorSegment cover4 = coverSet.GetCover(Z, DesignerEdges.Top);
			ConnectorSegment connectorSegment = ConnectorSegment.SegmentFromLeftToRightCover(coverSet, Z);
			LhA.Add(connectorSegment);
			ConnectorSegment connectorSegment2 = ConnectorSegment.SegmentFromBottomToTopCover(coverSet, Z);
			LvA.Add(connectorSegment2);
			for (int i = 0; i < LvB.Count; i++)
			{
				ConnectorSegment connectorSegment3 = LvB[i];
				point = connectorSegment.Intersect(connectorSegment3);
				if (point.HasValue)
				{
					intersectionSegmentA = connectorSegment;
					intersectionSegmentB = connectorSegment3;
					return point;
				}
			}
			for (int j = 0; j < LhB.Count; j++)
			{
				ConnectorSegment connectorSegment4 = LhB[j];
				point = connectorSegment2.Intersect(connectorSegment4);
				if (point.HasValue)
				{
					intersectionSegmentA = connectorSegment2;
					intersectionSegmentB = connectorSegment4;
					return point;
				}
			}
			Point? point2 = EscapeProcessI(coverSet, Z, connectorSegment2, Orientation.Horizontal, margin);
			if (point2.HasValue)
			{
				orientationA = Orientation.Vertical;
				LeA.Add(point2.Value);
				return null;
			}
			point2 = EscapeProcessI(coverSet, Z, connectorSegment, Orientation.Vertical, margin);
			if (point2.HasValue)
			{
				orientationA = Orientation.Horizontal;
				LeA.Add(point2.Value);
				return null;
			}
			bool intersectionFlag = false;
			Point point3 = Point.Empty;
			Point point4 = Point.Empty;
			Point point5 = Point.Empty;
			Point point6 = Point.Empty;
			if (cover4 != null)
			{
				point3 = new Point(Z.X, cover4.A.Y);
			}
			if (cover2 != null)
			{
				point4 = new Point(cover2.A.X, Z.Y);
			}
			if (cover3 != null)
			{
				point5 = new Point(Z.X, cover3.A.Y);
			}
			if (cover != null)
			{
				point6 = new Point(cover.A.X, Z.Y);
			}
			bool flag4;
			bool flag3;
			bool flag2;
			bool flag;
			do
			{
				flag4 = (flag3 = (flag2 = (flag = false)));
				if (cover4 != null)
				{
					point3.Y -= margin.Height;
					if (point3.Y > Z.Y)
					{
						flag4 = true;
						Point? result = EscapeProcessII(coverSet, Orientation.Vertical, ref LeA, ref LhA, ref LvA, ref LhB, ref LvB, Z, point3, margin, out intersectionFlag, out intersectionSegmentA, out intersectionSegmentB);
						if (result.HasValue)
						{
							LvA.Add(connectorSegment2);
							if (intersectionFlag)
							{
								return result;
							}
							orientationA = Orientation.Horizontal;
							coverSet.AddUsedEscapeLine(new ConnectorSegment(Z, point3));
							coverSet.AddUsedEscapeLine(new ConnectorSegment(point3, result.Value));
							LeA.Add(result.Value);
							return null;
						}
					}
				}
				if (cover2 != null)
				{
					point4.X -= margin.Width;
					if (point4.X > Z.X)
					{
						flag3 = true;
						Point? result2 = EscapeProcessII(coverSet, Orientation.Horizontal, ref LeA, ref LhA, ref LvA, ref LhB, ref LvB, Z, point4, margin, out intersectionFlag, out intersectionSegmentA, out intersectionSegmentB);
						if (result2.HasValue)
						{
							LhA.Add(connectorSegment);
							if (intersectionFlag)
							{
								return result2;
							}
							orientationA = Orientation.Vertical;
							coverSet.AddUsedEscapeLine(new ConnectorSegment(Z, point4));
							coverSet.AddUsedEscapeLine(new ConnectorSegment(point4, result2.Value));
							LeA.Add(result2.Value);
							return null;
						}
					}
				}
				if (cover3 != null)
				{
					point5.Y += margin.Height;
					if (point5.Y < Z.Y)
					{
						flag2 = true;
						Point? result3 = EscapeProcessII(coverSet, Orientation.Vertical, ref LeA, ref LhA, ref LvA, ref LhB, ref LvB, Z, point5, margin, out intersectionFlag, out intersectionSegmentA, out intersectionSegmentB);
						if (result3.HasValue)
						{
							LvA.Add(connectorSegment2);
							if (intersectionFlag)
							{
								return result3;
							}
							orientationA = Orientation.Horizontal;
							coverSet.AddUsedEscapeLine(new ConnectorSegment(Z, point5));
							coverSet.AddUsedEscapeLine(new ConnectorSegment(point5, result3.Value));
							LeA.Add(result3.Value);
							return null;
						}
					}
				}
				if (cover == null)
				{
					continue;
				}
				point6.X += margin.Width;
				if (point6.X >= Z.X)
				{
					continue;
				}
				flag = true;
				Point? result4 = EscapeProcessII(coverSet, Orientation.Horizontal, ref LeA, ref LhA, ref LvA, ref LhB, ref LvB, Z, point6, margin, out intersectionFlag, out intersectionSegmentA, out intersectionSegmentB);
				if (result4.HasValue)
				{
					LhA.Add(connectorSegment);
					if (intersectionFlag)
					{
						return result4;
					}
					orientationA = Orientation.Vertical;
					coverSet.AddUsedEscapeLine(new ConnectorSegment(Z, point6));
					coverSet.AddUsedEscapeLine(new ConnectorSegment(point6, result4.Value));
					LeA.Add(result4.Value);
					return null;
				}
			}
			while (flag4 || flag3 || flag2 || flag);
			noEscapeA = true;
			return null;
		}

		private static Point? EscapeProcessI(CoverSet coverSet, Point Z, ConnectorSegment escapeLine, Orientation orientation, Size margin)
		{
			List<DistanceFromPoint> extremitiesList = new List<DistanceFromPoint>(4);
			ConnectorSegment cover = coverSet.GetCover(Z, (orientation == Orientation.Horizontal) ? DesignerEdges.Left : DesignerEdges.Bottom);
			if (cover != null)
			{
				AddBoundPoint(ref extremitiesList, cover.A, cover, Z);
				AddBoundPoint(ref extremitiesList, cover.B, cover, Z);
			}
			ConnectorSegment cover2 = coverSet.GetCover(Z, (orientation == Orientation.Horizontal) ? DesignerEdges.Right : DesignerEdges.Top);
			if (cover2 != null)
			{
				AddBoundPoint(ref extremitiesList, cover2.A, cover2, Z);
				AddBoundPoint(ref extremitiesList, cover2.B, cover2, Z);
			}
			if (extremitiesList.Count == 0)
			{
				return null;
			}
			DistanceSorter.Sort(ref extremitiesList);
			for (int i = 0; i < extremitiesList.Count; i++)
			{
				Point p = extremitiesList[i].P;
				Point point = new Point(Math.Sign(p.X - Z.X), Math.Sign(p.Y - Z.Y));
				if (((orientation == Orientation.Vertical) ? point.X : point.Y) == 0)
				{
					ConnectorSegment connectorSegment = extremitiesList[i].ConnectorSegment;
					p = connectorSegment.ExtendPointOutwards(p);
					point = new Point(Math.Sign(p.X - Z.X), Math.Sign(p.Y - Z.Y));
					p = extremitiesList[i].P;
				}
				DesignerEdges side = ((orientation != Orientation.Vertical) ? ((point.X < 0) ? DesignerEdges.Left : DesignerEdges.Right) : ((point.Y < 0) ? DesignerEdges.Bottom : DesignerEdges.Top));
				Point point2 = ((orientation != Orientation.Vertical) ? new Point(Z.X, p.Y + point.Y * margin.Height) : new Point(p.X + point.X * margin.Width, Z.Y));
				ConnectorSegment segment = new ConnectorSegment(Z, point2);
				if (!coverSet.EscapeLineHasBeenUsed(segment, point2) && escapeLine.IsPointOnSegment(point2) && escapeLine.A != point2 && escapeLine.B != point2 && coverSet.IsEscapePoint(Z, point2, side))
				{
					coverSet.AddUsedEscapeLine(segment);
					return point2;
				}
			}
			return null;
		}

		private static void AddBoundPoint(ref List<DistanceFromPoint> extremitiesList, Point p, ConnectorSegment segment, Point Z)
		{
			if (p.X != int.MinValue && p.X != int.MaxValue && p.Y != int.MinValue && p.Y != int.MaxValue)
			{
				extremitiesList.Add(new DistanceFromPoint(segment, Z, p));
			}
		}

		private static Point? EscapeProcessII(CoverSet coverSet, Orientation orientation, ref List<Point> LeA, ref List<ConnectorSegment> LhA, ref List<ConnectorSegment> LvA, ref List<ConnectorSegment> LhB, ref List<ConnectorSegment> LvB, Point Z, Point R, Size margin, out bool intersectionFlag, out ConnectorSegment intersectionSegmentA, out ConnectorSegment intersectionSegmentB)
		{
			intersectionFlag = false;
			intersectionSegmentA = null;
			intersectionSegmentB = null;
			ConnectorSegment connectorSegment = ConnectorSegment.SegmentFromLeftToRightCover(coverSet, R);
			ConnectorSegment connectorSegment2 = ConnectorSegment.SegmentFromBottomToTopCover(coverSet, R);
			for (int i = 0; i < LvB.Count; i++)
			{
				ConnectorSegment connectorSegment3 = LvB[i];
				Point? result = connectorSegment.Intersect(connectorSegment3);
				if (result.HasValue)
				{
					intersectionFlag = true;
					intersectionSegmentA = connectorSegment;
					intersectionSegmentB = connectorSegment3;
					LeA.Add(R);
					return result;
				}
			}
			for (int j = 0; j < LhB.Count; j++)
			{
				ConnectorSegment connectorSegment4 = LhB[j];
				Point? result2 = connectorSegment2.Intersect(connectorSegment4);
				if (result2.HasValue)
				{
					intersectionFlag = true;
					intersectionSegmentA = connectorSegment2;
					intersectionSegmentB = connectorSegment4;
					LeA.Add(R);
					return result2;
				}
			}
			Point? point = null;
			if (orientation == Orientation.Horizontal)
			{
				point = EscapeProcessI(coverSet, R, connectorSegment2, Orientation.Horizontal, margin);
				if (point.HasValue)
				{
					LvA.Add(connectorSegment2);
					LeA.Add(R);
					return point;
				}
				point = EscapeProcessI(coverSet, R, connectorSegment, Orientation.Vertical, margin);
				if (point.HasValue)
				{
					LhA.Add(connectorSegment);
					LeA.Add(R);
					return point;
				}
			}
			else
			{
				point = EscapeProcessI(coverSet, R, connectorSegment, Orientation.Vertical, margin);
				if (point.HasValue)
				{
					LhA.Add(connectorSegment);
					LeA.Add(R);
					return point;
				}
				point = EscapeProcessI(coverSet, R, connectorSegment2, Orientation.Horizontal, margin);
				if (point.HasValue)
				{
					LvA.Add(connectorSegment2);
					LeA.Add(R);
					return point;
				}
			}
			return null;
		}

		private static List<Point> FirstRefinementAlgorithm(List<Point> Le, Point intersection, ConnectorSegment intersectionSegment)
		{
			List<Point> list = new List<Point>();
			ConnectorSegment connectorSegment = intersectionSegment;
			while (Le.Count > 0)
			{
				int num = Le.Count - 1;
				while (!connectorSegment.PointLiesOnThisLine(Le[num]) && num > 0)
				{
					num--;
				}
				while (num > 0 && connectorSegment.PointLiesOnThisLine(Le[num - 1]))
				{
					num--;
				}
				Point point = Le[num];
				list.Add(point);
				while (Le.Count > num)
				{
					Le.RemoveAt(num);
				}
				connectorSegment = connectorSegment.PeprendecularThroughPoint(point);
			}
			return list;
		}

		private static void SecondRefinementAlgorithm(CoverSet coverSet, ref List<Point> refinedPath, Size margin)
		{
			List<Point> list = new List<Point>();
			int i;
			for (i = 0; i < refinedPath.Count - 1; i++)
			{
				Point a = refinedPath[i];
				Point b = refinedPath[i + 1];
				ConnectorSegment connectorSegment = ConnectorSegment.ConstructBoundSegment(coverSet, a, b);
				int num = i + 2;
				while (num < refinedPath.Count - 1)
				{
					Point a2 = refinedPath[num];
					Point b2 = refinedPath[num + 1];
					ConnectorSegment segment = ConnectorSegment.ConstructBoundSegment(coverSet, a2, b2);
					Point? point = connectorSegment.Intersect(segment);
					if (point.HasValue)
					{
						list.Clear();
						for (int j = 0; j <= i; j++)
						{
							list.Add(refinedPath[j]);
						}
						list.Add(point.Value);
						for (int k = num + 1; k < refinedPath.Count; k++)
						{
							list.Add(refinedPath[k]);
						}
						List<Point> list2 = refinedPath;
						refinedPath = list;
						list = list2;
						list.Clear();
						num = i + 2;
					}
					else
					{
						num++;
					}
				}
			}
			i = 0;
			while (i < refinedPath.Count - 1)
			{
				Point a3 = refinedPath[i];
				Point point2 = refinedPath[i + 1];
				bool flag = false;
				ConnectorSegment connectorSegment2 = ConnectorSegment.ConstructBoundSegment(coverSet, a3, point2);
				if (connectorSegment2 != null)
				{
					Point point3 = new Point(point2.X - a3.X, point2.Y - a3.Y);
					int num2 = Math.Max(Math.Abs(point3.X / margin.Width), Math.Abs(point3.Y / margin.Height));
					point3.X = Math.Sign(point3.X);
					point3.Y = Math.Sign(point3.Y);
					for (int l = 1; l <= num2; l++)
					{
						Point point4 = new Point(a3.X + l * margin.Width * point3.X, a3.Y + l * margin.Height * point3.Y);
						if (point4 == point2)
						{
							break;
						}
						ConnectorSegment connectorSegment3 = ConnectorSegment.ConstructBoundSegment(coverSet, point4, (connectorSegment2.Orientation == Orientation.Horizontal) ? Orientation.Vertical : Orientation.Horizontal);
						for (int m = i + 2; m < refinedPath.Count - 1; m++)
						{
							if (flag)
							{
								break;
							}
							Point point5 = refinedPath[m];
							Point point6 = refinedPath[m + 1];
							ConnectorSegment connectorSegment4 = new ConnectorSegment(point5, point6);
							Point? point7 = connectorSegment3.Intersect(connectorSegment4);
							if (point7.HasValue && connectorSegment4.IsPointOnSegment(point7.Value))
							{
								flag = true;
								list.Clear();
								for (int n = 0; n <= i; n++)
								{
									list.Add(refinedPath[n]);
								}
								list.Add(point4);
								list.Add(point7.Value);
								for (int num3 = m + 1; num3 < refinedPath.Count; num3++)
								{
									list.Add(refinedPath[num3]);
								}
								List<Point> list3 = refinedPath;
								refinedPath = list;
								list = list3;
								list.Clear();
								break;
							}
						}
						if (flag)
						{
							break;
						}
					}
				}
				if (!flag)
				{
					i++;
				}
			}
		}
	}
	internal sealed class IdentifierCreationService : IIdentifierCreationService
	{
		private IServiceProvider serviceProvider;

		private WorkflowDesignerLoader loader;

		private CodeDomProvider provider;

		internal CodeDomProvider Provider
		{
			get
			{
				if (provider == null)
				{
					SupportedLanguages supportedLanguage = CompilerHelpers.GetSupportedLanguage(serviceProvider);
					if (supportedLanguage == SupportedLanguages.CSharp)
					{
						provider = CompilerHelpers.CreateCodeProviderInstance(typeof(CSharpCodeProvider));
					}
					else
					{
						provider = CompilerHelpers.CreateCodeProviderInstance(typeof(VBCodeProvider));
					}
				}
				return provider;
			}
		}

		internal IdentifierCreationService(IServiceProvider serviceProvider, WorkflowDesignerLoader loader)
		{
			this.serviceProvider = serviceProvider;
			this.loader = loader;
		}

		void IIdentifierCreationService.ValidateIdentifier(Activity activity, string identifier)
		{
			if (identifier == null)
			{
				throw new ArgumentNullException("identifier");
			}
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (activity.Name.ToLowerInvariant().Equals(identifier.ToLowerInvariant()))
			{
				return;
			}
			if (Provider != null)
			{
				SupportedLanguages supportedLanguage = CompilerHelpers.GetSupportedLanguage(serviceProvider);
				if ((supportedLanguage == SupportedLanguages.CSharp && identifier.StartsWith("@", StringComparison.Ordinal)) || (supportedLanguage == SupportedLanguages.VB && identifier.StartsWith("[", StringComparison.Ordinal) && identifier.EndsWith("]", StringComparison.Ordinal)) || !Provider.IsValidIdentifier(identifier))
				{
					throw new Exception(SR.GetString("Error_InvalidLanguageIdentifier", identifier));
				}
			}
			StringDictionary stringDictionary = new StringDictionary();
			if (Helpers.GetRootActivity(activity) is CompositeActivity compositeActivity)
			{
				foreach (string item in Helpers.GetIdentifiersInCompositeActivity(compositeActivity))
				{
					stringDictionary[item] = item;
				}
			}
			Type rootActivityType = GetRootActivityType(serviceProvider);
			if (rootActivityType != null)
			{
				MemberInfo[] members = rootActivityType.GetMembers(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
				foreach (MemberInfo memberInfo in members)
				{
					Type type = null;
					if (memberInfo is FieldInfo)
					{
						type = ((FieldInfo)memberInfo).FieldType;
					}
					if (type == null || !typeof(Activity).IsAssignableFrom(type))
					{
						stringDictionary[memberInfo.Name] = memberInfo.Name;
					}
				}
			}
			if (!stringDictionary.ContainsKey(identifier))
			{
				return;
			}
			throw new ArgumentException(SR.GetString("DuplicateActivityIdentifier", identifier));
		}

		void IIdentifierCreationService.EnsureUniqueIdentifiers(CompositeActivity parentActivity, ICollection childActivities)
		{
			if (parentActivity == null)
			{
				throw new ArgumentNullException("parentActivity");
			}
			if (childActivities == null)
			{
				throw new ArgumentNullException("childActivities");
			}
			ArrayList arrayList = new ArrayList();
			Queue queue = new Queue(childActivities);
			while (queue.Count > 0)
			{
				Activity activity = (Activity)queue.Dequeue();
				if (activity is CompositeActivity)
				{
					foreach (Activity activity3 in ((CompositeActivity)activity).Activities)
					{
						queue.Enqueue(activity3);
					}
				}
				if (((IComponent)activity).Site == null && !IsPreBuiltActivity(activity))
				{
					arrayList.Add(activity);
				}
			}
			CompositeActivity compositeActivity = Helpers.GetRootActivity(parentActivity) as CompositeActivity;
			StringDictionary stringDictionary = new StringDictionary();
			Type rootActivityType = GetRootActivityType(serviceProvider);
			if (compositeActivity != null)
			{
				foreach (string item in Helpers.GetIdentifiersInCompositeActivity(compositeActivity))
				{
					stringDictionary[item] = item;
				}
			}
			if (rootActivityType != null)
			{
				MemberInfo[] members = rootActivityType.GetMembers(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
				foreach (MemberInfo memberInfo in members)
				{
					Type type = null;
					if (memberInfo is FieldInfo)
					{
						type = ((FieldInfo)memberInfo).FieldType;
					}
					if (type == null || !typeof(Activity).IsAssignableFrom(type))
					{
						stringDictionary[memberInfo.Name] = memberInfo.Name;
					}
				}
			}
			foreach (Activity item2 in arrayList)
			{
				int num = 0;
				string baseIdentifier = Helpers.GetBaseIdentifier(item2);
				string text2 = null;
				text2 = ((!string.IsNullOrEmpty(item2.Name) && !string.Equals(item2.Name, item2.GetType().Name, StringComparison.Ordinal)) ? item2.Name : string.Format(CultureInfo.InvariantCulture, "{0}{1}", new object[2]
				{
					baseIdentifier,
					++num
				}));
				while (stringDictionary.ContainsKey(text2))
				{
					text2 = string.Format(CultureInfo.InvariantCulture, "{0}{1}", new object[2]
					{
						baseIdentifier,
						++num
					});
					if (Provider != null)
					{
						text2 = Provider.CreateValidIdentifier(text2);
					}
				}
				stringDictionary[text2] = text2;
				item2.Name = text2;
			}
		}

		private Type GetRootActivityType(IServiceProvider serviceProvider)
		{
			if (!(serviceProvider.GetService(typeof(IDesignerHost)) is IDesignerHost { RootComponentClassName: var rootComponentClassName }))
			{
				throw new Exception(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
			}
			if (string.IsNullOrEmpty(rootComponentClassName))
			{
				return null;
			}
			if (!(serviceProvider.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider))
			{
				throw new Exception(SR.GetString("General_MissingService", typeof(ITypeProvider).FullName));
			}
			return typeProvider.GetType(rootComponentClassName, throwOnError: false);
		}

		private static bool IsPreBuiltActivity(Activity activity)
		{
			for (CompositeActivity parent = activity.Parent; parent != null; parent = parent.Parent)
			{
				if (Helpers.IsCustomActivity(parent))
				{
					return true;
				}
			}
			return false;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public abstract class WorkflowDesignerMessageFilter : IDisposable, IWorkflowDesignerMessageSink
	{
		private WorkflowView parentView;

		protected WorkflowView ParentView => parentView;

		protected HitTestInfo MessageHitTestContext
		{
			get
			{
				HitTestInfo hitTestInfo = ParentView.MessageHitTestContext;
				if (hitTestInfo == null)
				{
					hitTestInfo = HitTestInfo.Nowhere;
				}
				return hitTestInfo;
			}
		}

		~WorkflowDesignerMessageFilter()
		{
			Dispose(disposing: false);
		}

		public void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Initialize(WorkflowView parentView)
		{
			this.parentView = parentView;
		}

		protected virtual void Dispose(bool disposing)
		{
		}

		protected virtual bool OnMouseDown(MouseEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnMouseMove(MouseEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnMouseUp(MouseEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnMouseDoubleClick(MouseEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnMouseEnter(MouseEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnMouseHover(MouseEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnMouseLeave()
		{
			return false;
		}

		protected virtual bool OnMouseWheel(MouseEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnMouseCaptureChanged()
		{
			return false;
		}

		protected virtual bool OnDragEnter(DragEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnDragOver(DragEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnDragLeave()
		{
			return false;
		}

		protected virtual bool OnDragDrop(DragEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnGiveFeedback(GiveFeedbackEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnQueryContinueDrag(QueryContinueDragEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnKeyDown(KeyEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnKeyUp(KeyEventArgs eventArgs)
		{
			return false;
		}

		protected virtual bool OnScroll(ScrollBar sender, int value)
		{
			return false;
		}

		protected virtual bool OnShowContextMenu(Point screenMenuPoint)
		{
			return false;
		}

		protected virtual bool OnPaint(PaintEventArgs eventArgs, Rectangle viewPort, AmbientTheme ambientTheme)
		{
			return false;
		}

		protected virtual bool OnPaintWorkflowAdornments(PaintEventArgs eventArgs, Rectangle viewPort, AmbientTheme ambientTheme)
		{
			return false;
		}

		protected virtual bool ProcessMessage(System.Windows.Forms.Message message)
		{
			return false;
		}

		protected virtual void OnLayout(LayoutEventArgs eventArgs)
		{
		}

		protected virtual void OnThemeChange()
		{
		}

		internal object GetService(Type serviceType)
		{
			object result = null;
			if (parentView != null)
			{
				result = ((IServiceProvider)parentView).GetService(serviceType);
			}
			return result;
		}

		internal void SetParentView(WorkflowView parentView)
		{
			Initialize(parentView);
		}

		bool IWorkflowDesignerMessageSink.OnMouseDown(MouseEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnMouseDown(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnMouseMove(MouseEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnMouseMove(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnMouseUp(MouseEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnMouseUp(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnMouseDoubleClick(MouseEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnMouseDoubleClick(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnMouseEnter(MouseEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnMouseEnter(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnMouseHover(MouseEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnMouseHover(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnMouseLeave()
		{
			bool result = false;
			try
			{
				result = OnMouseLeave();
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnMouseWheel(MouseEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnMouseWheel(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnMouseCaptureChanged()
		{
			bool result = false;
			try
			{
				result = OnMouseCaptureChanged();
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnMouseDragBegin(Point initialPoint, MouseEventArgs eventArgs)
		{
			return false;
		}

		bool IWorkflowDesignerMessageSink.OnMouseDragMove(MouseEventArgs eventArgs)
		{
			return false;
		}

		bool IWorkflowDesignerMessageSink.OnMouseDragEnd()
		{
			return false;
		}

		bool IWorkflowDesignerMessageSink.OnDragEnter(DragEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnDragEnter(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnDragOver(DragEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnDragOver(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnDragLeave()
		{
			bool result = false;
			try
			{
				result = OnDragLeave();
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnDragDrop(DragEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnDragDrop(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnGiveFeedback(GiveFeedbackEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnGiveFeedback(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnQueryContinueDrag(QueryContinueDragEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnQueryContinueDrag(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnKeyDown(KeyEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnKeyDown(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnKeyUp(KeyEventArgs eventArgs)
		{
			bool result = false;
			try
			{
				result = OnKeyUp(eventArgs);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnScroll(ScrollBar sender, int value)
		{
			bool result = false;
			try
			{
				result = OnScroll(sender, value);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnShowContextMenu(Point screenMenuPoint)
		{
			bool result = false;
			try
			{
				result = OnShowContextMenu(screenMenuPoint);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnPaint(PaintEventArgs eventArgs, Rectangle viewPort)
		{
			bool result = false;
			try
			{
				result = OnPaint(eventArgs, viewPort, WorkflowTheme.CurrentTheme.AmbientTheme);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.OnPaintWorkflowAdornments(PaintEventArgs eventArgs, Rectangle viewPort)
		{
			bool result = false;
			try
			{
				result = OnPaintWorkflowAdornments(eventArgs, viewPort, WorkflowTheme.CurrentTheme.AmbientTheme);
			}
			catch
			{
			}
			return result;
		}

		bool IWorkflowDesignerMessageSink.ProcessMessage(System.Windows.Forms.Message message)
		{
			bool result = false;
			try
			{
				result = ProcessMessage(message);
			}
			catch
			{
			}
			return result;
		}

		void IWorkflowDesignerMessageSink.OnLayout(LayoutEventArgs layoutEventArgs)
		{
			try
			{
				OnLayout(layoutEventArgs);
			}
			catch
			{
			}
		}

		void IWorkflowDesignerMessageSink.OnLayoutPosition(Graphics graphics)
		{
		}

		void IWorkflowDesignerMessageSink.OnLayoutSize(Graphics graphics)
		{
		}

		void IWorkflowDesignerMessageSink.OnThemeChange()
		{
			try
			{
				OnThemeChange();
			}
			catch
			{
			}
		}

		void IWorkflowDesignerMessageSink.OnBeginResizing(DesignerEdges sizingEdge)
		{
		}

		void IWorkflowDesignerMessageSink.OnResizing(DesignerEdges sizingEdge, Rectangle bounds)
		{
		}

		void IWorkflowDesignerMessageSink.OnEndResizing()
		{
		}
	}
	internal sealed class WindowManager : WorkflowDesignerMessageFilter
	{
		private ActivityDesigner currentActiveDesigner;

		internal WindowManager()
		{
		}

		protected override bool OnMouseDown(MouseEventArgs eventArgs)
		{
			Point clientPoint = new Point(eventArgs.X, eventArgs.Y);
			WorkflowView workflowView = base.ParentView;
			if (!workflowView.IsClientPointInActiveLayout(clientPoint))
			{
				return true;
			}
			object obj = null;
			HitTestInfo messageHitTestContext = base.MessageHitTestContext;
			obj = ((messageHitTestContext != HitTestInfo.Nowhere) ? messageHitTestContext.SelectableObject : workflowView.RootDesigner.Activity);
			if (obj != null && GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				selectionService.SetSelectedComponents(new object[1] { obj }, SelectionTypes.Click);
			}
			if (currentActiveDesigner != messageHitTestContext.AssociatedDesigner)
			{
				if (currentActiveDesigner != null)
				{
					((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseLeave();
				}
				currentActiveDesigner = messageHitTestContext.AssociatedDesigner;
				if (currentActiveDesigner != null)
				{
					((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseEnter(eventArgs);
				}
			}
			if (currentActiveDesigner != null && (Control.ModifierKeys & (Keys.Shift | Keys.Control)) == 0)
			{
				((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseDown(eventArgs);
			}
			return false;
		}

		protected override bool OnMouseMove(MouseEventArgs eventArgs)
		{
			Point clientPoint = new Point(eventArgs.X, eventArgs.Y);
			if (!base.ParentView.IsClientPointInActiveLayout(clientPoint))
			{
				if (currentActiveDesigner != null)
				{
					((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseLeave();
				}
				currentActiveDesigner = null;
				return true;
			}
			HitTestInfo messageHitTestContext = base.MessageHitTestContext;
			if (currentActiveDesigner != messageHitTestContext.AssociatedDesigner)
			{
				if (currentActiveDesigner != null)
				{
					((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseLeave();
				}
				currentActiveDesigner = messageHitTestContext.AssociatedDesigner;
				if (currentActiveDesigner != null)
				{
					((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseEnter(eventArgs);
				}
			}
			else if (currentActiveDesigner != null)
			{
				((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseMove(eventArgs);
			}
			return false;
		}

		protected override bool OnMouseUp(MouseEventArgs eventArgs)
		{
			Point clientPoint = new Point(eventArgs.X, eventArgs.Y);
			if (!base.ParentView.IsClientPointInActiveLayout(clientPoint))
			{
				if (currentActiveDesigner != null)
				{
					((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseLeave();
				}
				currentActiveDesigner = null;
				return true;
			}
			HitTestInfo messageHitTestContext = base.MessageHitTestContext;
			if (currentActiveDesigner != messageHitTestContext.AssociatedDesigner)
			{
				if (currentActiveDesigner != null)
				{
					((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseLeave();
				}
				currentActiveDesigner = messageHitTestContext.AssociatedDesigner;
				if (currentActiveDesigner != null)
				{
					((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseEnter(eventArgs);
				}
			}
			if (currentActiveDesigner != null)
			{
				((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseUp(eventArgs);
			}
			return false;
		}

		protected override bool OnMouseDoubleClick(MouseEventArgs eventArgs)
		{
			if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				ArrayList arrayList = new ArrayList(selectionService.GetSelectedComponents());
				for (int i = 0; i < arrayList.Count; i++)
				{
					if (arrayList[i] is Activity activity)
					{
						IDesigner designer = ActivityDesigner.GetDesigner(activity);
						if (designer != null)
						{
							designer.DoDefaultAction();
							((IWorkflowDesignerMessageSink)designer).OnMouseDoubleClick(eventArgs);
							break;
						}
					}
				}
			}
			return false;
		}

		protected override bool OnMouseEnter(MouseEventArgs eventArgs)
		{
			if (currentActiveDesigner != null)
			{
				((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseEnter(eventArgs);
			}
			return false;
		}

		protected override bool OnMouseHover(MouseEventArgs eventArgs)
		{
			if (currentActiveDesigner != null)
			{
				((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseHover(eventArgs);
			}
			return false;
		}

		protected override bool OnMouseLeave()
		{
			if (currentActiveDesigner != null)
			{
				((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseLeave();
				currentActiveDesigner = null;
			}
			return false;
		}

		protected override bool OnMouseWheel(MouseEventArgs eventArgs)
		{
			UpdateViewOnMouseWheel(eventArgs, Control.ModifierKeys);
			return true;
		}

		protected override bool OnMouseCaptureChanged()
		{
			if (currentActiveDesigner != null)
			{
				((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseCaptureChanged();
			}
			return false;
		}

		protected override bool OnDragEnter(DragEventArgs eventArgs)
		{
			if (currentActiveDesigner != null)
			{
				((IWorkflowDesignerMessageSink)currentActiveDesigner).OnMouseLeave();
				currentActiveDesigner = null;
			}
			return false;
		}

		protected override bool OnKeyDown(KeyEventArgs eventArgs)
		{
			if (eventArgs != null && (eventArgs.KeyCode == Keys.Prior || eventArgs.KeyCode == Keys.Next))
			{
				UpdateViewOnPageUpDown(eventArgs.KeyCode == Keys.Prior);
			}
			ISelectionService selectionService = ((IServiceProvider)base.ParentView).GetService(typeof(ISelectionService)) as ISelectionService;
			if (eventArgs.KeyCode == Keys.Return)
			{
				IDesigner designer = ActivityDesigner.GetDesigner(selectionService.PrimarySelection as Activity);
				if (designer != null)
				{
					designer.DoDefaultAction();
					eventArgs.Handled = true;
				}
			}
			else if (eventArgs.KeyCode == Keys.Escape)
			{
				if (!eventArgs.Handled)
				{
					CompositeActivityDesigner parentDesigner = ActivityDesigner.GetParentDesigner(selectionService.PrimarySelection);
					if (parentDesigner != null)
					{
						selectionService.SetSelectedComponents(new object[1] { parentDesigner.Activity }, SelectionTypes.Replace);
					}
					eventArgs.Handled = true;
				}
			}
			else if (eventArgs.KeyCode == Keys.Delete)
			{
				if (((IServiceProvider)base.ParentView).GetService(typeof(IDesignerHost)) is IDesignerHost designerHost && !selectionService.GetComponentSelected(designerHost.RootComponent))
				{
					ICollection selectedComponents = selectionService.GetSelectedComponents();
					if (DesignerHelpers.AreComponentsRemovable(selectedComponents))
					{
						List<Activity> list = new List<Activity>(Helpers.GetTopLevelActivities(selectionService.GetSelectedComponents()));
						bool flag = list.Count > 0;
						IDictionary dictionary = Helpers.PairUpCommonParentActivities(list);
						foreach (DictionaryEntry item2 in dictionary)
						{
							if (ActivityDesigner.GetDesigner(item2.Key as Activity) is CompositeActivityDesigner compositeActivityDesigner && !compositeActivityDesigner.CanRemoveActivities(new List<Activity>((Activity[])((ArrayList)item2.Value).ToArray(typeof(Activity))).AsReadOnly()))
							{
								flag = false;
							}
						}
						if (flag)
						{
							List<ConnectorHitTestInfo> list2 = new List<ConnectorHitTestInfo>();
							foreach (object item3 in selectedComponents)
							{
								if (item3 is ConnectorHitTestInfo item)
								{
									list2.Add(item);
								}
							}
							CompositeActivityDesigner.RemoveActivities(base.ParentView, list.AsReadOnly(), SR.GetString("DeletingActivities"));
							if (selectionService != null && list2.Count > 0)
							{
								selectionService.SetSelectedComponents(list2, SelectionTypes.Add);
							}
							eventArgs.Handled = true;
						}
					}
				}
			}
			else if (eventArgs.KeyCode == Keys.Left || eventArgs.KeyCode == Keys.Right || eventArgs.KeyCode == Keys.Up || eventArgs.KeyCode == Keys.Down || eventArgs.KeyCode == Keys.Tab)
			{
				ActivityDesigner designer2 = ActivityDesigner.GetDesigner(selectionService.PrimarySelection as Activity);
				if (designer2 != null && designer2.ParentDesigner != null)
				{
					((IWorkflowDesignerMessageSink)designer2.ParentDesigner).OnKeyDown(eventArgs);
					eventArgs.Handled = true;
				}
			}
			if (!eventArgs.Handled)
			{
				((IWorkflowDesignerMessageSink)GetDesignerWithFocus())?.OnKeyDown(eventArgs);
			}
			return eventArgs.Handled;
		}

		protected override bool OnKeyUp(KeyEventArgs eventArgs)
		{
			((IWorkflowDesignerMessageSink)GetDesignerWithFocus())?.OnKeyUp(eventArgs);
			return false;
		}

		protected override bool OnScroll(ScrollBar sender, int value)
		{
			((IWorkflowDesignerMessageSink)GetDesignerWithFocus())?.OnScroll(sender, value);
			return false;
		}

		protected override bool OnShowContextMenu(Point screenMenuPoint)
		{
			if (GetService(typeof(IMenuCommandService)) is IMenuCommandService menuCommandService)
			{
				menuCommandService.ShowContextMenu(WorkflowMenuCommands.SelectionMenu, screenMenuPoint.X, screenMenuPoint.Y);
			}
			return true;
		}

		protected override void OnLayout(LayoutEventArgs eventArgs)
		{
			WorkflowView workflowView = base.ParentView;
			using Graphics graphics = workflowView.CreateGraphics();
			if (workflowView.RootDesigner != null)
			{
				try
				{
					((IWorkflowDesignerMessageSink)workflowView.RootDesigner).OnLayoutSize(graphics);
				}
				catch (Exception)
				{
				}
				try
				{
					((IWorkflowDesignerMessageSink)workflowView.RootDesigner).OnLayoutPosition(graphics);
					return;
				}
				catch (Exception)
				{
					return;
				}
			}
		}

		protected override bool ProcessMessage(System.Windows.Forms.Message message)
		{
			((IWorkflowDesignerMessageSink)GetDesignerWithFocus())?.ProcessMessage(message);
			return false;
		}

		protected override void OnThemeChange()
		{
			WorkflowView workflowView = base.ParentView;
			if (workflowView.RootDesigner != null)
			{
				((IWorkflowDesignerMessageSink)workflowView.RootDesigner).OnThemeChange();
			}
		}

		private ActivityDesigner GetDesignerWithFocus()
		{
			ActivityDesigner result = null;
			if (GetService(typeof(ISelectionService)) is ISelectionService { PrimarySelection: var primarySelection })
			{
				result = ((!(primarySelection is Activity)) ? ActivityDesigner.GetParentDesigner(primarySelection) : ActivityDesigner.GetDesigner(primarySelection as Activity));
			}
			return result;
		}

		private void UpdateViewOnPageUpDown(bool pageUp)
		{
			WorkflowView workflowView = base.ParentView;
			Point scrollPosition = workflowView.ScrollPosition;
			scrollPosition.Y += ((!pageUp) ? 1 : (-1)) * workflowView.VScrollBar.LargeChange;
			workflowView.ScrollPosition = scrollPosition;
		}

		private void UpdateViewOnMouseWheel(MouseEventArgs eventArgs, Keys modifierKeys)
		{
			WorkflowView workflowView = base.ParentView;
			if (Control.ModifierKeys == Keys.Control)
			{
				int val = workflowView.Zoom + eventArgs.Delta / 120 * 10;
				val = Math.Max(val, 10);
				val = Math.Min(val, 400);
				workflowView.Zoom = val;
			}
			else
			{
				int num = -eventArgs.Delta / 120;
				int smallChange = workflowView.VScrollBar.SmallChange;
				Point scrollPosition = workflowView.ScrollPosition;
				scrollPosition.Y += num * smallChange;
				workflowView.ScrollPosition = scrollPosition;
			}
		}
	}
	internal class DragDropManager : WorkflowDesignerMessageFilter
	{
		private const string CF_DESIGNERSTATE = "CF_WINOEDESIGNERCOMPONENTSSTATE";

		private List<Activity> draggedActivities = new List<Activity>();

		private List<Activity> existingDraggedActivities = new List<Activity>();

		private Image dragImage;

		private Point dragImagePointInClientCoOrd = Point.Empty;

		private bool dragImageSnapped;

		private ActivityDesigner dropTargetDesigner;

		private bool wasCtrlKeyPressed;

		private ActivityDesigner draggedDesigner;

		private Point dragInitiationPoint = Point.Empty;

		private bool dragStarted;

		private bool exceptionInDragDrop;

		public ActivityDesigner DropTargetDesigner => dropTargetDesigner;

		public ActivityDesigner DraggedDesigner => draggedDesigner;

		public IList<Activity> DraggedActivities => draggedActivities.AsReadOnly();

		public Point DragInitiationPoint => dragInitiationPoint;

		private float ScaleZoomFactor
		{
			get
			{
				WorkflowView workflowView = base.ParentView;
				return (float)workflowView.Zoom / 100f * workflowView.ActiveLayout.Scaling;
			}
		}

		internal DragDropManager()
		{
		}

		protected override void Initialize(WorkflowView parentView)
		{
			base.Initialize(parentView);
			if (GetService(typeof(IServiceContainer)) is IServiceContainer serviceContainer)
			{
				serviceContainer.RemoveService(typeof(DragDropManager));
				serviceContainer.AddService(typeof(DragDropManager), this);
			}
		}

		protected override void Dispose(bool disposing)
		{
			try
			{
				if (disposing && GetService(typeof(IServiceContainer)) is IServiceContainer serviceContainer)
				{
					serviceContainer.RemoveService(typeof(DragDropManager));
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		protected override bool OnMouseDown(MouseEventArgs eventArgs)
		{
			WorkflowView workflowView = base.ParentView;
			Point clientPoint = new Point(eventArgs.X, eventArgs.Y);
			if (!workflowView.IsClientPointInActiveLayout(clientPoint))
			{
				return false;
			}
			if (eventArgs.Button == MouseButtons.Left)
			{
				dragInitiationPoint = workflowView.ClientPointToLogical(clientPoint);
				dragStarted = true;
			}
			return false;
		}

		protected override bool OnMouseMove(MouseEventArgs eventArgs)
		{
			WorkflowView workflowView = base.ParentView;
			Point clientPoint = new Point(eventArgs.X, eventArgs.Y);
			if (!workflowView.IsClientPointInActiveLayout(clientPoint))
			{
				return false;
			}
			if (eventArgs.Button == MouseButtons.Left)
			{
				Point point = workflowView.ClientPointToLogical(clientPoint);
				HitTestInfo messageHitTestContext = base.MessageHitTestContext;
				if (draggedDesigner != null)
				{
					((IWorkflowDesignerMessageSink)draggedDesigner).OnMouseDragMove(eventArgs);
				}
				else if (workflowView.RootDesigner != null && dragStarted && (eventArgs.Button & MouseButtons.Left) > MouseButtons.None && (Math.Abs(dragInitiationPoint.X - point.X) > SystemInformation.DragSize.Width || Math.Abs(dragInitiationPoint.Y - point.Y) > SystemInformation.DragSize.Height))
				{
					ActivityDesigner associatedDesigner = messageHitTestContext.AssociatedDesigner;
					if (associatedDesigner != null)
					{
						if (CanInitiateDragDrop())
						{
							InitiateDragDrop();
							dragStarted = false;
						}
						else
						{
							draggedDesigner = associatedDesigner;
							((IWorkflowDesignerMessageSink)draggedDesigner).OnMouseDragBegin(dragInitiationPoint, eventArgs);
							workflowView.Capture = true;
						}
					}
				}
			}
			else
			{
				if (draggedDesigner != null)
				{
					((IWorkflowDesignerMessageSink)draggedDesigner).OnMouseDragEnd();
				}
				draggedDesigner = null;
			}
			return draggedDesigner != null;
		}

		protected override bool OnMouseUp(MouseEventArgs eventArgs)
		{
			if (draggedDesigner != null)
			{
				((IWorkflowDesignerMessageSink)draggedDesigner).OnMouseDragEnd();
				draggedDesigner = null;
				dragStarted = false;
				base.ParentView.Capture = false;
				return true;
			}
			return false;
		}

		protected override bool OnMouseEnter(MouseEventArgs eventArgs)
		{
			return draggedDesigner != null;
		}

		protected override bool OnMouseHover(MouseEventArgs eventArgs)
		{
			return draggedDesigner != null;
		}

		protected override bool OnMouseLeave()
		{
			return draggedDesigner != null;
		}

		protected override bool OnMouseCaptureChanged()
		{
			if (!base.ParentView.Capture)
			{
				if (draggedDesigner != null)
				{
					((IWorkflowDesignerMessageSink)draggedDesigner).OnMouseDragEnd();
				}
				draggedDesigner = null;
				dragStarted = false;
			}
			return false;
		}

		protected override bool OnKeyDown(KeyEventArgs eventArgs)
		{
			if (draggedDesigner != null)
			{
				if (eventArgs.KeyValue == 27)
				{
					((IWorkflowDesignerMessageSink)draggedDesigner).OnMouseDragEnd();
					draggedDesigner = null;
					dragStarted = false;
					base.ParentView.Capture = false;
				}
				else
				{
					((IWorkflowDesignerMessageSink)draggedDesigner).OnKeyDown(eventArgs);
					eventArgs.Handled = true;
				}
				return true;
			}
			return false;
		}

		protected override bool OnKeyUp(KeyEventArgs eventArgs)
		{
			if (draggedDesigner != null)
			{
				((IWorkflowDesignerMessageSink)draggedDesigner).OnKeyUp(eventArgs);
				eventArgs.Handled = true;
				return true;
			}
			return false;
		}

		protected override bool OnDragEnter(DragEventArgs eventArgs)
		{
			WorkflowView workflowView = base.ParentView;
			workflowView.InvalidateClientRectangle(Rectangle.Empty);
			eventArgs.Effect = DragDropEffects.None;
			wasCtrlKeyPressed = false;
			if (existingDraggedActivities.Count > 0)
			{
				draggedActivities.AddRange(existingDraggedActivities);
			}
			else
			{
				try
				{
					Activity[] array = CompositeActivityDesigner.DeserializeActivitiesFromDataObject(base.ParentView, eventArgs.Data);
					if (array != null)
					{
						draggedActivities.AddRange(array);
					}
				}
				catch
				{
					exceptionInDragDrop = true;
				}
			}
			Point clientPoint = workflowView.PointToClient(new Point(eventArgs.X, eventArgs.Y));
			Point point = workflowView.ScreenPointToLogical(new Point(eventArgs.X, eventArgs.Y));
			CreateDragFeedbackImages(draggedActivities);
			if (dragImage != null)
			{
				dragImagePointInClientCoOrd = new Point(clientPoint.X + SystemInformation.CursorSize.Width / 4, clientPoint.Y + SystemInformation.CursorSize.Height / 4);
			}
			if (!workflowView.IsClientPointInActiveLayout(clientPoint))
			{
				return false;
			}
			wasCtrlKeyPressed = (eventArgs.KeyState & 8) == 8;
			ActivityDragEventArgs activityDragEventArgs = new ActivityDragEventArgs(eventArgs, dragInitiationPoint, point, draggedActivities);
			HitTestInfo messageHitTestContext = base.MessageHitTestContext;
			ActivityDesigner associatedDesigner = messageHitTestContext.AssociatedDesigner;
			if (associatedDesigner == null)
			{
				return false;
			}
			if (!wasCtrlKeyPressed && IsRecursiveDropOperation(associatedDesigner))
			{
				return false;
			}
			if (associatedDesigner is CompositeActivityDesigner { IsEditable: false })
			{
				return false;
			}
			dropTargetDesigner = associatedDesigner;
			((IWorkflowDesignerMessageSink)dropTargetDesigner).OnDragEnter((DragEventArgs)activityDragEventArgs);
			if (!activityDragEventArgs.DragImageSnapPoint.IsEmpty)
			{
				Point point2 = workflowView.LogicalPointToClient(activityDragEventArgs.DragImageSnapPoint);
				Size size = workflowView.LogicalSizeToClient(AmbientTheme.DragImageIconSize);
				dragImagePointInClientCoOrd = new Point(point2.X - size.Width / 2, point2.Y - size.Height / 2);
				dragImageSnapped = true;
			}
			eventArgs.Effect = activityDragEventArgs.Effect;
			if (eventArgs.Effect == DragDropEffects.None && exceptionInDragDrop)
			{
				eventArgs.Effect = (wasCtrlKeyPressed ? DragDropEffects.Copy : DragDropEffects.Move);
			}
			return true;
		}

		protected override bool OnDragOver(DragEventArgs eventArgs)
		{
			eventArgs.Effect = DragDropEffects.None;
			wasCtrlKeyPressed = false;
			dragImageSnapped = false;
			WorkflowView workflowView = base.ParentView;
			Point clientPoint = workflowView.PointToClient(new Point(eventArgs.X, eventArgs.Y));
			Point point = workflowView.ScreenPointToLogical(new Point(eventArgs.X, eventArgs.Y));
			Point location = dragImagePointInClientCoOrd;
			dragImagePointInClientCoOrd = new Point(clientPoint.X + SystemInformation.CursorSize.Width / 4, clientPoint.Y + SystemInformation.CursorSize.Height / 4);
			if (!workflowView.IsClientPointInActiveLayout(clientPoint))
			{
				if (dropTargetDesigner != null)
				{
					((IWorkflowDesignerMessageSink)dropTargetDesigner).OnDragLeave();
				}
				dropTargetDesigner = null;
			}
			else
			{
				wasCtrlKeyPressed = (eventArgs.KeyState & 8) == 8;
				ActivityDragEventArgs activityDragEventArgs = new ActivityDragEventArgs(eventArgs, dragInitiationPoint, point, draggedActivities);
				HitTestInfo messageHitTestContext = base.MessageHitTestContext;
				ActivityDesigner activityDesigner = messageHitTestContext.AssociatedDesigner;
				if (activityDesigner != null)
				{
					CompositeActivityDesigner compositeActivityDesigner = activityDesigner as CompositeActivityDesigner;
					if ((!wasCtrlKeyPressed && IsRecursiveDropOperation(activityDesigner)) || (compositeActivityDesigner != null && !compositeActivityDesigner.IsEditable))
					{
						activityDragEventArgs.Effect = DragDropEffects.None;
						activityDesigner = null;
					}
				}
				if (dropTargetDesigner != activityDesigner)
				{
					if (dropTargetDesigner != null)
					{
						((IWorkflowDesignerMessageSink)dropTargetDesigner).OnDragLeave();
					}
					dropTargetDesigner = activityDesigner;
					if (dropTargetDesigner != null)
					{
						((IWorkflowDesignerMessageSink)dropTargetDesigner).OnDragEnter((DragEventArgs)activityDragEventArgs);
					}
				}
				else
				{
					if (dropTargetDesigner != null)
					{
						((IWorkflowDesignerMessageSink)dropTargetDesigner).OnDragOver((DragEventArgs)activityDragEventArgs);
					}
					if (activityDragEventArgs.Effect != 0 && !activityDragEventArgs.DragImageSnapPoint.IsEmpty)
					{
						Point point2 = workflowView.LogicalPointToClient(activityDragEventArgs.DragImageSnapPoint);
						Size size = workflowView.LogicalSizeToClient(AmbientTheme.DragImageIconSize);
						dragImagePointInClientCoOrd = new Point(point2.X - size.Width / 2, point2.Y - size.Height / 2);
						dragImageSnapped = true;
					}
				}
				eventArgs.Effect = activityDragEventArgs.Effect;
			}
			if (dragImage != null)
			{
				workflowView.InvalidateClientRectangle(new Rectangle(location, dragImage.Size));
				workflowView.InvalidateClientRectangle(new Rectangle(dragImagePointInClientCoOrd, dragImage.Size));
			}
			if (eventArgs.Effect == DragDropEffects.None && exceptionInDragDrop)
			{
				eventArgs.Effect = (wasCtrlKeyPressed ? DragDropEffects.Copy : DragDropEffects.Move);
			}
			return true;
		}

		protected override bool OnDragDrop(DragEventArgs eventArgs)
		{
			WorkflowView workflowView = base.ParentView;
			workflowView.InvalidateClientRectangle(Rectangle.Empty);
			eventArgs.Effect = DragDropEffects.None;
			DestroyDragFeedbackImages();
			Point clientPoint = workflowView.PointToClient(new Point(eventArgs.X, eventArgs.Y));
			Point point = workflowView.ScreenPointToLogical(new Point(eventArgs.X, eventArgs.Y));
			if (!workflowView.IsClientPointInActiveLayout(clientPoint))
			{
				if (dropTargetDesigner != null)
				{
					((IWorkflowDesignerMessageSink)dropTargetDesigner).OnDragLeave();
				}
				wasCtrlKeyPressed = false;
				dropTargetDesigner = null;
				draggedActivities.Clear();
				return false;
			}
			wasCtrlKeyPressed = (eventArgs.KeyState & 8) == 8;
			ActivityDragEventArgs activityDragEventArgs = new ActivityDragEventArgs(eventArgs, dragInitiationPoint, point, draggedActivities);
			HitTestInfo messageHitTestContext = base.MessageHitTestContext;
			if (dropTargetDesigner != messageHitTestContext.AssociatedDesigner)
			{
				if (dropTargetDesigner != null)
				{
					((IWorkflowDesignerMessageSink)dropTargetDesigner).OnDragLeave();
					dropTargetDesigner = null;
				}
				if (messageHitTestContext.AssociatedDesigner != null)
				{
					dropTargetDesigner = messageHitTestContext.AssociatedDesigner;
					if (dropTargetDesigner != null)
					{
						((IWorkflowDesignerMessageSink)dropTargetDesigner).OnDragEnter((DragEventArgs)activityDragEventArgs);
					}
				}
			}
			try
			{
				if (dropTargetDesigner != null)
				{
					if ((!wasCtrlKeyPressed && IsRecursiveDropOperation(dropTargetDesigner)) || (dropTargetDesigner is CompositeActivityDesigner && !((CompositeActivityDesigner)dropTargetDesigner).IsEditable))
					{
						((IWorkflowDesignerMessageSink)dropTargetDesigner).OnDragLeave();
						activityDragEventArgs.Effect = DragDropEffects.None;
					}
					else
					{
						List<Activity> list = new List<Activity>();
						string @string = SR.GetString("DragDropActivities");
						if (!wasCtrlKeyPressed && existingDraggedActivities.Count > 0)
						{
							list.AddRange(existingDraggedActivities);
							if (list.Count > 1)
							{
								@string = SR.GetString("MoveMultipleActivities", list.Count);
							}
							else if (list.Count == 1)
							{
								@string = SR.GetString("MoveSingleActivity", list[0].GetType());
							}
						}
						else
						{
							list.AddRange(CompositeActivityDesigner.DeserializeActivitiesFromDataObject(base.ParentView, eventArgs.Data, addAssemblyReference: true));
							if (list.Count > 0)
							{
								@string = SR.GetString("CreateActivityFromToolbox", list[0].GetType());
							}
						}
						IDesignerHost designerHost = GetService(typeof(IDesignerHost)) as IDesignerHost;
						DesignerTransaction designerTransaction = null;
						if (list.Count > 0)
						{
							designerTransaction = designerHost.CreateTransaction(@string);
						}
						activityDragEventArgs = new ActivityDragEventArgs(eventArgs, dragInitiationPoint, point, list);
						try
						{
							((IWorkflowDesignerMessageSink)dropTargetDesigner).OnDragDrop((DragEventArgs)activityDragEventArgs);
							if (activityDragEventArgs.Effect == DragDropEffects.Move)
							{
								existingDraggedActivities.Clear();
							}
							designerTransaction?.Commit();
						}
						catch (Exception ex)
						{
							designerTransaction?.Cancel();
							throw ex;
						}
						if (list.Count > 0)
						{
							if (eventArgs.Data.GetData("CF_WINOEDESIGNERCOMPONENTSSTATE") is Stream stateStream)
							{
								Helpers.DeserializeDesignersFromStream(list, stateStream);
							}
							((ISelectionService)GetService(typeof(ISelectionService)))?.SetSelectedComponents(list, SelectionTypes.Replace);
						}
						designerHost?.Activate();
					}
				}
			}
			catch (Exception ex2)
			{
				((IWorkflowDesignerMessageSink)dropTargetDesigner).OnDragLeave();
				activityDragEventArgs.Effect = DragDropEffects.None;
				string message = ex2.Message;
				if (ex2.InnerException != null && !string.IsNullOrEmpty(ex2.InnerException.Message))
				{
					message = ex2.InnerException.Message;
				}
				string string2 = DR.GetString("Error_FailedToDeserializeComponents");
				string2 = string2 + "\r\n" + DR.GetString("Error_Reason", message);
				DesignerHelpers.ShowError(base.ParentView, string2);
				if (ex2 != CheckoutException.Canceled)
				{
					throw new Exception(string2, ex2);
				}
			}
			finally
			{
				wasCtrlKeyPressed = false;
				draggedActivities.Clear();
				dropTargetDesigner = null;
				exceptionInDragDrop = false;
				eventArgs.Effect = activityDragEventArgs.Effect;
			}
			return true;
		}

		protected override bool OnDragLeave()
		{
			WorkflowView workflowView = base.ParentView;
			workflowView.InvalidateClientRectangle(Rectangle.Empty);
			DestroyDragFeedbackImages();
			wasCtrlKeyPressed = false;
			if (dropTargetDesigner != null)
			{
				((IWorkflowDesignerMessageSink)dropTargetDesigner).OnDragLeave();
			}
			dropTargetDesigner = null;
			draggedActivities.Clear();
			exceptionInDragDrop = false;
			return true;
		}

		protected override bool OnGiveFeedback(GiveFeedbackEventArgs gfbevent)
		{
			if (dropTargetDesigner != null)
			{
				((IWorkflowDesignerMessageSink)dropTargetDesigner).OnGiveFeedback(gfbevent);
			}
			return true;
		}

		protected override bool OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent)
		{
			if (dropTargetDesigner != null)
			{
				((IWorkflowDesignerMessageSink)dropTargetDesigner).OnQueryContinueDrag(qcdevent);
			}
			return true;
		}

		protected override bool OnPaintWorkflowAdornments(PaintEventArgs e, Rectangle viewPort, AmbientTheme ambientTheme)
		{
			if (dragImage != null)
			{
				ActivityDesignerPaint.DrawImage(e.Graphics, dragImage, new Rectangle(dragImagePointInClientCoOrd, dragImage.Size), new Rectangle(0, 0, dragImage.Width, dragImage.Height), DesignerContentAlignment.Center, dragImageSnapped ? 1f : 0.5f, WorkflowTheme.CurrentTheme.AmbientTheme.DrawGrayscale);
			}
			return false;
		}

		protected virtual void CreateDragFeedbackImages(IList<Activity> draggedActivities)
		{
			Bitmap bitmap = null;
			if (draggedActivities.Count > 0)
			{
				Bitmap bitmap2 = null;
				string empty = string.Empty;
				if (draggedActivities.Count > 1)
				{
					bitmap2 = DR.GetImage("Activities") as Bitmap;
					empty = DR.GetString("ActivitiesDesc");
				}
				else
				{
					ToolboxBitmapAttribute toolboxBitmapAttribute = (ToolboxBitmapAttribute)TypeDescriptor.GetAttributes(draggedActivities[0].GetType())[typeof(ToolboxBitmapAttribute)];
					bitmap2 = toolboxBitmapAttribute.GetImage(draggedActivities[0].GetType()) as Bitmap;
					empty = draggedActivities[0].GetType().Name;
				}
				if (bitmap2 != null && empty.Length > 0)
				{
					WorkflowView workflowView = base.ParentView;
					Rectangle rectangle = ((bitmap2 != null) ? new Rectangle(Point.Empty, bitmap2.Size) : Rectangle.Empty);
					Rectangle rectangle2 = ((empty.Length > 0) ? new Rectangle(Point.Empty, new Size(AmbientTheme.DragImageTextSize.Width, workflowView.Font.Height + 2)) : Rectangle.Empty);
					if (!rectangle.IsEmpty)
					{
						rectangle2.Offset(rectangle.Width + AmbientTheme.DragImageMargins.Width, 0);
					}
					Size size = workflowView.LogicalSizeToClient(new Size(rectangle.Width + rectangle2.Width, Math.Max(rectangle.Height, rectangle2.Height)));
					bitmap = new Bitmap(size.Width, size.Height, PixelFormat.Format32bppArgb);
					using Graphics graphics = Graphics.FromImage(bitmap);
					using Brush brush = new SolidBrush(Color.FromArgb(0, 255, 0, 255));
					graphics.ScaleTransform(ScaleZoomFactor, ScaleZoomFactor);
					graphics.FillRectangle(brush, new Rectangle(0, 0, bitmap.Width, bitmap.Height));
					if (bitmap2 != null)
					{
						graphics.DrawImage(bitmap2, new Rectangle(Point.Empty, bitmap2.Size));
					}
					if (empty.Length > 0)
					{
						StringFormat stringFormat = new StringFormat();
						stringFormat.Alignment = StringAlignment.Near;
						stringFormat.Trimming = StringTrimming.EllipsisCharacter;
						stringFormat.LineAlignment = StringAlignment.Center;
						graphics.DrawString(empty, workflowView.Font, SystemBrushes.WindowText, rectangle2, stringFormat);
					}
				}
			}
			dragImage = bitmap;
		}

		protected virtual void DestroyDragFeedbackImages()
		{
			if (dragImage != null)
			{
				dragImage.Dispose();
				dragImage = null;
			}
		}

		internal bool IsValidDropContext(HitTestInfo dropLocation)
		{
			if (draggedActivities.Count == 0)
			{
				return false;
			}
			if (dropLocation == null || dropLocation.AssociatedDesigner == null)
			{
				return false;
			}
			if (!(dropLocation.AssociatedDesigner is CompositeActivityDesigner compositeActivityDesigner))
			{
				return false;
			}
			if (!compositeActivityDesigner.IsEditable || !compositeActivityDesigner.CanInsertActivities(dropLocation, new List<Activity>(draggedActivities).AsReadOnly()))
			{
				return false;
			}
			if (!wasCtrlKeyPressed && existingDraggedActivities.Count > 0)
			{
				if (!DesignerHelpers.AreAssociatedDesignersMovable(draggedActivities))
				{
					return false;
				}
				if (IsRecursiveDropOperation(dropLocation.AssociatedDesigner))
				{
					return false;
				}
				IDictionary dictionary = Helpers.PairUpCommonParentActivities(draggedActivities);
				foreach (DictionaryEntry item in dictionary)
				{
					CompositeActivityDesigner compositeActivityDesigner2 = ActivityDesigner.GetDesigner(item.Key as Activity) as CompositeActivityDesigner;
					Activity[] collection = (Activity[])((ArrayList)item.Value).ToArray(typeof(Activity));
					if (compositeActivityDesigner2 != null && !compositeActivityDesigner2.CanMoveActivities(dropLocation, new List<Activity>(collection).AsReadOnly()))
					{
						return false;
					}
				}
			}
			return true;
		}

		private bool IsRecursiveDropOperation(ActivityDesigner dropTargetDesigner)
		{
			if (dropTargetDesigner == null)
			{
				return false;
			}
			ISelectionService selectionService = (ISelectionService)GetService(typeof(ISelectionService));
			if (!(dropTargetDesigner.Activity is CompositeActivity compositeActivity) || selectionService == null)
			{
				return false;
			}
			WorkflowView workflowView = GetService(typeof(WorkflowView)) as WorkflowView;
			IDesignerHost designerHost = GetService(typeof(IDesignerHost)) as IDesignerHost;
			WorkflowDesignerLoader workflowDesignerLoader = GetService(typeof(WorkflowDesignerLoader)) as WorkflowDesignerLoader;
			if (draggedActivities.Count == 0 || existingDraggedActivities.Count == 0)
			{
				return false;
			}
			ArrayList arrayList = new ArrayList(Helpers.GetTopLevelActivities(selectionService.GetSelectedComponents()));
			for (CompositeActivity compositeActivity2 = compositeActivity; compositeActivity2 != null; compositeActivity2 = compositeActivity2.Parent)
			{
				if (arrayList.Contains(compositeActivity2))
				{
					return true;
				}
			}
			return false;
		}

		private bool CanInitiateDragDrop()
		{
			ISelectionService selectionService = (ISelectionService)GetService(typeof(ISelectionService));
			IDesignerHost designerHost = (IDesignerHost)GetService(typeof(IDesignerHost));
			if (selectionService == null || designerHost == null)
			{
				return false;
			}
			ICollection selectedComponents = selectionService.GetSelectedComponents();
			if (selectedComponents == null || selectedComponents.Count < 1 || selectionService.GetComponentSelected(designerHost.RootComponent) || !Helpers.AreAllActivities(selectedComponents))
			{
				return false;
			}
			return true;
		}

		private void InitiateDragDrop()
		{
			WorkflowView workflowView = base.ParentView;
			ISelectionService selectionService = (ISelectionService)GetService(typeof(ISelectionService));
			IDesignerHost designerHost = (IDesignerHost)GetService(typeof(IDesignerHost));
			if (selectionService == null || designerHost == null)
			{
				return;
			}
			ICollection selectedComponents = selectionService.GetSelectedComponents();
			if (selectedComponents == null || selectedComponents.Count < 1 || selectionService.GetComponentSelected(designerHost.RootComponent) || !Helpers.AreAllActivities(selectedComponents))
			{
				return;
			}
			DragDropEffects dragDropEffects = DragDropEffects.None;
			try
			{
				existingDraggedActivities.AddRange(Helpers.GetTopLevelActivities(selectedComponents));
				DragDropEffects allowedEffects = ((!DesignerHelpers.AreAssociatedDesignersMovable(existingDraggedActivities)) ? DragDropEffects.Copy : (DragDropEffects.Copy | DragDropEffects.Move));
				IDataObject data = CompositeActivityDesigner.SerializeActivitiesToDataObject(base.ParentView, existingDraggedActivities.ToArray());
				dragDropEffects = workflowView.DoDragDrop(data, allowedEffects);
			}
			catch (Exception ex)
			{
				DesignerHelpers.ShowError(base.ParentView, ex.Message);
			}
			finally
			{
				if (dragDropEffects == DragDropEffects.Move && existingDraggedActivities.Count > 0)
				{
					string empty = string.Empty;
					CompositeActivityDesigner.RemoveActivities(transactionDescription: (existingDraggedActivities.Count <= 1) ? SR.GetString("MoveSingleActivity", existingDraggedActivities[0].GetType()) : SR.GetString("MoveMultipleActivities", existingDraggedActivities.Count), serviceProvider: base.ParentView, activitiesToRemove: existingDraggedActivities.AsReadOnly());
				}
				existingDraggedActivities.Clear();
			}
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ActivityDesignerGlyphCollection : List<DesignerGlyph>
	{
		internal DesignerGlyph this[Type type]
		{
			get
			{
				if (type == null)
				{
					throw new ArgumentNullException();
				}
				DesignerGlyph designerGlyph = null;
				using (Enumerator enumerator = GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						DesignerGlyph current = enumerator.Current;
						if (current.GetType() == type)
						{
							designerGlyph = current;
							break;
						}
						if (type.IsAssignableFrom(current.GetType()) && designerGlyph == null)
						{
							designerGlyph = current;
						}
					}
				}
				return designerGlyph;
			}
		}

		public ActivityDesignerGlyphCollection()
		{
		}

		public ActivityDesignerGlyphCollection(IEnumerable<DesignerGlyph> glyphs)
			: base(glyphs)
		{
		}

		public ActivityDesignerGlyphCollection(ActivityDesignerGlyphCollection glyphs)
			: base((IEnumerable<DesignerGlyph>)glyphs)
		{
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public abstract class DesignerGlyph
	{
		public const int HighestPriority = 0;

		public const int NormalPriority = 10000;

		public const int LowestPriority = 1000000;

		internal const int ConnectionPointPriority = 1;

		internal const int MoveAnchorPriority = 1;

		internal const int ConfigErrorPriority = 2;

		internal const int ConnectorDragDropPriority = 2;

		internal const int FadeGlyphPriority = 3;

		internal const int LockedGlyphPriority = 3;

		internal const int ReadOnlyGlyphPriority = 3;

		internal const int CommentPriority = 3;

		internal const int SelectionPriority = 4;

		internal const int NonExecutionStatePriority = 5;

		public virtual bool CanBeActivated => false;

		public virtual int Priority => 10000;

		public virtual Rectangle GetBounds(ActivityDesigner designer, bool activated)
		{
			if (designer == null)
			{
				throw new ArgumentNullException("designer");
			}
			return designer.Bounds;
		}

		protected abstract void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer);

		protected virtual void OnActivate(ActivityDesigner designer)
		{
		}

		internal void DrawActivated(Graphics graphics, ActivityDesigner designer)
		{
			OnPaint(graphics, activated: true, WorkflowTheme.CurrentTheme.AmbientTheme, designer);
		}

		internal void Draw(Graphics graphics, ActivityDesigner designer)
		{
			OnPaint(graphics, activated: false, WorkflowTheme.CurrentTheme.AmbientTheme, designer);
		}

		internal void Activate(ActivityDesigner designer)
		{
			OnActivate(designer);
		}

		internal static int OnComparePriority(DesignerGlyph x, DesignerGlyph y)
		{
			return y.Priority - x.Priority;
		}
	}
	internal class GlyphManager : WorkflowDesignerMessageFilter, IDesignerGlyphProviderService
	{
		private class RectangleCollection
		{
			private List<Rectangle> rectangles = new List<Rectangle>();

			internal void AddRectangle(Rectangle rectangle)
			{
				rectangles.Add(rectangle);
			}

			internal bool IsPointInsideAnyRectangle(Point p)
			{
				for (int i = 0; i < rectangles.Count; i++)
				{
					if (rectangles[i].Contains(p))
					{
						return true;
					}
				}
				return false;
			}
		}

		private List<IDesignerGlyphProvider> designerGlyphProviders = new List<IDesignerGlyphProvider>();

		private DesignerGlyph activeGlyph;

		private ActivityDesigner activeDesigner;

		ReadOnlyCollection<IDesignerGlyphProvider> IDesignerGlyphProviderService.GlyphProviders => designerGlyphProviders.AsReadOnly();

		internal GlyphManager()
		{
		}

		protected override void Dispose(bool disposing)
		{
			designerGlyphProviders.Clear();
			activeGlyph = null;
			activeDesigner = null;
			if (GetService(typeof(IServiceContainer)) is IServiceContainer serviceContainer && GetService(typeof(IDesignerGlyphProviderService)) != null)
			{
				serviceContainer.RemoveService(typeof(IDesignerGlyphProviderService));
			}
			base.Dispose(disposing);
		}

		protected override void Initialize(WorkflowView parentView)
		{
			base.Initialize(parentView);
			if (GetService(typeof(IServiceContainer)) is IServiceContainer serviceContainer)
			{
				if (GetService(typeof(IDesignerGlyphProviderService)) != null)
				{
					serviceContainer.RemoveService(typeof(IDesignerGlyphProviderService));
				}
				serviceContainer.AddService(typeof(IDesignerGlyphProviderService), this);
			}
		}

		protected override bool OnMouseDown(MouseEventArgs eventArgs)
		{
			if (activeGlyph != null)
			{
				activeGlyph.Activate(activeDesigner);
				return true;
			}
			return false;
		}

		protected override bool OnMouseDoubleClick(MouseEventArgs eventArgs)
		{
			if (activeGlyph != null)
			{
				activeGlyph.Activate(activeDesigner);
				return true;
			}
			return false;
		}

		protected override bool OnMouseMove(MouseEventArgs eventArgs)
		{
			RefreshActiveGlyph(base.ParentView.ClientPointToLogical(new Point(eventArgs.X, eventArgs.Y)));
			return false;
		}

		protected override bool OnMouseEnter(MouseEventArgs eventArgs)
		{
			RefreshActiveGlyph(base.ParentView.ClientPointToLogical(new Point(eventArgs.X, eventArgs.Y)));
			return false;
		}

		protected override bool OnMouseHover(MouseEventArgs eventArgs)
		{
			RefreshActiveGlyph(base.ParentView.ClientPointToLogical(new Point(eventArgs.X, eventArgs.Y)));
			return false;
		}

		void IDesignerGlyphProviderService.AddGlyphProvider(IDesignerGlyphProvider glyphProvider)
		{
			if (!designerGlyphProviders.Contains(glyphProvider))
			{
				designerGlyphProviders.Add(glyphProvider);
				base.ParentView.InvalidateClientRectangle(Rectangle.Empty);
			}
		}

		void IDesignerGlyphProviderService.RemoveGlyphProvider(IDesignerGlyphProvider glyphProvider)
		{
			designerGlyphProviders.Remove(glyphProvider);
			base.ParentView.InvalidateClientRectangle(Rectangle.Empty);
		}

		internal void DrawDesignerGlyphs(ActivityDesignerPaintEventArgs e, ActivityDesigner designer)
		{
			foreach (DesignerGlyph designerGlyph in GetDesignerGlyphs(designer))
			{
				designerGlyph.Draw(e.Graphics, designer);
			}
			if (activeGlyph != null && designer == activeDesigner)
			{
				activeGlyph.DrawActivated(e.Graphics, activeDesigner);
			}
		}

		internal ActivityDesignerGlyphCollection GetDesignerGlyphs(ActivityDesigner designer)
		{
			ActivityDesignerGlyphCollection activityDesignerGlyphCollection = new ActivityDesignerGlyphCollection();
			if (designer.Glyphs != null)
			{
				activityDesignerGlyphCollection.AddRange(designer.Glyphs);
			}
			foreach (IDesignerGlyphProvider designerGlyphProvider in designerGlyphProviders)
			{
				ActivityDesignerGlyphCollection glyphs = designerGlyphProvider.GetGlyphs(designer);
				if (glyphs != null)
				{
					activityDesignerGlyphCollection.AddRange(glyphs);
				}
			}
			activityDesignerGlyphCollection.Sort(DesignerGlyph.OnComparePriority);
			return activityDesignerGlyphCollection;
		}

		private void RefreshActiveGlyph(Point point)
		{
			WorkflowView workflowView = base.ParentView;
			if (workflowView == null)
			{
				return;
			}
			DesignerGlyph designerGlyph = activeGlyph;
			if (activeGlyph == null || !activeGlyph.GetBounds(activeDesigner, activated: true).Contains(point))
			{
				ActivityDesigner activityDesigner = null;
				DesignerGlyph designerGlyph2 = GlyphFromPoint(point, out activityDesigner);
				if (activeGlyph != null)
				{
					workflowView.InvalidateLogicalRectangle(activeGlyph.GetBounds(activeDesigner, activated: true));
				}
				activeGlyph = designerGlyph2;
				activeDesigner = activityDesigner;
				if (activeGlyph != null)
				{
					workflowView.InvalidateLogicalRectangle(activeGlyph.GetBounds(activeDesigner, activated: true));
				}
			}
			if (designerGlyph != activeGlyph)
			{
				if (activeGlyph != null && activeGlyph.CanBeActivated)
				{
					workflowView.Cursor = Cursors.Hand;
				}
				else if (workflowView.Cursor == Cursors.Hand)
				{
					workflowView.Cursor = Cursors.Default;
				}
			}
		}

		private DesignerGlyph GlyphFromPoint(Point point, out ActivityDesigner activityDesigner)
		{
			activityDesigner = null;
			WorkflowView workflowView = base.ParentView;
			if (workflowView != null)
			{
				RectangleCollection rectangleCollection = new RectangleCollection();
				ActivityDesigner[] activityDesigners = GetActivityDesigners(workflowView.ClientRectangleToLogical(new Rectangle(Point.Empty, workflowView.ViewPortSize)));
				ActivityDesigner[] array = activityDesigners;
				foreach (ActivityDesigner activityDesigner2 in array)
				{
					if (!rectangleCollection.IsPointInsideAnyRectangle(point))
					{
						foreach (DesignerGlyph designerGlyph in GetDesignerGlyphs(activityDesigner2))
						{
							if (designerGlyph.GetBounds(activityDesigner2, activated: false).Contains(point) && designerGlyph.CanBeActivated)
							{
								activityDesigner = activityDesigner2;
								return designerGlyph;
							}
						}
					}
					rectangleCollection.AddRectangle(activityDesigner2.Bounds);
				}
			}
			return null;
		}

		private ActivityDesigner[] GetActivityDesigners(Rectangle logicalViewPort)
		{
			List<ActivityDesigner> list = new List<ActivityDesigner>();
			bool isEmpty = logicalViewPort.IsEmpty;
			ActivityDesigner safeRootDesigner = ActivityDesigner.GetSafeRootDesigner(base.ParentView);
			if (safeRootDesigner != null)
			{
				Stack<object> stack = new Stack<object>();
				stack.Push(safeRootDesigner);
				if (safeRootDesigner is CompositeActivityDesigner compositeActivityDesigner && compositeActivityDesigner.ContainedDesigners.Count > 0)
				{
					stack.Push(compositeActivityDesigner.ContainedDesigners);
				}
				while (stack.Count > 0)
				{
					object obj = stack.Pop();
					if (obj is ICollection collection)
					{
						foreach (ActivityDesigner item in collection)
						{
							if ((isEmpty || logicalViewPort.IntersectsWith(item.Bounds)) && item.IsVisible)
							{
								stack.Push(item);
								if (item is CompositeActivityDesigner compositeActivityDesigner2 && compositeActivityDesigner2.ContainedDesigners.Count > 0)
								{
									stack.Push(compositeActivityDesigner2.ContainedDesigners);
								}
							}
						}
					}
					else
					{
						list.Add((ActivityDesigner)obj);
					}
				}
			}
			return list.ToArray();
		}
	}
	internal sealed class AutoScrollingMessageFilter : WorkflowDesignerMessageFilter
	{
		private enum ScrollDirection
		{
			None = 1,
			Left = 2,
			Up = 4,
			Right = 8,
			Down = 0x10
		}

		private bool startAutoScroll;

		private EventHandler autoScrollEventHandler;

		private ScrollDirection autoScrollDirection = ScrollDirection.None;

		private ScrollDirection AutoScrollDirection
		{
			get
			{
				return autoScrollDirection;
			}
			set
			{
				if (autoScrollDirection == value)
				{
					return;
				}
				autoScrollDirection = value;
				Rectangle[] scrollIndicatorRectangles = ScrollIndicatorRectangles;
				Rectangle[] array = scrollIndicatorRectangles;
				foreach (Rectangle clientRectangle in array)
				{
					base.ParentView.InvalidateClientRectangle(clientRectangle);
				}
				if (ScrollDirection.None == value)
				{
					if (autoScrollEventHandler != null)
					{
						WorkflowTimer.Default.Unsubscribe(autoScrollEventHandler);
						autoScrollEventHandler = null;
					}
				}
				else if (autoScrollEventHandler == null)
				{
					autoScrollEventHandler = OnAutoScroll;
					WorkflowTimer.Default.Subscribe(50, autoScrollEventHandler);
				}
			}
		}

		private bool ShowAutoScrollIndicators
		{
			get
			{
				AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
				if (!startAutoScroll)
				{
					return false;
				}
				Size viewPortSize = base.ParentView.ViewPortSize;
				Size scrollIndicatorSize = ambientTheme.ScrollIndicatorSize;
				scrollIndicatorSize.Width += 2 * ambientTheme.Margin.Width;
				scrollIndicatorSize.Height += 2 * ambientTheme.Margin.Height;
				if (viewPortSize.Width > 2 * scrollIndicatorSize.Width)
				{
					return viewPortSize.Height > 2 * scrollIndicatorSize.Height;
				}
				return false;
			}
		}

		private Rectangle[] ScrollIndicatorRectangles
		{
			get
			{
				Rectangle rectangle = new Rectangle(Point.Empty, base.ParentView.ViewPortSize);
				Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
				Size scrollIndicatorSize = WorkflowTheme.CurrentTheme.AmbientTheme.ScrollIndicatorSize;
				Rectangle[] array = new Rectangle[4];
				array[0].X = margin.Width;
				array[0].Y = (rectangle.Height - scrollIndicatorSize.Height) / 2;
				array[0].Size = scrollIndicatorSize;
				array[1].X = rectangle.Right - margin.Width - scrollIndicatorSize.Width;
				array[1].Y = (rectangle.Height - scrollIndicatorSize.Height) / 2;
				array[1].Size = scrollIndicatorSize;
				array[2].X = (rectangle.Width - scrollIndicatorSize.Width) / 2;
				array[2].Y = margin.Height;
				array[2].Size = scrollIndicatorSize;
				array[3].X = (rectangle.Width - scrollIndicatorSize.Width) / 2;
				array[3].Y = rectangle.Bottom - margin.Height - scrollIndicatorSize.Height;
				array[3].Size = scrollIndicatorSize;
				return array;
			}
		}

		internal AutoScrollingMessageFilter()
		{
		}

		protected override bool OnDragEnter(DragEventArgs eventArgs)
		{
			startAutoScroll = true;
			Rectangle[] scrollIndicatorRectangles = ScrollIndicatorRectangles;
			Rectangle[] array = scrollIndicatorRectangles;
			foreach (Rectangle clientRectangle in array)
			{
				base.ParentView.InvalidateClientRectangle(clientRectangle);
			}
			return false;
		}

		protected override bool OnDragOver(DragEventArgs eventArgs)
		{
			startAutoScroll = true;
			Point clientPoint = base.ParentView.PointToClient(new Point(eventArgs.X, eventArgs.Y));
			AutoScrollDirection = AutoScrollDirectionFromPoint(clientPoint);
			if (AutoScrollDirection != ScrollDirection.None)
			{
				return true;
			}
			return false;
		}

		protected override bool OnDragLeave()
		{
			startAutoScroll = false;
			AutoScrollDirection = ScrollDirection.None;
			return false;
		}

		protected override bool OnDragDrop(DragEventArgs eventArgs)
		{
			startAutoScroll = false;
			AutoScrollDirection = ScrollDirection.None;
			return false;
		}

		protected override bool OnPaintWorkflowAdornments(PaintEventArgs e, Rectangle viewPort, AmbientTheme ambientTheme)
		{
			if (ShowAutoScrollIndicators)
			{
				DrawScrollIndicators(e.Graphics);
			}
			return false;
		}

		private ScrollDirection AutoScrollDirectionFromPoint(Point clientPoint)
		{
			Rectangle rectangle = new Rectangle(Point.Empty, base.ParentView.ViewPortSize);
			if (!rectangle.Contains(clientPoint))
			{
				return ScrollDirection.None;
			}
			ScrollDirection scrollDirection = ScrollDirection.None;
			ScrollBar hScrollBar = base.ParentView.HScrollBar;
			if (clientPoint.X <= rectangle.Width / 10 && hScrollBar.Value > 0)
			{
				scrollDirection |= ScrollDirection.Left;
			}
			else if (clientPoint.X >= rectangle.Right - rectangle.Width / 10 && hScrollBar.Value < hScrollBar.Maximum - hScrollBar.LargeChange)
			{
				scrollDirection |= ScrollDirection.Right;
			}
			ScrollBar vScrollBar = base.ParentView.VScrollBar;
			if (clientPoint.Y <= rectangle.Height / 10 && vScrollBar.Value > 0)
			{
				scrollDirection |= ScrollDirection.Up;
			}
			else if (clientPoint.Y >= rectangle.Bottom - rectangle.Height / 10 && vScrollBar.Value < vScrollBar.Maximum - vScrollBar.LargeChange)
			{
				scrollDirection |= ScrollDirection.Down;
			}
			return scrollDirection;
		}

		private void OnAutoScroll(object sender, EventArgs eventArgs)
		{
			WorkflowView workflowView = base.ParentView;
			Point scrollPosition = workflowView.ScrollPosition;
			if ((autoScrollDirection & ScrollDirection.Left) > (ScrollDirection)0)
			{
				scrollPosition.X -= 25;
			}
			else if ((autoScrollDirection & ScrollDirection.Right) > (ScrollDirection)0)
			{
				scrollPosition.X += 25;
			}
			if ((autoScrollDirection & ScrollDirection.Up) > (ScrollDirection)0)
			{
				scrollPosition.Y -= 25;
			}
			else if ((autoScrollDirection & ScrollDirection.Down) > (ScrollDirection)0)
			{
				scrollPosition.Y += 25;
			}
			workflowView.ScrollPosition = scrollPosition;
		}

		private void DrawScrollIndicators(Graphics graphics)
		{
			Image scrollIndicatorImage = AmbientTheme.ScrollIndicatorImage;
			if (scrollIndicatorImage != null)
			{
				WorkflowView workflowView = base.ParentView;
				Size viewPortSize = workflowView.ViewPortSize;
				Point scrollPosition = workflowView.ScrollPosition;
				Rectangle[] scrollIndicatorRectangles = ScrollIndicatorRectangles;
				if (scrollPosition.X > 0)
				{
					ActivityDesignerPaint.DrawImage(graphics, AmbientTheme.ScrollIndicatorImage, scrollIndicatorRectangles[0], 0.7f);
				}
				if (scrollPosition.X < workflowView.HScrollBar.Maximum - viewPortSize.Width)
				{
					scrollIndicatorImage.RotateFlip(RotateFlipType.RotateNoneFlipX);
					ActivityDesignerPaint.DrawImage(graphics, scrollIndicatorImage, scrollIndicatorRectangles[1], 0.7f);
					scrollIndicatorImage.RotateFlip(RotateFlipType.RotateNoneFlipX);
				}
				if (scrollPosition.Y > 0)
				{
					scrollIndicatorImage.RotateFlip(RotateFlipType.Rotate90FlipX);
					ActivityDesignerPaint.DrawImage(graphics, scrollIndicatorImage, scrollIndicatorRectangles[2], 0.7f);
					scrollIndicatorImage.RotateFlip(RotateFlipType.Rotate90FlipX);
				}
				if (scrollPosition.Y < workflowView.VScrollBar.Maximum - viewPortSize.Height)
				{
					scrollIndicatorImage.RotateFlip(RotateFlipType.Rotate270FlipNone);
					ActivityDesignerPaint.DrawImage(graphics, scrollIndicatorImage, scrollIndicatorRectangles[3], 0.7f);
					scrollIndicatorImage.RotateFlip(RotateFlipType.Rotate90FlipNone);
				}
			}
		}
	}
	internal sealed class AutoExpandingMessageFilter : WorkflowDesignerMessageFilter
	{
		private CompositeActivityDesigner autoExpandableDesigner;

		private EventHandler autoExpandEventHandler;

		internal AutoExpandingMessageFilter()
		{
		}

		protected override bool OnDragEnter(DragEventArgs eventArgs)
		{
			WorkflowView workflowView = base.ParentView;
			if (workflowView.IsClientPointInActiveLayout(workflowView.PointToClient(new Point(eventArgs.X, eventArgs.Y))))
			{
				SetAutoExpandableDesigner(workflowView.MessageHitTestContext.AssociatedDesigner as CompositeActivityDesigner);
			}
			else
			{
				SetAutoExpandableDesigner(null);
			}
			return false;
		}

		protected override bool OnDragOver(DragEventArgs eventArgs)
		{
			WorkflowView workflowView = base.ParentView;
			if (workflowView.IsClientPointInActiveLayout(workflowView.PointToClient(new Point(eventArgs.X, eventArgs.Y))))
			{
				SetAutoExpandableDesigner(workflowView.MessageHitTestContext.AssociatedDesigner as CompositeActivityDesigner);
			}
			else
			{
				SetAutoExpandableDesigner(null);
			}
			return false;
		}

		protected override bool OnDragDrop(DragEventArgs eventArgs)
		{
			SetAutoExpandableDesigner(null);
			return false;
		}

		protected override bool OnDragLeave()
		{
			SetAutoExpandableDesigner(null);
			return false;
		}

		private void SetAutoExpandableDesigner(CompositeActivityDesigner value)
		{
			if (autoExpandableDesigner == value)
			{
				return;
			}
			if (value == null || value.Expanded || !value.CanExpandCollapse)
			{
				autoExpandableDesigner = null;
				if (autoExpandEventHandler != null)
				{
					WorkflowTimer.Default.Unsubscribe(autoExpandEventHandler);
					autoExpandEventHandler = null;
				}
			}
			else
			{
				autoExpandableDesigner = value;
				if (autoExpandEventHandler == null)
				{
					autoExpandEventHandler = OnAutoExpand;
					WorkflowTimer.Default.Subscribe(500, autoExpandEventHandler);
				}
			}
		}

		private void OnAutoExpand(object sender, EventArgs eventArgs)
		{
			if (autoExpandableDesigner != null)
			{
				autoExpandableDesigner.Expanded = true;
				base.ParentView.PerformLayout(immediateUpdate: true);
			}
			SetAutoExpandableDesigner(null);
		}
	}
	internal class DragRectangleMessageFilter : WorkflowDesignerMessageFilter
	{
		private Point startDrag = Point.Empty;

		private Point endDrag = Point.Empty;

		private bool dragStarted;

		private Cursor previousCursor = Cursors.Default;

		internal Rectangle DragRectangle => new Rectangle(Math.Min(startDrag.X, endDrag.X), Math.Min(startDrag.Y, endDrag.Y), Math.Abs(endDrag.X - startDrag.X), Math.Abs(endDrag.Y - startDrag.Y));

		protected bool DragStarted
		{
			get
			{
				return dragStarted;
			}
			set
			{
				if (dragStarted == value)
				{
					return;
				}
				WorkflowView workflowView = base.ParentView;
				if (value)
				{
					dragStarted = true;
					previousCursor = workflowView.Cursor;
					workflowView.Cursor = Cursors.Cross;
					workflowView.Capture = true;
					return;
				}
				workflowView.Capture = false;
				dragStarted = false;
				if (previousCursor != null)
				{
					workflowView.Cursor = previousCursor;
				}
				if (!DragRectangle.IsEmpty)
				{
					workflowView.InvalidateLogicalRectangle(DragRectangle);
				}
			}
		}

		internal event EventHandler DragComplete;

		internal DragRectangleMessageFilter()
		{
		}

		protected override void Dispose(bool disposing)
		{
			try
			{
				DragStarted = false;
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		protected override bool OnMouseCaptureChanged()
		{
			DragStarted = false;
			return false;
		}

		protected override bool OnMouseDown(MouseEventArgs eventArgs)
		{
			if (eventArgs.Button == MouseButtons.Left)
			{
				startDrag = (endDrag = base.ParentView.ClientPointToLogical(new Point(eventArgs.X, eventArgs.Y)));
			}
			return false;
		}

		protected override bool OnMouseMove(MouseEventArgs eventArgs)
		{
			WorkflowView workflowView = base.ParentView;
			Point point = workflowView.ClientPointToLogical(new Point(eventArgs.X, eventArgs.Y));
			float num = 2f / (float)workflowView.Zoom * 100f;
			if (!dragStarted && (eventArgs.Button & MouseButtons.Left) > MouseButtons.None && (Math.Abs(startDrag.X - point.X) > (int)(num * (float)SystemInformation.DragSize.Width) || Math.Abs(startDrag.Y - point.Y) > (int)(num * (float)SystemInformation.DragSize.Height)))
			{
				DragStarted = true;
			}
			if (dragStarted)
			{
				if (!DragRectangle.IsEmpty)
				{
					workflowView.InvalidateLogicalRectangle(DragRectangle);
				}
				endDrag = point;
				if (!DragRectangle.IsEmpty)
				{
					workflowView.InvalidateLogicalRectangle(DragRectangle);
				}
			}
			return dragStarted;
		}

		protected override bool OnMouseUp(MouseEventArgs eventArgs)
		{
			if (dragStarted)
			{
				WorkflowView workflowView = base.ParentView;
				if (!DragRectangle.IsEmpty)
				{
					workflowView.InvalidateLogicalRectangle(DragRectangle);
				}
				endDrag = workflowView.ClientPointToLogical(new Point(eventArgs.X, eventArgs.Y));
				DragStarted = false;
				if (this.DragComplete != null)
				{
					this.DragComplete(this, EventArgs.Empty);
				}
				return true;
			}
			return false;
		}

		protected override bool OnKeyDown(KeyEventArgs eventArgs)
		{
			if (eventArgs.KeyValue == 27)
			{
				DragStarted = false;
			}
			return false;
		}

		protected override bool OnPaint(PaintEventArgs e, Rectangle viewPort, AmbientTheme ambientTheme)
		{
			if (dragStarted)
			{
				using Brush brush = new SolidBrush(Color.FromArgb(10, ambientTheme.SelectionForeColor));
				Rectangle dragRectangle = DragRectangle;
				e.Graphics.FillRectangle(brush, dragRectangle.X, dragRectangle.Y, dragRectangle.Width - 1, dragRectangle.Height - 1);
				e.Graphics.DrawRectangle(ambientTheme.SelectionForegroundPen, dragRectangle.X, dragRectangle.Y, dragRectangle.Width - 1, dragRectangle.Height - 1);
			}
			return false;
		}
	}
	internal sealed class DragSelectionMessageFilter : DragRectangleMessageFilter
	{
		internal DragSelectionMessageFilter()
		{
		}

		protected override bool OnMouseDown(MouseEventArgs eventArgs)
		{
			if ((Control.ModifierKeys & Keys.Shift) > Keys.None)
			{
				base.OnMouseDown(eventArgs);
				return true;
			}
			return false;
		}

		protected override bool OnMouseMove(MouseEventArgs eventArgs)
		{
			if ((Control.ModifierKeys & Keys.Shift) > Keys.None)
			{
				base.OnMouseMove(eventArgs);
				return true;
			}
			return false;
		}

		protected override bool OnMouseUp(MouseEventArgs eventArgs)
		{
			if ((Control.ModifierKeys & Keys.Shift) > Keys.None)
			{
				base.OnMouseUp(eventArgs);
				WorkflowView workflowView = base.ParentView;
				if (!base.DragRectangle.IsEmpty && workflowView.RootDesigner != null)
				{
					ActivityDesigner[] intersectingDesigners = CompositeActivityDesigner.GetIntersectingDesigners(workflowView.RootDesigner, base.DragRectangle);
					ArrayList arrayList = new ArrayList();
					ActivityDesigner[] array = intersectingDesigners;
					foreach (ActivityDesigner activityDesigner in array)
					{
						arrayList.Add(activityDesigner.Activity);
					}
					ISelectionService selectionService = GetService(typeof(ISelectionService)) as ISelectionService;
					if (arrayList.Count > 0)
					{
						selectionService?.SetSelectedComponents((object[])arrayList.ToArray(typeof(object)), SelectionTypes.Replace);
					}
				}
				return true;
			}
			return false;
		}

		protected override bool OnKeyUp(KeyEventArgs eventArgs)
		{
			base.OnKeyUp(eventArgs);
			if ((Control.ModifierKeys & Keys.Shift) == 0)
			{
				base.DragStarted = false;
			}
			return false;
		}
	}
	internal sealed class PanningMessageFilter : WorkflowDesignerMessageFilter
	{
		private static Cursor PanBeganCursor = new Cursor(typeof(WorkflowView), "Resources.panClosed.cur");

		private static Cursor PanReadyCursor = new Cursor(typeof(WorkflowView), "Resources.panOpened.cur");

		private Point panPoint = Point.Empty;

		private bool panningActive;

		private CommandID previousCommand;

		private Cursor previousCursor = Cursors.Default;

		internal PanningMessageFilter()
		{
		}

		protected override void Initialize(WorkflowView parentView)
		{
			base.Initialize(parentView);
			StoreUIState();
			RefreshUIState();
		}

		protected override void Dispose(bool disposing)
		{
			try
			{
				RestoreUIState();
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		protected override bool OnShowContextMenu(Point menuPoint)
		{
			((IMenuCommandService)GetService(typeof(IMenuCommandService)))?.ShowContextMenu(WorkflowMenuCommands.ZoomMenu, menuPoint.X, menuPoint.Y);
			return true;
		}

		protected override bool OnMouseEnter(MouseEventArgs eventArgs)
		{
			RefreshUIState();
			return true;
		}

		protected override bool OnMouseDown(MouseEventArgs eventArgs)
		{
			if (eventArgs.Button == MouseButtons.Left)
			{
				SetPanPoint(new Point(eventArgs.X, eventArgs.Y));
			}
			return true;
		}

		protected override bool OnMouseMove(MouseEventArgs eventArgs)
		{
			if (panningActive && (eventArgs.Button & MouseButtons.Left) > MouseButtons.None)
			{
				Size size = new Size(eventArgs.X - panPoint.X, eventArgs.Y - panPoint.Y);
				WorkflowView workflowView = base.ParentView;
				workflowView.ScrollPosition = new Point(workflowView.ScrollPosition.X - size.Width, workflowView.ScrollPosition.Y - size.Height);
				SetPanPoint(new Point(eventArgs.X, eventArgs.Y));
			}
			return true;
		}

		protected override bool OnMouseUp(MouseEventArgs eventArgs)
		{
			SetPanPoint(Point.Empty);
			return true;
		}

		protected override bool OnDragEnter(DragEventArgs eventArgs)
		{
			base.ParentView.RemoveDesignerMessageFilter(this);
			return false;
		}

		protected override bool OnKeyDown(KeyEventArgs eventArgs)
		{
			if (eventArgs.KeyValue == 27)
			{
				base.ParentView.RemoveDesignerMessageFilter(this);
			}
			return true;
		}

		private void SetPanPoint(Point value)
		{
			panPoint = value;
			panningActive = panPoint != Point.Empty;
			base.ParentView.Capture = panningActive;
			RefreshUIState();
		}

		private void RefreshUIState()
		{
			base.ParentView.Cursor = (panningActive ? PanBeganCursor : PanReadyCursor);
			if (!(GetService(typeof(IMenuCommandService)) is IMenuCommandService menuCommandService))
			{
				return;
			}
			CommandID[] array = new CommandID[4]
			{
				WorkflowMenuCommands.ZoomIn,
				WorkflowMenuCommands.ZoomOut,
				WorkflowMenuCommands.Pan,
				WorkflowMenuCommands.DefaultFilter
			};
			CommandID[] array2 = array;
			foreach (CommandID commandID in array2)
			{
				MenuCommand menuCommand = menuCommandService.FindCommand(commandID);
				if (menuCommand != null && menuCommand.Enabled)
				{
					menuCommand.Checked = menuCommand.CommandID == WorkflowMenuCommands.Pan;
				}
			}
		}

		private void StoreUIState()
		{
			if (GetService(typeof(IMenuCommandService)) is IMenuCommandService menuCommandService)
			{
				CommandID[] navigationToolCommandIds = CommandSet.NavigationToolCommandIds;
				foreach (CommandID commandID in navigationToolCommandIds)
				{
					MenuCommand menuCommand = menuCommandService.FindCommand(commandID);
					if (menuCommand != null && menuCommand.Enabled && menuCommand.Checked)
					{
						previousCommand = menuCommand.CommandID;
						break;
					}
				}
			}
			previousCursor = base.ParentView.Cursor;
		}

		private void RestoreUIState()
		{
			if (GetService(typeof(IMenuCommandService)) is IMenuCommandService menuCommandService)
			{
				CommandID[] navigationToolCommandIds = CommandSet.NavigationToolCommandIds;
				foreach (CommandID commandID in navigationToolCommandIds)
				{
					MenuCommand menuCommand = menuCommandService.FindCommand(commandID);
					if (menuCommand != null && menuCommand.Enabled)
					{
						menuCommand.Checked = menuCommand.CommandID == previousCommand;
					}
				}
			}
			base.ParentView.Cursor = previousCursor;
		}
	}
	internal sealed class DynamicActionMessageFilter : WorkflowDesignerMessageFilter
	{
		private List<DynamicAction> actions = new List<DynamicAction>();

		private int draggedButtonIndex = -1;

		private int draggedActionIndex = -1;

		private bool infoTipSet;

		private bool IsButtonDragged
		{
			get
			{
				if (draggedActionIndex >= 0)
				{
					return draggedButtonIndex >= 0;
				}
				return false;
			}
		}

		internal DynamicActionMessageFilter()
		{
		}

		internal void AddAction(DynamicAction action)
		{
			if (action == null)
			{
				throw new ArgumentNullException("action");
			}
			if (!actions.Contains(action))
			{
				if (IsButtonDragged)
				{
					SetDraggedButton(-1, -1);
				}
				actions.Add(action);
				RefreshAction(action);
			}
		}

		internal bool ActionExists(DynamicAction action)
		{
			if (action == null)
			{
				throw new ArgumentNullException("action");
			}
			return actions.Contains(action);
		}

		internal void RemoveAction(DynamicAction action)
		{
			if (action == null)
			{
				throw new ArgumentNullException("action");
			}
			if (actions.Contains(action))
			{
				if (IsButtonDragged)
				{
					SetDraggedButton(-1, -1);
				}
				RefreshAction(action);
				actions.Remove(action);
			}
		}

		internal void RefreshAction(DynamicAction action)
		{
			if (action == null)
			{
				throw new ArgumentNullException("action");
			}
			int num = actions.IndexOf(action);
			if (num >= 0)
			{
				base.ParentView.InvalidateClientRectangle(GetActionBounds(num));
			}
		}

		protected override void Initialize(WorkflowView parentView)
		{
			base.Initialize(parentView);
			if (GetService(typeof(IServiceContainer)) is IServiceContainer serviceContainer)
			{
				serviceContainer.RemoveService(typeof(DynamicActionMessageFilter));
				serviceContainer.AddService(typeof(DynamicActionMessageFilter), this);
			}
		}

		protected override void Dispose(bool disposing)
		{
			try
			{
				if (GetService(typeof(IServiceContainer)) is IServiceContainer serviceContainer)
				{
					serviceContainer.RemoveService(typeof(DynamicActionMessageFilter));
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		protected override bool OnMouseEnter(MouseEventArgs eventArgs)
		{
			UpdateTransparency(new Point(eventArgs.X, eventArgs.Y));
			Refresh();
			return false;
		}

		protected override bool OnMouseDown(MouseEventArgs eventArgs)
		{
			Point point = new Point(eventArgs.X, eventArgs.Y);
			Refresh();
			UpdateTransparency(point);
			bool result = false;
			if ((eventArgs.Button & MouseButtons.Left) > MouseButtons.None)
			{
				for (int num = actions.Count - 1; num >= 0; num--)
				{
					DynamicAction dynamicAction = actions[num];
					if (GetActionBounds(num).Contains(point))
					{
						for (int i = 0; i < dynamicAction.Buttons.Count; i++)
						{
							if (GetButtonBounds(num, i).Contains(point) && dynamicAction.Buttons[i].State == ActionButton.States.Disabled)
							{
								return true;
							}
						}
						for (int j = 0; j < dynamicAction.Buttons.Count; j++)
						{
							ActionButton actionButton = dynamicAction.Buttons[j];
							if (actionButton.State == ActionButton.States.Disabled)
							{
								continue;
							}
							if (GetButtonBounds(num, j).Contains(point))
							{
								actionButton.State = ActionButton.States.Pressed;
								if (dynamicAction.ActionType != DynamicAction.ActionTypes.TwoState)
								{
									SetDraggedButton(num, j);
								}
							}
							else if (dynamicAction.ActionType == DynamicAction.ActionTypes.TwoState)
							{
								actionButton.State = ActionButton.States.Normal;
							}
						}
						result = true;
					}
				}
			}
			return result;
		}

		protected override bool OnMouseMove(MouseEventArgs eventArgs)
		{
			Point point = new Point(eventArgs.X, eventArgs.Y);
			Refresh();
			UpdateTransparency(point);
			string text = string.Empty;
			bool result = IsButtonDragged;
			if (!IsButtonDragged)
			{
				for (int num = actions.Count - 1; num >= 0; num--)
				{
					DynamicAction dynamicAction = actions[num];
					Rectangle actionBounds = GetActionBounds(num);
					for (int i = 0; i < dynamicAction.Buttons.Count; i++)
					{
						ActionButton actionButton = dynamicAction.Buttons[i];
						if (actionBounds.Contains(point))
						{
							bool flag = GetButtonBounds(num, i).Contains(point);
							if (flag && text.Length == 0)
							{
								text = actionButton.Description;
							}
							if (actionButton.State != ActionButton.States.Disabled && actionButton.State != ActionButton.States.Pressed)
							{
								if (flag)
								{
									actionButton.State = ActionButton.States.Highlight;
								}
								else
								{
									actionButton.State = ActionButton.States.Normal;
								}
							}
							result = true;
						}
						else if (actionButton.State == ActionButton.States.Highlight)
						{
							actionButton.State = ActionButton.States.Normal;
						}
					}
				}
			}
			WorkflowView workflowView = base.ParentView;
			if (text.Length > 0)
			{
				infoTipSet = true;
				workflowView.ShowInfoTip(text);
			}
			else if (infoTipSet)
			{
				workflowView.ShowInfoTip(string.Empty);
				infoTipSet = false;
			}
			return result;
		}

		protected override bool OnMouseDoubleClick(MouseEventArgs eventArgs)
		{
			for (int num = actions.Count - 1; num >= 0; num--)
			{
				DynamicAction dynamicAction = actions[num];
				if (GetActionBounds(num).Contains(new Point(eventArgs.X, eventArgs.Y)))
				{
					return true;
				}
			}
			return false;
		}

		protected override bool OnMouseUp(MouseEventArgs eventArgs)
		{
			Point point = new Point(eventArgs.X, eventArgs.Y);
			Refresh();
			UpdateTransparency(point);
			bool result = false;
			if ((eventArgs.Button & MouseButtons.Left) > MouseButtons.None)
			{
				for (int num = actions.Count - 1; num >= 0; num--)
				{
					DynamicAction dynamicAction = actions[num];
					if (GetActionBounds(num).Contains(point))
					{
						for (int i = 0; i < dynamicAction.Buttons.Count; i++)
						{
							ActionButton actionButton = dynamicAction.Buttons[i];
							if (actionButton.State != ActionButton.States.Disabled)
							{
								if (GetButtonBounds(num, i).Contains(point) && dynamicAction.ActionType != DynamicAction.ActionTypes.TwoState)
								{
									actionButton.State = ActionButton.States.Highlight;
								}
								else if (actionButton.State == ActionButton.States.Highlight)
								{
									actionButton.State = ActionButton.States.Normal;
								}
							}
						}
						result = true;
					}
				}
			}
			if (IsButtonDragged)
			{
				SetDraggedButton(-1, -1);
			}
			return result;
		}

		protected override bool OnMouseLeave()
		{
			base.ParentView.ShowInfoTip(string.Empty);
			UpdateTransparency(Point.Empty);
			Refresh();
			return false;
		}

		protected override bool OnMouseCaptureChanged()
		{
			if (IsButtonDragged)
			{
				SetDraggedButton(-1, -1);
			}
			return false;
		}

		protected override bool OnPaintWorkflowAdornments(PaintEventArgs e, Rectangle viewPort, AmbientTheme ambientTheme)
		{
			for (int i = 0; i < actions.Count; i++)
			{
				GraphicsContainer container = e.Graphics.BeginContainer();
				Point location = GetActionBounds(i).Location;
				e.Graphics.TranslateTransform(location.X, location.Y);
				actions[i].Draw(e.Graphics);
				e.Graphics.EndContainer(container);
			}
			return false;
		}

		private void Refresh()
		{
			WorkflowView workflowView = base.ParentView;
			for (int i = 0; i < actions.Count; i++)
			{
				workflowView.InvalidateClientRectangle(GetActionBounds(i));
			}
		}

		private Rectangle GetActionBounds(int actionIndex)
		{
			Rectangle destination = new Rectangle(Point.Empty, base.ParentView.ViewPortSize);
			DynamicAction dynamicAction = actions[actionIndex];
			destination.Inflate(-dynamicAction.DockMargin.Width, -dynamicAction.DockMargin.Height);
			return new Rectangle(ActivityDesignerPaint.GetRectangleFromAlignment(dynamicAction.DockAlignment, destination, dynamicAction.Bounds.Size).Location, dynamicAction.Bounds.Size);
		}

		private Rectangle GetButtonBounds(int actionIndex, int buttonIndex)
		{
			Rectangle actionBounds = GetActionBounds(actionIndex);
			Rectangle buttonBounds = actions[actionIndex].GetButtonBounds(buttonIndex);
			buttonBounds.Offset(actionBounds.Location);
			return buttonBounds;
		}

		private void UpdateTransparency(Point point)
		{
			for (int i = 0; i < actions.Count; i++)
			{
				float transparency = 0f;
				if (!point.IsEmpty)
				{
					Rectangle actionBounds = GetActionBounds(i);
					if (actionBounds.Contains(point) || draggedActionIndex == i)
					{
						transparency = 1f;
					}
					else
					{
						Rectangle viewPortRectangle = base.ParentView.ViewPortRectangle;
						double num = DesignerGeometryHelper.DistanceFromPointToRectangle(point, actionBounds);
						transparency = ((!(num > (double)(viewPortRectangle.Width / 3)) && !(num > (double)(viewPortRectangle.Height / 3))) ? 1f : 0.3f);
					}
				}
				actions[i].Transparency = transparency;
			}
		}

		private void SetDraggedButton(int actionIndex, int buttonIndex)
		{
			if (draggedActionIndex == actionIndex && draggedButtonIndex == buttonIndex)
			{
				return;
			}
			WorkflowView workflowView = base.ParentView;
			if (draggedActionIndex >= 0 && draggedButtonIndex >= 0)
			{
				if (draggedActionIndex < actions.Count)
				{
					actions[draggedActionIndex].Buttons[draggedButtonIndex].State = ActionButton.States.Highlight;
				}
				draggedActionIndex = -1;
				draggedButtonIndex = -1;
				workflowView.Capture = false;
				UpdateTransparency(workflowView.PointToClient(Control.MousePosition));
			}
			draggedActionIndex = actionIndex;
			draggedButtonIndex = buttonIndex;
			if (draggedActionIndex >= 0 && draggedButtonIndex >= 0)
			{
				workflowView.Capture = true;
			}
		}
	}
	internal class DynamicAction : IDisposable
	{
		internal enum ButtonSizes
		{
			Small,
			SmallMedium,
			Medium,
			MediumLarge,
			Large
		}

		internal enum ActionTypes
		{
			Standard = 1,
			TwoState
		}

		private static float DefaultTransparency = 0f;

		private static Size[] Sizes = new Size[5]
		{
			new Size(20, 20),
			new Size(24, 24),
			new Size(28, 28),
			new Size(32, 32),
			new Size(36, 36)
		};

		private static Size[] Margins = new Size[5]
		{
			new Size(1, 1),
			new Size(1, 1),
			new Size(2, 2),
			new Size(2, 2),
			new Size(3, 3)
		};

		private ItemList<ActionButton> buttons;

		private ButtonSizes buttonSizeType = ButtonSizes.Medium;

		private DesignerContentAlignment dockAlignment = DesignerContentAlignment.TopLeft;

		private float minimumTransparency = DefaultTransparency;

		private float transparency = DefaultTransparency;

		private ActionTypes actionType = ActionTypes.Standard;

		private Size borderSize = new Size(2, 2);

		private Size dockMargin = Sizes[2];

		private Size buttonSize = Sizes[2];

		private Size margin = Margins[2];

		internal IList<ActionButton> Buttons => buttons;

		internal Size DockMargin
		{
			get
			{
				return dockMargin;
			}
			set
			{
				dockMargin = value;
			}
		}

		internal ActionTypes ActionType => actionType;

		internal ButtonSizes ButtonSize
		{
			get
			{
				return buttonSizeType;
			}
			set
			{
				if (buttonSizeType != value)
				{
					buttonSizeType = value;
					buttonSize = Sizes[(int)buttonSizeType];
					margin = Margins[(int)buttonSizeType];
				}
			}
		}

		internal DesignerContentAlignment DockAlignment
		{
			get
			{
				return dockAlignment;
			}
			set
			{
				if (dockAlignment != value)
				{
					dockAlignment = value;
				}
			}
		}

		internal float Transparency
		{
			get
			{
				return transparency;
			}
			set
			{
				if (transparency != value)
				{
					transparency = Math.Max(DefaultTransparency, value);
				}
			}
		}

		internal Rectangle Bounds
		{
			get
			{
				Size empty = Size.Empty;
				int num = Math.Max(1, buttons.Count);
				empty.Width = 2 * borderSize.Width + num * buttonSize.Width + (num + 1) * margin.Width;
				empty.Height = 2 * borderSize.Height + buttonSize.Height + 2 * margin.Height;
				return new Rectangle(Point.Empty, empty);
			}
		}

		internal DynamicAction()
		{
			buttons = new ItemList<ActionButton>(this);
		}

		~DynamicAction()
		{
			Dispose(disposing: false);
		}

		public void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool disposing)
		{
			foreach (ActionButton button in buttons)
			{
				((IDisposable)button).Dispose();
			}
			buttons.Clear();
		}

		internal void Draw(Graphics graphics)
		{
			if (transparency == 0f || buttons.Count == 0)
			{
				return;
			}
			ActivityDesignerPaint.Draw3DButton(graphics, null, Bounds, transparency - 0.1f, ButtonState.Normal);
			for (int i = 0; i < buttons.Count; i++)
			{
				Rectangle buttonBounds = GetButtonBounds(i);
				ActionButton actionButton = buttons[i];
				if (actionButton.StateImages.Length == 1)
				{
					Image image = actionButton.StateImages[0];
					if (actionButton.State == ActionButton.States.Normal || actionButton.State == ActionButton.States.Disabled)
					{
						buttonBounds.Inflate(-2, -2);
						ActivityDesignerPaint.DrawImage(graphics, image, buttonBounds, new Rectangle(Point.Empty, image.Size), DesignerContentAlignment.Fill, transparency, actionButton.State == ActionButton.States.Disabled);
					}
					else
					{
						ButtonState buttonState = ((actionButton.State != ActionButton.States.Highlight) ? ButtonState.Pushed : ButtonState.Normal);
						ActivityDesignerPaint.Draw3DButton(graphics, image, buttonBounds, transparency, buttonState);
					}
				}
				else
				{
					Image image2 = buttons[i].StateImages[(int)buttons[i].State];
					buttonBounds.Inflate(-2, -2);
					ActivityDesignerPaint.DrawImage(graphics, image2, buttonBounds, new Rectangle(Point.Empty, image2.Size), DesignerContentAlignment.Fill, transparency, grayscale: false);
				}
			}
		}

		internal Rectangle GetButtonBounds(int buttonIndex)
		{
			if (buttonIndex < 0 || buttonIndex >= buttons.Count)
			{
				throw new ArgumentOutOfRangeException("buttonIndex");
			}
			Rectangle empty = Rectangle.Empty;
			empty.X = borderSize.Width + buttonIndex * buttonSize.Width + (buttonIndex + 1) * margin.Width;
			empty.Y = borderSize.Height + margin.Height;
			empty.Size = buttonSize;
			return empty;
		}
	}
	internal sealed class ActionButton : IDisposable
	{
		internal enum States
		{
			Normal,
			Highlight,
			Pressed,
			Disabled
		}

		private Image[] stateImages;

		private string description = string.Empty;

		private States buttonState;

		internal Image[] StateImages
		{
			get
			{
				return stateImages;
			}
			set
			{
				if (value == null)
				{
					throw new ArgumentNullException("value");
				}
				if (value.Length != 1 && value.Length != 4)
				{
					throw new ArgumentException(SR.GetString("Error_InvalidStateImages"), "value");
				}
				stateImages = value;
				Image[] array = stateImages;
				foreach (Image image in array)
				{
					if (image is Bitmap bitmap)
					{
						bitmap.MakeTransparent(AmbientTheme.TransparentColor);
					}
				}
			}
		}

		internal States State
		{
			get
			{
				return buttonState;
			}
			set
			{
				if (buttonState != value)
				{
					buttonState = value;
					if (this.StateChanged != null)
					{
						this.StateChanged(this, EventArgs.Empty);
					}
				}
			}
		}

		internal string Description
		{
			get
			{
				return description;
			}
			set
			{
				description = value;
			}
		}

		internal event EventHandler StateChanged;

		internal ActionButton(Image[] stateImages)
		{
			StateImages = stateImages;
		}

		void IDisposable.Dispose()
		{
		}
	}
	internal sealed class ZoomingMessageFilter : WorkflowDesignerMessageFilter
	{
		private enum ZoomState
		{
			In,
			Out
		}

		private static int ZoomIncrement = 20;

		private static Cursor ZoomInCursor = new Cursor(typeof(WorkflowView), "Resources.zoomin.cur");

		private static Cursor ZoomOutCursor = new Cursor(typeof(WorkflowView), "Resources.zoomout.cur");

		private static Cursor ZoomDisabledCursor = new Cursor(typeof(WorkflowView), "Resources.zoomno.cur");

		private ZoomState initialState;

		private ZoomState currentState;

		private DragRectangleMessageFilter fastZoomingMessageFilter;

		private CommandID previousCommand;

		private Cursor previousCursor = Cursors.Default;

		internal bool ZoomingIn => initialState == ZoomState.In;

		private bool CanContinueZooming
		{
			get
			{
				WorkflowView workflowView = base.ParentView;
				if (currentState != ZoomState.Out || workflowView.Zoom <= 10)
				{
					if (currentState == ZoomState.In)
					{
						return workflowView.Zoom < 400;
					}
					return false;
				}
				return true;
			}
		}

		internal ZoomingMessageFilter(bool initiateZoomIn)
		{
			currentState = (initialState = ((!initiateZoomIn) ? ZoomState.Out : ZoomState.In));
		}

		protected override void Initialize(WorkflowView parentView)
		{
			base.Initialize(parentView);
			StoreUIState();
			RefreshUIState();
		}

		protected override void Dispose(bool disposing)
		{
			try
			{
				if (fastZoomingMessageFilter != null)
				{
					fastZoomingMessageFilter.DragComplete -= OnZoomRectComplete;
					base.ParentView.RemoveDesignerMessageFilter(fastZoomingMessageFilter);
					fastZoomingMessageFilter.Dispose();
					fastZoomingMessageFilter = null;
				}
				RestoreUIState();
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		protected override bool OnShowContextMenu(Point menuPoint)
		{
			IMenuCommandService menuCommandService = (IMenuCommandService)GetService(typeof(IMenuCommandService));
			if (menuCommandService != null)
			{
				menuCommandService.ShowContextMenu(WorkflowMenuCommands.ZoomMenu, menuPoint.X, menuPoint.Y);
				RefreshUIState();
			}
			return true;
		}

		protected override bool OnMouseEnter(MouseEventArgs eventArgs)
		{
			RefreshUIState();
			return true;
		}

		protected override bool OnMouseDown(MouseEventArgs eventArgs)
		{
			if (eventArgs.Button == MouseButtons.Left)
			{
				currentState = (((Control.ModifierKeys & Keys.Shift) == 0) ? initialState : ((initialState == ZoomState.In) ? ZoomState.Out : ZoomState.In));
				bool flag = fastZoomingMessageFilter == null;
				RefreshUIState();
				if (flag && fastZoomingMessageFilter != null)
				{
					((IWorkflowDesignerMessageSink)fastZoomingMessageFilter).OnMouseDown(eventArgs);
				}
			}
			return true;
		}

		protected override bool OnMouseMove(MouseEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnMouseDoubleClick(MouseEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnMouseLeave()
		{
			return true;
		}

		protected override bool OnMouseCaptureChanged()
		{
			return true;
		}

		protected override bool OnMouseUp(MouseEventArgs eventArgs)
		{
			if (eventArgs.Button == MouseButtons.Left && CanContinueZooming)
			{
				WorkflowView workflowView = base.ParentView;
				int zoomLevel = workflowView.Zoom + ((currentState == ZoomState.In) ? ZoomIncrement : (-1 * ZoomIncrement));
				Point center = new Point((currentState == ZoomState.In) ? eventArgs.X : (workflowView.ViewPortSize.Width / 2), (currentState == ZoomState.In) ? eventArgs.Y : (workflowView.ViewPortSize.Height / 2));
				UpdateZoom(zoomLevel, center);
			}
			return true;
		}

		protected override bool OnKeyDown(KeyEventArgs eventArgs)
		{
			if (eventArgs.KeyValue == 27)
			{
				base.ParentView.RemoveDesignerMessageFilter(this);
			}
			else
			{
				currentState = (((eventArgs.Modifiers & Keys.Shift) == 0) ? initialState : ((initialState == ZoomState.In) ? ZoomState.Out : ZoomState.In));
				RefreshUIState();
			}
			return true;
		}

		protected override bool OnKeyUp(KeyEventArgs eventArgs)
		{
			currentState = (((eventArgs.Modifiers & Keys.Shift) == 0) ? initialState : ((initialState == ZoomState.In) ? ZoomState.Out : ZoomState.In));
			RefreshUIState();
			return true;
		}

		protected override bool OnDragEnter(DragEventArgs eventArgs)
		{
			base.ParentView.RemoveDesignerMessageFilter(this);
			return false;
		}

		private void OnZoomRectComplete(object sender, EventArgs e)
		{
			if (CanContinueZooming && currentState == ZoomState.In && fastZoomingMessageFilter != null && !fastZoomingMessageFilter.DragRectangle.IsEmpty)
			{
				Rectangle dragRectangle = fastZoomingMessageFilter.DragRectangle;
				WorkflowView workflowView = base.ParentView;
				Point center = workflowView.LogicalPointToClient(new Point(dragRectangle.Location.X + dragRectangle.Width / 2, dragRectangle.Location.Y + dragRectangle.Height / 2));
				int zoomLevel = (int)(Math.Min((float)workflowView.ViewPortSize.Width / (float)dragRectangle.Width, (float)workflowView.ViewPortSize.Height / (float)dragRectangle.Height) * 100f);
				UpdateZoom(zoomLevel, center);
			}
		}

		private void UpdateZoom(int zoomLevel, Point center)
		{
			PointF empty = PointF.Empty;
			WorkflowView workflowView = base.ParentView;
			Point point = workflowView.LogicalPointToClient(Point.Empty);
			center.X -= point.X;
			center.Y -= point.Y;
			empty = new PointF((float)center.X / (float)workflowView.HScrollBar.Maximum, (float)center.Y / (float)workflowView.VScrollBar.Maximum);
			workflowView.Zoom = Math.Min(Math.Max(zoomLevel, 10), 400);
			Point point2 = new Point((int)((float)workflowView.HScrollBar.Maximum * empty.X), (int)((float)workflowView.VScrollBar.Maximum * empty.Y));
			workflowView.ScrollPosition = new Point(point2.X - workflowView.HScrollBar.LargeChange / 2, point2.Y - workflowView.VScrollBar.LargeChange / 2);
			currentState = (((Control.ModifierKeys & Keys.Shift) == 0) ? initialState : ((initialState == ZoomState.In) ? ZoomState.Out : ZoomState.In));
			RefreshUIState();
		}

		private void StoreUIState()
		{
			if (GetService(typeof(IMenuCommandService)) is IMenuCommandService menuCommandService)
			{
				CommandID[] navigationToolCommandIds = CommandSet.NavigationToolCommandIds;
				foreach (CommandID commandID in navigationToolCommandIds)
				{
					MenuCommand menuCommand = menuCommandService.FindCommand(commandID);
					if (menuCommand != null && menuCommand.Enabled && menuCommand.Checked)
					{
						previousCommand = menuCommand.CommandID;
						break;
					}
				}
			}
			previousCursor = base.ParentView.Cursor;
		}

		private void RestoreUIState()
		{
			if (GetService(typeof(IMenuCommandService)) is IMenuCommandService menuCommandService)
			{
				CommandID[] navigationToolCommandIds = CommandSet.NavigationToolCommandIds;
				foreach (CommandID commandID in navigationToolCommandIds)
				{
					MenuCommand menuCommand = menuCommandService.FindCommand(commandID);
					if (menuCommand != null && menuCommand.Enabled)
					{
						menuCommand.Checked = menuCommand.CommandID == previousCommand;
					}
				}
			}
			base.ParentView.Cursor = previousCursor;
		}

		private void RefreshUIState()
		{
			WorkflowView workflowView = base.ParentView;
			if (!CanContinueZooming)
			{
				workflowView.Cursor = ZoomDisabledCursor;
			}
			else if (currentState == ZoomState.In)
			{
				workflowView.Cursor = ZoomInCursor;
			}
			else
			{
				workflowView.Cursor = ZoomOutCursor;
			}
			if (fastZoomingMessageFilter == null && CanContinueZooming && currentState == ZoomState.In)
			{
				fastZoomingMessageFilter = new DragRectangleMessageFilter();
				fastZoomingMessageFilter.DragComplete += OnZoomRectComplete;
				workflowView.AddDesignerMessageFilter(fastZoomingMessageFilter);
			}
			else if (fastZoomingMessageFilter != null && (!CanContinueZooming || currentState != 0))
			{
				fastZoomingMessageFilter.DragComplete -= OnZoomRectComplete;
				workflowView.RemoveDesignerMessageFilter(fastZoomingMessageFilter);
				fastZoomingMessageFilter = null;
			}
			if (!(GetService(typeof(IMenuCommandService)) is IMenuCommandService menuCommandService))
			{
				return;
			}
			CommandID[] navigationToolCommandIds = CommandSet.NavigationToolCommandIds;
			foreach (CommandID commandID in navigationToolCommandIds)
			{
				MenuCommand menuCommand = menuCommandService.FindCommand(commandID);
				if (menuCommand != null && menuCommand.Enabled)
				{
					menuCommand.Checked = menuCommand.CommandID == ((initialState == ZoomState.In) ? WorkflowMenuCommands.ZoomIn : WorkflowMenuCommands.ZoomOut);
				}
			}
		}
	}
	internal sealed class ReadonlyMessageFilter : WorkflowDesignerMessageFilter
	{
		protected override bool OnMouseDown(MouseEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnMouseMove(MouseEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnMouseUp(MouseEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnMouseDoubleClick(MouseEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnMouseEnter(MouseEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnMouseHover(MouseEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnMouseLeave()
		{
			return true;
		}

		protected override bool OnMouseWheel(MouseEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnMouseCaptureChanged()
		{
			return true;
		}

		protected override bool OnDragEnter(DragEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnDragOver(DragEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnDragLeave()
		{
			return true;
		}

		protected override bool OnDragDrop(DragEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnGiveFeedback(GiveFeedbackEventArgs gfbevent)
		{
			return true;
		}

		protected override bool OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent)
		{
			return true;
		}

		protected override bool OnKeyDown(KeyEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnKeyUp(KeyEventArgs eventArgs)
		{
			return true;
		}

		protected override bool OnShowContextMenu(Point menuPoint)
		{
			return true;
		}
	}
	internal sealed class ConnectionManager : WorkflowDesignerMessageFilter, IDesignerGlyphProvider
	{
		internal static Cursor SnappedConnectionCursor = new Cursor(typeof(WorkflowView), "Resources.Connector.cur");

		internal static Cursor NewConnectorCursor = new Cursor(typeof(WorkflowView), "Resources.ConnectorDraw.cur");

		private const int HighlightDistance = 20;

		private const int SnapHighlightDistance = 20;

		private ConnectionPoint[] connectablePoints;

		private ConnectionPoint snappedConnectionPoint;

		private ConnectorEditor connectorEditor;

		private Point? initialDragPoint;

		private HitTestInfo dragPointHitInfo;

		private bool EditingInProgress => connectorEditor != null;

		private ConnectionPoint[] ConnectablePoints
		{
			get
			{
				return connectablePoints;
			}
			set
			{
				WorkflowView workflowView = base.ParentView;
				if (workflowView == null)
				{
					return;
				}
				if (connectablePoints != null)
				{
					ConnectionPoint[] array = connectablePoints;
					foreach (ConnectionPoint connectionPoint in array)
					{
						workflowView.InvalidateLogicalRectangle(connectionPoint.Bounds);
					}
				}
				connectablePoints = value;
				if (connectablePoints != null)
				{
					ConnectionPoint[] array2 = connectablePoints;
					foreach (ConnectionPoint connectionPoint2 in array2)
					{
						workflowView.InvalidateLogicalRectangle(connectionPoint2.Bounds);
					}
				}
			}
		}

		internal ConnectionPoint SnappedConnectionPoint => snappedConnectionPoint;

		protected override void Initialize(WorkflowView parentView)
		{
			base.Initialize(parentView);
			if (GetService(typeof(IServiceContainer)) is IServiceContainer serviceContainer)
			{
				serviceContainer.RemoveService(typeof(ConnectionManager));
				serviceContainer.AddService(typeof(ConnectionManager), this);
			}
			if (GetService(typeof(IDesignerGlyphProviderService)) is IDesignerGlyphProviderService designerGlyphProviderService)
			{
				designerGlyphProviderService.AddGlyphProvider(this);
			}
		}

		protected override void Dispose(bool disposing)
		{
			try
			{
				if (disposing)
				{
					if (GetService(typeof(IServiceContainer)) is IServiceContainer serviceContainer)
					{
						serviceContainer.RemoveService(typeof(ConnectionManager));
					}
					if (GetService(typeof(IDesignerGlyphProviderService)) is IDesignerGlyphProviderService designerGlyphProviderService)
					{
						designerGlyphProviderService.RemoveGlyphProvider(this);
					}
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		protected override bool OnMouseDown(MouseEventArgs eventArgs)
		{
			Point value = Point.Empty;
			if ((eventArgs.Button & MouseButtons.Left) == MouseButtons.Left)
			{
				WorkflowView workflowView = base.ParentView;
				Point clientPoint = new Point(eventArgs.X, eventArgs.Y);
				if (workflowView != null && workflowView.IsClientPointInActiveLayout(clientPoint))
				{
					Point point = workflowView.ClientPointToLogical(clientPoint);
					if (CanBeginEditing(point, base.MessageHitTestContext))
					{
						initialDragPoint = point;
						dragPointHitInfo = base.MessageHitTestContext;
					}
					value = point;
				}
			}
			else
			{
				EndEditing(null);
			}
			bool hasValue = initialDragPoint.HasValue;
			return hasValue | UpdateCursor(value);
		}

		protected override bool OnMouseMove(MouseEventArgs eventArgs)
		{
			Point value = Point.Empty;
			WorkflowView workflowView = base.ParentView;
			Point clientPoint = new Point(eventArgs.X, eventArgs.Y);
			if (workflowView != null && workflowView.IsClientPointInActiveLayout(clientPoint))
			{
				Point point = workflowView.ClientPointToLogical(clientPoint);
				if ((eventArgs.Button & MouseButtons.Left) == MouseButtons.Left)
				{
					if (!EditingInProgress && initialDragPoint.HasValue && (Math.Abs(initialDragPoint.Value.X - point.X) > SystemInformation.DragSize.Width || Math.Abs(initialDragPoint.Value.Y - point.Y) > SystemInformation.DragSize.Height))
					{
						BeginEditing(GetConnectorEditor(initialDragPoint.Value, dragPointHitInfo), initialDragPoint.Value);
					}
					if (EditingInProgress)
					{
						ContinueEditing(point);
						if (SnappedConnectionPoint != null)
						{
							point = SnappedConnectionPoint.Location;
						}
					}
				}
				else
				{
					FreeformActivityDesigner connectorContainer = GetConnectorContainer(base.MessageHitTestContext.AssociatedDesigner);
					ConnectablePoints = ((connectorContainer != null && connectorContainer.EnableUserDrawnConnectors) ? GetHighlightableConnectionPoints(point, base.MessageHitTestContext.AssociatedDesigner) : null);
				}
				value = point;
			}
			bool editingInProgress = EditingInProgress;
			return editingInProgress | UpdateCursor(value);
		}

		protected override bool OnMouseEnter(MouseEventArgs eventArgs)
		{
			Point value = Point.Empty;
			Point clientPoint = new Point(eventArgs.X, eventArgs.Y);
			WorkflowView workflowView = base.ParentView;
			if (workflowView != null && workflowView.IsClientPointInActiveLayout(clientPoint) && !EditingInProgress)
			{
				FreeformActivityDesigner connectorContainer = GetConnectorContainer(base.MessageHitTestContext.AssociatedDesigner);
				if (connectorContainer != null && connectorContainer.EnableUserDrawnConnectors)
				{
					Point point = workflowView.ClientPointToLogical(clientPoint);
					ConnectablePoints = GetHighlightableConnectionPoints(point, base.MessageHitTestContext.AssociatedDesigner);
					value = point;
				}
			}
			return UpdateCursor(value);
		}

		protected override bool OnMouseLeave()
		{
			EndEditing(null);
			UpdateCursor(null);
			return false;
		}

		protected override bool OnMouseCaptureChanged()
		{
			EndEditing(null);
			UpdateCursor(null);
			return false;
		}

		protected override bool OnMouseUp(MouseEventArgs eventArgs)
		{
			Point value = Point.Empty;
			bool editingInProgress = EditingInProgress;
			if ((eventArgs.Button & MouseButtons.Left) == MouseButtons.Left)
			{
				WorkflowView workflowView = base.ParentView;
				Point clientPoint = new Point(eventArgs.X, eventArgs.Y);
				if (workflowView != null && workflowView.IsClientPointInActiveLayout(clientPoint))
				{
					Point point = workflowView.ClientPointToLogical(clientPoint);
					if (EditingInProgress)
					{
						EndEditing(point);
					}
					value = point;
				}
			}
			EndEditing(null);
			return editingInProgress | UpdateCursor(value);
		}

		protected override bool OnKeyDown(KeyEventArgs eventArgs)
		{
			if (EditingInProgress && eventArgs.KeyValue == 27)
			{
				EndEditing(null);
				eventArgs.Handled = true;
			}
			return eventArgs.Handled;
		}

		protected override bool OnPaint(PaintEventArgs e, Rectangle viewPort, AmbientTheme ambientTheme)
		{
			Connector connector = null;
			ISelectionService selectionService = GetService(typeof(ISelectionService)) as ISelectionService;
			foreach (object selectedComponent in selectionService.GetSelectedComponents())
			{
				Connector connectorFromSelectedObject = Connector.GetConnectorFromSelectedObject(selectedComponent);
				if (connectorFromSelectedObject != null)
				{
					connectorFromSelectedObject.OnPaintSelected(new ActivityDesignerPaintEventArgs(e.Graphics, connectorFromSelectedObject.ParentDesigner.Bounds, viewPort, connectorFromSelectedObject.ParentDesigner.DesignerTheme), selectedComponent == selectionService.PrimarySelection, new Point[0]);
					if (selectedComponent == selectionService.PrimarySelection)
					{
						connector = connectorFromSelectedObject;
					}
				}
			}
			if (connector != null)
			{
				ConnectorEditor connectorEditor = new ConnectorEditor(connector);
				connectorEditor.OnPaint(new ActivityDesignerPaintEventArgs(e.Graphics, connector.ParentDesigner.Bounds, viewPort, connector.ParentDesigner.DesignerTheme), drawSelected: true, drawPrimarySelection: true);
			}
			if (EditingInProgress)
			{
				FreeformActivityDesigner freeformActivityDesigner = ((this.connectorEditor.EditedConnector.ParentDesigner != null) ? this.connectorEditor.EditedConnector.ParentDesigner : GetConnectorContainer(this.connectorEditor.EditedConnector.Source.AssociatedDesigner));
				this.connectorEditor.OnPaint(new ActivityDesignerPaintEventArgs(e.Graphics, freeformActivityDesigner.Bounds, viewPort, freeformActivityDesigner.DesignerTheme), drawSelected: false, drawPrimarySelection: false);
			}
			return false;
		}

		private ConnectorEditor GetConnectorEditor(Point editPoint, HitTestInfo messageContext)
		{
			Connector connector = null;
			if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				Connector connectorFromSelectedObject = Connector.GetConnectorFromSelectedObject(selectionService.PrimarySelection);
				if (connectorFromSelectedObject != null && connectorFromSelectedObject.ParentDesigner.EnableUserDrawnConnectors && new ConnectorEditor(connectorFromSelectedObject).HitTest(editPoint))
				{
					connector = connectorFromSelectedObject;
				}
			}
			if (connector == null && messageContext is ConnectionPointHitTestInfo { ConnectionPoint: not null } connectionPointHitTestInfo)
			{
				FreeformActivityDesigner connectorContainer = GetConnectorContainer(connectionPointHitTestInfo.AssociatedDesigner);
				if (connectorContainer != null && connectorContainer.EnableUserDrawnConnectors)
				{
					connector = connectorContainer.CreateConnector(connectionPointHitTestInfo.ConnectionPoint, connectionPointHitTestInfo.ConnectionPoint);
				}
			}
			if (connector == null)
			{
				return null;
			}
			return new ConnectorEditor(connector);
		}

		private bool CanBeginEditing(Point editPoint, HitTestInfo messageContext)
		{
			if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				Connector connectorFromSelectedObject = Connector.GetConnectorFromSelectedObject(selectionService.PrimarySelection);
				if (connectorFromSelectedObject != null && connectorFromSelectedObject.ParentDesigner.EnableUserDrawnConnectors && new ConnectorEditor(connectorFromSelectedObject).HitTest(editPoint))
				{
					return true;
				}
			}
			if (messageContext is ConnectionPointHitTestInfo { ConnectionPoint: not null } connectionPointHitTestInfo)
			{
				FreeformActivityDesigner connectorContainer = GetConnectorContainer(connectionPointHitTestInfo.AssociatedDesigner);
				if (connectorContainer != null && connectorContainer.EnableUserDrawnConnectors)
				{
					return true;
				}
			}
			return false;
		}

		private void BeginEditing(ConnectorEditor editableConnector, Point editPoint)
		{
			WorkflowView workflowView = base.ParentView;
			if (workflowView != null && editableConnector != null)
			{
				connectorEditor = editableConnector;
				workflowView.Capture = true;
				connectorEditor.OnBeginEditing(editPoint);
			}
		}

		private void ContinueEditing(Point editPoint)
		{
			if (EditingInProgress)
			{
				ConnectionPoint[] array = null;
				if (connectorEditor.EditedConectionPoint != null)
				{
					ConnectionPoint sourceConnectionPoint = ((connectorEditor.EditedConnector.Source == connectorEditor.EditedConectionPoint) ? connectorEditor.EditedConnector.Target : connectorEditor.EditedConnector.Source);
					array = GetSnappableConnectionPoints(editPoint, sourceConnectionPoint, connectorEditor.EditedConectionPoint, base.MessageHitTestContext.AssociatedDesigner, out snappedConnectionPoint);
				}
				ConnectablePoints = array;
				if (SnappedConnectionPoint != null)
				{
					editPoint = SnappedConnectionPoint.Location;
				}
				connectorEditor.OnContinueEditing(editPoint);
			}
		}

		private void EndEditing(Point? editPoint)
		{
			WorkflowView workflowView = base.ParentView;
			if (workflowView == null)
			{
				return;
			}
			if (EditingInProgress)
			{
				if (editPoint.HasValue)
				{
					ConnectionPoint[] array = null;
					if (connectorEditor.EditedConectionPoint != null)
					{
						ConnectionPoint sourceConnectionPoint = ((connectorEditor.EditedConnector.Source == connectorEditor.EditedConectionPoint) ? connectorEditor.EditedConnector.Target : connectorEditor.EditedConnector.Source);
						array = GetSnappableConnectionPoints(editPoint.Value, sourceConnectionPoint, connectorEditor.EditedConectionPoint, base.MessageHitTestContext.AssociatedDesigner, out snappedConnectionPoint);
					}
					if (SnappedConnectionPoint != null)
					{
						editPoint = SnappedConnectionPoint.Location;
					}
				}
				connectorEditor.OnEndEditing(editPoint.HasValue ? editPoint.Value : Point.Empty, editPoint.HasValue);
			}
			initialDragPoint = null;
			dragPointHitInfo = null;
			snappedConnectionPoint = null;
			ConnectablePoints = null;
			workflowView.Capture = false;
			connectorEditor = null;
		}

		private bool UpdateCursor(Point? cursorPoint)
		{
			Cursor cursor = Cursors.Default;
			if (cursorPoint.HasValue)
			{
				if (EditingInProgress)
				{
					cursor = this.connectorEditor.GetCursor(cursorPoint.Value);
				}
				if (SnappedConnectionPoint != null)
				{
					cursor = SnappedConnectionCursor;
				}
				else if (ConnectablePoints != null)
				{
					ConnectionPoint[] array = ConnectablePoints;
					foreach (ConnectionPoint connectionPoint in array)
					{
						if (connectionPoint.Bounds.Contains(cursorPoint.Value))
						{
							cursor = SnappedConnectionCursor;
							break;
						}
					}
					if (cursor == Cursors.Default && GetService(typeof(ISelectionService)) is ISelectionService selectionService)
					{
						Connector connectorFromSelectedObject = Connector.GetConnectorFromSelectedObject(selectionService.PrimarySelection);
						if (connectorFromSelectedObject != null && connectorFromSelectedObject.ParentDesigner.EnableUserDrawnConnectors)
						{
							ConnectorEditor connectorEditor = new ConnectorEditor(connectorFromSelectedObject);
							cursor = connectorEditor.GetCursor(cursorPoint.Value);
						}
					}
				}
			}
			WorkflowView workflowView = base.ParentView;
			if (workflowView != null && (cursor != Cursors.Default || workflowView.Cursor == SnappedConnectionCursor || workflowView.Cursor == NewConnectorCursor))
			{
				workflowView.Cursor = cursor;
			}
			return cursor != Cursors.Default;
		}

		internal static FreeformActivityDesigner GetConnectorContainer(ActivityDesigner associatedDesigner)
		{
			FreeformActivityDesigner result = null;
			if (associatedDesigner != null)
			{
				for (ActivityDesigner activityDesigner = associatedDesigner; activityDesigner != null; activityDesigner = activityDesigner.ParentDesigner)
				{
					if (activityDesigner is FreeformActivityDesigner)
					{
						result = activityDesigner as FreeformActivityDesigner;
					}
					else if (activityDesigner is InvokeWorkflowDesigner)
					{
						break;
					}
				}
			}
			return result;
		}

		private static ConnectionPoint[] GetSnappableConnectionPoints(Point currentPoint, ConnectionPoint sourceConnectionPoint, ConnectionPoint activeConnectionPoint, ActivityDesigner activityDesigner, out ConnectionPoint snappedConnectionPoint)
		{
			snappedConnectionPoint = null;
			List<ConnectionPoint> list = new List<ConnectionPoint>();
			FreeformActivityDesigner connectorContainer = GetConnectorContainer(activeConnectionPoint.AssociatedDesigner);
			if (connectorContainer != null)
			{
				FreeformActivityDesigner freeformActivityDesigner = activityDesigner as FreeformActivityDesigner;
				List<ActivityDesigner> list2 = new List<ActivityDesigner>();
				list2.Add(activityDesigner);
				if (freeformActivityDesigner != null)
				{
					list2.AddRange(freeformActivityDesigner.ContainedDesigners);
				}
				double num = 20.0;
				foreach (ActivityDesigner item in list2)
				{
					if (GetConnectorContainer(item) != connectorContainer)
					{
						continue;
					}
					bool flag = false;
					List<ConnectionPoint> list3 = new List<ConnectionPoint>();
					ReadOnlyCollection<ConnectionPoint> connectionPoints = item.GetConnectionPoints(DesignerEdges.All);
					foreach (ConnectionPoint item2 in connectionPoints)
					{
						if (item2.Equals(activeConnectionPoint) || !connectorContainer.CanConnectContainedDesigners(sourceConnectionPoint, item2))
						{
							continue;
						}
						list3.Add(item2);
						double num2 = DesignerGeometryHelper.DistanceFromPointToRectangle(currentPoint, item2.Bounds);
						if (num2 <= 20.0)
						{
							flag = true;
							if (num2 < num)
							{
								snappedConnectionPoint = item2;
								num = num2;
							}
						}
					}
					if (flag)
					{
						list.AddRange(list3);
					}
				}
				if (snappedConnectionPoint != null)
				{
					foreach (ConnectionPoint connectionPoint in snappedConnectionPoint.AssociatedDesigner.GetConnectionPoints(DesignerEdges.All))
					{
						if (!list.Contains(connectionPoint))
						{
							list.Add(connectionPoint);
						}
					}
				}
			}
			return list.ToArray();
		}

		private static ConnectionPoint[] GetHighlightableConnectionPoints(Point currentPoint, ActivityDesigner activityDesigner)
		{
			List<ConnectionPoint> list = new List<ConnectionPoint>();
			List<ActivityDesigner> list2 = new List<ActivityDesigner>();
			if (activityDesigner is FreeformActivityDesigner freeformActivityDesigner)
			{
				list2.AddRange(freeformActivityDesigner.ContainedDesigners);
			}
			list2.Add(activityDesigner);
			foreach (ActivityDesigner item in list2)
			{
				bool flag = item.Bounds.Contains(currentPoint);
				ReadOnlyCollection<ConnectionPoint> connectionPoints = item.GetConnectionPoints(DesignerEdges.All);
				if (!flag)
				{
					foreach (ConnectionPoint item2 in connectionPoints)
					{
						if (item2.Bounds.Contains(currentPoint))
						{
							flag = true;
							break;
						}
					}
				}
				if (flag)
				{
					list.AddRange(connectionPoints);
				}
			}
			return list.ToArray();
		}

		ActivityDesignerGlyphCollection IDesignerGlyphProvider.GetGlyphs(ActivityDesigner activityDesigner)
		{
			ActivityDesignerGlyphCollection activityDesignerGlyphCollection = new ActivityDesignerGlyphCollection();
			ConnectionPoint[] array = ConnectablePoints;
			if (array != null)
			{
				ConnectionPoint[] array2 = array;
				foreach (ConnectionPoint connectionPoint in array2)
				{
					if (activityDesigner == connectionPoint.AssociatedDesigner)
					{
						activityDesignerGlyphCollection.Add(new ConnectionPointGlyph(connectionPoint));
					}
				}
			}
			return activityDesignerGlyphCollection;
		}
	}
	internal sealed class FreeFormDragDropManager : DragDropManager
	{
		private static Cursor DragMoveCursor = new Cursor(typeof(WorkflowView), "Resources.DragMoveCursor.cur");

		private static Cursor DragCopyCursor = new Cursor(typeof(WorkflowView), "Resources.DragCopyCursor.cur");

		private static Cursor MoveCursor = new Cursor(typeof(WorkflowView), "Resources.MoveCursor.cur");

		private List<Image> draggedDesignerImages;

		private Cursor previousCursor = Cursors.Default;

		private Point movedDesignerImagePoint = Point.Empty;

		protected override bool OnDragEnter(DragEventArgs eventArgs)
		{
			bool result = base.OnDragEnter(eventArgs);
			if (draggedDesignerImages == null)
			{
				WorkflowView workflowView = base.ParentView;
				Point clientPoint = workflowView.PointToClient(new Point(eventArgs.X, eventArgs.Y));
				Point point = workflowView.ScreenPointToLogical(new Point(eventArgs.X, eventArgs.Y));
				if (workflowView.IsClientPointInActiveLayout(clientPoint))
				{
					movedDesignerImagePoint = point;
				}
				else
				{
					movedDesignerImagePoint = base.DragInitiationPoint;
				}
			}
			return result;
		}

		protected override bool OnDragOver(DragEventArgs eventArgs)
		{
			if (draggedDesignerImages != null)
			{
				Point[] designerLocations = GetDesignerLocations(base.DragInitiationPoint, movedDesignerImagePoint, base.DraggedActivities);
				InvalidateDraggedImages(designerLocations);
			}
			bool result = base.OnDragOver(eventArgs);
			if (draggedDesignerImages != null)
			{
				WorkflowView workflowView = base.ParentView;
				Point clientPoint = workflowView.PointToClient(new Point(eventArgs.X, eventArgs.Y));
				Point point = workflowView.ScreenPointToLogical(new Point(eventArgs.X, eventArgs.Y));
				if (workflowView.IsClientPointInActiveLayout(clientPoint))
				{
					movedDesignerImagePoint = point;
				}
				else
				{
					movedDesignerImagePoint = base.DragInitiationPoint;
				}
				Point[] designerLocations2 = GetDesignerLocations(base.DragInitiationPoint, movedDesignerImagePoint, base.DraggedActivities);
				InvalidateDraggedImages(designerLocations2);
			}
			return result;
		}

		protected override bool OnGiveFeedback(GiveFeedbackEventArgs gfbevent)
		{
			base.OnGiveFeedback(gfbevent);
			if (draggedDesignerImages != null)
			{
				gfbevent.UseDefaultCursors = false;
				if ((gfbevent.Effect & DragDropEffects.Move) == DragDropEffects.Move)
				{
					Cursor.Current = DragMoveCursor;
				}
				else if ((gfbevent.Effect & DragDropEffects.Copy) == DragDropEffects.Copy)
				{
					Cursor.Current = DragCopyCursor;
				}
				else
				{
					Cursor.Current = Cursors.No;
				}
				return true;
			}
			return false;
		}

		protected override bool OnMouseMove(MouseEventArgs eventArgs)
		{
			bool result = base.OnMouseMove(eventArgs);
			if (eventArgs.Button == MouseButtons.None)
			{
				bool flag = false;
				flag |= base.MessageHitTestContext != null && base.MessageHitTestContext.AssociatedDesigner != null && ActivityDesigner.GetParentDesigner(base.MessageHitTestContext.AssociatedDesigner.Activity) is FreeformActivityDesigner && (base.MessageHitTestContext.HitLocation & HitTestLocations.ActionArea) == 0;
				UpdateCursor(flag);
			}
			return result;
		}

		protected override bool OnMouseLeave()
		{
			UpdateCursor(showMoveCursor: false);
			return false;
		}

		protected override bool OnScroll(ScrollBar sender, int value)
		{
			if (draggedDesignerImages != null)
			{
				Point[] designerLocations = GetDesignerLocations(base.DragInitiationPoint, movedDesignerImagePoint, base.DraggedActivities);
				InvalidateDraggedImages(designerLocations);
			}
			bool result = base.OnScroll(sender, value);
			if (draggedDesignerImages != null)
			{
				WorkflowView workflowView = base.ParentView;
				Point clientPoint = workflowView.PointToClient(Control.MousePosition);
				Point point = workflowView.ScreenPointToLogical(Control.MousePosition);
				if (workflowView.IsClientPointInActiveLayout(clientPoint))
				{
					movedDesignerImagePoint = point;
				}
				else
				{
					movedDesignerImagePoint = base.DragInitiationPoint;
				}
				Point[] designerLocations2 = GetDesignerLocations(base.DragInitiationPoint, movedDesignerImagePoint, base.DraggedActivities);
				InvalidateDraggedImages(designerLocations2);
			}
			return result;
		}

		protected override bool OnPaintWorkflowAdornments(PaintEventArgs eventArgs, Rectangle viewPort, AmbientTheme ambientTheme)
		{
			bool result = false;
			if (draggedDesignerImages == null || draggedDesignerImages.Count == 0 || !(base.DropTargetDesigner is FreeformActivityDesigner))
			{
				result = base.OnPaintWorkflowAdornments(eventArgs, viewPort, ambientTheme);
			}
			return result;
		}

		protected override bool OnPaint(PaintEventArgs eventArgs, Rectangle viewPort, AmbientTheme ambientTheme)
		{
			bool result = false;
			if (draggedDesignerImages != null && base.DropTargetDesigner is FreeformActivityDesigner)
			{
				using Region clip2 = new Region(ActivityDesignerPaint.GetDesignerPath(base.ParentView.RootDesigner, enableRoundedCorners: false));
				Region clip = eventArgs.Graphics.Clip;
				eventArgs.Graphics.Clip = clip2;
				Point[] designerLocations = GetDesignerLocations(base.DragInitiationPoint, movedDesignerImagePoint, base.DraggedActivities);
				for (int i = 0; i < draggedDesignerImages.Count; i++)
				{
					Size size = draggedDesignerImages[i].Size;
					ActivityDesignerPaint.DrawImage(eventArgs.Graphics, draggedDesignerImages[i], new Rectangle(new Point(designerLocations[i].X - 2 * ambientTheme.Margin.Width, designerLocations[i].Y - 2 * ambientTheme.Margin.Height), size), new Rectangle(Point.Empty, size), DesignerContentAlignment.Fill, 0.4f, grayscale: false);
				}
				eventArgs.Graphics.Clip = clip;
			}
			else
			{
				result = base.OnPaint(eventArgs, viewPort, ambientTheme);
			}
			return result;
		}

		protected override void CreateDragFeedbackImages(IList<Activity> draggedActivities)
		{
			base.CreateDragFeedbackImages(draggedActivities);
			List<Image> list = new List<Image>();
			using (Graphics compatibleGraphics = base.ParentView.CreateGraphics())
			{
				foreach (Activity draggedActivity in draggedActivities)
				{
					ActivityDesigner activityDesigner = ActivityDesigner.GetDesigner(draggedActivity);
					if (activityDesigner == null)
					{
						activityDesigner = ActivityDesigner.CreateDesigner(base.ParentView, draggedActivity);
					}
					list.Add(activityDesigner.GetPreviewImage(compatibleGraphics));
				}
			}
			base.ParentView.InvalidateClientRectangle(Rectangle.Empty);
			draggedDesignerImages = list;
		}

		protected override void DestroyDragFeedbackImages()
		{
			base.DestroyDragFeedbackImages();
			if (draggedDesignerImages == null)
			{
				return;
			}
			foreach (Bitmap draggedDesignerImage in draggedDesignerImages)
			{
				draggedDesignerImage.Dispose();
			}
			draggedDesignerImages = null;
			base.ParentView.InvalidateClientRectangle(Rectangle.Empty);
		}

		private void InvalidateDraggedImages(Point[] locations)
		{
			if (draggedDesignerImages != null && locations.Length == draggedDesignerImages.Count)
			{
				AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
				WorkflowView workflowView = base.ParentView;
				for (int i = 0; i < draggedDesignerImages.Count; i++)
				{
					Rectangle logicalRectangle = new Rectangle(locations[i], draggedDesignerImages[i].Size);
					logicalRectangle.Inflate(2 * ambientTheme.Margin.Width, 2 * ambientTheme.Margin.Height);
					workflowView.InvalidateLogicalRectangle(logicalRectangle);
				}
			}
		}

		internal static Point[] GetDesignerLocations(Point startPoint, Point endPoint, ICollection<Activity> activitiesToMove)
		{
			List<Point> list = new List<Point>();
			foreach (Activity item in activitiesToMove)
			{
				Point location = endPoint;
				ActivityDesigner designer = ActivityDesigner.GetDesigner(item);
				if (designer != null && !startPoint.IsEmpty)
				{
					Size size = new Size(endPoint.X - startPoint.X, endPoint.Y - startPoint.Y);
					location = new Point(designer.Location.X + size.Width, designer.Location.Y + size.Height);
				}
				location = DesignerHelpers.SnapToGrid(location);
				list.Add(location);
			}
			return list.ToArray();
		}

		private void UpdateCursor(bool showMoveCursor)
		{
			if (showMoveCursor)
			{
				if (base.ParentView.Cursor != MoveCursor && base.ParentView.Cursor == Cursors.Default)
				{
					previousCursor = base.ParentView.Cursor;
					base.ParentView.Cursor = MoveCursor;
				}
			}
			else
			{
				base.ParentView.Cursor = previousCursor;
			}
		}
	}
	internal sealed class ResizingMessageFilter : WorkflowDesignerMessageFilter
	{
		private DesignerTransaction designerTransaction;

		private ActivityDesigner designerToResize;

		private DesignerEdges designerSizingEdge;

		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
		}

		protected override bool OnMouseDown(MouseEventArgs eventArgs)
		{
			if (eventArgs.Button == MouseButtons.Left)
			{
				WorkflowView workflowView = base.ParentView;
				if (workflowView == null)
				{
					throw new InvalidOperationException(DR.GetString("WorkflowViewNull"));
				}
				Point clientPoint = new Point(eventArgs.X, eventArgs.Y);
				Point point = workflowView.ClientPointToLogical(clientPoint);
				DesignerEdges sizingEdge = DesignerEdges.None;
				ActivityDesigner activityDesigner = GetDesignerToResize(point, out sizingEdge);
				if (activityDesigner != null && sizingEdge != 0 && CanResizeDesigner(activityDesigner))
				{
					SetResizableDesigner(activityDesigner, sizingEdge);
				}
			}
			return designerToResize != null;
		}

		protected override bool OnMouseMove(MouseEventArgs eventArgs)
		{
			WorkflowView workflowView = base.ParentView;
			if (workflowView == null)
			{
				throw new InvalidOperationException(DR.GetString("WorkflowViewNull"));
			}
			bool result = false;
			Point clientPoint = new Point(eventArgs.X, eventArgs.Y);
			Point point = workflowView.ClientPointToLogical(clientPoint);
			DesignerEdges sizingEdge = DesignerEdges.None;
			if (designerToResize != null)
			{
				sizingEdge = designerSizingEdge;
				UpdateDesignerSize(point, designerToResize, designerSizingEdge);
				result = true;
			}
			else if (eventArgs.Button == MouseButtons.None)
			{
				ActivityDesigner activityDesigner = GetDesignerToResize(point, out sizingEdge);
				if (activityDesigner != null && sizingEdge != 0 && CanResizeDesigner(activityDesigner))
				{
					result = true;
				}
			}
			UpdateCursor(sizingEdge);
			return result;
		}

		protected override bool OnMouseUp(MouseEventArgs eventArgs)
		{
			if (designerToResize != null && eventArgs.Button == MouseButtons.Left)
			{
				WorkflowView workflowView = base.ParentView;
				if (workflowView == null)
				{
					throw new InvalidOperationException(DR.GetString("WorkflowViewNull"));
				}
				UpdateDesignerSize(workflowView.ClientPointToLogical(new Point(eventArgs.X, eventArgs.Y)), designerToResize, designerSizingEdge);
			}
			SetResizableDesigner(null, DesignerEdges.None);
			return false;
		}

		protected override bool OnMouseLeave()
		{
			if (designerToResize != null)
			{
				SetResizableDesigner(null, DesignerEdges.None);
			}
			else
			{
				UpdateCursor(DesignerEdges.None);
			}
			return false;
		}

		protected override bool OnKeyDown(KeyEventArgs eventArgs)
		{
			if (eventArgs.KeyValue == 27 && designerToResize != null)
			{
				SetResizableDesigner(null, DesignerEdges.None);
				return true;
			}
			return false;
		}

		protected override bool OnMouseCaptureChanged()
		{
			if (designerToResize != null)
			{
				SetResizableDesigner(null, DesignerEdges.None);
			}
			return false;
		}

		private void UpdateCursor(DesignerEdges sizingEdge)
		{
			WorkflowView workflowView = base.ParentView;
			if (workflowView == null)
			{
				throw new InvalidOperationException(DR.GetString("WorkflowViewNull"));
			}
			Cursor cursor = workflowView.Cursor;
			if (((sizingEdge & DesignerEdges.Left) > DesignerEdges.None && (sizingEdge & DesignerEdges.Top) > DesignerEdges.None) || ((sizingEdge & DesignerEdges.Right) > DesignerEdges.None && (sizingEdge & DesignerEdges.Bottom) > DesignerEdges.None))
			{
				cursor = Cursors.SizeNWSE;
			}
			else if (((sizingEdge & DesignerEdges.Right) > DesignerEdges.None && (sizingEdge & DesignerEdges.Top) > DesignerEdges.None) || ((sizingEdge & DesignerEdges.Left) > DesignerEdges.None && (sizingEdge & DesignerEdges.Bottom) > DesignerEdges.None))
			{
				cursor = Cursors.SizeNESW;
			}
			else if ((sizingEdge & DesignerEdges.Top) > DesignerEdges.None || (sizingEdge & DesignerEdges.Bottom) > DesignerEdges.None)
			{
				cursor = Cursors.SizeNS;
			}
			else if ((sizingEdge & DesignerEdges.Left) > DesignerEdges.None || (sizingEdge & DesignerEdges.Right) > DesignerEdges.None)
			{
				cursor = Cursors.SizeWE;
			}
			else if (sizingEdge == DesignerEdges.None && (workflowView.Cursor == Cursors.SizeNWSE || workflowView.Cursor == Cursors.SizeNESW || workflowView.Cursor == Cursors.SizeNS || workflowView.Cursor == Cursors.SizeWE))
			{
				cursor = Cursors.Default;
			}
			if (workflowView.Cursor != cursor)
			{
				workflowView.Cursor = cursor;
			}
		}

		private ActivityDesigner GetDesignerToResize(Point point, out DesignerEdges sizingEdge)
		{
			ActivityDesigner activityDesigner = null;
			sizingEdge = DesignerEdges.None;
			if (GetService(typeof(ISelectionService)) is ISelectionService selectionService)
			{
				ArrayList arrayList = new ArrayList(selectionService.GetSelectedComponents());
				for (int i = 0; i < arrayList.Count; i++)
				{
					if (activityDesigner != null)
					{
						break;
					}
					if (!(arrayList[i] is Activity activity))
					{
						continue;
					}
					ActivityDesigner designer = ActivityDesigner.GetDesigner(activity);
					if (designer == null || !(designer.Glyphs[typeof(SelectionGlyph)] is SelectionGlyph selectionGlyph))
					{
						continue;
					}
					Rectangle[] grabHandles = selectionGlyph.GetGrabHandles(designer);
					foreach (Rectangle rectangle in grabHandles)
					{
						if (rectangle.Contains(point))
						{
							activityDesigner = designer;
							sizingEdge = GetSizingEdge(activityDesigner, point);
							break;
						}
					}
				}
			}
			return activityDesigner;
		}

		private DesignerEdges GetSizingEdge(ActivityDesigner designer, Point point)
		{
			DesignerEdges designerEdges = DesignerEdges.None;
			Size selectionSize = WorkflowTheme.CurrentTheme.AmbientTheme.SelectionSize;
			Rectangle bounds = designer.Bounds;
			if (Math.Floor(DesignerGeometryHelper.DistanceFromPointToLineSegment(point, new Point[2]
			{
				new Point(bounds.Left, bounds.Top),
				new Point(bounds.Left, bounds.Bottom)
			})) <= (double)(selectionSize.Width + 1))
			{
				designerEdges |= DesignerEdges.Left;
			}
			if (Math.Floor(DesignerGeometryHelper.DistanceFromPointToLineSegment(point, new Point[2]
			{
				new Point(bounds.Left, bounds.Top),
				new Point(bounds.Right, bounds.Top)
			})) <= (double)(selectionSize.Height + 1))
			{
				designerEdges |= DesignerEdges.Top;
			}
			if (Math.Floor(DesignerGeometryHelper.DistanceFromPointToLineSegment(point, new Point[2]
			{
				new Point(bounds.Right, bounds.Top),
				new Point(bounds.Right, bounds.Bottom)
			})) <= (double)(selectionSize.Width + 1))
			{
				designerEdges |= DesignerEdges.Right;
			}
			if (Math.Floor(DesignerGeometryHelper.DistanceFromPointToLineSegment(point, new Point[2]
			{
				new Point(bounds.Left, bounds.Bottom),
				new Point(bounds.Right, bounds.Bottom)
			})) <= (double)(selectionSize.Height + 1))
			{
				designerEdges |= DesignerEdges.Bottom;
			}
			return designerEdges;
		}

		private bool CanResizeDesigner(ActivityDesigner designer)
		{
			if (!designer.EnableVisualResizing)
			{
				return false;
			}
			if (designer.ParentDesigner != null)
			{
				if (designer.ParentDesigner is FreeformActivityDesigner freeformActivityDesigner)
				{
					return freeformActivityDesigner.CanResizeContainedDesigner(designer);
				}
				return false;
			}
			return true;
		}

		private void SetResizableDesigner(ActivityDesigner designer, DesignerEdges sizingEdge)
		{
			if (designerToResize == designer || (designer != null && !CanResizeDesigner(designer)))
			{
				return;
			}
			WorkflowView workflowView = base.ParentView;
			if (workflowView == null)
			{
				throw new InvalidOperationException(DR.GetString("WorkflowViewNull"));
			}
			if (designer != null)
			{
				if (designerTransaction != null)
				{
					designerTransaction.Cancel();
				}
				if (GetService(typeof(IDesignerHost)) is IDesignerHost designerHost)
				{
					designerTransaction = designerHost.CreateTransaction(DR.GetString("ResizeUndoDescription", designer.Text));
				}
				((IWorkflowDesignerMessageSink)designer).OnBeginResizing(sizingEdge);
			}
			else
			{
				if (designerTransaction != null)
				{
					designerTransaction.Commit();
					designerTransaction = null;
				}
				((IWorkflowDesignerMessageSink)designerToResize).OnEndResizing();
			}
			designerToResize = designer;
			designerSizingEdge = sizingEdge;
			workflowView.Capture = designerToResize != null;
			UpdateCursor(designerSizingEdge);
		}

		private void UpdateDesignerSize(Point point, ActivityDesigner designerToSize, DesignerEdges sizingEdge)
		{
			WorkflowView workflowView = base.ParentView;
			if (workflowView == null)
			{
				throw new InvalidOperationException(DR.GetString("WorkflowViewNull"));
			}
			Rectangle b = Rectangle.Empty;
			if (designerToSize.ParentDesigner != null)
			{
				b = designerToSize.ParentDesigner.Bounds;
				Size selectionSize = WorkflowTheme.CurrentTheme.AmbientTheme.SelectionSize;
				b.Inflate(-2 * selectionSize.Width, -2 * selectionSize.Height);
			}
			Rectangle rectangle = designerToSize.Bounds;
			if ((sizingEdge & DesignerEdges.Left) > DesignerEdges.None)
			{
				int num = point.X;
				if (!b.IsEmpty)
				{
					num = Math.Max(num, b.X);
				}
				num = DesignerHelpers.SnapToGrid(new Point(num, 0)).X;
				rectangle.Width += rectangle.Left - num;
				int num2 = ((rectangle.Width < designerToSize.MinimumSize.Width) ? (rectangle.Width - designerToSize.MinimumSize.Width) : 0);
				rectangle.X = num + num2;
			}
			if ((sizingEdge & DesignerEdges.Top) > DesignerEdges.None)
			{
				int num3 = point.Y;
				if (!b.IsEmpty)
				{
					num3 = Math.Max(num3, b.Y);
				}
				num3 = DesignerHelpers.SnapToGrid(new Point(0, num3)).Y;
				rectangle.Height += rectangle.Top - num3;
				int num4 = ((rectangle.Height < designerToSize.MinimumSize.Height) ? (rectangle.Height - designerToSize.MinimumSize.Height) : 0);
				rectangle.Y = num3 + num4;
			}
			if ((sizingEdge & DesignerEdges.Right) > DesignerEdges.None)
			{
				rectangle.Width += point.X - rectangle.Right;
			}
			if ((sizingEdge & DesignerEdges.Bottom) > DesignerEdges.None)
			{
				rectangle.Height += point.Y - rectangle.Bottom;
			}
			rectangle.Width = Math.Max(rectangle.Width, designerToSize.MinimumSize.Width);
			rectangle.Height = Math.Max(rectangle.Height, designerToSize.MinimumSize.Height);
			if (!b.IsEmpty)
			{
				rectangle = Rectangle.Intersect(rectangle, b);
			}
			((IWorkflowDesignerMessageSink)designerToSize).OnResizing(sizingEdge, rectangle);
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowPageSetupDialog : Form
	{
		private Container components;

		private System.Windows.Forms.TabControl tabs;

		private PictureBox landscapePicture;

		private PictureBox portraitPicture;

		private TabPage pageSettingsTab;

		private GroupBox marginsGroup;

		private NumericUpDown marginsBottomInput;

		private NumericUpDown marginsRightInput;

		private NumericUpDown marginsTopInput;

		private Label marginsTopLabel;

		private Label marginsLeftLabel;

		private Label marginsBottomLabel;

		private Label marginsRightLabel;

		private NumericUpDown marginsLeftInput;

		private GroupBox scalingGroup;

		private NumericUpDown adjustToScaleInput;

		private RadioButton adjustToRadioButton;

		private RadioButton fitToRadioButton;

		private NumericUpDown fitToPagesWideInput;

		private NumericUpDown fitToPagesTallInput;

		private Label fitToTallLabel;

		private Label fitToWideLabel;

		private GroupBox orientationGroup;

		private RadioButton portraitRadioButton;

		private RadioButton landscapeRadioButton;

		private GroupBox paperSettingsGroup;

		private ComboBox paperSizeComboBox;

		private Label paperSizeLabel;

		private Label paperSourceLabel;

		private ComboBox paperSourceComboBox;

		private TabPage headerFooterTab;

		private GroupBox footerGroup;

		private GroupBox headerGroup;

		private ComboBox headerAlignmentComboBox;

		private Label headerAlignmentLabel;

		private ComboBox headerTextComboBox;

		private Label headerTextLabel;

		private Label headerMarginLabel;

		private Button OKButton;

		private Button cancelButton;

		private Button printerButton;

		private NumericUpDown headerMarginInput;

		private NumericUpDown footerMarginInput;

		private ComboBox footerAlignmentComboBox;

		private Label footerAlignmentLabel;

		private ComboBox footerTextComboBox;

		private Label footerTextLabel;

		private Label footerMarginLabel;

		private Label scalingOfSizeLabel;

		private Label footerMarginUnitsLabel;

		private Label headerMarginUnitsLabel;

		private TextBox customHeaderText;

		private Label customHeaderLabel;

		private Label customFooterLabel;

		private TextBox customFooterText;

		private GroupBox centerGroup;

		private CheckBox CenterHorizontallyCheckBox;

		private CheckBox CenterVerticallyCheckBox;

		private IServiceProvider serviceProvider;

		private WorkflowPrintDocument printDocument;

		private string headerFooterNone;

		private string headerFooterCustom;

		private string[] headerFooterTemplates;

		private bool headerCustom;

		private TableLayoutPanel okCancelTableLayoutPanel;

		private TableLayoutPanel paperTableLayoutPanel;

		private TableLayoutPanel centerTableLayoutPanel;

		private TableLayoutPanel marginsTableLayoutPanel;

		private TableLayoutPanel orientationTableLayoutPanel;

		private TableLayoutPanel scalingTableLayoutPanel;

		private TableLayoutPanel headerTableLayoutPanel;

		private TableLayoutPanel footerTableLayoutPanel;

		private bool footerCustom;

		public WorkflowPageSetupDialog(IServiceProvider serviceProvider)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			this.serviceProvider = serviceProvider;
			if (!(this.serviceProvider.GetService(typeof(WorkflowView)) is WorkflowView workflowView))
			{
				throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(WorkflowView).FullName));
			}
			if (!(workflowView.PrintDocument is WorkflowPrintDocument))
			{
				throw new InvalidOperationException(DR.GetString("WorkflowPrintDocumentNotFound", typeof(WorkflowPrintDocument).Name));
			}
			try
			{
				Cursor.Current = Cursors.WaitCursor;
				InitializeComponent();
				printDocument = workflowView.PrintDocument as WorkflowPrintDocument;
				adjustToScaleInput.Value = printDocument.PageSetupData.ScaleFactor;
				fitToPagesWideInput.Value = printDocument.PageSetupData.PagesWide;
				fitToPagesTallInput.Value = printDocument.PageSetupData.PagesTall;
				if (printDocument.PageSetupData.AdjustToScaleFactor)
				{
					adjustToRadioButton.Checked = true;
				}
				else
				{
					fitToRadioButton.Checked = true;
				}
				if (printDocument.PageSetupData.Landscape)
				{
					landscapeRadioButton.Checked = true;
				}
				else
				{
					portraitRadioButton.Checked = true;
				}
				SetMarginsToUI(printDocument.PageSetupData.Margins);
				CenterHorizontallyCheckBox.Checked = printDocument.PageSetupData.CenterHorizontally;
				CenterVerticallyCheckBox.Checked = printDocument.PageSetupData.CenterVertically;
				InitializePaperInformation();
				headerFooterNone = DR.GetString("HeaderFooterStringNone");
				headerFooterCustom = DR.GetString("HeaderFooterStringCustom");
				headerFooterTemplates = new string[9]
				{
					DR.GetString("HeaderFooterFormat1"),
					DR.GetString("HeaderFooterFormat2"),
					DR.GetString("HeaderFooterFormat3"),
					DR.GetString("HeaderFooterFormat4"),
					DR.GetString("HeaderFooterFormat5"),
					DR.GetString("HeaderFooterFormat6"),
					DR.GetString("HeaderFooterFormat7"),
					DR.GetString("HeaderFooterFormat8"),
					DR.GetString("HeaderFooterFormat9")
				};
				headerTextComboBox.Items.Add(headerFooterNone);
				ComboBox.ObjectCollection items = headerTextComboBox.Items;
				object[] items2 = headerFooterTemplates;
				items.AddRange(items2);
				headerTextComboBox.Items.Add(headerFooterCustom);
				headerTextComboBox.SelectedIndex = 0;
				string headerTemplate = printDocument.PageSetupData.HeaderTemplate;
				headerCustom = printDocument.PageSetupData.HeaderCustom;
				if (headerTemplate.Length == 0)
				{
					headerTextComboBox.SelectedIndex = 0;
				}
				else
				{
					int num = headerTextComboBox.Items.IndexOf(headerTemplate);
					if (-1 == num || headerCustom)
					{
						headerTextComboBox.SelectedIndex = headerTextComboBox.Items.IndexOf(headerFooterCustom);
						customHeaderText.Text = headerTemplate;
					}
					else
					{
						headerTextComboBox.SelectedIndex = num;
					}
				}
				headerAlignmentComboBox.Items.AddRange(new object[3]
				{
					HorizontalAlignment.Left,
					HorizontalAlignment.Center,
					HorizontalAlignment.Right
				});
				if (headerAlignmentComboBox.Items.IndexOf(printDocument.PageSetupData.HeaderAlignment) != -1)
				{
					headerAlignmentComboBox.SelectedItem = printDocument.PageSetupData.HeaderAlignment;
				}
				else
				{
					headerAlignmentComboBox.SelectedItem = HorizontalAlignment.Center;
				}
				headerMarginInput.Value = PrinterUnitToUIUnit(printDocument.PageSetupData.HeaderMargin);
				footerTextComboBox.Items.Add(headerFooterNone);
				footerTextComboBox.SelectedIndex = 0;
				ComboBox.ObjectCollection items3 = footerTextComboBox.Items;
				items2 = headerFooterTemplates;
				items3.AddRange(items2);
				footerTextComboBox.Items.Add(headerFooterCustom);
				string footerTemplate = printDocument.PageSetupData.FooterTemplate;
				footerCustom = printDocument.PageSetupData.FooterCustom;
				if (footerTemplate.Length == 0)
				{
					footerTextComboBox.SelectedIndex = 0;
				}
				else
				{
					int num2 = footerTextComboBox.Items.IndexOf(footerTemplate);
					if (-1 == num2 || footerCustom)
					{
						footerTextComboBox.SelectedIndex = footerTextComboBox.Items.IndexOf(headerFooterCustom);
						customFooterText.Text = footerTemplate;
					}
					else
					{
						footerTextComboBox.SelectedIndex = num2;
					}
				}
				footerAlignmentComboBox.Items.AddRange(new object[3]
				{
					HorizontalAlignment.Left,
					HorizontalAlignment.Center,
					HorizontalAlignment.Right
				});
				if (footerAlignmentComboBox.Items.IndexOf(printDocument.PageSetupData.FooterAlignment) != -1)
				{
					footerAlignmentComboBox.SelectedItem = printDocument.PageSetupData.FooterAlignment;
				}
				else
				{
					footerAlignmentComboBox.SelectedItem = HorizontalAlignment.Center;
				}
				footerMarginInput.Value = PrinterUnitToUIUnit(printDocument.PageSetupData.FooterMargin);
			}
			finally
			{
				Cursor.Current = Cursors.Default;
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(System.Workflow.ComponentModel.Design.WorkflowPageSetupDialog));
			this.tabs = new System.Windows.Forms.TabControl();
			this.pageSettingsTab = new System.Windows.Forms.TabPage();
			this.centerGroup = new System.Windows.Forms.GroupBox();
			this.centerTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.CenterVerticallyCheckBox = new System.Windows.Forms.CheckBox();
			this.CenterHorizontallyCheckBox = new System.Windows.Forms.CheckBox();
			this.marginsGroup = new System.Windows.Forms.GroupBox();
			this.marginsTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.marginsRightInput = new System.Windows.Forms.NumericUpDown();
			this.marginsBottomInput = new System.Windows.Forms.NumericUpDown();
			this.marginsTopLabel = new System.Windows.Forms.Label();
			this.marginsLeftLabel = new System.Windows.Forms.Label();
			this.marginsRightLabel = new System.Windows.Forms.Label();
			this.marginsBottomLabel = new System.Windows.Forms.Label();
			this.marginsTopInput = new System.Windows.Forms.NumericUpDown();
			this.marginsLeftInput = new System.Windows.Forms.NumericUpDown();
			this.scalingGroup = new System.Windows.Forms.GroupBox();
			this.scalingTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.fitToTallLabel = new System.Windows.Forms.Label();
			this.scalingOfSizeLabel = new System.Windows.Forms.Label();
			this.fitToWideLabel = new System.Windows.Forms.Label();
			this.adjustToRadioButton = new System.Windows.Forms.RadioButton();
			this.fitToPagesTallInput = new System.Windows.Forms.NumericUpDown();
			this.fitToPagesWideInput = new System.Windows.Forms.NumericUpDown();
			this.adjustToScaleInput = new System.Windows.Forms.NumericUpDown();
			this.fitToRadioButton = new System.Windows.Forms.RadioButton();
			this.orientationGroup = new System.Windows.Forms.GroupBox();
			this.orientationTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.landscapeRadioButton = new System.Windows.Forms.RadioButton();
			this.landscapePicture = new System.Windows.Forms.PictureBox();
			this.portraitRadioButton = new System.Windows.Forms.RadioButton();
			this.portraitPicture = new System.Windows.Forms.PictureBox();
			this.paperSettingsGroup = new System.Windows.Forms.GroupBox();
			this.paperTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.paperSourceComboBox = new System.Windows.Forms.ComboBox();
			this.paperSizeComboBox = new System.Windows.Forms.ComboBox();
			this.paperSizeLabel = new System.Windows.Forms.Label();
			this.paperSourceLabel = new System.Windows.Forms.Label();
			this.headerFooterTab = new System.Windows.Forms.TabPage();
			this.footerGroup = new System.Windows.Forms.GroupBox();
			this.footerTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.footerTextLabel = new System.Windows.Forms.Label();
			this.footerAlignmentLabel = new System.Windows.Forms.Label();
			this.footerMarginUnitsLabel = new System.Windows.Forms.Label();
			this.footerMarginLabel = new System.Windows.Forms.Label();
			this.footerMarginInput = new System.Windows.Forms.NumericUpDown();
			this.footerTextComboBox = new System.Windows.Forms.ComboBox();
			this.footerAlignmentComboBox = new System.Windows.Forms.ComboBox();
			this.customFooterText = new System.Windows.Forms.TextBox();
			this.customFooterLabel = new System.Windows.Forms.Label();
			this.headerGroup = new System.Windows.Forms.GroupBox();
			this.headerTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.headerTextLabel = new System.Windows.Forms.Label();
			this.headerAlignmentLabel = new System.Windows.Forms.Label();
			this.headerMarginUnitsLabel = new System.Windows.Forms.Label();
			this.headerMarginLabel = new System.Windows.Forms.Label();
			this.headerMarginInput = new System.Windows.Forms.NumericUpDown();
			this.headerTextComboBox = new System.Windows.Forms.ComboBox();
			this.headerAlignmentComboBox = new System.Windows.Forms.ComboBox();
			this.customHeaderText = new System.Windows.Forms.TextBox();
			this.customHeaderLabel = new System.Windows.Forms.Label();
			this.OKButton = new System.Windows.Forms.Button();
			this.cancelButton = new System.Windows.Forms.Button();
			this.printerButton = new System.Windows.Forms.Button();
			this.okCancelTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.tabs.SuspendLayout();
			this.pageSettingsTab.SuspendLayout();
			this.centerGroup.SuspendLayout();
			this.centerTableLayoutPanel.SuspendLayout();
			this.marginsGroup.SuspendLayout();
			this.marginsTableLayoutPanel.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.marginsRightInput).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.marginsBottomInput).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.marginsTopInput).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.marginsLeftInput).BeginInit();
			this.scalingGroup.SuspendLayout();
			this.scalingTableLayoutPanel.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.fitToPagesTallInput).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.fitToPagesWideInput).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.adjustToScaleInput).BeginInit();
			this.orientationGroup.SuspendLayout();
			this.orientationTableLayoutPanel.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.landscapePicture).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.portraitPicture).BeginInit();
			this.paperSettingsGroup.SuspendLayout();
			this.paperTableLayoutPanel.SuspendLayout();
			this.headerFooterTab.SuspendLayout();
			this.footerGroup.SuspendLayout();
			this.footerTableLayoutPanel.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.footerMarginInput).BeginInit();
			this.headerGroup.SuspendLayout();
			this.headerTableLayoutPanel.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.headerMarginInput).BeginInit();
			this.okCancelTableLayoutPanel.SuspendLayout();
			base.SuspendLayout();
			resources.ApplyResources(this.tabs, "tabs");
			this.tabs.Controls.Add(this.pageSettingsTab);
			this.tabs.Controls.Add(this.headerFooterTab);
			this.tabs.Name = "tabs";
			this.tabs.SelectedIndex = 0;
			this.pageSettingsTab.Controls.Add(this.centerGroup);
			this.pageSettingsTab.Controls.Add(this.marginsGroup);
			this.pageSettingsTab.Controls.Add(this.scalingGroup);
			this.pageSettingsTab.Controls.Add(this.orientationGroup);
			this.pageSettingsTab.Controls.Add(this.paperSettingsGroup);
			resources.ApplyResources(this.pageSettingsTab, "pageSettingsTab");
			this.pageSettingsTab.Name = "pageSettingsTab";
			resources.ApplyResources(this.centerGroup, "centerGroup");
			this.centerGroup.Controls.Add(this.centerTableLayoutPanel);
			this.centerGroup.Name = "centerGroup";
			this.centerGroup.TabStop = false;
			resources.ApplyResources(this.centerTableLayoutPanel, "centerTableLayoutPanel");
			this.centerTableLayoutPanel.Controls.Add(this.CenterVerticallyCheckBox, 1, 0);
			this.centerTableLayoutPanel.Controls.Add(this.CenterHorizontallyCheckBox, 0, 0);
			this.centerTableLayoutPanel.Name = "centerTableLayoutPanel";
			resources.ApplyResources(this.CenterVerticallyCheckBox, "CenterVerticallyCheckBox");
			this.CenterVerticallyCheckBox.Name = "CenterVerticallyCheckBox";
			resources.ApplyResources(this.CenterHorizontallyCheckBox, "CenterHorizontallyCheckBox");
			this.CenterHorizontallyCheckBox.Name = "CenterHorizontallyCheckBox";
			resources.ApplyResources(this.marginsGroup, "marginsGroup");
			this.marginsGroup.Controls.Add(this.marginsTableLayoutPanel);
			this.marginsGroup.Name = "marginsGroup";
			this.marginsGroup.TabStop = false;
			resources.ApplyResources(this.marginsTableLayoutPanel, "marginsTableLayoutPanel");
			this.marginsTableLayoutPanel.Controls.Add(this.marginsRightInput, 3, 1);
			this.marginsTableLayoutPanel.Controls.Add(this.marginsBottomInput, 3, 0);
			this.marginsTableLayoutPanel.Controls.Add(this.marginsTopLabel, 0, 0);
			this.marginsTableLayoutPanel.Controls.Add(this.marginsLeftLabel, 0, 1);
			this.marginsTableLayoutPanel.Controls.Add(this.marginsRightLabel, 2, 1);
			this.marginsTableLayoutPanel.Controls.Add(this.marginsBottomLabel, 2, 0);
			this.marginsTableLayoutPanel.Controls.Add(this.marginsTopInput, 1, 0);
			this.marginsTableLayoutPanel.Controls.Add(this.marginsLeftInput, 1, 1);
			this.marginsTableLayoutPanel.Name = "marginsTableLayoutPanel";
			resources.ApplyResources(this.marginsRightInput, "marginsRightInput");
			this.marginsRightInput.DecimalPlaces = 2;
			this.marginsRightInput.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.marginsRightInput.Name = "marginsRightInput";
			this.marginsRightInput.Value = new decimal(new int[4] { 100, 0, 0, 131072 });
			this.marginsRightInput.Validating += new System.ComponentModel.CancelEventHandler(Margins_Validating);
			resources.ApplyResources(this.marginsBottomInput, "marginsBottomInput");
			this.marginsBottomInput.DecimalPlaces = 2;
			this.marginsBottomInput.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.marginsBottomInput.Name = "marginsBottomInput";
			this.marginsBottomInput.Value = new decimal(new int[4] { 100, 0, 0, 131072 });
			this.marginsBottomInput.Validating += new System.ComponentModel.CancelEventHandler(Margins_Validating);
			resources.ApplyResources(this.marginsTopLabel, "marginsTopLabel");
			this.marginsTopLabel.Name = "marginsTopLabel";
			resources.ApplyResources(this.marginsLeftLabel, "marginsLeftLabel");
			this.marginsLeftLabel.Name = "marginsLeftLabel";
			resources.ApplyResources(this.marginsRightLabel, "marginsRightLabel");
			this.marginsRightLabel.Name = "marginsRightLabel";
			resources.ApplyResources(this.marginsBottomLabel, "marginsBottomLabel");
			this.marginsBottomLabel.Name = "marginsBottomLabel";
			resources.ApplyResources(this.marginsTopInput, "marginsTopInput");
			this.marginsTopInput.DecimalPlaces = 2;
			this.marginsTopInput.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.marginsTopInput.Name = "marginsTopInput";
			this.marginsTopInput.Value = new decimal(new int[4] { 100, 0, 0, 131072 });
			this.marginsTopInput.Validating += new System.ComponentModel.CancelEventHandler(Margins_Validating);
			resources.ApplyResources(this.marginsLeftInput, "marginsLeftInput");
			this.marginsLeftInput.DecimalPlaces = 2;
			this.marginsLeftInput.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.marginsLeftInput.Name = "marginsLeftInput";
			this.marginsLeftInput.Value = new decimal(new int[4] { 100, 0, 0, 131072 });
			this.marginsLeftInput.Validating += new System.ComponentModel.CancelEventHandler(Margins_Validating);
			resources.ApplyResources(this.scalingGroup, "scalingGroup");
			this.scalingGroup.Controls.Add(this.scalingTableLayoutPanel);
			this.scalingGroup.Name = "scalingGroup";
			this.scalingGroup.TabStop = false;
			resources.ApplyResources(this.scalingTableLayoutPanel, "scalingTableLayoutPanel");
			this.scalingTableLayoutPanel.Controls.Add(this.fitToTallLabel, 2, 2);
			this.scalingTableLayoutPanel.Controls.Add(this.scalingOfSizeLabel, 2, 0);
			this.scalingTableLayoutPanel.Controls.Add(this.fitToWideLabel, 2, 1);
			this.scalingTableLayoutPanel.Controls.Add(this.adjustToRadioButton, 0, 0);
			this.scalingTableLayoutPanel.Controls.Add(this.fitToPagesTallInput, 1, 2);
			this.scalingTableLayoutPanel.Controls.Add(this.fitToPagesWideInput, 1, 1);
			this.scalingTableLayoutPanel.Controls.Add(this.adjustToScaleInput, 1, 0);
			this.scalingTableLayoutPanel.Controls.Add(this.fitToRadioButton, 0, 1);
			this.scalingTableLayoutPanel.Name = "scalingTableLayoutPanel";
			resources.ApplyResources(this.fitToTallLabel, "fitToTallLabel");
			this.fitToTallLabel.Name = "fitToTallLabel";
			resources.ApplyResources(this.scalingOfSizeLabel, "scalingOfSizeLabel");
			this.scalingOfSizeLabel.Name = "scalingOfSizeLabel";
			resources.ApplyResources(this.fitToWideLabel, "fitToWideLabel");
			this.fitToWideLabel.Name = "fitToWideLabel";
			resources.ApplyResources(this.adjustToRadioButton, "adjustToRadioButton");
			this.adjustToRadioButton.Name = "adjustToRadioButton";
			resources.ApplyResources(this.fitToPagesTallInput, "fitToPagesTallInput");
			this.fitToPagesTallInput.Maximum = new decimal(new int[4] { 20, 0, 0, 0 });
			this.fitToPagesTallInput.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.fitToPagesTallInput.Name = "fitToPagesTallInput";
			this.fitToPagesTallInput.Value = new decimal(new int[4] { 1, 0, 0, 0 });
			this.fitToPagesTallInput.ValueChanged += new System.EventHandler(fitToInputs_ValueChanged);
			resources.ApplyResources(this.fitToPagesWideInput, "fitToPagesWideInput");
			this.fitToPagesWideInput.Maximum = new decimal(new int[4] { 20, 0, 0, 0 });
			this.fitToPagesWideInput.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.fitToPagesWideInput.Name = "fitToPagesWideInput";
			this.fitToPagesWideInput.Value = new decimal(new int[4] { 1, 0, 0, 0 });
			this.fitToPagesWideInput.ValueChanged += new System.EventHandler(fitToInputs_ValueChanged);
			resources.ApplyResources(this.adjustToScaleInput, "adjustToScaleInput");
			this.adjustToScaleInput.Maximum = new decimal(new int[4] { 400, 0, 0, 0 });
			this.adjustToScaleInput.Minimum = new decimal(new int[4] { 10, 0, 0, 0 });
			this.adjustToScaleInput.Name = "adjustToScaleInput";
			this.adjustToScaleInput.Value = new decimal(new int[4] { 100, 0, 0, 0 });
			this.adjustToScaleInput.ValueChanged += new System.EventHandler(adjustToInput_ValueChanged);
			resources.ApplyResources(this.fitToRadioButton, "fitToRadioButton");
			this.fitToRadioButton.Name = "fitToRadioButton";
			resources.ApplyResources(this.orientationGroup, "orientationGroup");
			this.orientationGroup.Controls.Add(this.orientationTableLayoutPanel);
			this.orientationGroup.Name = "orientationGroup";
			this.orientationGroup.TabStop = false;
			resources.ApplyResources(this.orientationTableLayoutPanel, "orientationTableLayoutPanel");
			this.orientationTableLayoutPanel.Controls.Add(this.landscapeRadioButton, 3, 0);
			this.orientationTableLayoutPanel.Controls.Add(this.landscapePicture, 2, 0);
			this.orientationTableLayoutPanel.Controls.Add(this.portraitRadioButton, 1, 0);
			this.orientationTableLayoutPanel.Controls.Add(this.portraitPicture, 0, 0);
			this.orientationTableLayoutPanel.Name = "orientationTableLayoutPanel";
			resources.ApplyResources(this.landscapeRadioButton, "landscapeRadioButton");
			this.landscapeRadioButton.Name = "landscapeRadioButton";
			this.landscapeRadioButton.CheckedChanged += new System.EventHandler(landscapeRadioButton_CheckedChanged);
			resources.ApplyResources(this.landscapePicture, "landscapePicture");
			this.landscapePicture.Name = "landscapePicture";
			this.landscapePicture.TabStop = false;
			resources.ApplyResources(this.portraitRadioButton, "portraitRadioButton");
			this.portraitRadioButton.Name = "portraitRadioButton";
			this.portraitRadioButton.CheckedChanged += new System.EventHandler(portraitRadioButton_CheckedChanged);
			resources.ApplyResources(this.portraitPicture, "portraitPicture");
			this.portraitPicture.Name = "portraitPicture";
			this.portraitPicture.TabStop = false;
			resources.ApplyResources(this.paperSettingsGroup, "paperSettingsGroup");
			this.paperSettingsGroup.Controls.Add(this.paperTableLayoutPanel);
			this.paperSettingsGroup.Name = "paperSettingsGroup";
			this.paperSettingsGroup.TabStop = false;
			resources.ApplyResources(this.paperTableLayoutPanel, "paperTableLayoutPanel");
			this.paperTableLayoutPanel.Controls.Add(this.paperSourceComboBox, 1, 1);
			this.paperTableLayoutPanel.Controls.Add(this.paperSizeComboBox, 1, 0);
			this.paperTableLayoutPanel.Controls.Add(this.paperSizeLabel, 0, 0);
			this.paperTableLayoutPanel.Controls.Add(this.paperSourceLabel, 0, 1);
			this.paperTableLayoutPanel.Name = "paperTableLayoutPanel";
			resources.ApplyResources(this.paperSourceComboBox, "paperSourceComboBox");
			this.paperSourceComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.paperSourceComboBox.FormattingEnabled = true;
			this.paperSourceComboBox.Name = "paperSourceComboBox";
			resources.ApplyResources(this.paperSizeComboBox, "paperSizeComboBox");
			this.paperSizeComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.paperSizeComboBox.FormattingEnabled = true;
			this.paperSizeComboBox.Name = "paperSizeComboBox";
			this.paperSizeComboBox.SelectedIndexChanged += new System.EventHandler(paperSizeComboBox_SelectedIndexChanged);
			resources.ApplyResources(this.paperSizeLabel, "paperSizeLabel");
			this.paperSizeLabel.Name = "paperSizeLabel";
			resources.ApplyResources(this.paperSourceLabel, "paperSourceLabel");
			this.paperSourceLabel.Name = "paperSourceLabel";
			this.headerFooterTab.Controls.Add(this.footerGroup);
			this.headerFooterTab.Controls.Add(this.headerGroup);
			resources.ApplyResources(this.headerFooterTab, "headerFooterTab");
			this.headerFooterTab.Name = "headerFooterTab";
			resources.ApplyResources(this.footerGroup, "footerGroup");
			this.footerGroup.Controls.Add(this.footerTableLayoutPanel);
			this.footerGroup.Controls.Add(this.customFooterText);
			this.footerGroup.Controls.Add(this.customFooterLabel);
			this.footerGroup.Name = "footerGroup";
			this.footerGroup.TabStop = false;
			resources.ApplyResources(this.footerTableLayoutPanel, "footerTableLayoutPanel");
			this.footerTableLayoutPanel.Controls.Add(this.footerTextLabel, 0, 0);
			this.footerTableLayoutPanel.Controls.Add(this.footerAlignmentLabel, 0, 1);
			this.footerTableLayoutPanel.Controls.Add(this.footerMarginUnitsLabel, 2, 2);
			this.footerTableLayoutPanel.Controls.Add(this.footerMarginLabel, 0, 2);
			this.footerTableLayoutPanel.Controls.Add(this.footerMarginInput, 1, 2);
			this.footerTableLayoutPanel.Controls.Add(this.footerTextComboBox, 1, 0);
			this.footerTableLayoutPanel.Controls.Add(this.footerAlignmentComboBox, 1, 1);
			this.footerTableLayoutPanel.Name = "footerTableLayoutPanel";
			resources.ApplyResources(this.footerTextLabel, "footerTextLabel");
			this.footerTextLabel.Name = "footerTextLabel";
			resources.ApplyResources(this.footerAlignmentLabel, "footerAlignmentLabel");
			this.footerAlignmentLabel.Name = "footerAlignmentLabel";
			resources.ApplyResources(this.footerMarginUnitsLabel, "footerMarginUnitsLabel");
			this.footerMarginUnitsLabel.Name = "footerMarginUnitsLabel";
			resources.ApplyResources(this.footerMarginLabel, "footerMarginLabel");
			this.footerMarginLabel.Name = "footerMarginLabel";
			resources.ApplyResources(this.footerMarginInput, "footerMarginInput");
			this.footerMarginInput.DecimalPlaces = 2;
			this.footerMarginInput.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.footerMarginInput.Name = "footerMarginInput";
			this.footerMarginInput.Value = new decimal(new int[4] { 1, 0, 0, 0 });
			this.footerMarginInput.Validating += new System.ComponentModel.CancelEventHandler(footerMarginInput_Validating);
			resources.ApplyResources(this.footerTextComboBox, "footerTextComboBox");
			this.footerTableLayoutPanel.SetColumnSpan(this.footerTextComboBox, 2);
			this.footerTextComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.footerTextComboBox.FormattingEnabled = true;
			this.footerTextComboBox.Name = "footerTextComboBox";
			this.footerTextComboBox.SelectedIndexChanged += new System.EventHandler(footerTextComboBox_SelectedIndexChanged);
			resources.ApplyResources(this.footerAlignmentComboBox, "footerAlignmentComboBox");
			this.footerTableLayoutPanel.SetColumnSpan(this.footerAlignmentComboBox, 2);
			this.footerAlignmentComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.footerAlignmentComboBox.FormattingEnabled = true;
			this.footerAlignmentComboBox.Name = "footerAlignmentComboBox";
			resources.ApplyResources(this.customFooterText, "customFooterText");
			this.customFooterText.Name = "customFooterText";
			resources.ApplyResources(this.customFooterLabel, "customFooterLabel");
			this.customFooterLabel.Name = "customFooterLabel";
			resources.ApplyResources(this.headerGroup, "headerGroup");
			this.headerGroup.Controls.Add(this.headerTableLayoutPanel);
			this.headerGroup.Controls.Add(this.customHeaderText);
			this.headerGroup.Controls.Add(this.customHeaderLabel);
			this.headerGroup.Name = "headerGroup";
			this.headerGroup.TabStop = false;
			resources.ApplyResources(this.headerTableLayoutPanel, "headerTableLayoutPanel");
			this.headerTableLayoutPanel.Controls.Add(this.headerTextLabel, 0, 0);
			this.headerTableLayoutPanel.Controls.Add(this.headerAlignmentLabel, 0, 1);
			this.headerTableLayoutPanel.Controls.Add(this.headerMarginUnitsLabel, 2, 2);
			this.headerTableLayoutPanel.Controls.Add(this.headerMarginLabel, 0, 2);
			this.headerTableLayoutPanel.Controls.Add(this.headerMarginInput, 1, 2);
			this.headerTableLayoutPanel.Controls.Add(this.headerTextComboBox, 1, 0);
			this.headerTableLayoutPanel.Controls.Add(this.headerAlignmentComboBox, 1, 1);
			this.headerTableLayoutPanel.Name = "headerTableLayoutPanel";
			resources.ApplyResources(this.headerTextLabel, "headerTextLabel");
			this.headerTextLabel.Name = "headerTextLabel";
			resources.ApplyResources(this.headerAlignmentLabel, "headerAlignmentLabel");
			this.headerAlignmentLabel.Cursor = System.Windows.Forms.Cursors.Arrow;
			this.headerAlignmentLabel.Name = "headerAlignmentLabel";
			resources.ApplyResources(this.headerMarginUnitsLabel, "headerMarginUnitsLabel");
			this.headerMarginUnitsLabel.Name = "headerMarginUnitsLabel";
			resources.ApplyResources(this.headerMarginLabel, "headerMarginLabel");
			this.headerMarginLabel.Name = "headerMarginLabel";
			resources.ApplyResources(this.headerMarginInput, "headerMarginInput");
			this.headerMarginInput.DecimalPlaces = 2;
			this.headerMarginInput.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.headerMarginInput.Name = "headerMarginInput";
			this.headerMarginInput.Value = new decimal(new int[4] { 1, 0, 0, 0 });
			this.headerMarginInput.Validating += new System.ComponentModel.CancelEventHandler(headerMarginInput_Validating);
			resources.ApplyResources(this.headerTextComboBox, "headerTextComboBox");
			this.headerTableLayoutPanel.SetColumnSpan(this.headerTextComboBox, 2);
			this.headerTextComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.headerTextComboBox.FormattingEnabled = true;
			this.headerTextComboBox.Name = "headerTextComboBox";
			this.headerTextComboBox.SelectedIndexChanged += new System.EventHandler(headerTextComboBox_SelectedIndexChanged);
			resources.ApplyResources(this.headerAlignmentComboBox, "headerAlignmentComboBox");
			this.headerTableLayoutPanel.SetColumnSpan(this.headerAlignmentComboBox, 2);
			this.headerAlignmentComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.headerAlignmentComboBox.FormattingEnabled = true;
			this.headerAlignmentComboBox.Name = "headerAlignmentComboBox";
			resources.ApplyResources(this.customHeaderText, "customHeaderText");
			this.customHeaderText.Name = "customHeaderText";
			resources.ApplyResources(this.customHeaderLabel, "customHeaderLabel");
			this.customHeaderLabel.Name = "customHeaderLabel";
			resources.ApplyResources(this.OKButton, "OKButton");
			this.OKButton.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.OKButton.Name = "OKButton";
			this.OKButton.Click += new System.EventHandler(OKButton_Click);
			resources.ApplyResources(this.cancelButton, "cancelButton");
			this.cancelButton.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.cancelButton.Name = "cancelButton";
			resources.ApplyResources(this.printerButton, "printerButton");
			this.printerButton.Name = "printerButton";
			this.printerButton.Click += new System.EventHandler(printerButton_Click);
			resources.ApplyResources(this.okCancelTableLayoutPanel, "okCancelTableLayoutPanel");
			this.okCancelTableLayoutPanel.Controls.Add(this.OKButton, 0, 0);
			this.okCancelTableLayoutPanel.Controls.Add(this.cancelButton, 1, 0);
			this.okCancelTableLayoutPanel.Controls.Add(this.printerButton, 2, 0);
			this.okCancelTableLayoutPanel.Name = "okCancelTableLayoutPanel";
			base.AcceptButton = this.OKButton;
			resources.ApplyResources(this, "$this");
			base.CancelButton = this.cancelButton;
			base.Controls.Add(this.okCancelTableLayoutPanel);
			base.Controls.Add(this.tabs);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.HelpButton = true;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "WorkflowPageSetupDialog";
			base.ShowInTaskbar = false;
			base.HelpButtonClicked += new System.ComponentModel.CancelEventHandler(WorkflowPageSetupDialog_HelpButtonClicked);
			this.tabs.ResumeLayout(false);
			this.pageSettingsTab.ResumeLayout(false);
			this.centerGroup.ResumeLayout(false);
			this.centerTableLayoutPanel.ResumeLayout(false);
			this.centerTableLayoutPanel.PerformLayout();
			this.marginsGroup.ResumeLayout(false);
			this.marginsTableLayoutPanel.ResumeLayout(false);
			this.marginsTableLayoutPanel.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.marginsRightInput).EndInit();
			((System.ComponentModel.ISupportInitialize)this.marginsBottomInput).EndInit();
			((System.ComponentModel.ISupportInitialize)this.marginsTopInput).EndInit();
			((System.ComponentModel.ISupportInitialize)this.marginsLeftInput).EndInit();
			this.scalingGroup.ResumeLayout(false);
			this.scalingTableLayoutPanel.ResumeLayout(false);
			this.scalingTableLayoutPanel.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.fitToPagesTallInput).EndInit();
			((System.ComponentModel.ISupportInitialize)this.fitToPagesWideInput).EndInit();
			((System.ComponentModel.ISupportInitialize)this.adjustToScaleInput).EndInit();
			this.orientationGroup.ResumeLayout(false);
			this.orientationTableLayoutPanel.ResumeLayout(false);
			this.orientationTableLayoutPanel.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.landscapePicture).EndInit();
			((System.ComponentModel.ISupportInitialize)this.portraitPicture).EndInit();
			this.paperSettingsGroup.ResumeLayout(false);
			this.paperTableLayoutPanel.ResumeLayout(false);
			this.paperTableLayoutPanel.PerformLayout();
			this.headerFooterTab.ResumeLayout(false);
			this.footerGroup.ResumeLayout(false);
			this.footerGroup.PerformLayout();
			this.footerTableLayoutPanel.ResumeLayout(false);
			this.footerTableLayoutPanel.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.footerMarginInput).EndInit();
			this.headerGroup.ResumeLayout(false);
			this.headerGroup.PerformLayout();
			this.headerTableLayoutPanel.ResumeLayout(false);
			this.headerTableLayoutPanel.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.headerMarginInput).EndInit();
			this.okCancelTableLayoutPanel.ResumeLayout(false);
			this.okCancelTableLayoutPanel.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}

		private void OKButton_Click(object sender, EventArgs e)
		{
			Margins marginsFromUI = GetMarginsFromUI();
			printDocument.PageSetupData.AdjustToScaleFactor = adjustToRadioButton.Checked;
			printDocument.PageSetupData.ScaleFactor = (int)adjustToScaleInput.Value;
			printDocument.PageSetupData.PagesWide = (int)fitToPagesWideInput.Value;
			printDocument.PageSetupData.PagesTall = (int)fitToPagesTallInput.Value;
			printDocument.PageSetupData.Landscape = landscapeRadioButton.Checked;
			printDocument.PageSetupData.Margins = marginsFromUI;
			printDocument.PageSetupData.CenterHorizontally = CenterHorizontallyCheckBox.Checked;
			printDocument.PageSetupData.CenterVertically = CenterVerticallyCheckBox.Checked;
			if (headerTextComboBox.SelectedIndex == 0)
			{
				printDocument.PageSetupData.HeaderTemplate = string.Empty;
			}
			else if (!headerTextComboBox.Text.Equals(headerFooterCustom))
			{
				printDocument.PageSetupData.HeaderTemplate = headerTextComboBox.Text;
			}
			else
			{
				printDocument.PageSetupData.HeaderTemplate = customHeaderText.Text;
			}
			printDocument.PageSetupData.HeaderCustom = headerCustom;
			printDocument.PageSetupData.HeaderAlignment = (HorizontalAlignment)headerAlignmentComboBox.SelectedItem;
			printDocument.PageSetupData.HeaderMargin = UIUnitToPrinterUnit(headerMarginInput.Value);
			if (footerTextComboBox.SelectedIndex == 0)
			{
				printDocument.PageSetupData.FooterTemplate = string.Empty;
			}
			else if (!footerTextComboBox.Text.Equals(headerFooterCustom))
			{
				printDocument.PageSetupData.FooterTemplate = footerTextComboBox.Text;
			}
			else
			{
				printDocument.PageSetupData.FooterTemplate = customFooterText.Text;
			}
			printDocument.PageSetupData.FooterCustom = footerCustom;
			printDocument.PageSetupData.FooterAlignment = (HorizontalAlignment)footerAlignmentComboBox.SelectedItem;
			printDocument.PageSetupData.FooterMargin = UIUnitToPrinterUnit(footerMarginInput.Value);
			if (PrinterSettings.InstalledPrinters.Count > 0)
			{
				if (paperSizeComboBox.SelectedItem != null)
				{
					printDocument.DefaultPageSettings.PaperSize = (PaperSize)paperSizeComboBox.SelectedItem;
				}
				if (paperSourceComboBox.SelectedItem != null)
				{
					printDocument.DefaultPageSettings.PaperSource = (PaperSource)paperSourceComboBox.SelectedItem;
				}
				printDocument.DefaultPageSettings.Landscape = printDocument.PageSetupData.Landscape;
				printDocument.DefaultPageSettings.Margins = marginsFromUI;
				printDocument.PrinterSettings.DefaultPageSettings.PaperSize = printDocument.DefaultPageSettings.PaperSize;
				printDocument.PrinterSettings.DefaultPageSettings.PaperSource = printDocument.DefaultPageSettings.PaperSource;
				printDocument.PrinterSettings.DefaultPageSettings.Landscape = printDocument.PageSetupData.Landscape;
				printDocument.PrinterSettings.DefaultPageSettings.Margins = marginsFromUI;
			}
			printDocument.PageSetupData.StorePropertiesToRegistry();
			base.DialogResult = DialogResult.OK;
		}

		private void printerButton_Click(object sender, EventArgs e)
		{
			PrintDialog printDialog = new PrintDialog();
			printDialog.AllowPrintToFile = false;
			printDialog.Document = printDocument;
			try
			{
				if (DialogResult.OK == printDialog.ShowDialog())
				{
					printDocument.PrinterSettings = printDialog.PrinterSettings;
					printDocument.DefaultPageSettings = printDialog.Document.DefaultPageSettings;
					if (printDocument.DefaultPageSettings.Landscape)
					{
						landscapeRadioButton.Checked = true;
					}
					else
					{
						portraitRadioButton.Checked = true;
					}
					InitializePaperInformation();
					printDocument.Print();
				}
			}
			catch (Exception ex)
			{
				string @string = DR.GetString("SelectedPrinterIsInvalidErrorMessage");
				@string = @string + "\n" + ex.Message;
				DesignerHelpers.ShowError(serviceProvider, @string);
			}
		}

		private void Margins_Validating(object sender, CancelEventArgs e)
		{
			Margins marginsFromUI = GetMarginsFromUI();
			Size size = ((!(paperSizeComboBox.SelectedItem is PaperSize paperSize)) ? printDocument.DefaultPageSettings.Bounds.Size : new Size(paperSize.Width, paperSize.Height));
			int num = marginsFromUI.Left + marginsFromUI.Right;
			int num2 = marginsFromUI.Top + marginsFromUI.Bottom;
			if (num >= size.Width || num2 >= size.Height)
			{
				string @string = DR.GetString("EnteredMarginsAreNotValidErrorMessage");
				DesignerHelpers.ShowError(serviceProvider, @string);
				e.Cancel = true;
			}
		}

		private void headerTextComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			headerCustom = headerTextComboBox.Text.Equals(headerFooterCustom);
			customHeaderText.Enabled = headerCustom;
			if (!headerCustom)
			{
				customHeaderText.Text = headerTextComboBox.Text;
			}
		}

		private void footerTextComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			footerCustom = footerTextComboBox.Text.Equals(headerFooterCustom);
			customFooterText.Enabled = footerCustom;
			if (!footerCustom)
			{
				customFooterText.Text = footerTextComboBox.Text;
			}
		}

		private void paperSizeComboBox_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateHeaderFooterMarginLimit();
		}

		private void landscapeRadioButton_CheckedChanged(object sender, EventArgs e)
		{
			UpdateHeaderFooterMarginLimit();
		}

		private void portraitRadioButton_CheckedChanged(object sender, EventArgs e)
		{
			UpdateHeaderFooterMarginLimit();
		}

		private void UpdateHeaderFooterMarginLimit()
		{
			if (paperSizeComboBox.SelectedItem is PaperSize paperSize)
			{
				NumericUpDown numericUpDown = footerMarginInput;
				decimal maximum = (headerMarginInput.Maximum = PrinterUnitToUIUnit(landscapeRadioButton.Checked ? paperSize.Width : paperSize.Height));
				numericUpDown.Maximum = maximum;
			}
		}

		private void headerMarginInput_Validating(object sender, CancelEventArgs e)
		{
		}

		private void footerMarginInput_Validating(object sender, CancelEventArgs e)
		{
		}

		private void adjustToInput_ValueChanged(object sender, EventArgs e)
		{
			adjustToRadioButton.Checked = true;
		}

		private void fitToInputs_ValueChanged(object sender, EventArgs e)
		{
			fitToRadioButton.Checked = true;
		}

		private void InitializePaperInformation()
		{
			PrinterSettings.PaperSizeCollection paperSizes = printDocument.PrinterSettings.PaperSizes;
			PrinterSettings.PaperSourceCollection paperSources = printDocument.PrinterSettings.PaperSources;
			paperSizeComboBox.Items.Clear();
			paperSizeComboBox.DisplayMember = "PaperName";
			foreach (PaperSize item in paperSizes)
			{
				if (item.PaperName != null && item.PaperName.Length > 0)
				{
					paperSizeComboBox.Items.Add(item);
					if (paperSizeComboBox.SelectedItem == null && printDocument.DefaultPageSettings.PaperSize.Kind == item.Kind && printDocument.DefaultPageSettings.PaperSize.Width == item.Width && printDocument.DefaultPageSettings.PaperSize.Height == item.Height)
					{
						paperSizeComboBox.SelectedItem = item;
						printDocument.DefaultPageSettings.PaperSize = item;
					}
				}
			}
			if (paperSizeComboBox.SelectedItem == null)
			{
				PaperKind kind = printDocument.DefaultPageSettings.PaperSize.Kind;
				printDocument.DefaultPageSettings = new PageSettings(printDocument.PrinterSettings);
				foreach (PaperSize item2 in paperSizeComboBox.Items)
				{
					if (paperSizeComboBox.SelectedItem == null && kind == item2.Kind && printDocument.DefaultPageSettings.PaperSize.Width == item2.Width && printDocument.DefaultPageSettings.PaperSize.Height == item2.Height)
					{
						paperSizeComboBox.SelectedItem = item2;
						printDocument.DefaultPageSettings.PaperSize = item2;
					}
				}
				if (paperSizeComboBox.SelectedItem == null && paperSizeComboBox.Items.Count > 0)
				{
					paperSizeComboBox.SelectedItem = paperSizeComboBox.Items[0] as PaperSize;
					printDocument.DefaultPageSettings.PaperSize = paperSizeComboBox.SelectedItem as PaperSize;
				}
			}
			paperSourceComboBox.Items.Clear();
			paperSourceComboBox.DisplayMember = "SourceName";
			foreach (PaperSource item3 in paperSources)
			{
				paperSourceComboBox.Items.Add(item3);
				if (paperSourceComboBox.SelectedItem == null && printDocument.DefaultPageSettings.PaperSource.Kind == item3.Kind && printDocument.DefaultPageSettings.PaperSource.SourceName == item3.SourceName)
				{
					paperSourceComboBox.SelectedItem = item3;
				}
			}
			if (paperSourceComboBox.SelectedItem == null && paperSourceComboBox.Items.Count > 0)
			{
				paperSourceComboBox.SelectedItem = paperSourceComboBox.Items[0] as PaperSource;
				printDocument.DefaultPageSettings.PaperSource = paperSourceComboBox.SelectedItem as PaperSource;
			}
		}

		private void SetMarginsToUI(Margins margins)
		{
			marginsLeftInput.Value = PrinterUnitToUIUnit(margins.Left);
			marginsRightInput.Value = PrinterUnitToUIUnit(margins.Right);
			marginsTopInput.Value = PrinterUnitToUIUnit(margins.Top);
			marginsBottomInput.Value = PrinterUnitToUIUnit(margins.Bottom);
		}

		private Margins GetMarginsFromUI()
		{
			return new Margins(UIUnitToPrinterUnit(marginsLeftInput.Value), UIUnitToPrinterUnit(marginsRightInput.Value), UIUnitToPrinterUnit(marginsTopInput.Value), UIUnitToPrinterUnit(marginsBottomInput.Value));
		}

		private decimal PrinterUnitToUIUnit(int printerValue)
		{
			return Convert.ToDecimal((double)printerValue / 100.0);
		}

		private int UIUnitToPrinterUnit(decimal uiValue)
		{
			return Convert.ToInt32((double)uiValue * 100.0);
		}

		private void WorkflowPageSetupDialog_HelpButtonClicked(object sender, CancelEventArgs e)
		{
			e.Cancel = true;
			GetHelp();
		}

		protected override void OnHelpRequested(HelpEventArgs hlpevent)
		{
			hlpevent.Handled = true;
			GetHelp();
		}

		private void GetHelp()
		{
			DesignerHelpers.ShowHelpFromKeyword(serviceProvider, typeof(WorkflowPageSetupDialog).FullName + ".UI");
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ThemeConfigurationDialog : Form
	{
		private static class ThemeConfigHelpers
		{
			internal static void PopulateActivities(IServiceProvider serviceProvider, TreeView treeView)
			{
				List<Type> list = new List<Type>();
				List<string> list2 = new List<string>();
				list2.Add("System.Workflow.Activities.SequentialWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
				list2.Add("System.Workflow.Activities.StateMachineWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
				list2.Add("System.Workflow.Activities.IfElseBranchActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
				list2.Add(typeof(FaultHandlersActivity).AssemblyQualifiedName);
				list2.Add("System.Workflow.Activities.EventHandlersActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
				list2.Add(typeof(CompensationHandlerActivity).AssemblyQualifiedName);
				list2.Add(typeof(CancellationHandlerActivity).AssemblyQualifiedName);
				foreach (string item in list2)
				{
					Type type = Type.GetType(item, throwOnError: false);
					if (!(type == null))
					{
						list.Add(type);
					}
				}
				IList<Type> list3 = new List<Type>();
				treeView.BeginUpdate();
				treeView.Nodes.Clear();
				TreeNode node = new TreeNode(DR.GetString("WorkflowDesc"));
				treeView.Nodes.Add(node);
				IToolboxService toolboxService = serviceProvider.GetService(typeof(IToolboxService)) as IToolboxService;
				ITypeProviderCreator typeProviderCreator = serviceProvider.GetService(typeof(ITypeProviderCreator)) as ITypeProviderCreator;
				if (toolboxService != null && typeProviderCreator != null)
				{
					ToolboxItemCollection toolboxItems = toolboxService.GetToolboxItems();
					foreach (ToolboxItem item2 in toolboxItems)
					{
						bool flag = item2 is ActivityToolboxItem;
						if (!flag)
						{
							foreach (ToolboxItemFilterAttribute item3 in item2.Filter)
							{
								if (item3.FilterString.StartsWith("Microsoft.Workflow.VSDesigner", StringComparison.OrdinalIgnoreCase) || item3.FilterString.StartsWith("System.Workflow.ComponentModel", StringComparison.OrdinalIgnoreCase))
								{
									flag = true;
									break;
								}
							}
						}
						if (!flag)
						{
							continue;
						}
						Type type2 = null;
						Assembly transientAssembly = typeProviderCreator.GetTransientAssembly(item2.AssemblyName);
						if (transientAssembly != null)
						{
							type2 = transientAssembly.GetType(item2.TypeName);
						}
						if (!(type2 != null))
						{
							continue;
						}
						ConstructorInfo[] constructors = type2.GetConstructors();
						ConstructorInfo[] array = constructors;
						foreach (ConstructorInfo constructorInfo in array)
						{
							if (constructorInfo.IsPublic && constructorInfo.GetParameters().GetLength(0) == 0)
							{
								list.Add(type2);
							}
						}
					}
				}
				foreach (Type item4 in list)
				{
					Type designerBaseType = (item4.FullName.Equals("System.Workflow.Activities.SequentialWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", StringComparison.OrdinalIgnoreCase) ? typeof(IRootDesigner) : typeof(IDesigner));
					Type designerType = ActivityDesigner.GetDesignerType(serviceProvider, item4, designerBaseType);
					if (!(designerType != null) || list3.Contains(designerType))
					{
						continue;
					}
					object[] customAttributes = designerType.GetCustomAttributes(typeof(ActivityDesignerThemeAttribute), inherit: true);
					ActivityDesignerThemeAttribute activityDesignerThemeAttribute = ((customAttributes != null && customAttributes.GetLength(0) > 0) ? (customAttributes[0] as ActivityDesignerThemeAttribute) : null);
					if (activityDesignerThemeAttribute == null)
					{
						continue;
					}
					Image toolboxImage = ActivityToolboxItem.GetToolboxImage(item4);
					if (treeView.ImageList == null)
					{
						treeView.ImageList = new ImageList();
						treeView.ImageList.ColorDepth = ColorDepth.Depth32Bit;
						Image image = DR.GetImage("Activity");
						treeView.ImageList.Images.Add(image, AmbientTheme.TransparentColor);
					}
					TreeNode catagoryNodeForDesigner = GetCatagoryNodeForDesigner(designerType, GetAllTreeNodes(treeView));
					if (catagoryNodeForDesigner != null)
					{
						int num = ((toolboxImage != null) ? treeView.ImageList.Images.Add(toolboxImage, AmbientTheme.TransparentColor) : 0);
						TreeNode treeNode = ((num >= 0) ? new TreeNode(ActivityToolboxItem.GetToolboxDisplayName(item4), num, num) : new TreeNode(ActivityToolboxItem.GetToolboxDisplayName(item4)));
						treeNode.Tag = item4;
						int num2 = catagoryNodeForDesigner.Nodes.Count - 1;
						while (num2 >= 0 && catagoryNodeForDesigner.Nodes[num2].Tag is Type)
						{
							num2--;
						}
						catagoryNodeForDesigner.Nodes.Insert(num2, treeNode);
					}
				}
				treeView.TreeViewNodeSorter = new ThemeTreeNodeComparer();
				treeView.Sort();
				treeView.Nodes[0].ExpandAll();
				treeView.EndUpdate();
			}

			internal static TreeNode GetCatagoryNodeForDesigner(Type designerType, TreeNode[] treeNodes)
			{
				if (designerType == null)
				{
					throw new ArgumentNullException("designerType");
				}
				if (treeNodes == null)
				{
					throw new ArgumentNullException("treeNodes");
				}
				if (treeNodes.Length == 0)
				{
					throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "treeNodes");
				}
				CategoryAttribute categoryAttribute = null;
				CategoryAttribute categoryAttribute2 = null;
				Type type = designerType;
				while (type != typeof(object) && categoryAttribute == null)
				{
					object[] customAttributes = type.GetCustomAttributes(typeof(CategoryAttribute), inherit: false);
					if (customAttributes != null && customAttributes.GetLength(0) > 0)
					{
						if (categoryAttribute2 == null)
						{
							categoryAttribute2 = customAttributes[0] as CategoryAttribute;
						}
						else
						{
							categoryAttribute = customAttributes[0] as CategoryAttribute;
						}
					}
					type = type.BaseType;
				}
				if (categoryAttribute2 == null)
				{
					return null;
				}
				TreeNode treeNode = null;
				TreeNode treeNode2 = treeNodes[0];
				foreach (TreeNode treeNode3 in treeNodes)
				{
					if (categoryAttribute != null && categoryAttribute.Category == treeNode3.Text && (treeNode3.Tag == null || !typeof(Activity).IsAssignableFrom(treeNode3.Tag.GetType())))
					{
						treeNode2 = treeNode3;
					}
					if (categoryAttribute2.Category == treeNode3.Text && (treeNode3.Tag == null || !typeof(Activity).IsAssignableFrom(treeNode3.Tag.GetType())))
					{
						treeNode = treeNode3;
						break;
					}
				}
				if (treeNode == null && treeNode2 != null)
				{
					treeNode = new TreeNode(categoryAttribute2.Category);
					treeNode2.Nodes.Add(treeNode);
				}
				return treeNode;
			}

			internal static DesignerTheme[] GetDesignerThemes(IServiceProvider serviceProvider, WorkflowTheme workflowTheme, TreeNode selectedNode)
			{
				ArrayList arrayList = new ArrayList();
				Queue<TreeNode> queue = new Queue<TreeNode>();
				queue.Enqueue(selectedNode);
				while (queue.Count > 0)
				{
					TreeNode treeNode = queue.Dequeue();
					Type type = treeNode.Tag as Type;
					if (type != null)
					{
						Type designerBaseType = (type.FullName.Equals("System.Workflow.Activities.SequentialWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", StringComparison.OrdinalIgnoreCase) ? typeof(IRootDesigner) : typeof(IDesigner));
						Type designerType = ActivityDesigner.GetDesignerType(serviceProvider, type, designerBaseType);
						if (designerType != null)
						{
							DesignerTheme theme = workflowTheme.GetTheme(designerType);
							if (theme != null)
							{
								arrayList.Add(theme);
							}
						}
						continue;
					}
					foreach (TreeNode node in treeNode.Nodes)
					{
						queue.Enqueue(node);
					}
				}
				return (DesignerTheme[])arrayList.ToArray(typeof(DesignerTheme));
			}

			internal static TreeNode[] GetAllTreeNodes(TreeView treeView)
			{
				List<TreeNode> list = new List<TreeNode>();
				Queue<TreeNodeCollection> queue = new Queue<TreeNodeCollection>();
				queue.Enqueue(treeView.Nodes);
				while (queue.Count > 0)
				{
					TreeNodeCollection treeNodeCollection = queue.Dequeue();
					foreach (TreeNode item in treeNodeCollection)
					{
						list.Add(item);
						if (item.Nodes.Count > 0)
						{
							queue.Enqueue(item.Nodes);
						}
					}
				}
				return list.ToArray();
			}

			internal static void EnsureDesignerThemes(IServiceProvider serviceProvider, WorkflowTheme workflowTheme, TreeNode[] items)
			{
				foreach (TreeNode treeNode in items)
				{
					DesignerTheme designerTheme = null;
					Type type = treeNode.Tag as Type;
					if (type != null)
					{
						Type designerBaseType = (type.FullName.Equals("System.Workflow.Activities.SequentialWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", StringComparison.OrdinalIgnoreCase) ? typeof(IRootDesigner) : typeof(IDesigner));
						Type designerType = ActivityDesigner.GetDesignerType(serviceProvider, type, designerBaseType);
						if (designerType != null)
						{
							designerTheme = workflowTheme.GetTheme(designerType);
						}
					}
				}
			}
		}

		internal sealed class ThemeTreeNodeComparer : IComparer
		{
			int IComparer.Compare(object x, object y)
			{
				TreeNode treeNode = x as TreeNode;
				TreeNode treeNode2 = y as TreeNode;
				if (treeNode.Nodes.Count > treeNode2.Nodes.Count)
				{
					return 1;
				}
				return string.Compare(treeNode.Text, treeNode2.Text, StringComparison.CurrentCulture);
			}
		}

		internal sealed class DesignerPreview : UserControl
		{
			private sealed class PreviewDesignSurface : DesignSurface
			{
				private sealed class PreviewDesignerServiceProvider : IServiceProvider
				{
					private IServiceProvider serviceProvider;

					internal PreviewDesignerServiceProvider(IServiceProvider serviceProvider)
					{
						this.serviceProvider = serviceProvider;
					}

					object IServiceProvider.GetService(Type serviceType)
					{
						if (serviceType == typeof(IPropertyValueUIService))
						{
							return null;
						}
						return serviceProvider.GetService(serviceType);
					}
				}

				internal PreviewDesignSurface(IServiceProvider parentProvider)
					: base(new PreviewDesignerServiceProvider(parentProvider))
				{
					ITypeProvider typeProvider = GetService(typeof(ITypeProvider)) as ITypeProvider;
					if (typeProvider == null)
					{
						TypeProvider typeProvider2 = new TypeProvider(this);
						typeProvider2.AddAssemblyReference(typeof(string).Assembly.Location);
						base.ServiceContainer.AddService(typeof(ITypeProvider), typeProvider2, promote: true);
					}
				}

				protected override IDesigner CreateDesigner(IComponent component, bool rootDesigner)
				{
					IDesigner designer = base.CreateDesigner(component, rootDesigner);
					Activity activity = component as Activity;
					if (designer == null && !rootDesigner && activity != null)
					{
						designer = ActivityDesigner.CreateDesigner(activity.Site, activity);
					}
					return designer;
				}
			}

			private class PreviewWorkflowDesignerLoader : WorkflowDesignerLoader
			{
				public override string FileName => string.Empty;

				public override TextReader GetFileReader(string filePath)
				{
					return null;
				}

				public override TextWriter GetFileWriter(string filePath)
				{
					return null;
				}
			}

			private class ReadonlyWorkflow : WorkflowView
			{
				private sealed class BufferedTheme : IDisposable
				{
					private WorkflowTheme oldTheme;

					internal BufferedTheme(WorkflowTheme themeToApply)
					{
						if (themeToApply != null && WorkflowTheme.CurrentTheme != themeToApply)
						{
							WorkflowTheme.EnableChangeNotification = false;
							oldTheme = WorkflowTheme.CurrentTheme;
							WorkflowTheme.CurrentTheme = themeToApply;
						}
					}

					void IDisposable.Dispose()
					{
						if (oldTheme != null && WorkflowTheme.CurrentTheme != oldTheme)
						{
							WorkflowTheme.CurrentTheme.ReadOnly = false;
							WorkflowTheme.CurrentTheme = oldTheme;
							WorkflowTheme.EnableChangeNotification = true;
						}
					}
				}

				private ThemeConfigurationDialog themeConfigDialog;

				internal ReadonlyWorkflow(ThemeConfigurationDialog themeConfigDialog, IServiceProvider serviceProvider)
					: base(serviceProvider)
				{
					this.themeConfigDialog = themeConfigDialog;
					this.themeConfigDialog.propertiesGrid.PropertyValueChanged += OnThemePropertyChanged;
					base.EnableFitToScreen = false;
					AddDesignerMessageFilter(new ReadonlyMessageFilter());
				}

				protected override void Dispose(bool disposing)
				{
					base.Dispose(disposing);
					if (themeConfigDialog != null && themeConfigDialog.propertiesGrid != null)
					{
						themeConfigDialog.propertiesGrid.PropertyValueChanged -= OnThemePropertyChanged;
					}
				}

				protected override void OnPaint(PaintEventArgs e)
				{
					if (themeConfigDialog == null)
					{
						base.OnPaint(e);
						return;
					}
					using (new BufferedTheme(themeConfigDialog.bufferedTheme))
					{
						base.OnPaint(e);
					}
				}

				protected override void OnLayout(LayoutEventArgs levent)
				{
					if (themeConfigDialog != null)
					{
						using (new BufferedTheme(themeConfigDialog.bufferedTheme))
						{
							base.OnLayout(levent);
						}
						Size extent = base.ActiveLayout.Extent;
						Size size = base.Size;
						PointF pointF = new PointF((float)size.Width / (float)extent.Width, (float)size.Height / (float)extent.Height);
						base.Zoom = Convert.ToInt32(Math.Min(pointF.X, pointF.Y) * 100f);
					}
				}

				private void OnThemePropertyChanged(object sender, PropertyValueChangedEventArgs e)
				{
					if (themeConfigDialog != null)
					{
						using (new BufferedTheme(themeConfigDialog.bufferedTheme))
						{
							OnThemeChange(WorkflowTheme.CurrentTheme, EventArgs.Empty);
						}
					}
				}
			}

			private ThemeConfigurationDialog parent;

			private PreviewDesignSurface surface;

			internal DesignerPreview(ThemeConfigurationDialog parent)
			{
				BackColor = Color.White;
				this.parent = parent;
			}

			protected override void OnLoad(EventArgs e)
			{
				base.OnLoad(e);
				SuspendLayout();
				surface = new PreviewDesignSurface(parent.serviceProvider);
				PreviewWorkflowDesignerLoader loader = new PreviewWorkflowDesignerLoader();
				surface.BeginLoad(loader);
				IDesignerHost designerHost = surface.GetService(typeof(IDesignerHost)) as IDesignerHost;
				Activity activity = designerHost.CreateComponent(Type.GetType("System.Workflow.Activities.SequentialWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")) as Activity;
				activity.Name = "ThemeSequentialWorkflow";
				WorkflowDesignerLoader.AddActivityToDesigner(surface, activity);
				ReadonlyWorkflow readonlyWorkflow = new ReadonlyWorkflow(parent, surface);
				readonlyWorkflow.TabStop = false;
				readonlyWorkflow.Dock = DockStyle.Fill;
				base.Controls.Add(readonlyWorkflow);
				designerHost.Activate();
				ResumeLayout(performLayout: true);
			}

			protected override void Dispose(bool disposing)
			{
				if (disposing && surface != null)
				{
					if (GetService(typeof(IDesignerHost)) is IDesignerHost { RootComponent: not null } designerHost)
					{
						WorkflowDesignerLoader.RemoveActivityFromDesigner(surface, designerHost.RootComponent as Activity);
					}
					ReadonlyWorkflow readonlyWorkflow = ((base.Controls.Count > 0) ? (base.Controls[0] as ReadonlyWorkflow) : null);
					base.Controls.Clear();
					if (readonlyWorkflow != null)
					{
						readonlyWorkflow.Dispose();
						readonlyWorkflow = null;
					}
					surface.Dispose();
					surface = null;
				}
				base.Dispose(disposing);
			}

			internal IDesigner UpdatePreview(Type activityType)
			{
				bool flag = false;
				IDesignerHost designerHost = surface.GetService(typeof(IDesignerHost)) as IDesignerHost;
				CompositeActivity compositeActivity = designerHost.RootComponent as CompositeActivity;
				if (designerHost == null || compositeActivity == null)
				{
					return null;
				}
				IComponent component = null;
				try
				{
					while (compositeActivity.Activities.Count > 0)
					{
						Activity activity = compositeActivity.Activities[0];
						compositeActivity.Activities.Remove(activity);
						WorkflowDesignerLoader.RemoveActivityFromDesigner(surface, activity);
					}
					if (activityType == null || activityType.FullName.Equals("System.Workflow.Activities.SequentialWorkflowActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", StringComparison.OrdinalIgnoreCase))
					{
						AddDummyActivity(compositeActivity, Type.GetType("System.Workflow.Activities.CodeActivity, System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"));
						flag = true;
					}
					else
					{
						IComponent[] array = null;
						object[] customAttributes = activityType.GetCustomAttributes(typeof(ToolboxItemAttribute), inherit: false);
						ToolboxItemAttribute toolboxItemAttribute = ((customAttributes != null && customAttributes.GetLength(0) > 0) ? (customAttributes[0] as ToolboxItemAttribute) : null);
						if (toolboxItemAttribute != null && toolboxItemAttribute.ToolboxItemType != null && typeof(ActivityToolboxItem).IsAssignableFrom(toolboxItemAttribute.ToolboxItemType))
						{
							ActivityToolboxItem activityToolboxItem = Activator.CreateInstance(toolboxItemAttribute.ToolboxItemType, activityType) as ActivityToolboxItem;
							array = activityToolboxItem.CreateComponents(designerHost);
						}
						if (array == null)
						{
							array = new IComponent[1] { Activator.CreateInstance(activityType) as IComponent };
						}
						Activity activity2 = ((array != null && array.Length != 0) ? (array[0] as Activity) : null);
						if (activity2 != null)
						{
							compositeActivity.Activities.Add(activity2);
							EnsureUniqueId(activity2);
							WorkflowDesignerLoader.AddActivityToDesigner(surface, activity2);
							CompositeActivityDesigner compositeActivityDesigner = designerHost.GetDesigner(compositeActivity) as CompositeActivityDesigner;
							ActivityDesigner activityDesigner = designerHost.GetDesigner(activity2) as ActivityDesigner;
							if (compositeActivityDesigner != null && activityDesigner != null)
							{
								compositeActivityDesigner.EnsureVisibleContainedDesigner(activityDesigner);
							}
						}
					}
					if (designerHost.GetService(typeof(ISelectionService)) is ISelectionService selectionService)
					{
						selectionService.SetSelectedComponents(new IComponent[1] { compositeActivity });
					}
					((base.Controls.Count > 0) ? (base.Controls[0] as ReadonlyWorkflow) : null)?.PerformLayout();
					component = ((compositeActivity.Activities.Count > 0 && !flag) ? compositeActivity.Activities[0] : compositeActivity);
				}
				catch
				{
				}
				if (component == null)
				{
					return null;
				}
				return designerHost.GetDesigner(component);
			}

			private void AddDummyActivity(CompositeActivity parentActivity, Type activityType)
			{
				if (surface.GetService(typeof(IDesignerHost)) is IDesignerHost && Activator.CreateInstance(activityType) is Activity activity)
				{
					parentActivity.Activities.Add(activity);
					EnsureUniqueId(activity);
					WorkflowDesignerLoader.AddActivityToDesigner(surface, activity);
				}
			}

			private void EnsureUniqueId(Activity addedActivity)
			{
				Dictionary<string, int> dictionary = new Dictionary<string, int>();
				Queue<Activity> queue = new Queue<Activity>();
				queue.Enqueue(addedActivity);
				while (queue.Count > 0)
				{
					Activity activity = queue.Dequeue();
					string fullName = activity.GetType().FullName;
					int num = ((!dictionary.ContainsKey(fullName)) ? 1 : dictionary[fullName]);
					activity.Name = activity.GetType().Name + num.ToString(CultureInfo.InvariantCulture);
					num++;
					if (dictionary.ContainsKey(fullName))
					{
						dictionary[fullName] = num;
					}
					else
					{
						dictionary.Add(fullName, num);
					}
					if (!(activity is CompositeActivity compositeActivity))
					{
						continue;
					}
					foreach (Activity activity2 in compositeActivity.Activities)
					{
						queue.Enqueue(activity2);
					}
				}
			}
		}

		private Button button3;

		private TreeView designerTreeView;

		private Label themeNameLabel;

		private Label themeLocationLabel;

		private TextBox themeNameTextBox;

		private Panel themePanel;

		private Panel themeConfigPanel;

		private Panel dummyPreviewPanel;

		private TextBox themeLocationTextBox;

		private Label previewLabel;

		private Label selectDesignerLabel;

		private PropertyGrid propertiesGrid;

		private Button themeLocationButton;

		private Button okButton;

		private Button cancelButton;

		private Button previewButton;

		private IContainer components;

		private IServiceProvider serviceProvider;

		private bool previewShown;

		private WorkflowTheme bufferedTheme;

		private DesignerPreview designerPreview;

		private Splitter splitter;

		private TableLayoutPanel okCancelTableLayoutPanel;

		private TableLayoutPanel nameLocationTableLayoutPanel;

		private bool themeDirty;

		public WorkflowTheme ComposedTheme => bufferedTheme;

		private Font StandardFont
		{
			get
			{
				Font result = SystemInformation.MenuFont;
				if (serviceProvider != null)
				{
					IUIService iUIService = (IUIService)serviceProvider.GetService(typeof(IUIService));
					if (iUIService != null)
					{
						result = (Font)iUIService.Styles["DialogFont"];
					}
				}
				return result;
			}
		}

		private bool ShowPreview
		{
			get
			{
				return previewShown;
			}
			set
			{
				previewShown = value;
				previewLabel.Visible = previewShown;
				designerPreview.Visible = previewShown;
				if (previewShown)
				{
					themePanel.Width = designerPreview.Right + (designerPreview.Left - propertiesGrid.Right) / 2;
					previewButton.Text = DR.GetString("Preview") + " <<";
				}
				else
				{
					themePanel.Width = themeConfigPanel.Right + themeConfigPanel.Left;
					previewButton.Text = DR.GetString("Preview") + " >>";
				}
				base.Width = themePanel.Right + themePanel.Left + base.Margin.Left + base.Margin.Right;
				themePanel.Invalidate();
			}
		}

		public ThemeConfigurationDialog(IServiceProvider serviceProvider)
			: this(serviceProvider, null)
		{
		}

		public ThemeConfigurationDialog(IServiceProvider serviceProvider, WorkflowTheme theme)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			this.serviceProvider = serviceProvider;
			if (theme == null)
			{
				bufferedTheme = new WorkflowTheme();
				themeDirty = true;
			}
			else
			{
				bufferedTheme = theme;
				themeDirty = false;
			}
			bufferedTheme.ReadOnly = false;
			InitializeComponent();
			themeLocationButton.AutoSize = true;
			Font = StandardFont;
			SystemEvents.UserPreferenceChanged += OnOperatingSystemSettingsChanged;
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				if (components != null)
				{
					components.Dispose();
				}
				SystemEvents.UserPreferenceChanged -= OnOperatingSystemSettingsChanged;
				if (designerPreview != null)
				{
					designerPreview.Dispose();
					designerPreview = null;
				}
				if (bufferedTheme != null)
				{
					((IDisposable)bufferedTheme).Dispose();
					bufferedTheme = null;
				}
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(System.Workflow.ComponentModel.Design.ThemeConfigurationDialog));
			this.designerTreeView = new System.Windows.Forms.TreeView();
			this.themeNameLabel = new System.Windows.Forms.Label();
			this.themeLocationLabel = new System.Windows.Forms.Label();
			this.themeNameTextBox = new System.Windows.Forms.TextBox();
			this.nameLocationTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.themeLocationButton = new System.Windows.Forms.Button();
			this.themeLocationTextBox = new System.Windows.Forms.TextBox();
			this.button3 = new System.Windows.Forms.Button();
			this.okButton = new System.Windows.Forms.Button();
			this.cancelButton = new System.Windows.Forms.Button();
			this.themePanel = new System.Windows.Forms.Panel();
			this.themeConfigPanel = new System.Windows.Forms.Panel();
			this.propertiesGrid = new System.Windows.Forms.PropertyGrid();
			this.previewLabel = new System.Windows.Forms.Label();
			this.selectDesignerLabel = new System.Windows.Forms.Label();
			this.dummyPreviewPanel = new System.Windows.Forms.Panel();
			this.previewButton = new System.Windows.Forms.Button();
			this.okCancelTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.nameLocationTableLayoutPanel.SuspendLayout();
			this.themePanel.SuspendLayout();
			this.themeConfigPanel.SuspendLayout();
			this.okCancelTableLayoutPanel.SuspendLayout();
			base.SuspendLayout();
			resources.ApplyResources(this.designerTreeView, "designerTreeView");
			this.designerTreeView.Name = "designerTreeView";
			resources.ApplyResources(this.themeNameLabel, "themeNameLabel");
			this.themeNameLabel.Margin = new System.Windows.Forms.Padding(0, 0, 3, 3);
			this.themeNameLabel.Name = "themeNameLabel";
			resources.ApplyResources(this.themeLocationLabel, "themeLocationLabel");
			this.themeLocationLabel.Margin = new System.Windows.Forms.Padding(0, 3, 3, 0);
			this.themeLocationLabel.Name = "themeLocationLabel";
			resources.ApplyResources(this.themeNameTextBox, "themeNameTextBox");
			this.nameLocationTableLayoutPanel.SetColumnSpan(this.themeNameTextBox, 2);
			this.themeNameTextBox.Margin = new System.Windows.Forms.Padding(3, 0, 0, 3);
			this.themeNameTextBox.Name = "themeNameTextBox";
			resources.ApplyResources(this.nameLocationTableLayoutPanel, "nameLocationTableLayoutPanel");
			this.nameLocationTableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.nameLocationTableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100f));
			this.nameLocationTableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
			this.nameLocationTableLayoutPanel.Controls.Add(this.themeNameLabel, 0, 0);
			this.nameLocationTableLayoutPanel.Controls.Add(this.themeNameTextBox, 1, 0);
			this.nameLocationTableLayoutPanel.Controls.Add(this.themeLocationButton, 2, 1);
			this.nameLocationTableLayoutPanel.Controls.Add(this.themeLocationLabel, 0, 1);
			this.nameLocationTableLayoutPanel.Controls.Add(this.themeLocationTextBox, 1, 1);
			this.nameLocationTableLayoutPanel.Name = "nameLocationTableLayoutPanel";
			this.nameLocationTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50f));
			this.nameLocationTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50f));
			resources.ApplyResources(this.themeLocationButton, "themeLocationButton");
			this.themeLocationButton.Margin = new System.Windows.Forms.Padding(3, 3, 0, 0);
			this.themeLocationButton.Name = "themeLocationButton";
			resources.ApplyResources(this.themeLocationTextBox, "themeLocationTextBox");
			this.themeLocationTextBox.Margin = new System.Windows.Forms.Padding(3, 3, 3, 0);
			this.themeLocationTextBox.Name = "themeLocationTextBox";
			resources.ApplyResources(this.button3, "button3");
			this.button3.Name = "button3";
			resources.ApplyResources(this.okButton, "okButton");
			this.okButton.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.okButton.Margin = new System.Windows.Forms.Padding(0, 0, 3, 0);
			this.okButton.Name = "okButton";
			resources.ApplyResources(this.cancelButton, "cancelButton");
			this.cancelButton.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.cancelButton.Margin = new System.Windows.Forms.Padding(3, 0, 3, 0);
			this.cancelButton.Name = "cancelButton";
			this.themePanel.Controls.Add(this.themeConfigPanel);
			this.themePanel.Controls.Add(this.previewLabel);
			this.themePanel.Controls.Add(this.selectDesignerLabel);
			this.themePanel.Controls.Add(this.dummyPreviewPanel);
			resources.ApplyResources(this.themePanel, "themePanel");
			this.themePanel.Margin = new System.Windows.Forms.Padding(4);
			this.themePanel.Name = "themePanel";
			this.themeConfigPanel.Controls.Add(this.designerTreeView);
			this.themeConfigPanel.Controls.Add(this.propertiesGrid);
			resources.ApplyResources(this.themeConfigPanel, "themeConfigPanel");
			this.themeConfigPanel.Name = "themeConfigPanel";
			this.propertiesGrid.CommandsVisibleIfAvailable = true;
			resources.ApplyResources(this.propertiesGrid, "propertiesGrid");
			this.propertiesGrid.Name = "propertiesGrid";
			this.propertiesGrid.ToolbarVisible = false;
			resources.ApplyResources(this.previewLabel, "previewLabel");
			this.previewLabel.Name = "previewLabel";
			resources.ApplyResources(this.selectDesignerLabel, "selectDesignerLabel");
			this.selectDesignerLabel.Name = "selectDesignerLabel";
			resources.ApplyResources(this.dummyPreviewPanel, "dummyPreviewPanel");
			this.dummyPreviewPanel.Name = "dummyPreviewPanel";
			resources.ApplyResources(this.previewButton, "previewButton");
			this.previewButton.Margin = new System.Windows.Forms.Padding(3, 0, 0, 0);
			this.previewButton.Name = "previewButton";
			resources.ApplyResources(this.okCancelTableLayoutPanel, "okCancelTableLayoutPanel");
			this.okCancelTableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 33f));
			this.okCancelTableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 33f));
			this.okCancelTableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 33f));
			this.okCancelTableLayoutPanel.Controls.Add(this.okButton, 0, 0);
			this.okCancelTableLayoutPanel.Controls.Add(this.cancelButton, 1, 0);
			this.okCancelTableLayoutPanel.Controls.Add(this.previewButton, 2, 0);
			this.okCancelTableLayoutPanel.Name = "okCancelTableLayoutPanel";
			this.okCancelTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100f));
			base.AcceptButton = this.okButton;
			base.CancelButton = this.cancelButton;
			resources.ApplyResources(this, "$this");
			base.Controls.Add(this.nameLocationTableLayoutPanel);
			base.Controls.Add(this.okCancelTableLayoutPanel);
			base.Controls.Add(this.themePanel);
			base.Controls.Add(this.button3);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "ThemeConfigurationDialog";
			base.ShowInTaskbar = false;
			base.HelpButton = true;
			base.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.nameLocationTableLayoutPanel.ResumeLayout(false);
			this.nameLocationTableLayoutPanel.PerformLayout();
			this.themePanel.ResumeLayout(false);
			this.themeConfigPanel.ResumeLayout(false);
			this.okCancelTableLayoutPanel.ResumeLayout(false);
			this.okCancelTableLayoutPanel.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}

		protected override void OnLoad(EventArgs e)
		{
			base.OnLoad(e);
			try
			{
				Cursor.Current = Cursors.WaitCursor;
				InitializeControls();
			}
			finally
			{
				Cursor.Current = Cursors.Default;
			}
		}

		protected override void OnClosing(CancelEventArgs e)
		{
			base.OnClosing(e);
			bufferedTheme.ReadOnly = true;
		}

		private void InitializeControls()
		{
			base.HelpButtonClicked += OnHelpClicked;
			themeNameTextBox.Text = bufferedTheme.Name;
			themeLocationTextBox.Text = bufferedTheme.FilePath;
			propertiesGrid.PropertySort = PropertySort.Categorized;
			designerPreview = new DesignerPreview(this);
			dummyPreviewPanel.Parent.Controls.Add(designerPreview);
			designerPreview.TabStop = false;
			designerPreview.Location = dummyPreviewPanel.Location;
			designerPreview.Size = dummyPreviewPanel.Size;
			dummyPreviewPanel.Visible = false;
			designerPreview.Parent.Controls.Remove(dummyPreviewPanel);
			designerTreeView.ShowLines = false;
			designerTreeView.ShowPlusMinus = false;
			designerTreeView.ShowRootLines = false;
			designerTreeView.ShowNodeToolTips = true;
			designerTreeView.HideSelection = false;
			designerTreeView.ItemHeight = Math.Max(designerTreeView.ItemHeight, 18);
			ThemeConfigHelpers.PopulateActivities(serviceProvider, designerTreeView);
			themeConfigPanel.Controls.Remove(designerTreeView);
			themeConfigPanel.Controls.Remove(propertiesGrid);
			designerTreeView.Dock = DockStyle.Left;
			splitter = new Splitter();
			splitter.Dock = DockStyle.Left;
			propertiesGrid.Dock = DockStyle.Fill;
			themeConfigPanel.Controls.AddRange(new Control[3] { propertiesGrid, splitter, designerTreeView });
			themePanel.Paint += OnThemePanelPaint;
			previewButton.Click += OnPreviewClicked;
			designerTreeView.AfterSelect += OnDesignerSelectionChanged;
			themeLocationButton.Click += OnThemeLocationClicked;
			okButton.Click += OnOk;
			propertiesGrid.PropertyValueChanged += OnThemePropertyChanged;
			themeNameTextBox.TextChanged += OnThemeChanged;
			themeLocationTextBox.TextChanged += OnThemeChanged;
			designerTreeView.SelectedNode = ((designerTreeView.Nodes.Count > 0) ? designerTreeView.Nodes[0] : null);
			designerTreeView.SelectedNode.EnsureVisible();
			ShowPreview = true;
		}

		private void OnThemeChanged(object sender, EventArgs e)
		{
			themeDirty = true;
		}

		private void OnThemePropertyChanged(object sender, PropertyValueChangedEventArgs e)
		{
			themeDirty = true;
		}

		private bool ValidateControls(out string error, out Control control)
		{
			error = string.Empty;
			control = null;
			if (themeNameTextBox.Text == null || themeNameTextBox.Text.Trim().Length == 0)
			{
				error = DR.GetString("ThemeNameNotValid");
				control = themeNameTextBox;
				return false;
			}
			if (themeLocationTextBox.Text == null)
			{
				error = DR.GetString("ThemePathNotValid");
				control = themeNameTextBox;
				return false;
			}
			string text = themeLocationTextBox.Text.Trim();
			if (text.IndexOfAny(Path.GetInvalidPathChars()) >= 0 || !Path.IsPathRooted(text) || !Path.HasExtension(text))
			{
				error = DR.GetString("ThemePathNotValid");
				control = themeLocationTextBox;
				return false;
			}
			string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(text);
			string extension = Path.GetExtension(text);
			if (fileNameWithoutExtension == null || fileNameWithoutExtension.Trim().Length == 0 || extension == null || extension.Trim().Length == 0)
			{
				error = DR.GetString("ThemePathNotValid");
				control = themeLocationTextBox;
				return false;
			}
			if (!extension.Equals("*.wtm".Replace("*", ""), StringComparison.Ordinal))
			{
				error = DR.GetString("ThemeFileNotXml");
				control = themeLocationTextBox;
				return false;
			}
			return true;
		}

		private void OnOk(object sender, EventArgs e)
		{
			string error = string.Empty;
			Control control = null;
			if (!ValidateControls(out error, out control))
			{
				base.DialogResult = DialogResult.None;
				DesignerHelpers.ShowError(serviceProvider, error);
				if (control != null)
				{
					if (control is TextBox textBox)
					{
						textBox.SelectionStart = 0;
						textBox.SelectionLength = ((textBox.Text != null) ? textBox.Text.Length : 0);
					}
					control.Focus();
				}
			}
			else if (!bufferedTheme.FilePath.Equals(themeLocationTextBox.Text.Trim(), StringComparison.OrdinalIgnoreCase) && DialogResult.No == DesignerHelpers.ShowMessage(serviceProvider, DR.GetString("UpdateRelativePaths"), DR.GetString("WorkflowDesignerTitle"), MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1))
			{
				base.DialogResult = DialogResult.None;
			}
			else
			{
				if (!themeDirty)
				{
					return;
				}
				try
				{
					Cursor.Current = Cursors.WaitCursor;
					ThemeConfigHelpers.EnsureDesignerThemes(serviceProvider, bufferedTheme, ThemeConfigHelpers.GetAllTreeNodes(designerTreeView));
					bufferedTheme.ReadOnly = false;
					bufferedTheme.Name = themeNameTextBox.Text.Trim();
					bufferedTheme.Description = DR.GetString("ThemeDescription");
					bufferedTheme.Save(themeLocationTextBox.Text.Trim());
					themeDirty = false;
					bufferedTheme.ReadOnly = true;
				}
				catch
				{
					DesignerHelpers.ShowError(serviceProvider, DR.GetString("ThemeFileCreationError"));
					themeLocationTextBox.SelectionStart = 0;
					themeLocationTextBox.SelectionLength = ((themeLocationTextBox.Text != null) ? themeLocationTextBox.Text.Length : 0);
					themeLocationTextBox.Focus();
					base.DialogResult = DialogResult.None;
				}
				finally
				{
					Cursor.Current = Cursors.Default;
				}
			}
		}

		private void OnHelpClicked(object sender, CancelEventArgs e)
		{
			e.Cancel = true;
			ShowHelp();
		}

		protected override void OnHelpRequested(HelpEventArgs e)
		{
			ShowHelp();
			e.Handled = true;
		}

		private void ShowHelp()
		{
			DesignerHelpers.ShowHelpFromKeyword(serviceProvider, typeof(ThemeConfigurationDialog).FullName + ".UI");
		}

		private void OnThemePanelPaint(object sender, PaintEventArgs e)
		{
			e.Graphics.DrawRectangle(SystemPens.ControlDark, 0, 0, themePanel.ClientSize.Width - 1, themePanel.ClientSize.Height - 2);
			if (previewShown)
			{
				Point pt = new Point(propertiesGrid.Right + (dummyPreviewPanel.Left - propertiesGrid.Right) / 2, themePanel.Margin.Top);
				Point pt2 = new Point(pt.X, themePanel.Height - themePanel.Margin.Bottom);
				e.Graphics.DrawLine(SystemPens.ControlDark, pt, pt2);
			}
			Size size = new Size(8, 8);
			using Pen pen = new Pen(Color.Black, 1f);
			pen.DashStyle = DashStyle.Dot;
			e.Graphics.DrawLine(pen, designerPreview.Left - size.Width, designerPreview.Top - 1, designerPreview.Right + size.Width, designerPreview.Top - 1);
			e.Graphics.DrawLine(pen, designerPreview.Left - size.Width, designerPreview.Bottom + 1, designerPreview.Right + size.Width, designerPreview.Bottom + 1);
			e.Graphics.DrawLine(pen, designerPreview.Left - 1, designerPreview.Top - size.Height, designerPreview.Left - 1, designerPreview.Bottom + size.Height);
			e.Graphics.DrawLine(pen, designerPreview.Right + 1, designerPreview.Top - size.Height, designerPreview.Right + 1, designerPreview.Bottom + size.Height);
		}

		private void OnDesignerSelectionChanged(object sender, TreeViewEventArgs eventArgs)
		{
			Type type = ((eventArgs.Node != null && typeof(Activity).IsAssignableFrom(eventArgs.Node.Tag as Type)) ? (eventArgs.Node.Tag as Type) : null);
			IDesigner designer = designerPreview.UpdatePreview(type);
			object[] selectedObjects = null;
			if (type == null)
			{
				if (eventArgs.Node != null)
				{
					object obj;
					if (eventArgs.Node.Parent == null)
					{
						obj = new object[1] { bufferedTheme.AmbientTheme };
					}
					else
					{
						object[] designerThemes = ThemeConfigHelpers.GetDesignerThemes(serviceProvider, bufferedTheme, eventArgs.Node);
						obj = designerThemes;
					}
					selectedObjects = (object[])obj;
				}
			}
			else
			{
				selectedObjects = ((designer == null) ? null : new object[1] { bufferedTheme.GetDesignerTheme(designer as ActivityDesigner) });
			}
			propertiesGrid.SelectedObjects = selectedObjects;
		}

		private void OnPreviewClicked(object sender, EventArgs e)
		{
			ShowPreview = !ShowPreview;
		}

		private void OnThemeLocationClicked(object sender, EventArgs e)
		{
			SaveFileDialog saveFileDialog = new SaveFileDialog();
			saveFileDialog.AddExtension = true;
			saveFileDialog.DefaultExt = "*.wtm";
			saveFileDialog.Filter = DR.GetString("ThemeFileFilter");
			saveFileDialog.RestoreDirectory = false;
			if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
			{
				themeLocationTextBox.Text = saveFileDialog.FileName;
			}
		}

		private void OnOperatingSystemSettingsChanged(object sender, UserPreferenceChangedEventArgs e)
		{
			if (e.Category == UserPreferenceCategory.Color || e.Category == UserPreferenceCategory.VisualStyle)
			{
				Font = StandardFont;
			}
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class TypeBrowserDialog : Form, ISite, IServiceProvider
	{
		private sealed class ListItemComparer : IComparer
		{
			private bool compareTypeName;

			private bool ascending;

			internal ListItemComparer(bool compareTypeName, bool ascending)
			{
				this.compareTypeName = compareTypeName;
				this.ascending = ascending;
			}

			public int Compare(object first, object second)
			{
				int num = 0;
				num = ((!compareTypeName) ? string.Compare(((ListViewItem)first).SubItems[1].Text, ((ListViewItem)second).SubItems[1].Text) : string.Compare(((ListViewItem)first).Text, ((ListViewItem)second).Text));
				if (!ascending)
				{
					return -1 * num;
				}
				return num;
			}
		}

		private sealed class HelpTextWindow : RichTextBox
		{
			internal HelpTextWindow()
			{
				base.TabStop = false;
				base.BorderStyle = BorderStyle.None;
				base.ReadOnly = true;
				BackColor = SystemColors.Control;
				Multiline = true;
				base.ScrollBars = RichTextBoxScrollBars.Both;
				Cursor = Cursors.Default;
			}

			protected override void WndProc(ref System.Windows.Forms.Message msg)
			{
				if (msg.Msg < 512 || msg.Msg > 525)
				{
					base.WndProc(ref msg);
				}
			}

			internal void UpdateHelpText(Type selectedType)
			{
				using Font selectionFont = new Font(Font.FontFamily, Font.SizeInPoints, FontStyle.Bold);
				Clear();
				if (null != selectedType)
				{
					string[] array = new string[3] { selectedType.Name, null, null };
					try
					{
						array[1] = ((selectedType.Namespace != null && selectedType.Namespace.Length > 0) ? selectedType.Namespace : ResMgr.GetString("IDS_GLOBALNS"));
					}
					catch (NullReferenceException)
					{
					}
					array[1] = "{" + array[1] + "}";
					array[2] = ((selectedType.Assembly != null) ? selectedType.Assembly.GetName().FullName : "<Current Project>");
					Color[] array2 = new Color[3]
					{
						Color.DarkRed,
						Color.Green,
						Color.Blue
					};
					Text = ResMgr.GetString("IDS_SELECTEDTYPE") + " " + array[0] + " " + ResMgr.GetString("IDS_MEMBEROF") + " " + array[1] + "\r\n" + ResMgr.GetString("IDS_CONTAINEDINASM") + " " + array[2];
					int num = 0;
					for (int i = 0; i < array.GetLength(0); i++)
					{
						int num2 = num;
						num = Find(array[i], num, RichTextBoxFinds.WholeWord | RichTextBoxFinds.MatchCase);
						base.SelectionColor = array2[i];
						base.SelectionFont = selectionFont;
						num += array[i].Length;
					}
				}
				else
				{
					Text = ResMgr.GetString("IDS_NOTYPESSELECTED");
					base.SelectionStart = 0;
					SelectionLength = Text.Length;
					base.SelectionColor = Color.DarkRed;
					base.SelectionFont = selectionFont;
				}
			}
		}

		[TypeConverter(typeof(ParamaeterDataConverter))]
		[Editor(typeof(TypeBrowserEditor), typeof(UITypeEditor))]
		private sealed class ParameterData : ITypeFilterProvider
		{
			private Type parameterType;

			private Type type;

			public Type Type
			{
				get
				{
					return type;
				}
				set
				{
					type = value;
				}
			}

			public Type ParameterType
			{
				get
				{
					return parameterType;
				}
				set
				{
					parameterType = value;
				}
			}

			public string FilterDescription => SR.GetString("FilterDescription_GenericArgument", parameterType.Name);

			public bool CanFilterType(Type type, bool throwOnError)
			{
				bool flag = true;
				if (type.IsByRef || !System.Workflow.ComponentModel.Compiler.TypeProvider.IsAssignable(parameterType.BaseType, type))
				{
					flag = false;
				}
				if (throwOnError && !flag)
				{
					throw new Exception(SR.GetString("Error_ArgumentTypeNotMatchParameter"));
				}
				return flag;
			}
		}

		[TypeConverter(typeof(GenericParametersConverter))]
		private class GenericParameters
		{
			private ParameterData[] parameters = new ParameterData[0];

			public ParameterData[] Parameters
			{
				get
				{
					return parameters;
				}
				set
				{
					parameters = value;
				}
			}
		}

		private class GenericParametersConverter : TypeConverter
		{
			public override bool GetPropertiesSupported(ITypeDescriptorContext context)
			{
				return true;
			}

			public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
			{
				PropertyDescriptorCollection propertyDescriptorCollection = new PropertyDescriptorCollection(null);
				GenericParameters genericParameters = value as GenericParameters;
				ParameterData[] parameters = genericParameters.Parameters;
				foreach (ParameterData parameterData in parameters)
				{
					propertyDescriptorCollection.Add(new ParameterDataPropertyDescriptor(context, TypeDescriptor.CreateProperty(typeof(GenericParameters), parameterData.ParameterType.Name, typeof(ParameterData))));
				}
				return propertyDescriptorCollection;
			}
		}

		private class ParamaeterDataConverter : TypeConverter
		{
			public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
			{
				if (sourceType == typeof(string))
				{
					return true;
				}
				return base.CanConvertFrom(context, sourceType);
			}

			public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
			{
				if (destinationType == typeof(string))
				{
					return true;
				}
				return base.CanConvertTo(context, destinationType);
			}

			public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
			{
				if (value == null)
				{
					return new ParameterData();
				}
				if (value is string)
				{
					ParameterData parameterData = new ParameterData();
					if ((string)value != string.Empty)
					{
						ITypeProvider typeProvider = context.GetService(typeof(ITypeProvider)) as ITypeProvider;
						parameterData.Type = typeProvider.GetType(value as string, throwOnError: true);
					}
					return parameterData;
				}
				return base.ConvertFrom(context, culture, value);
			}

			public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
			{
				if (destinationType == typeof(string))
				{
					ParameterData parameterData = value as ParameterData;
					if (parameterData.Type != null)
					{
						return parameterData.Type.AssemblyQualifiedName;
					}
					return string.Empty;
				}
				if (destinationType == null)
				{
					return string.Empty;
				}
				return base.ConvertTo(context, culture, value, destinationType);
			}
		}

		private class ParameterDataPropertyDescriptor : PropertyDescriptor
		{
			private PropertyDescriptor realPropertyDescriptor;

			private IServiceProvider serviceProvider;

			public override string Category => SR.GetString("GenericParameters");

			public override AttributeCollection Attributes => realPropertyDescriptor.Attributes;

			public override TypeConverter Converter => realPropertyDescriptor.Converter;

			public override string Description => realPropertyDescriptor.Description;

			public override Type ComponentType => realPropertyDescriptor.ComponentType;

			public override Type PropertyType => realPropertyDescriptor.PropertyType;

			public override bool IsReadOnly => false;

			internal ParameterDataPropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor desc)
				: base(desc, null)
			{
				realPropertyDescriptor = desc;
				this.serviceProvider = serviceProvider;
			}

			public override void ResetValue(object component)
			{
				realPropertyDescriptor.ResetValue(component);
			}

			public override bool CanResetValue(object component)
			{
				return realPropertyDescriptor.CanResetValue(component);
			}

			public override bool ShouldSerializeValue(object component)
			{
				return realPropertyDescriptor.ShouldSerializeValue(component);
			}

			public override object GetValue(object component)
			{
				GenericParameters genericParameters = component as GenericParameters;
				ParameterData[] parameters = genericParameters.Parameters;
				foreach (ParameterData parameterData in parameters)
				{
					if (parameterData.ParameterType.Name == Name)
					{
						return parameterData;
					}
				}
				return null;
			}

			public override void SetValue(object component, object value)
			{
				GenericParameters genericParameters = component as GenericParameters;
				ParameterData[] parameters = genericParameters.Parameters;
				foreach (ParameterData parameterData in parameters)
				{
					if (parameterData.ParameterType.Name == Name)
					{
						parameterData.Type = ((ParameterData)value).Type;
						break;
					}
				}
			}
		}

		private class DummySite : ISite, IServiceProvider
		{
			private IServiceProvider serviceProvider;

			public IComponent Component => null;

			public IContainer Container => null;

			public bool DesignMode => true;

			public string Name
			{
				get
				{
					return string.Empty;
				}
				set
				{
				}
			}

			internal DummySite(IServiceProvider serviceProvider)
			{
				this.serviceProvider = serviceProvider;
			}

			public object GetService(Type type)
			{
				return serviceProvider.GetService(type);
			}
		}

		private static ResourceManager ResMgr;

		private IServiceProvider serviceProvider;

		private TypeProvider localTypeProvider;

		private ImageList artifactImages;

		private string selectedTypeName;

		private IntPtr bitmapSortUp;

		private IntPtr bitmapSortDown;

		private HelpTextWindow helpTextWindow;

		private ITypeFilterProvider typeFilterProvider;

		private bool sortListViewAscending;

		private bool refreshTreeView;

		private bool refreshTypeTextBox;

		private string lastComboboxValue;

		private Type selectedType;

		private GenericParameters genericParameters = new GenericParameters();

		private Button buttonCancel;

		private Button buttonOK;

		private TextBox helpTextHolder;

		private System.Windows.Forms.TabControl tabControl;

		private TabPage typeTabPage;

		private TabPage advancedTabPage;

		private TextBox typeTextBox;

		private Button buttonBrowse;

		private PropertyGrid genericParametersPropertyGrid;

		private TableLayoutPanel okCancelTableLayoutPanel;

		private TableLayoutPanel typeNameTableLayoutPanel;

		private TextBox artifactLabel;

		private SplitContainer typeSplitContainer;

		private TreeView artifactTreeView;

		private ListView artifactListView;

		private ColumnHeader typeName;

		private ColumnHeader fullyQualifiedName;

		private Label typeNameLabel;

		public Type SelectedType => selectedType;

		private ITypeProvider TypeProvider
		{
			get
			{
				ITypeProvider typeProvider = localTypeProvider;
				if (typeProvider == null)
				{
					typeProvider = (ITypeProvider)serviceProvider.GetService(typeof(ITypeProvider));
				}
				if (typeProvider == null)
				{
					throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(ITypeProvider).FullName));
				}
				return typeProvider;
			}
		}

		IComponent ISite.Component => null;

		bool ISite.DesignMode => true;

		string ISite.Name
		{
			get
			{
				return "";
			}
			set
			{
			}
		}

		IContainer ISite.Container => null;

		static TypeBrowserDialog()
		{
			ResMgr = new ResourceManager("System.Workflow.ComponentModel.Design.ArtifactReference", Assembly.GetExecutingAssembly());
		}

		public TypeBrowserDialog(IServiceProvider serviceProvider, ITypeFilterProvider filterProvider, string selectedTypeName, TypeProvider typeProvider)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			localTypeProvider = typeProvider;
			this.serviceProvider = serviceProvider;
			Helpers.AddTypeProviderAssembliesFromRegistry(localTypeProvider, serviceProvider);
			InitializeDialog(serviceProvider, filterProvider, selectedTypeName);
			buttonBrowse.Visible = true;
			buttonBrowse.Enabled = true;
			buttonBrowse.BringToFront();
		}

		public TypeBrowserDialog(IServiceProvider serviceProvider, ITypeFilterProvider filterProvider, string selectedTypeName)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			InitializeDialog(serviceProvider, filterProvider, selectedTypeName);
		}

		internal void InitializeDialog(IServiceProvider serviceProvider, ITypeFilterProvider filterProvider, string selectedTypeName)
		{
			this.serviceProvider = serviceProvider;
			sortListViewAscending = true;
			refreshTreeView = false;
			refreshTypeTextBox = false;
			this.selectedTypeName = selectedTypeName;
			typeFilterProvider = filterProvider;
			IDesignerHost designerHost = this.serviceProvider.GetService(typeof(IDesignerHost)) as IDesignerHost;
			WorkflowDesignerLoader workflowDesignerLoader = this.serviceProvider.GetService(typeof(WorkflowDesignerLoader)) as WorkflowDesignerLoader;
			if (designerHost == null || designerHost.RootComponent == null || workflowDesignerLoader == null || workflowDesignerLoader.InDebugMode)
			{
				throw new Exception(DR.GetString("Error_WorkflowNotLoaded"));
			}
			InitializeComponent();
			CustomInitializeComponent();
			genericParametersPropertyGrid.Site = new DummySite(this.serviceProvider);
		}

		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(System.Workflow.ComponentModel.Design.TypeBrowserDialog));
			this.buttonCancel = new System.Windows.Forms.Button();
			this.helpTextHolder = new System.Windows.Forms.TextBox();
			this.buttonOK = new System.Windows.Forms.Button();
			this.tabControl = new System.Windows.Forms.TabControl();
			this.typeTabPage = new System.Windows.Forms.TabPage();
			this.typeSplitContainer = new System.Windows.Forms.SplitContainer();
			this.artifactTreeView = new System.Windows.Forms.TreeView();
			this.artifactListView = new System.Windows.Forms.ListView();
			this.typeName = new System.Windows.Forms.ColumnHeader();
			this.fullyQualifiedName = new System.Windows.Forms.ColumnHeader();
			this.advancedTabPage = new System.Windows.Forms.TabPage();
			this.genericParametersPropertyGrid = new System.Windows.Forms.PropertyGrid();
			this.buttonBrowse = new System.Windows.Forms.Button();
			this.typeTextBox = new System.Windows.Forms.TextBox();
			this.typeNameLabel = new System.Windows.Forms.Label();
			this.okCancelTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.typeNameTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.artifactLabel = new System.Windows.Forms.TextBox();
			this.tabControl.SuspendLayout();
			this.typeTabPage.SuspendLayout();
			this.typeSplitContainer.Panel1.SuspendLayout();
			this.typeSplitContainer.Panel2.SuspendLayout();
			this.typeSplitContainer.SuspendLayout();
			this.advancedTabPage.SuspendLayout();
			this.okCancelTableLayoutPanel.SuspendLayout();
			this.typeNameTableLayoutPanel.SuspendLayout();
			base.SuspendLayout();
			resources.ApplyResources(this.buttonCancel, "buttonCancel");
			this.buttonCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.buttonCancel.Name = "buttonCancel";
			resources.ApplyResources(this.helpTextHolder, "helpTextHolder");
			this.helpTextHolder.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.helpTextHolder.Name = "helpTextHolder";
			this.helpTextHolder.ReadOnly = true;
			resources.ApplyResources(this.buttonOK, "buttonOK");
			this.buttonOK.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.buttonOK.Name = "buttonOK";
			this.buttonOK.Click += new System.EventHandler(OkButtonClicked);
			resources.ApplyResources(this.tabControl, "tabControl");
			this.tabControl.Controls.Add(this.typeTabPage);
			this.tabControl.Controls.Add(this.advancedTabPage);
			this.tabControl.Name = "tabControl";
			this.tabControl.SelectedIndex = 0;
			this.typeTabPage.BackColor = System.Drawing.Color.Transparent;
			this.typeTabPage.Controls.Add(this.typeSplitContainer);
			resources.ApplyResources(this.typeTabPage, "typeTabPage");
			this.typeTabPage.Name = "typeTabPage";
			this.typeSplitContainer.BackColor = System.Drawing.Color.Transparent;
			resources.ApplyResources(this.typeSplitContainer, "typeSplitContainer");
			this.typeSplitContainer.Name = "typeSplitContainer";
			this.typeSplitContainer.Panel1.Controls.Add(this.artifactTreeView);
			this.typeSplitContainer.Panel2.Controls.Add(this.artifactListView);
			this.typeSplitContainer.TabStop = false;
			this.artifactTreeView.BackColor = System.Drawing.SystemColors.Window;
			resources.ApplyResources(this.artifactTreeView, "artifactTreeView");
			this.artifactTreeView.ItemHeight = 16;
			this.artifactTreeView.Name = "artifactTreeView";
			this.artifactTreeView.AfterSelect += new System.Windows.Forms.TreeViewEventHandler(OnTreeSelectionChange);
			this.artifactTreeView.GotFocus += new System.EventHandler(OnTreeViewGotFocus);
			this.artifactListView.AllowColumnReorder = true;
			this.artifactListView.Columns.AddRange(new System.Windows.Forms.ColumnHeader[2] { this.typeName, this.fullyQualifiedName });
			resources.ApplyResources(this.artifactListView, "artifactListView");
			this.artifactListView.Name = "artifactListView";
			this.artifactListView.UseCompatibleStateImageBehavior = false;
			this.artifactListView.View = System.Windows.Forms.View.Details;
			this.artifactListView.SelectedIndexChanged += new System.EventHandler(OnListViewSelectedIndexChanged);
			this.artifactListView.ColumnClick += new System.Windows.Forms.ColumnClickEventHandler(OnListViewColumnClick);
			resources.ApplyResources(this.typeName, "typeName");
			resources.ApplyResources(this.fullyQualifiedName, "fullyQualifiedName");
			this.advancedTabPage.BackColor = System.Drawing.Color.Transparent;
			this.advancedTabPage.Controls.Add(this.genericParametersPropertyGrid);
			resources.ApplyResources(this.advancedTabPage, "advancedTabPage");
			this.advancedTabPage.Name = "advancedTabPage";
			resources.ApplyResources(this.genericParametersPropertyGrid, "genericParametersPropertyGrid");
			this.genericParametersPropertyGrid.Name = "genericParametersPropertyGrid";
			this.genericParametersPropertyGrid.PropertySort = System.Windows.Forms.PropertySort.Categorized;
			this.genericParametersPropertyGrid.ToolbarVisible = false;
			resources.ApplyResources(this.buttonBrowse, "buttonBrowse");
			this.buttonBrowse.Name = "buttonBrowse";
			this.buttonBrowse.Click += new System.EventHandler(OnButtonBrowse_Click);
			resources.ApplyResources(this.typeTextBox, "typeTextBox");
			this.typeTextBox.Name = "typeTextBox";
			this.typeTextBox.TextChanged += new System.EventHandler(OnTypeTextBoxTextChanged);
			resources.ApplyResources(this.typeNameLabel, "typeNameLabel");
			this.typeNameLabel.Name = "typeNameLabel";
			resources.ApplyResources(this.okCancelTableLayoutPanel, "okCancelTableLayoutPanel");
			this.okCancelTableLayoutPanel.Controls.Add(this.buttonOK, 0, 0);
			this.okCancelTableLayoutPanel.Controls.Add(this.buttonCancel, 1, 0);
			this.okCancelTableLayoutPanel.Name = "okCancelTableLayoutPanel";
			resources.ApplyResources(this.typeNameTableLayoutPanel, "typeNameTableLayoutPanel");
			this.typeNameTableLayoutPanel.Controls.Add(this.typeNameLabel, 0, 0);
			this.typeNameTableLayoutPanel.Controls.Add(this.typeTextBox, 1, 0);
			this.typeNameTableLayoutPanel.Name = "typeNameTableLayoutPanel";
			this.artifactLabel.BorderStyle = System.Windows.Forms.BorderStyle.None;
			this.artifactLabel.CausesValidation = false;
			resources.ApplyResources(this.artifactLabel, "artifactLabel");
			this.artifactLabel.Name = "artifactLabel";
			this.artifactLabel.ReadOnly = true;
			this.artifactLabel.TabStop = false;
			base.AcceptButton = this.buttonOK;
			resources.ApplyResources(this, "$this");
			base.CancelButton = this.buttonCancel;
			base.Controls.Add(this.artifactLabel);
			base.Controls.Add(this.typeNameTableLayoutPanel);
			base.Controls.Add(this.okCancelTableLayoutPanel);
			base.Controls.Add(this.buttonBrowse);
			base.Controls.Add(this.helpTextHolder);
			base.Controls.Add(this.tabControl);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.HelpButton = true;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "TypeBrowserDialog";
			base.ShowInTaskbar = false;
			base.HelpButtonClicked += new System.ComponentModel.CancelEventHandler(TypeBrowserDialog_HelpButtonClicked);
			this.tabControl.ResumeLayout(false);
			this.typeTabPage.ResumeLayout(false);
			this.typeSplitContainer.Panel1.ResumeLayout(false);
			this.typeSplitContainer.Panel2.ResumeLayout(false);
			this.typeSplitContainer.ResumeLayout(false);
			this.advancedTabPage.ResumeLayout(false);
			this.okCancelTableLayoutPanel.ResumeLayout(false);
			this.okCancelTableLayoutPanel.PerformLayout();
			this.typeNameTableLayoutPanel.ResumeLayout(false);
			this.typeNameTableLayoutPanel.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}

		private List<Type> GetTargetFrameworkTypes(ITypeProvider currentTypeProvider)
		{
			IExtendedUIService2 extendedUIService = (IExtendedUIService2)serviceProvider.GetService(typeof(IExtendedUIService2));
			List<Type> list = new List<Type>();
			if (currentTypeProvider != null)
			{
				if (extendedUIService != null)
				{
					List<Assembly> list2 = new List<Assembly>(currentTypeProvider.ReferencedAssemblies);
					foreach (Assembly item in list2)
					{
						Assembly reflectionAssembly = extendedUIService.GetReflectionAssembly(item.GetName());
						if (!(reflectionAssembly != null))
						{
							continue;
						}
						Type[] types = reflectionAssembly.GetTypes();
						foreach (Type type in types)
						{
							if (type.IsPublic)
							{
								list.Add(type);
							}
						}
					}
					Type[] types2 = currentTypeProvider.GetTypes();
					foreach (Type type2 in types2)
					{
						if (type2.Assembly == null)
						{
							list.Add(type2);
						}
					}
				}
				else
				{
					list.AddRange(currentTypeProvider.GetTypes());
				}
			}
			return list;
		}

		protected override void OnLoad(EventArgs e)
		{
			base.OnLoad(e);
			Cursor.Current = Cursors.WaitCursor;
			try
			{
				TreeNode treeNode = null;
				if (localTypeProvider == null)
				{
					treeNode = artifactTreeView.Nodes.Add("CurrentProject", SR.GetString("CurrentProject"), 2, 2);
				}
				TreeNode treeNode2 = artifactTreeView.Nodes.Add("ReferencedAssemblies", SR.GetString("ReferencedAssemblies"), 2, 2);
				ITypeProvider typeProvider = TypeProvider;
				AutoCompleteStringCollection autoCompleteStringCollection = new AutoCompleteStringCollection();
				UpdateTreeView(GetTargetFrameworkTypes(TypeProvider).ToArray(), autoCompleteStringCollection);
				treeNode2.Expand();
				TreeNode treeNode3 = ((treeNode == null) ? treeNode2 : treeNode);
				artifactTreeView.SelectedNode = treeNode3;
				TreeSelectionChanged(treeNode3);
				treeNode3.EnsureVisible();
				typeTextBox.AutoCompleteMode = AutoCompleteMode.Suggest;
				typeTextBox.AutoCompleteSource = AutoCompleteSource.CustomSource;
				typeTextBox.AutoCompleteCustomSource = autoCompleteStringCollection;
				if (selectedTypeName != null)
				{
					Type type = typeProvider.GetType(selectedTypeName);
					if (type != null)
					{
						typeTextBox.Text = GetSimpleTypeFullName(type);
					}
				}
			}
			catch (FileNotFoundException)
			{
			}
			finally
			{
				Cursor.Current = Cursors.Default;
			}
			UpdateControlState();
			typeTextBox.Select();
		}

		private void UpdateTreeView(Type[] types, AutoCompleteStringCollection autoCompleteStringCollection)
		{
			TreeNode treeNode = artifactTreeView.Nodes["ReferencedAssemblies"];
			Hashtable hashtable = new Hashtable();
			IExtendedUIService2 extendedUIService = (IExtendedUIService2)serviceProvider.GetService(typeof(IExtendedUIService2));
			foreach (Type type in types)
			{
				if ((typeFilterProvider != null && !typeFilterProvider.CanFilterType((extendedUIService != null) ? extendedUIService.GetRuntimeType(type) : type, throwOnError: false)) || autoCompleteStringCollection.Contains(type.FullName))
				{
					continue;
				}
				autoCompleteStringCollection.Add(type.FullName);
				TreeNode treeNode2 = null;
				if (type.Assembly != null)
				{
					treeNode2 = hashtable[type.Assembly] as TreeNode;
					if (treeNode2 == null)
					{
						treeNode2 = new TreeNode(type.Assembly.GetName().Name, 3, 3);
						treeNode2.Tag = type.Assembly;
						treeNode.Nodes.Add(treeNode2);
						hashtable[type.Assembly] = treeNode2;
					}
				}
				else
				{
					treeNode2 = artifactTreeView.Nodes["CurrentProject"];
				}
				if (type.Namespace == null || type.Namespace.Length <= 0)
				{
					continue;
				}
				bool flag = false;
				string @namespace = type.Namespace;
				foreach (TreeNode node2 in treeNode2.Nodes)
				{
					if (node2.Text == @namespace)
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					TreeNode node = new TreeNode(@namespace, 49, 49);
					treeNode2.Nodes.Add(node);
				}
			}
		}

		protected override void OnClosing(CancelEventArgs e)
		{
			base.OnClosing(e);
			if (IntPtr.Zero != bitmapSortUp)
			{
				NativeMethods.DeleteObject(bitmapSortUp);
			}
			if (IntPtr.Zero != bitmapSortDown)
			{
				NativeMethods.DeleteObject(bitmapSortDown);
			}
		}

		protected override void OnPaint(PaintEventArgs paintArgs)
		{
			base.OnPaint(paintArgs);
			Rectangle rectangle = new Rectangle(base.ClientRectangle.Left, artifactLabel.Bottom + (typeNameTableLayoutPanel.Top + typeTextBox.Top - artifactLabel.Bottom) / 2, base.ClientRectangle.Width, 1);
			paintArgs.Graphics.DrawLine(SystemPens.ControlDark, rectangle.Left, rectangle.Bottom, rectangle.Right, rectangle.Bottom);
			paintArgs.Graphics.DrawLine(SystemPens.ControlLightLight, rectangle.Left, rectangle.Bottom + 1, rectangle.Right, rectangle.Bottom + 1);
			rectangle = new Rectangle(base.ClientRectangle.Left, helpTextHolder.Bottom + (okCancelTableLayoutPanel.Top + buttonOK.Top - helpTextHolder.Bottom) / 2, base.ClientRectangle.Width, 1);
			paintArgs.Graphics.DrawLine(SystemPens.ControlDark, rectangle.Left, rectangle.Bottom, rectangle.Right, rectangle.Bottom);
			paintArgs.Graphics.DrawLine(SystemPens.ControlLightLight, rectangle.Left, rectangle.Bottom + 1, rectangle.Right, rectangle.Bottom + 1);
			paintArgs.Graphics.DrawLine(SystemPens.WindowFrame, helpTextHolder.Left - 1, helpTextHolder.Top - 1, helpTextHolder.Left - 1, helpTextHolder.Bottom);
			paintArgs.Graphics.DrawLine(SystemPens.WindowFrame, helpTextHolder.Left - 1, helpTextHolder.Bottom, helpTextHolder.Right, helpTextHolder.Bottom);
			paintArgs.Graphics.DrawLine(SystemPens.WindowFrame, helpTextHolder.Right, helpTextHolder.Bottom, helpTextHolder.Right, helpTextHolder.Top - 1);
			paintArgs.Graphics.DrawLine(SystemPens.WindowFrame, helpTextHolder.Right, helpTextHolder.Top - 1, helpTextHolder.Left - 1, helpTextHolder.Top - 1);
		}

		protected override bool ProcessCmdKey(ref System.Windows.Forms.Message msg, Keys keyData)
		{
			if (keyData == Keys.Return && lastComboboxValue != typeTextBox.Text)
			{
				lastComboboxValue = typeTextBox.Text;
				typeTextBox.Text = string.Empty;
				typeTextBox.Text = lastComboboxValue;
				typeTextBox.SelectionStart = typeTextBox.Text.Length;
				return true;
			}
			return base.ProcessCmdKey(ref msg, keyData);
		}

		private void OkButtonClicked(object sender, EventArgs e)
		{
			try
			{
				ITypeProvider typeProvider = TypeProvider;
				Type type = typeProvider.GetType(typeTextBox.Text);
				if (type != null && (typeFilterProvider == null || typeFilterProvider.CanFilterType(type, throwOnError: false)))
				{
					selectedTypeName = type.AssemblyQualifiedName;
					selectedType = type;
					base.DialogResult = DialogResult.OK;
				}
				else
				{
					base.DialogResult = DialogResult.None;
				}
			}
			catch (Exception e2)
			{
				DesignerHelpers.ShowError(serviceProvider, e2);
			}
		}

		private void OnTreeSelectionChange(object sender, TreeViewEventArgs e)
		{
			TreeSelectionChanged(e.Node);
		}

		private void OnTreeViewGotFocus(object sender, EventArgs e)
		{
			if (refreshTreeView)
			{
				refreshTreeView = false;
				if (artifactTreeView.SelectedNode != null)
				{
					TreeSelectionChanged(artifactTreeView.SelectedNode);
				}
			}
		}

		private void OnListViewSelectedIndexChanged(object sender, EventArgs e)
		{
			try
			{
				if (!refreshTypeTextBox && artifactListView.SelectedItems.Count > 0)
				{
					typeTextBox.Text = (artifactListView.SelectedItems[0].Tag as Type).FullName;
				}
				if (artifactListView.SelectedItems.Count > 0)
				{
					artifactListView.SelectedItems[0].EnsureVisible();
				}
				if (artifactListView.Focused && artifactListView.SelectedItems.Count != 0)
				{
					Type type = artifactListView.SelectedItems[0].Tag as Type;
					if (type != null)
					{
						ListSelectionChanged(type);
					}
				}
			}
			catch (Exception e2)
			{
				DesignerHelpers.ShowError(serviceProvider, e2);
			}
		}

		private void OnListViewMouseDown(object sender, MouseEventArgs mouseArgs)
		{
			if (mouseArgs.Clicks > 1 && artifactListView.SelectedItems.Count > 0 && artifactListView.SelectedItems[0].Tag is Type && buttonOK.Enabled)
			{
				OkButtonClicked(buttonOK, EventArgs.Empty);
			}
		}

		private void OnListViewColumnClick(object sender, ColumnClickEventArgs e)
		{
			sortListViewAscending = !sortListViewAscending;
			SortListViewItems(e.Column);
		}

		private void TypeBrowserDialog_HelpButtonClicked(object sender, CancelEventArgs e)
		{
			e.Cancel = true;
			GetHelp();
		}

		protected override void OnHelpRequested(HelpEventArgs e)
		{
			e.Handled = true;
			GetHelp();
		}

		private void GetHelp()
		{
			DesignerHelpers.ShowHelpFromKeyword(serviceProvider, typeof(TypeBrowserDialog).FullName + ".UI");
		}

		private void OnTypeTextBoxSelectedIndexChanged(object sender, EventArgs e)
		{
			OnTypeTextBoxTextChanged(sender, e);
		}

		private void OnTypeTextBoxTextChanged(object sender, EventArgs e)
		{
			try
			{
				if (refreshTypeTextBox)
				{
					return;
				}
				refreshTypeTextBox = true;
				ITypeProvider typeProvider = TypeProvider;
				Type type = typeProvider.GetType(typeTextBox.Text);
				if (type != null)
				{
					lastComboboxValue = typeTextBox.Text;
					Type baseType = null;
					ParameterData[] parameterDataArray = null;
					int[] arrayRanks = null;
					GetTypeParts(type, out baseType, out parameterDataArray, out arrayRanks);
					genericParameters.Parameters = ((parameterDataArray != null) ? parameterDataArray : new ParameterData[0]);
					genericParametersPropertyGrid.Refresh();
					ListSelectionChanged(baseType);
					genericParametersPropertyGrid.Enabled = baseType.IsGenericTypeDefinition;
					foreach (ListViewItem item in artifactListView.Items)
					{
						Type type2 = item.Tag as Type;
						if (type2 != null && type2.FullName.Equals(baseType.FullName))
						{
							if (!item.Selected)
							{
								item.Selected = true;
							}
							break;
						}
						item.Selected = false;
					}
				}
				else
				{
					if (artifactListView.SelectedItems.Count != 0)
					{
						artifactListView.SelectedItems[0].Selected = false;
					}
					genericParameters.Parameters = new ParameterData[0];
					genericParametersPropertyGrid.Enabled = false;
				}
				UpdateControlState();
				refreshTypeTextBox = false;
			}
			catch (Exception e2)
			{
				DesignerHelpers.ShowError(serviceProvider, e2);
			}
		}

		private void OnButtonBrowse_Click(object Sender, EventArgs e)
		{
			OpenFileDialog fileDialog = new OpenFileDialog();
			fileDialog.Title = DR.GetString("OpenfileDialogTitle");
			fileDialog.AddExtension = true;
			fileDialog.DefaultExt = "dll";
			fileDialog.CheckFileExists = true;
			fileDialog.CheckPathExists = true;
			fileDialog.DereferenceLinks = true;
			fileDialog.ValidateNames = true;
			fileDialog.Filter = DR.GetString("PackageAssemblyReferenceFilter");
			fileDialog.RestoreDirectory = false;
			if (fileDialog.ShowDialog(this) != DialogResult.OK)
			{
				return;
			}
			EventHandler value = delegate
			{
				Exception ex5 = null;
				if (localTypeProvider.TypeLoadErrors.ContainsKey(fileDialog.FileName))
				{
					ex5 = localTypeProvider.TypeLoadErrors[fileDialog.FileName];
				}
				if (ex5 != null)
				{
					string format = ((ex5 is ReflectionTypeLoadException || (ex5.InnerException != null && ex5.InnerException is ReflectionTypeLoadException)) ? DR.GetString("TypeBrowser_UnableToLoadOneOrMoreTypes") : DR.GetString("TypeBrowser_ProblemsLoadingAssembly"));
					format = string.Format(CultureInfo.CurrentCulture, format, new object[1] { fileDialog.FileName });
					DesignerHelpers.ShowError(serviceProvider, format);
				}
			};
			try
			{
				if (serviceProvider.GetService(typeof(ITypeProviderCreator)) is ITypeProviderCreator typeProviderCreator)
				{
					localTypeProvider.AddAssembly(typeProviderCreator.GetTransientAssembly(AssemblyName.GetAssemblyName(fileDialog.FileName)));
				}
				else
				{
					localTypeProvider.AddAssemblyReference(fileDialog.FileName);
				}
				Helpers.UpdateTypeProviderAssembliesRegistry(fileDialog.FileName);
				localTypeProvider.TypeLoadErrorsChanged += value;
				UpdateTreeView(GetTargetFrameworkTypes(localTypeProvider).ToArray(), typeTextBox.AutoCompleteCustomSource);
			}
			catch (FileNotFoundException ex)
			{
				DesignerHelpers.ShowError(serviceProvider, ex.Message);
			}
			catch (BadImageFormatException)
			{
				DesignerHelpers.ShowError(serviceProvider, SR.GetString("Error_AssemblyBadImage", fileDialog.FileName));
			}
			catch (FileLoadException)
			{
				DesignerHelpers.ShowError(serviceProvider, SR.GetString("Error_AssemblyBadImage", fileDialog.FileName));
			}
			catch (Exception ex4)
			{
				DesignerHelpers.ShowError(serviceProvider, SR.GetString("Error_AddAssemblyRef", fileDialog.FileName, ex4.Message));
			}
			finally
			{
				localTypeProvider.TypeLoadErrorsChanged -= value;
			}
		}

		private void CustomInitializeComponent()
		{
			SuspendLayout();
			artifactTreeView.Sorted = true;
			Bitmap bitmap = ResMgr.GetObject("IDB_SORTUP") as Bitmap;
			bitmapSortUp = bitmap.GetHbitmap();
			bitmap = ResMgr.GetObject("IDB_SORTDOWN") as Bitmap;
			bitmapSortDown = bitmap.GetHbitmap();
			artifactImages = new ImageList();
			artifactImages.TransparentColor = Color.FromArgb(0, 255, 0);
			artifactImages.Images.AddStrip((Image)ResMgr.GetObject("IDB_ARTIFACTIMAGES"));
			artifactListView.Dock = DockStyle.Fill;
			artifactListView.FullRowSelect = true;
			artifactListView.HideSelection = false;
			artifactListView.MultiSelect = false;
			artifactListView.SmallImageList = artifactImages;
			artifactListView.MouseDown += OnListViewMouseDown;
			artifactTreeView.HideSelection = false;
			artifactTreeView.ImageList = artifactImages;
			helpTextHolder.Visible = false;
			helpTextWindow = new HelpTextWindow();
			helpTextWindow.Parent = this;
			helpTextWindow.Location = new Point(helpTextHolder.Location.X + 3, helpTextHolder.Location.Y + 3);
			helpTextWindow.Size = new Size(helpTextHolder.Size.Width - 6, helpTextHolder.Size.Height - 6);
			if (typeFilterProvider != null)
			{
				artifactLabel.Text = typeFilterProvider.FilterDescription;
			}
			IUIService iUIService = (IUIService)serviceProvider.GetService(typeof(IUIService));
			if (iUIService != null)
			{
				Font = (Font)iUIService.Styles["DialogFont"];
			}
			artifactLabel.Font = new Font(Font.Name, Font.SizeInPoints, FontStyle.Bold);
			genericParametersPropertyGrid.SelectedObject = genericParameters;
			genericParametersPropertyGrid.Site = this;
			genericParametersPropertyGrid.PropertyValueChanged += GenericParameterChanged;
			ResumeLayout(performLayout: false);
		}

		private void TreeSelectionChanged(TreeNode treeNode)
		{
			try
			{
				if (artifactListView.Focused)
				{
					return;
				}
				artifactListView.Items.Clear();
				artifactListView.ListViewItemSorter = null;
				string text = null;
				ArrayList arrayList = new ArrayList();
				if (treeNode != artifactTreeView.Nodes["CurrentProject"])
				{
					if (treeNode == artifactTreeView.Nodes["ReferencedAssemblies"])
					{
						foreach (TreeNode node in treeNode.Nodes)
						{
							arrayList.Add(node.Tag);
						}
					}
					else if (treeNode.Tag is Assembly)
					{
						arrayList.Add(treeNode.Tag);
					}
					else
					{
						if (treeNode.Parent.Tag != null)
						{
							arrayList.Add(treeNode.Parent.Tag);
						}
						text = treeNode.Text;
					}
				}
				ITypeProvider typeProvider = TypeProvider;
				IExtendedUIService2 extendedUIService = (IExtendedUIService2)serviceProvider.GetService(typeof(IExtendedUIService2));
				foreach (Type targetFrameworkType in GetTargetFrameworkTypes(typeProvider))
				{
					try
					{
						object[] customAttributes = targetFrameworkType.GetCustomAttributes(typeof(ObsoleteAttribute), inherit: false);
						if (customAttributes != null && customAttributes.Length != 0)
						{
							continue;
						}
					}
					catch (Exception)
					{
					}
					if ((text == null || targetFrameworkType.Namespace == text) && ((arrayList.Count == 0 && targetFrameworkType.Assembly == null) || arrayList.Contains(targetFrameworkType.Assembly)) && (typeFilterProvider == null || typeFilterProvider.CanFilterType((extendedUIService != null) ? extendedUIService.GetRuntimeType(targetFrameworkType) : targetFrameworkType, throwOnError: false)))
					{
						ListViewItem listViewItem = new ListViewItem();
						listViewItem.Text = targetFrameworkType.Name;
						listViewItem.SubItems.Add(targetFrameworkType.FullName);
						listViewItem.Tag = targetFrameworkType;
						listViewItem.ImageIndex = 0;
						artifactListView.Items.Add(listViewItem);
					}
				}
				SortListViewItems(0);
				artifactListView.SelectedIndices.Clear();
				if (artifactListView.Items.Count > 0)
				{
					artifactListView.Items[0].Selected = true;
				}
			}
			catch (Exception e)
			{
				DesignerHelpers.ShowError(serviceProvider, e);
			}
		}

		private void GenericParameterChanged(object sender, PropertyValueChangedEventArgs e)
		{
			bool flag = true;
			ParameterData[] parameters = genericParameters.Parameters;
			foreach (ParameterData parameterData in parameters)
			{
				if (parameterData.Type == null)
				{
					flag = false;
					break;
				}
			}
			if (flag)
			{
				UpdateTypeTextBox();
			}
		}

		private void ListSelectionChanged(Type selectedType)
		{
			if (artifactTreeView.Focused)
			{
				return;
			}
			string fullName = selectedType.FullName;
			string text = string.Empty;
			if (selectedType.Assembly != null)
			{
				text = selectedType.Assembly.GetName().Name;
			}
			TreeNode treeNode = null;
			if (text.Length == 0)
			{
				treeNode = artifactTreeView.Nodes["CurrentProject"];
			}
			else
			{
				TreeNode treeNode2 = artifactTreeView.Nodes["ReferencedAssemblies"];
				foreach (TreeNode node in treeNode2.Nodes)
				{
					Assembly assembly = node.Tag as Assembly;
					if (assembly.FullName == text || assembly.GetName().Name == text)
					{
						treeNode = node;
						break;
					}
				}
			}
			TreeNode treeNode4 = null;
			if (treeNode != null)
			{
				string text2 = string.Empty;
				int num = fullName.LastIndexOf('.');
				if (num != -1)
				{
					text2 = fullName.Substring(0, num);
				}
				if (text2.Length > 0)
				{
					foreach (TreeNode node2 in treeNode.Nodes)
					{
						if (node2.Text == text2)
						{
							treeNode4 = node2;
							break;
						}
					}
				}
			}
			TreeNode treeNode6 = treeNode4;
			if (treeNode6 == null)
			{
				treeNode6 = treeNode;
			}
			if (treeNode6 != null && artifactTreeView.CanFocus)
			{
				artifactTreeView.SelectedNode = treeNode6;
				treeNode6.EnsureVisible();
			}
		}

		private void SortListViewItems(int columnIndex)
		{
			if (columnIndex < 0 || columnIndex >= artifactListView.Columns.Count)
			{
				return;
			}
			ListItemComparer listViewItemSorter = new ListItemComparer(columnIndex == 0, sortListViewAscending);
			artifactListView.ListViewItemSorter = listViewItemSorter;
			if (artifactListView.SelectedItems.Count > 0)
			{
				artifactListView.SelectedItems[0].EnsureVisible();
			}
			IntPtr hWndHeader = NativeMethods.ListView_GetHeader(artifactListView.Handle);
			NativeMethods.HDITEM hDITEM = new NativeMethods.HDITEM();
			hDITEM.mask = 20;
			for (int i = 0; i < artifactListView.Columns.Count; i++)
			{
				if (NativeMethods.Header_GetItem(hWndHeader, i, hDITEM))
				{
					hDITEM.fmt &= -12289;
					hDITEM.hbm = IntPtr.Zero;
					NativeMethods.Header_SetItem(hWndHeader, i, hDITEM);
				}
			}
			if (NativeMethods.Header_GetItem(hWndHeader, columnIndex, hDITEM))
			{
				hDITEM.mask = 20;
				hDITEM.fmt |= 12288;
				hDITEM.hbm = (sortListViewAscending ? bitmapSortUp : bitmapSortDown);
				NativeMethods.Header_SetItem(hWndHeader, columnIndex, hDITEM);
			}
		}

		private void UpdateControlState()
		{
			ITypeProvider typeProvider = TypeProvider;
			Type type = null;
			type = typeProvider.GetType(typeTextBox.Text);
			if (null != type && (typeFilterProvider == null || typeFilterProvider.CanFilterType(type, throwOnError: false)) && !type.IsGenericTypeDefinition)
			{
				buttonOK.Enabled = true;
				base.AcceptButton = buttonOK;
			}
			else
			{
				buttonOK.Enabled = false;
				base.AcceptButton = null;
			}
			helpTextWindow.UpdateHelpText(type);
		}

		private void UpdateTypeTextBox()
		{
			string text = string.Empty;
			if (artifactListView.SelectedItems.Count > 0)
			{
				Type type = artifactListView.SelectedItems[0].Tag as Type;
				text = type.FullName;
				bool flag = true;
				string text2 = string.Empty;
				if (type.IsGenericType && genericParameters.Parameters.Length != 0)
				{
					text2 = "[";
					int num = 0;
					ParameterData[] parameters = genericParameters.Parameters;
					foreach (ParameterData parameterData in parameters)
					{
						text2 += "[";
						num++;
						Type type2 = parameterData.Type;
						if (type2 != null)
						{
							text2 += type2.FullName;
							text2 += "]";
							if (num < genericParameters.Parameters.Length)
							{
								text2 += ",";
							}
							continue;
						}
						flag = false;
						break;
					}
					text2 += "]";
				}
				if (flag)
				{
					text += text2;
				}
			}
			typeTextBox.Text = text;
		}

		private void GetTypeParts(Type type, out Type baseType, out ParameterData[] parameterDataArray, out int[] arrayRanks)
		{
			baseType = null;
			parameterDataArray = null;
			arrayRanks = null;
			if (type.IsArray)
			{
				ArrayList arrayList = new ArrayList();
				GetTypeParts(type.GetElementType(), out baseType, out parameterDataArray, out arrayRanks);
				if (arrayRanks != null)
				{
					arrayList.AddRange(arrayRanks);
				}
				arrayList.Add(type.GetArrayRank());
				arrayRanks = (int[])arrayList.ToArray(typeof(int));
			}
			else if (type.IsGenericType)
			{
				Type type2 = null;
				Type type3 = null;
				if (type.ContainsGenericParameters)
				{
					type3 = null;
					type2 = type.UnderlyingSystemType;
				}
				else
				{
					type3 = type;
					type2 = type.GetGenericTypeDefinition().UnderlyingSystemType;
				}
				ArrayList arrayList2 = new ArrayList();
				for (int i = 0; i < type2.GetGenericArguments().Length; i++)
				{
					ParameterData parameterData = new ParameterData();
					parameterData.ParameterType = type2.GetGenericArguments()[i];
					if (type3 != null)
					{
						parameterData.Type = type.GetGenericArguments()[i];
					}
					arrayList2.Add(parameterData);
				}
				parameterDataArray = (ParameterData[])arrayList2.ToArray(typeof(ParameterData));
				baseType = type2;
			}
			else
			{
				baseType = type;
			}
		}

		private string GetSimpleTypeFullName(Type type)
		{
			StringBuilder stringBuilder = new StringBuilder(type.FullName);
			Stack<Type> stack = new Stack<Type>();
			stack.Push(type);
			while (stack.Count > 0)
			{
				type = stack.Pop();
				while (type.IsArray)
				{
					type = type.GetElementType();
				}
				if (type.IsGenericType && !type.IsGenericTypeDefinition)
				{
					Type[] genericArguments = type.GetGenericArguments();
					foreach (Type type2 in genericArguments)
					{
						stringBuilder.Replace("[" + type2.AssemblyQualifiedName + "]", type2.FullName);
						stack.Push(type2);
					}
				}
			}
			return stringBuilder.ToString();
		}

		object IServiceProvider.GetService(Type serviceType)
		{
			object result = null;
			if (serviceType == typeof(ITypeProvider))
			{
				result = TypeProvider;
			}
			return result;
		}
	}
	internal sealed class ActivityBindForm : Form
	{
		internal enum BindMemberAccessKind
		{
			Public,
			Internal,
			Protected,
			Private
		}

		internal enum BindMemberKind
		{
			Field = 0,
			Property = 4,
			Constant = 8,
			Event = 12,
			Delegate = 16,
			Index = 20
		}

		private class ActivityBindTreeNode : WorkflowOutlineNode
		{
			public ActivityBindTreeNode(Activity activity)
				: base(activity)
			{
			}
		}

		private class DummyActivityBindTreeNode : WorkflowOutlineNode
		{
			public DummyActivityBindTreeNode(Activity activity)
				: base(activity)
			{
			}
		}

		private class MemberActivityBindTreeNode : ActivityBindTreeNode
		{
			private PathInfo pathInfo;

			private BindMemberKind kind = BindMemberKind.Property;

			private BindMemberAccessKind accessKind;

			public PathInfo PathInfo
			{
				get
				{
					return pathInfo;
				}
				set
				{
					pathInfo = value;
				}
			}

			public bool MayHaveChildNodes
			{
				get
				{
					Type type = ((pathInfo != null) ? pathInfo.PropertyType : null);
					if (type == null)
					{
						return false;
					}
					if (IsTypePrimitive(type) || TypeProvider.IsAssignable(typeof(Delegate), type) || type == typeof(object))
					{
						return false;
					}
					return true;
				}
			}

			public BindMemberKind MemberKind => kind;

			public BindMemberAccessKind MemberAccessKind => accessKind;

			public MemberActivityBindTreeNode(Activity activity, PathInfo pathInfo)
				: base(activity)
			{
				this.pathInfo = pathInfo;
				string text = MemberName(PathInfo.Path);
				if (this.pathInfo.MemberInfo is EventInfo)
				{
					kind = BindMemberKind.Event;
					accessKind = BindMemberAccessKind.Public;
				}
				else if (this.pathInfo.MemberInfo is FieldInfo)
				{
					FieldInfo fieldInfo = this.pathInfo.MemberInfo as FieldInfo;
					if ((fieldInfo.Attributes & FieldAttributes.Static) != 0 && (fieldInfo.Attributes & FieldAttributes.Literal) != 0)
					{
						kind = BindMemberKind.Constant;
					}
					else if (TypeProvider.IsAssignable(typeof(Delegate), fieldInfo.FieldType))
					{
						kind = BindMemberKind.Delegate;
					}
					else
					{
						kind = BindMemberKind.Field;
					}
					accessKind = ((!fieldInfo.IsPublic) ? (fieldInfo.IsFamily ? BindMemberAccessKind.Internal : (fieldInfo.IsPrivate ? BindMemberAccessKind.Private : BindMemberAccessKind.Protected)) : BindMemberAccessKind.Public);
				}
				else if (this.pathInfo.MemberInfo is PropertyInfo)
				{
					kind = BindMemberKind.Property;
					PropertyInfo propertyInfo = this.pathInfo.MemberInfo as PropertyInfo;
					accessKind = BindMemberAccessKind.Public;
				}
				else if (text.IndexOfAny("[]".ToCharArray()) != -1)
				{
					kind = BindMemberKind.Index;
					accessKind = BindMemberAccessKind.Public;
				}
				else
				{
					kind = BindMemberKind.Property;
					accessKind = BindMemberAccessKind.Public;
				}
			}

			public override void RefreshNode()
			{
				base.RefreshNode();
				base.Text = MemberName(PathInfo.Path);
				base.ForeColor = Color.DarkBlue;
			}

			internal static string MemberName(string path)
			{
				int num = path.LastIndexOf('.');
				return (num != -1 && num + 1 < path.Length) ? path.Substring(num + 1) : path;
			}
		}

		private class ActivityBindFormWorkflowOutline : WorkflowOutline
		{
			private ActivityBindForm parent;

			private Activity selectedActivity;

			private PathInfo selectedPathInfo;

			public Activity SelectedActivity => selectedActivity;

			public PathInfo SelectedMember => selectedPathInfo;

			public string PropertyPath
			{
				get
				{
					MemberActivityBindTreeNode memberActivityBindTreeNode = base.TreeView.SelectedNode as MemberActivityBindTreeNode;
					string text = string.Empty;
					while (memberActivityBindTreeNode != null)
					{
						text = ((text.Length == 0) ? memberActivityBindTreeNode.Text : (memberActivityBindTreeNode.Text + "." + text));
						memberActivityBindTreeNode = memberActivityBindTreeNode.Parent as MemberActivityBindTreeNode;
					}
					return text;
				}
			}

			public ActivityBindFormWorkflowOutline(IServiceProvider serviceProvider, ActivityBindForm parent)
				: base(serviceProvider)
			{
				this.parent = parent;
				base.NeedsExpandAll = false;
				base.Expanding += treeView1_BeforeExpand;
				base.TreeView.BeforeLabelEdit += TreeView_BeforeLabelEdit;
				base.TreeView.AfterLabelEdit += TreeView_AfterLabelEdit;
				base.TreeView.LabelEdit = true;
				base.TreeView.KeyDown += TreeView_KeyDown;
			}

			private void TreeView_KeyDown(object sender, KeyEventArgs e)
			{
				if (e.KeyCode == Keys.F2 && base.TreeView.SelectedNode != null)
				{
					base.TreeView.SelectedNode.BeginEdit();
					e.Handled = true;
					e.SuppressKeyPress = true;
				}
			}

			private void TreeView_BeforeLabelEdit(object sender, NodeLabelEditEventArgs e)
			{
				MemberActivityBindTreeNode memberActivityBindTreeNode = e.Node as MemberActivityBindTreeNode;
				e.CancelEdit = memberActivityBindTreeNode == null || !memberActivityBindTreeNode.Text.Contains("[") || !memberActivityBindTreeNode.Text.Contains("]");
			}

			private void TreeView_AfterLabelEdit(object sender, NodeLabelEditEventArgs e)
			{
				string text = e.Node.Text;
				string label = e.Label;
				if (text == null || label == null)
				{
					e.CancelEdit = true;
					return;
				}
				MemberActivityBindTreeNode memberActivityBindTreeNode = e.Node as MemberActivityBindTreeNode;
				bool flag = false;
				if (label.IndexOf("[", StringComparison.Ordinal) == -1 || !label.EndsWith("]", StringComparison.Ordinal))
				{
					flag = true;
				}
				else
				{
					string text2 = text.Substring(0, text.IndexOf("[", StringComparison.Ordinal));
					string value = label.Substring(0, label.IndexOf("[", StringComparison.Ordinal));
					flag = !text2.Equals(value, StringComparison.Ordinal);
				}
				if (!flag)
				{
					ActivityBindTreeNode activityBindTreeNode = memberActivityBindTreeNode.Parent as ActivityBindTreeNode;
					Type activityType = ((activityBindTreeNode is MemberActivityBindTreeNode memberActivityBindTreeNode2) ? memberActivityBindTreeNode2.PathInfo.PropertyType : parent.GetActivityType(activityBindTreeNode.Activity));
					List<PathInfo> list = parent.ParseStringPath(activityType, label);
					if (list == null || list.Count == 0)
					{
						flag = true;
					}
					else
					{
						PathInfo pathInfo = list[list.Count - 1];
						if (pathInfo.Path.Equals(label, StringComparison.Ordinal))
						{
							memberActivityBindTreeNode.PathInfo = pathInfo;
						}
						else
						{
							flag = true;
						}
					}
				}
				if (flag)
				{
					DesignerHelpers.ShowError(parent.serviceProvider, string.Format(CultureInfo.CurrentCulture, parent.IncorrectIndexChange, new object[1] { label }));
					e.CancelEdit = true;
				}
			}

			private void treeView1_BeforeExpand(object sender, TreeViewCancelEventArgs e)
			{
				if (!(e.Node is ActivityBindTreeNode activityBindTreeNode) || activityBindTreeNode.Nodes.Count <= 0 || !(activityBindTreeNode.Nodes[0] is DummyActivityBindTreeNode))
				{
					return;
				}
				List<PathInfo> list = parent.PopulateAutoCompleteList(activityBindTreeNode.Activity, (activityBindTreeNode as MemberActivityBindTreeNode)?.PathInfo);
				List<TreeNode> list2 = new List<TreeNode>();
				foreach (PathInfo item in list)
				{
					MemberActivityBindTreeNode memberActivityBindTreeNode = CreateMemberNode(activityBindTreeNode.Activity, item);
					if (memberActivityBindTreeNode != null)
					{
						RefreshNode(memberActivityBindTreeNode, refreshChildNodes: false);
						list2.Add(memberActivityBindTreeNode);
					}
				}
				base.TreeView.BeginUpdate();
				try
				{
					activityBindTreeNode.Nodes.RemoveAt(0);
					e.Node.Nodes.AddRange(list2.ToArray());
				}
				finally
				{
					base.TreeView.EndUpdate();
				}
			}

			public void AddMemberKindImages(ImageList memberTypes)
			{
				for (int i = 0; i < memberTypes.Images.Count; i++)
				{
					Image image = memberTypes.Images[i];
					base.TreeView.ImageList.Images.Add(string.Format(CultureInfo.InvariantCulture, "MemberType#{0}", new object[1] { i }), image);
				}
			}

			protected override WorkflowOutlineNode CreateNewNode(Activity activity)
			{
				if (!activity.Enabled || Helpers.IsActivityLocked(activity))
				{
					return null;
				}
				ActivityBindTreeNode activityBindTreeNode = new ActivityBindTreeNode(activity);
				activityBindTreeNode.Nodes.Add(new DummyActivityBindTreeNode(activity));
				return activityBindTreeNode;
			}

			private MemberActivityBindTreeNode CreateMemberNode(Activity activity, PathInfo pathInfo)
			{
				MemberActivityBindTreeNode memberActivityBindTreeNode = new MemberActivityBindTreeNode(activity, pathInfo);
				if (memberActivityBindTreeNode.MayHaveChildNodes)
				{
					memberActivityBindTreeNode.Nodes.Add(new DummyActivityBindTreeNode(activity));
				}
				return memberActivityBindTreeNode;
			}

			protected override void OnRefreshNode(WorkflowOutlineNode node)
			{
				Activity activity = node.Activity;
				if (activity != null)
				{
					if (node is MemberActivityBindTreeNode memberActivityBindTreeNode)
					{
						node.RefreshNode();
						int num = (int)memberActivityBindTreeNode.MemberKind + (int)memberActivityBindTreeNode.MemberAccessKind;
						int imageIndex = (node.SelectedImageIndex = base.TreeView.ImageList.Images.IndexOfKey(string.Format(CultureInfo.InvariantCulture, "MemberType#{0}", new object[1] { num })));
						node.ImageIndex = imageIndex;
					}
					else
					{
						ActivityBindTreeNode activityBindTreeNode = node as ActivityBindTreeNode;
						base.OnRefreshNode(node);
					}
				}
			}

			protected override void OnNodeSelected(WorkflowOutlineNode node)
			{
				selectedActivity = node?.Activity;
				selectedPathInfo = (node as MemberActivityBindTreeNode)?.PathInfo;
				string propertyPath = PropertyPath;
				parent.SelectedActivityChanged(selectedActivity, selectedPathInfo, propertyPath);
			}

			public void SelectActivity(Activity activity, List<PathInfo> pathInfoList)
			{
				WorkflowOutlineNode workflowOutlineNode = GetNode(activity);
				if (workflowOutlineNode == null)
				{
					return;
				}
				workflowOutlineNode.Expand();
				if (pathInfoList != null && pathInfoList.Count > 0)
				{
					for (int i = 0; i < pathInfoList.Count; i++)
					{
						PathInfo pathInfo = pathInfoList[i];
						MemberActivityBindTreeNode memberActivityBindTreeNode = null;
						int num = pathInfo.Path.IndexOf('[');
						if (num != -1)
						{
							string value = pathInfo.Path.Substring(0, num);
							if (workflowOutlineNode.Text.Equals(value, StringComparison.Ordinal) && i > 0 && pathInfoList[i - 1].Path.Equals(value, StringComparison.Ordinal))
							{
								workflowOutlineNode = workflowOutlineNode.Parent as WorkflowOutlineNode;
							}
						}
						foreach (TreeNode node in workflowOutlineNode.Nodes)
						{
							MemberActivityBindTreeNode memberActivityBindTreeNode2 = node as MemberActivityBindTreeNode;
							if (memberActivityBindTreeNode2 != null && memberActivityBindTreeNode2.PathInfo.Equals(pathInfo))
							{
								memberActivityBindTreeNode = memberActivityBindTreeNode2;
								break;
							}
							if (memberActivityBindTreeNode2 != null && memberActivityBindTreeNode2.Text.Contains("[") && pathInfo.Path.Contains("["))
							{
								string memberNameFromIndexerName = GetMemberNameFromIndexerName(pathInfo.Path);
								string memberNameFromIndexerName2 = GetMemberNameFromIndexerName(memberActivityBindTreeNode2.Text);
								if (string.Equals(memberNameFromIndexerName, memberNameFromIndexerName2, StringComparison.Ordinal) && IsSamePropertyIndexer(pathInfo.MemberInfo, memberActivityBindTreeNode2.PathInfo.MemberInfo))
								{
									memberActivityBindTreeNode = memberActivityBindTreeNode2;
									memberActivityBindTreeNode2.PathInfo = pathInfo;
									memberActivityBindTreeNode2.Text = MemberActivityBindTreeNode.MemberName(pathInfo.Path);
									break;
								}
							}
						}
						if (memberActivityBindTreeNode == null)
						{
							break;
						}
						workflowOutlineNode = memberActivityBindTreeNode;
						workflowOutlineNode.Expand();
					}
				}
				base.TreeView.SelectedNode = workflowOutlineNode;
				System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();
				timer.Tick += timer_Tick;
				timer.Interval = 50;
				timer.Start();
			}

			private string GetMemberNameFromIndexerName(string fullName)
			{
				int num = fullName.IndexOf('[');
				if (num != -1)
				{
					fullName = fullName.Substring(0, num);
				}
				return fullName;
			}

			private void timer_Tick(object sender, EventArgs e)
			{
				if (sender is System.Windows.Forms.Timer timer)
				{
					timer.Stop();
					timer.Tick -= timer_Tick;
				}
				if (base.TreeView.SelectedNode != null)
				{
					base.TreeView.SelectedNode.EnsureVisible();
				}
				Focus();
			}

			private bool IsSamePropertyIndexer(MemberInfo member1, MemberInfo member2)
			{
				if (member1 == null || member2 == null)
				{
					return false;
				}
				PropertyInfo propertyInfo = member1 as PropertyInfo;
				PropertyInfo propertyInfo2 = member2 as PropertyInfo;
				MethodInfo methodInfo = member1 as MethodInfo;
				MethodInfo methodInfo2 = member2 as MethodInfo;
				ParameterInfo[] array = ((propertyInfo != null) ? propertyInfo.GetIndexParameters() : ((methodInfo != null) ? methodInfo.GetParameters() : null));
				ParameterInfo[] array2 = ((propertyInfo2 != null) ? propertyInfo2.GetIndexParameters() : ((methodInfo2 != null) ? methodInfo2.GetParameters() : null));
				if (array == null || array.Length == 0 || array2 == null || array2.Length == 0 || array.Length != array2.Length)
				{
					return false;
				}
				for (int i = 0; i < array.Length; i++)
				{
					if (array[i].ParameterType != array2[i].ParameterType)
					{
						return false;
					}
				}
				return true;
			}

			public void ExpandRootNode()
			{
				TreeNode rootNode = base.RootNode;
				if (rootNode != null)
				{
					rootNode.Collapse();
					rootNode.Expand();
				}
			}
		}

		private class PathInfo
		{
			private string path;

			private MemberInfo memberInfo;

			private Type propertyType;

			public string Path => path;

			public MemberInfo MemberInfo => memberInfo;

			public Type PropertyType => propertyType;

			public PathInfo(string path, MemberInfo memberInfo, Type propertyType)
			{
				if (string.IsNullOrEmpty(path))
				{
					throw new ArgumentNullException("path");
				}
				if (propertyType == null)
				{
					throw new ArgumentNullException("propertyType");
				}
				if (memberInfo == null)
				{
					throw new ArgumentNullException("memberInfo");
				}
				this.path = path;
				this.propertyType = propertyType;
				this.memberInfo = memberInfo;
			}

			public override string ToString()
			{
				return path;
			}

			public override bool Equals(object obj)
			{
				if (!(obj is PathInfo pathInfo))
				{
					return false;
				}
				return path.Equals(pathInfo.path, StringComparison.Ordinal);
			}

			public override int GetHashCode()
			{
				return path.GetHashCode();
			}
		}

		private ActivityBindFormWorkflowOutline workflowOutline;

		private IServiceProvider serviceProvider;

		private ITypeDescriptorContext context;

		private Type boundType;

		private ActivityBind binding;

		private bool createNew;

		private bool createNewProperty;

		private string newMemberName = string.Empty;

		private const string MemberTypeFormat = "MemberType#{0}";

		private string ActivityBindDialogTitleFormat;

		private string PropertyAssignableFormat;

		private string DescriptionFormat;

		private string EditIndex;

		private string PleaseSelectCorrectActivityProperty;

		private string PleaseSelectActivityProperty;

		private string IncorrectIndexChange;

		private string CreateNewMemberHelpFormat;

		private ImageList memberTypes;

		private List<CustomProperty> properties;

		private IContainer components;

		private Panel dummyPanel;

		private Button cancelButton;

		private Button OKButton;

		private TableLayoutPanel buttonTableLayoutPanel;

		private TextBox helpTextBox;

		private RadioButton createProperty;

		private RadioButton createField;

		private GroupBox groupBox1;

		private System.Windows.Forms.TabControl bindTabControl;

		private TabPage existingMemberPage;

		private TabPage newMemberPage;

		private TextBox newMemberHelpTextBox;

		private Label memberNameLabel;

		private TextBox memberNameTextBox;

		public ActivityBind Binding => binding;

		public bool CreateNew => createNew;

		public bool CreateNewProperty => createNewProperty;

		public string NewMemberName => newMemberName;

		public ActivityBindForm(IServiceProvider serviceProvider, ITypeDescriptorContext context)
		{
			this.context = context;
			this.serviceProvider = serviceProvider;
			InitializeComponent();
			createProperty.Checked = true;
			helpTextBox.Multiline = true;
			IUIService iUIService = (IUIService)this.serviceProvider.GetService(typeof(IUIService));
			if (iUIService != null)
			{
				Font = (Font)iUIService.Styles["DialogFont"];
			}
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(ActivityBindForm));
			ActivityBindDialogTitleFormat = componentResourceManager.GetString("ActivityBindDialogTitleFormat");
			PropertyAssignableFormat = componentResourceManager.GetString("PropertyAssignableFormat");
			DescriptionFormat = componentResourceManager.GetString("DescriptionFormat");
			EditIndex = componentResourceManager.GetString("EditIndex");
			PleaseSelectCorrectActivityProperty = componentResourceManager.GetString("PleaseSelectCorrectActivityProperty");
			PleaseSelectActivityProperty = componentResourceManager.GetString("PleaseSelectActivityProperty");
			IncorrectIndexChange = componentResourceManager.GetString("IncorrectIndexChange");
			CreateNewMemberHelpFormat = componentResourceManager.GetString("CreateNewMemberHelpFormat");
			memberTypes = new ImageList();
			memberTypes.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("memberTypes.ImageStream");
			memberTypes.TransparentColor = AmbientTheme.TransparentColor;
			properties = CustomActivityDesignerHelper.GetCustomProperties(context);
		}

		private void ActivityBindForm_Load(object sender, EventArgs e)
		{
			Text = string.Format(CultureInfo.CurrentCulture, ActivityBindDialogTitleFormat, new object[1] { context.PropertyDescriptor.Name });
			if (context.PropertyDescriptor is DynamicPropertyDescriptor)
			{
				boundType = PropertyDescriptorUtils.GetBaseType(context.PropertyDescriptor, PropertyDescriptorUtils.GetComponent(context), serviceProvider);
			}
			if (boundType != null && serviceProvider.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider)
			{
				Type type = typeProvider.GetType(boundType.FullName, throwOnError: false);
				boundType = ((type != null) ? type : boundType);
			}
			workflowOutline = new ActivityBindFormWorkflowOutline(serviceProvider, this);
			dummyPanel.BorderStyle = BorderStyle.None;
			dummyPanel.SuspendLayout();
			dummyPanel.Controls.Add(workflowOutline);
			workflowOutline.Location = new Point(3, 3);
			workflowOutline.Size = new Size(199, 351);
			workflowOutline.Dock = DockStyle.Fill;
			dummyPanel.ResumeLayout(performLayout: false);
			workflowOutline.AddMemberKindImages(memberTypes);
			workflowOutline.ReloadWorkflowOutline();
			workflowOutline.ExpandRootNode();
			Activity activity = PropertyDescriptorUtils.GetComponent(context) as Activity;
			if (activity == null && context.GetService(typeof(IReferenceService)) is IReferenceService referenceService)
			{
				activity = referenceService.GetComponent(context.Instance) as Activity;
			}
			ActivityBind activityBind = context.PropertyDescriptor.GetValue(context.Instance) as ActivityBind;
			if (activity != null && activityBind != null)
			{
				Activity activity2 = Helpers.ParseActivity(Helpers.GetRootActivity(activity), activityBind.Name);
				if (activity2 != null)
				{
					workflowOutline.SelectActivity(activity2, ParseStringPath(GetActivityType(activity2), activityBind.Path));
				}
			}
			if (properties != null)
			{
				List<string> list = new List<string>();
				foreach (CustomProperty property in properties)
				{
					list.Add(property.Name);
				}
				memberNameTextBox.Text = DesignerHelpers.GenerateUniqueIdentifier(serviceProvider, activity.Name + "_" + context.PropertyDescriptor.Name, list.ToArray());
			}
			newMemberHelpTextBox.Lines = string.Format(CultureInfo.CurrentCulture, CreateNewMemberHelpFormat, new object[1] { GetSimpleTypeFullName(boundType) }).Split('\n');
		}

		private void OKButton_Click(object sender, EventArgs e)
		{
			base.DialogResult = DialogResult.None;
			createNew = bindTabControl.SelectedIndex != bindTabControl.TabPages.IndexOf(existingMemberPage);
			if (createNew)
			{
				createNewProperty = createProperty.Checked;
				newMemberName = memberNameTextBox.Text;
				base.DialogResult = ValidateNewMemberBind(newMemberName);
			}
			else
			{
				base.DialogResult = ValidateExistingPropertyBind();
			}
		}

		private DialogResult ValidateExistingPropertyBind()
		{
			Activity selectedActivity = workflowOutline.SelectedActivity;
			PathInfo selectedMember = workflowOutline.SelectedMember;
			string propertyPath = workflowOutline.PropertyPath;
			if (selectedActivity == null || selectedMember == null)
			{
				string @string = SR.GetString("Error_BindDialogNoValidPropertySelected", GetSimpleTypeFullName(boundType));
				DesignerHelpers.ShowError(serviceProvider, @string);
				return DialogResult.None;
			}
			Type type = selectedMember.PropertyType;
			if (serviceProvider.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider && type != null)
			{
				Type type2 = typeProvider.GetType(type.FullName, throwOnError: false);
				type = ((type2 != null) ? type2 : type);
			}
			if (boundType != type && !TypeProvider.IsAssignable(boundType, type))
			{
				string string2 = SR.GetString("Error_BindDialogWrongPropertyType", GetSimpleTypeFullName(type), GetSimpleTypeFullName(boundType));
				DesignerHelpers.ShowError(serviceProvider, string2);
				return DialogResult.None;
			}
			Activity activity = PropertyDescriptorUtils.GetComponent(context) as Activity;
			string name = context.PropertyDescriptor.Name;
			if (activity == selectedActivity && selectedMember != null && selectedMember.Path.Equals(name, StringComparison.Ordinal))
			{
				DesignerHelpers.ShowError(serviceProvider, SR.GetString("Error_BindDialogCanNotBindToItself"));
				return DialogResult.None;
			}
			if (selectedActivity != null && selectedMember != null)
			{
				ActivityBind obj = new ActivityBind(selectedActivity.QualifiedName, propertyPath);
				ValidationManager validationManager = new ValidationManager(serviceProvider);
				PropertyValidationContext propertyValidationContext = new PropertyValidationContext(context.Instance, DependencyProperty.FromName(context.PropertyDescriptor.Name, context.Instance.GetType()));
				validationManager.Context.Append(context.Instance);
				ValidationErrorCollection validationErrorCollection;
				using (WorkflowCompilationContext.CreateScope(validationManager))
				{
					validationErrorCollection = ValidationHelpers.ValidateProperty(validationManager, activity, obj, propertyValidationContext);
				}
				if (validationErrorCollection != null && validationErrorCollection.Count > 0 && validationErrorCollection.HasErrors)
				{
					string text = string.Empty;
					for (int i = 0; i < validationErrorCollection.Count; i++)
					{
						ValidationError validationError = validationErrorCollection[i];
						text = text + validationError.ErrorText + ((i == validationErrorCollection.Count - 1) ? string.Empty : "; ");
					}
					text = SR.GetString("Error_BindDialogBindNotValid") + text;
					DesignerHelpers.ShowError(serviceProvider, text);
					return DialogResult.None;
				}
				binding = obj;
				return DialogResult.OK;
			}
			return DialogResult.None;
		}

		private DialogResult ValidateNewMemberBind(string newMemberName)
		{
			Activity activity = PropertyDescriptorUtils.GetComponent(context) as Activity;
			if (activity == null && context.GetService(typeof(IReferenceService)) is IReferenceService referenceService)
			{
				activity = referenceService.GetComponent(context.Instance) as Activity;
			}
			string text = null;
			try
			{
				ValidationHelpers.ValidateIdentifier(context, newMemberName);
			}
			catch
			{
				text = SR.GetString("Error_InvalidLanguageIdentifier", newMemberName);
			}
			Type customActivityType = CustomActivityDesignerHelper.GetCustomActivityType(context);
			SupportedLanguages supportedLanguage = CompilerHelpers.GetSupportedLanguage(context);
			MemberInfo[] members = customActivityType.GetMembers(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
			foreach (MemberInfo memberInfo in members)
			{
				if (string.Compare(memberInfo.Name, newMemberName, supportedLanguage == SupportedLanguages.VB, CultureInfo.InvariantCulture) == 0)
				{
					text = SR.GetString("Failure_FieldAlreadyExist");
					break;
				}
			}
			if (text == null && string.Compare(customActivityType.Name, newMemberName, supportedLanguage == SupportedLanguages.VB, CultureInfo.InvariantCulture) == 0)
			{
				text = SR.GetString("Failure_FieldAlreadyExist");
			}
			if (text == null)
			{
				ActivityBind activityBind = new ActivityBind(ActivityBind.GetRelativePathExpression(Helpers.GetRootActivity(activity), activity), newMemberName);
				if (!(context.GetService(typeof(IDesignerHost)) is IDesignerHost))
				{
					throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).FullName));
				}
				binding = activityBind;
			}
			else
			{
				DesignerHelpers.ShowError(context, text);
			}
			if (text != null)
			{
				return DialogResult.None;
			}
			return DialogResult.OK;
		}

		private void cancelButton_Click(object sender, EventArgs e)
		{
			base.DialogResult = DialogResult.Cancel;
		}

		private void SelectedActivityChanged(Activity activity, PathInfo memberPathInfo, string path)
		{
			string empty = string.Empty;
			string simpleTypeFullName = GetSimpleTypeFullName(boundType);
			if (memberPathInfo != null)
			{
				if (path == null || path.Length == 0)
				{
					empty = string.Format(CultureInfo.CurrentCulture, PleaseSelectActivityProperty, new object[1] { simpleTypeFullName });
				}
				else
				{
					string text = MemberActivityBindTreeNode.MemberName(memberPathInfo.Path);
					string simpleTypeFullName2 = GetSimpleTypeFullName(memberPathInfo.PropertyType);
					string memberDescription = GetMemberDescription(memberPathInfo.MemberInfo);
					empty = ((!TypeProvider.IsAssignable(boundType, memberPathInfo.PropertyType)) ? string.Format(CultureInfo.CurrentCulture, PleaseSelectCorrectActivityProperty, new object[2] { simpleTypeFullName, simpleTypeFullName2 }) : (string.Format(CultureInfo.CurrentCulture, PropertyAssignableFormat, new object[2] { simpleTypeFullName2, simpleTypeFullName }) + ((memberDescription.Length > 0) ? string.Format(CultureInfo.CurrentCulture, DescriptionFormat, new object[1] { memberDescription }) : string.Empty)));
					empty += ((MemberActivityBindTreeNode.MemberName(path).IndexOfAny(new char[2] { '[', ']' }) != -1) ? EditIndex : string.Empty);
				}
			}
			else
			{
				empty = string.Format(CultureInfo.CurrentCulture, PleaseSelectActivityProperty, new object[1] { simpleTypeFullName });
			}
			helpTextBox.Lines = empty.Split('\n');
		}

		private List<PathInfo> PopulateAutoCompleteList(Activity activity, PathInfo path)
		{
			List<PathInfo> list = new List<PathInfo>();
			Type activityType = GetActivityType(activity);
			PathInfo[] array = ((activityType != null) ? ProcessPaths(activityType, path) : null);
			if (array != null)
			{
				list.AddRange(array);
			}
			return list;
		}

		private Type GetActivityType(Activity activity)
		{
			Type type = null;
			IDesignerHost designerHost = serviceProvider.GetService(typeof(IDesignerHost)) as IDesignerHost;
			WorkflowDesignerLoader workflowDesignerLoader = serviceProvider.GetService(typeof(WorkflowDesignerLoader)) as WorkflowDesignerLoader;
			if (designerHost != null && workflowDesignerLoader != null && activity.Parent == null && serviceProvider.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider)
			{
				type = typeProvider.GetType(designerHost.RootComponentClassName, throwOnError: false);
			}
			if (type == null)
			{
				type = activity.GetType();
			}
			return type;
		}

		private void ActivityBindForm_HelpButtonClicked(object sender, CancelEventArgs e)
		{
			e.Cancel = true;
			GetHelp();
		}

		protected override void OnHelpRequested(HelpEventArgs e)
		{
			e.Handled = true;
			GetHelp();
		}

		private void GetHelp()
		{
			DesignerHelpers.ShowHelpFromKeyword(serviceProvider, typeof(ActivityBindForm).FullName + ".UI");
		}

		private PathInfo[] ProcessPaths(Type activityType, PathInfo topProperty)
		{
			List<PathInfo> list = new List<PathInfo>();
			if (topProperty == null)
			{
				list.AddRange(GetSubPropertiesOnType(activityType, string.Empty));
			}
			else
			{
				list.AddRange(GetSubPropertiesOnType(topProperty.PropertyType, topProperty.Path));
			}
			return list.ToArray();
		}

		private PathInfo[] GetArraySubProperties(Type propertyType, string currentPath)
		{
			List<PathInfo> list = new List<PathInfo>();
			if (propertyType != typeof(string))
			{
				List<MethodInfo> list2 = new List<MethodInfo>();
				MemberInfo[] array = null;
				try
				{
					array = propertyType.GetDefaultMembers();
				}
				catch (NotImplementedException)
				{
				}
				catch (ArgumentException)
				{
				}
				if (array != null && array.Length != 0)
				{
					MemberInfo[] array2 = array;
					foreach (MemberInfo memberInfo in array2)
					{
						if (memberInfo is PropertyInfo)
						{
							list2.Add((memberInfo as PropertyInfo).GetGetMethod());
						}
					}
				}
				if (propertyType.IsArray)
				{
					MemberInfo[] member = propertyType.GetMember("Get");
					if (member != null && member.Length != 0)
					{
						MemberInfo[] array3 = member;
						foreach (MemberInfo memberInfo2 in array3)
						{
							if (memberInfo2 is MethodInfo)
							{
								list2.Add(memberInfo2 as MethodInfo);
							}
						}
					}
				}
				foreach (MethodInfo item in list2)
				{
					string text = ConstructIndexString(item);
					if (text != null)
					{
						list.Add(new PathInfo(currentPath + text, item, item.ReturnType));
					}
				}
			}
			return list.ToArray();
		}

		private string ConstructIndexString(MethodInfo getterMethod)
		{
			StringBuilder stringBuilder = new StringBuilder();
			ParameterInfo[] parameters = getterMethod.GetParameters();
			if (parameters != null && parameters.Length != 0)
			{
				stringBuilder.Append("[");
				for (int i = 0; i < parameters.Length; i++)
				{
					ParameterInfo parameterInfo = parameters[i];
					string indexerString = GetIndexerString(parameterInfo.ParameterType);
					if (indexerString == null)
					{
						return null;
					}
					stringBuilder.Append(indexerString);
					if (i < parameters.Length - 1)
					{
						stringBuilder.Append(",");
					}
				}
				stringBuilder.Append("]");
			}
			return stringBuilder.ToString();
		}

		private string GetIndexerString(Type indexType)
		{
			object obj = null;
			if (IsTypePrimitive(indexType))
			{
				try
				{
					obj = Activator.CreateInstance(indexType);
				}
				catch
				{
					obj = null;
				}
			}
			else if (indexType == typeof(string))
			{
				obj = "\"<name>\"";
			}
			return obj?.ToString();
		}

		private PropertyInfo[] GetProperties(Type type)
		{
			List<PropertyInfo> list = new List<PropertyInfo>();
			list.AddRange(type.GetProperties(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy));
			if (type.IsInterface)
			{
				Type[] interfaces = type.GetInterfaces();
				Type[] array = interfaces;
				foreach (Type type2 in array)
				{
					list.AddRange(type2.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy));
				}
			}
			return list.ToArray();
		}

		private PathInfo[] GetSubPropertiesOnType(Type typeToGetPropertiesOn, string currentPath)
		{
			List<PathInfo> list = new List<PathInfo>();
			if (typeToGetPropertiesOn == typeof(string) || (TypeProvider.IsAssignable(typeof(Delegate), typeToGetPropertiesOn) && !boundType.IsSubclassOf(typeof(Delegate))))
			{
				return list.ToArray();
			}
			currentPath = (string.IsNullOrEmpty(currentPath) ? string.Empty : (currentPath + "."));
			ITypeProvider typeProvider = serviceProvider.GetService(typeof(ITypeProvider)) as ITypeProvider;
			PropertyInfo[] array = GetProperties(typeToGetPropertiesOn);
			foreach (PropertyInfo propertyInfo in array)
			{
				MethodInfo getMethod = propertyInfo.GetGetMethod();
				Type type = BindHelpers.GetMemberType(propertyInfo);
				if (!(type == null))
				{
					if (typeProvider != null)
					{
						Type type2 = typeProvider.GetType(type.FullName, throwOnError: false);
						type = ((type2 != null) ? type2 : type);
					}
					if (IsPropertyBrowsable(propertyInfo) && getMethod != null && type != null && (!IsTypePrimitive(type) || TypeProvider.IsAssignable(boundType, type)) && (!(boundType != typeof(object)) || !(type == typeof(object))))
					{
						string name = propertyInfo.Name;
						name = currentPath + name + ConstructIndexString(getMethod);
						list.Add(new PathInfo(name, propertyInfo, type));
						list.AddRange(GetArraySubProperties(type, name));
					}
				}
			}
			FieldInfo[] fields = typeToGetPropertiesOn.GetFields(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy);
			foreach (FieldInfo fieldInfo in fields)
			{
				Type type3 = BindHelpers.GetMemberType(fieldInfo);
				if (!(type3 == null) && !TypeProvider.IsAssignable(typeof(DependencyProperty), type3))
				{
					if (typeProvider != null)
					{
						Type type4 = typeProvider.GetType(type3.FullName, throwOnError: false);
						type3 = ((type4 != null) ? type4 : type3);
					}
					if (IsPropertyBrowsable(fieldInfo) && type3 != null && (!IsTypePrimitive(type3) || TypeProvider.IsAssignable(boundType, type3)) && (!(boundType != typeof(object)) || !(type3 == typeof(object))) && (TypeProvider.IsAssignable(typeof(Delegate), boundType) || !TypeProvider.IsAssignable(typeof(Delegate), type3)))
					{
						string text = currentPath + fieldInfo.Name;
						list.Add(new PathInfo(text, fieldInfo, BindHelpers.GetMemberType(fieldInfo)));
						list.AddRange(GetArraySubProperties(type3, text));
					}
				}
			}
			if (boundType.IsSubclassOf(typeof(Delegate)))
			{
				EventInfo[] array2 = typeToGetPropertiesOn.GetEvents(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy);
				foreach (EventInfo eventInfo in array2)
				{
					Type type5 = BindHelpers.GetMemberType(eventInfo);
					if (!(type5 == null))
					{
						if (typeProvider != null)
						{
							Type type6 = typeProvider.GetType(type5.FullName, throwOnError: false);
							type5 = ((type6 != null) ? type6 : type5);
						}
						if (IsPropertyBrowsable(eventInfo) && type5 != null && TypeProvider.IsAssignable(boundType, type5))
						{
							list.Add(new PathInfo(currentPath + eventInfo.Name, eventInfo, type5));
						}
					}
				}
			}
			return list.ToArray();
		}

		private string GetMemberDescription(MemberInfo member)
		{
			object[] customAttributes = member.GetCustomAttributes(typeof(DescriptionAttribute), inherit: false);
			if (customAttributes != null && customAttributes.Length != 0)
			{
				if (!(customAttributes[0] is DescriptionAttribute descriptionAttribute))
				{
					return string.Empty;
				}
				return descriptionAttribute.Description;
			}
			return string.Empty;
		}

		private List<PathInfo> ParseStringPath(Type activityType, string path)
		{
			if (string.IsNullOrEmpty(path))
			{
				return null;
			}
			List<PathInfo> pathInfoList = new List<PathInfo>();
			PathWalker pathWalker = new PathWalker();
			PathMemberInfoEventArgs finalEventArgs = null;
			PathErrorInfoEventArgs errorEventArgs = null;
			pathWalker.MemberFound = (EventHandler<PathMemberInfoEventArgs>)Delegate.Combine(pathWalker.MemberFound, (EventHandler<PathMemberInfoEventArgs>)delegate(object sender, PathMemberInfoEventArgs eventArgs)
			{
				finalEventArgs = eventArgs;
				pathInfoList.Add(new PathInfo(eventArgs.Path, eventArgs.MemberInfo, BindHelpers.GetMemberType(eventArgs.MemberInfo)));
			});
			pathWalker.PathErrorFound = (EventHandler<PathErrorInfoEventArgs>)Delegate.Combine(pathWalker.PathErrorFound, (EventHandler<PathErrorInfoEventArgs>)delegate(object sender, PathErrorInfoEventArgs eventArgs)
			{
				errorEventArgs = eventArgs;
			});
			pathWalker.TryWalkPropertyPath(activityType, path);
			return pathInfoList;
		}

		private bool IsPropertyBrowsable(MemberInfo property)
		{
			object[] customAttributes = property.GetCustomAttributes(typeof(BrowsableAttribute), inherit: false);
			if (customAttributes.Length != 0)
			{
				if (customAttributes[0] is BrowsableAttribute browsableAttribute)
				{
					return browsableAttribute.Browsable;
				}
				if (customAttributes[0] is AttributeInfoAttribute attributeInfoAttribute)
				{
					ReadOnlyCollection<object> argumentValues = attributeInfoAttribute.AttributeInfo.ArgumentValues;
					if (argumentValues.Count > 0)
					{
						return Convert.ToBoolean(argumentValues[0], CultureInfo.InvariantCulture);
					}
				}
			}
			return true;
		}

		private static bool IsTypePrimitive(Type type)
		{
			if (!type.IsPrimitive && !type.IsEnum && !(type == typeof(Guid)) && !(type == typeof(IntPtr)) && !(type == typeof(string)) && !(type == typeof(DateTime)))
			{
				return type == typeof(TimeSpan);
			}
			return true;
		}

		private string GetSimpleTypeFullName(Type type)
		{
			if (type == null)
			{
				return string.Empty;
			}
			StringBuilder stringBuilder = new StringBuilder(type.FullName);
			Stack<Type> stack = new Stack<Type>();
			stack.Push(type);
			while (stack.Count > 0)
			{
				type = stack.Pop();
				while (type.IsArray)
				{
					type = type.GetElementType();
				}
				if (type.IsGenericType && !type.IsGenericTypeDefinition)
				{
					Type[] genericArguments = type.GetGenericArguments();
					foreach (Type type2 in genericArguments)
					{
						stringBuilder.Replace("[" + type2.AssemblyQualifiedName + "]", GetSimpleTypeFullName(type2));
						stack.Push(type2);
					}
				}
			}
			return stringBuilder.ToString();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(System.Workflow.ComponentModel.Design.ActivityBindForm));
			this.dummyPanel = new System.Windows.Forms.Panel();
			this.cancelButton = new System.Windows.Forms.Button();
			this.OKButton = new System.Windows.Forms.Button();
			this.buttonTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
			this.helpTextBox = new System.Windows.Forms.TextBox();
			this.createField = new System.Windows.Forms.RadioButton();
			this.createProperty = new System.Windows.Forms.RadioButton();
			this.groupBox1 = new System.Windows.Forms.GroupBox();
			this.bindTabControl = new System.Windows.Forms.TabControl();
			this.existingMemberPage = new System.Windows.Forms.TabPage();
			this.newMemberPage = new System.Windows.Forms.TabPage();
			this.newMemberHelpTextBox = new System.Windows.Forms.TextBox();
			this.memberNameLabel = new System.Windows.Forms.Label();
			this.memberNameTextBox = new System.Windows.Forms.TextBox();
			this.buttonTableLayoutPanel.SuspendLayout();
			this.groupBox1.SuspendLayout();
			this.bindTabControl.SuspendLayout();
			this.existingMemberPage.SuspendLayout();
			this.newMemberPage.SuspendLayout();
			base.SuspendLayout();
			resources.ApplyResources(this.dummyPanel, "dummyPanel");
			this.dummyPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.dummyPanel.Name = "dummyPanel";
			this.cancelButton.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			resources.ApplyResources(this.cancelButton, "cancelButton");
			this.cancelButton.Name = "cancelButton";
			this.cancelButton.UseVisualStyleBackColor = true;
			this.cancelButton.Click += new System.EventHandler(cancelButton_Click);
			resources.ApplyResources(this.OKButton, "OKButton");
			this.OKButton.Name = "OKButton";
			this.OKButton.UseVisualStyleBackColor = true;
			this.OKButton.Click += new System.EventHandler(OKButton_Click);
			resources.ApplyResources(this.buttonTableLayoutPanel, "buttonTableLayoutPanel");
			this.buttonTableLayoutPanel.Controls.Add(this.OKButton, 0, 0);
			this.buttonTableLayoutPanel.Controls.Add(this.cancelButton, 1, 0);
			this.buttonTableLayoutPanel.Name = "buttonTableLayoutPanel";
			resources.ApplyResources(this.helpTextBox, "helpTextBox");
			this.helpTextBox.Name = "helpTextBox";
			this.helpTextBox.ReadOnly = true;
			resources.ApplyResources(this.createField, "createField");
			this.createField.Checked = true;
			this.createField.Name = "createField";
			this.createField.TabStop = true;
			this.createField.UseVisualStyleBackColor = true;
			resources.ApplyResources(this.createProperty, "createProperty");
			this.createProperty.Name = "createProperty";
			this.createProperty.UseVisualStyleBackColor = true;
			resources.ApplyResources(this.groupBox1, "groupBox1");
			this.groupBox1.Controls.Add(this.createField);
			this.groupBox1.Controls.Add(this.createProperty);
			this.groupBox1.Name = "groupBox1";
			this.groupBox1.TabStop = false;
			resources.ApplyResources(this.bindTabControl, "bindTabControl");
			this.bindTabControl.Controls.Add(this.existingMemberPage);
			this.bindTabControl.Controls.Add(this.newMemberPage);
			this.bindTabControl.Name = "bindTabControl";
			this.bindTabControl.SelectedIndex = 0;
			this.existingMemberPage.Controls.Add(this.dummyPanel);
			this.existingMemberPage.Controls.Add(this.helpTextBox);
			resources.ApplyResources(this.existingMemberPage, "existingMemberPage");
			this.existingMemberPage.Name = "existingMemberPage";
			this.existingMemberPage.UseVisualStyleBackColor = true;
			this.newMemberPage.Controls.Add(this.memberNameLabel);
			this.newMemberPage.Controls.Add(this.memberNameTextBox);
			this.newMemberPage.Controls.Add(this.groupBox1);
			this.newMemberPage.Controls.Add(this.newMemberHelpTextBox);
			resources.ApplyResources(this.newMemberPage, "newMemberPage");
			this.newMemberPage.Name = "newMemberPage";
			this.newMemberPage.UseVisualStyleBackColor = true;
			resources.ApplyResources(this.newMemberHelpTextBox, "newMemberHelpTextBox");
			this.newMemberHelpTextBox.Name = "newMemberHelpTextBox";
			this.newMemberHelpTextBox.ReadOnly = true;
			resources.ApplyResources(this.memberNameLabel, "memberNameLabel");
			this.memberNameLabel.Name = "memberNameLabel";
			resources.ApplyResources(this.memberNameTextBox, "memberNameTextBox");
			this.memberNameTextBox.Name = "memberNameTextBox";
			base.AcceptButton = this.OKButton;
			resources.ApplyResources(this, "$this");
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.CancelButton = this.cancelButton;
			base.Controls.Add(this.bindTabControl);
			base.Controls.Add(this.buttonTableLayoutPanel);
			base.HelpButton = true;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "ActivityBindForm";
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Show;
			base.HelpButtonClicked += new System.ComponentModel.CancelEventHandler(ActivityBindForm_HelpButtonClicked);
			base.Load += new System.EventHandler(ActivityBindForm_Load);
			this.buttonTableLayoutPanel.ResumeLayout(false);
			this.groupBox1.ResumeLayout(false);
			this.groupBox1.PerformLayout();
			this.bindTabControl.ResumeLayout(false);
			this.existingMemberPage.ResumeLayout(false);
			this.existingMemberPage.PerformLayout();
			this.newMemberPage.ResumeLayout(false);
			this.newMemberPage.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ConfigErrorGlyph : DesignerGlyph
	{
		private static ConfigErrorGlyph defaultConfigErrorGlyph;

		internal static ConfigErrorGlyph Default
		{
			get
			{
				if (defaultConfigErrorGlyph == null)
				{
					defaultConfigErrorGlyph = new ConfigErrorGlyph();
				}
				return defaultConfigErrorGlyph;
			}
		}

		public override bool CanBeActivated => true;

		public override int Priority => 2;

		public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
		{
			if (designer == null)
			{
				throw new ArgumentNullException("designer");
			}
			Size glyphSize = WorkflowTheme.CurrentTheme.AmbientTheme.GlyphSize;
			Size margin = WorkflowTheme.CurrentTheme.AmbientTheme.Margin;
			Point location = new Point(designer.Bounds.Right - glyphSize.Width - margin.Width / 2, designer.Bounds.Top - glyphSize.Height + margin.Height);
			Rectangle result = new Rectangle(location, glyphSize);
			if (activated)
			{
				result.Width *= 2;
				AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
				result.Inflate(ambientTheme.Margin.Width / 2, ambientTheme.Margin.Height / 2);
			}
			return result;
		}

		protected override void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer)
		{
			Rectangle bounds = GetBounds(designer, activated: false);
			Rectangle bounds2 = GetBounds(designer, activated);
			Region region = null;
			Region clip = graphics.Clip;
			try
			{
				if (clip != null)
				{
					region = clip.Clone();
					if (activated)
					{
						region.Union(bounds2);
					}
					graphics.Clip = region;
				}
				if (activated)
				{
					graphics.FillRectangle(SystemBrushes.ButtonFace, bounds2);
					graphics.DrawRectangle(SystemPens.ControlDarkDark, bounds2.Left, bounds2.Top, bounds2.Width - 1, bounds2.Height - 1);
					bounds2.X += bounds.Width + ambientTheme.Margin.Width;
					bounds2.Width -= bounds.Width + 2 * ambientTheme.Margin.Width;
					using GraphicsPath path = ActivityDesignerPaint.GetScrollIndicatorPath(bounds2, ScrollButton.Down);
					graphics.FillPath(SystemBrushes.ControlText, path);
					graphics.DrawPath(SystemPens.ControlText, path);
				}
				ActivityDesignerPaint.DrawImage(graphics, AmbientTheme.ConfigErrorImage, bounds, DesignerContentAlignment.Fill);
			}
			finally
			{
				if (region != null)
				{
					graphics.Clip = clip;
					region.Dispose();
				}
			}
		}

		protected override void OnActivate(ActivityDesigner designer)
		{
			if (designer != null && designer.DesignerActions.Count > 0)
			{
				Rectangle bounds = GetBounds(designer, activated: false);
				Point location = designer.ParentView.LogicalPointToScreen(new Point(bounds.Left, bounds.Bottom));
				DesignerHelpers.ShowDesignerVerbs(designer, location, DesignerHelpers.GetDesignerActionVerbs(designer, designer.DesignerActions));
			}
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class CommentGlyph : DesignerGlyph
	{
		private static CommentGlyph defaultCommentGlyph;

		internal static CommentGlyph Default
		{
			get
			{
				if (defaultCommentGlyph == null)
				{
					defaultCommentGlyph = new CommentGlyph();
				}
				return defaultCommentGlyph;
			}
		}

		public override int Priority => 3;

		public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
		{
			if (designer == null)
			{
				throw new ArgumentNullException("designer");
			}
			Rectangle bounds = designer.Bounds;
			bounds.Inflate(WorkflowTheme.CurrentTheme.AmbientTheme.Margin);
			return bounds;
		}

		protected override void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer)
		{
			Rectangle bounds = GetBounds(designer, activated);
			graphics.FillRectangle(AmbientTheme.FadeBrush, bounds);
			graphics.FillRectangle(ambientTheme.CommentIndicatorBrush, bounds);
			graphics.DrawRectangle(ambientTheme.CommentIndicatorPen, bounds);
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class LockedActivityGlyph : DesignerGlyph
	{
		private static LockedActivityGlyph defaultLockedGlyph;

		internal static LockedActivityGlyph Default
		{
			get
			{
				if (defaultLockedGlyph == null)
				{
					defaultLockedGlyph = new LockedActivityGlyph();
				}
				return defaultLockedGlyph;
			}
		}

		public override int Priority => 3;

		public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
		{
			if (designer == null)
			{
				throw new ArgumentNullException("designer");
			}
			Rectangle bounds = designer.Bounds;
			bounds.Inflate(WorkflowTheme.CurrentTheme.AmbientTheme.Margin);
			return bounds;
		}

		protected override void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer)
		{
			Rectangle bounds = GetBounds(designer, activated);
			bounds.Inflate(WorkflowTheme.CurrentTheme.AmbientTheme.Margin);
			ActivityDesignerPaint.DrawImage(graphics, AmbientTheme.LockImage, bounds, DesignerContentAlignment.TopLeft);
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ReadOnlyActivityGlyph : DesignerGlyph
	{
		public override int Priority => 3;

		public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
		{
			if (designer == null)
			{
				throw new ArgumentNullException("designer");
			}
			Rectangle bounds = designer.Bounds;
			bounds.Inflate(WorkflowTheme.CurrentTheme.AmbientTheme.Margin);
			return bounds;
		}

		protected override void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer)
		{
			Rectangle bounds = GetBounds(designer, activated);
			bounds.Inflate(WorkflowTheme.CurrentTheme.AmbientTheme.Margin);
			ActivityDesignerPaint.DrawImage(graphics, AmbientTheme.ReadOnlyImage, bounds, DesignerContentAlignment.TopLeft);
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public abstract class SelectionGlyph : DesignerGlyph
	{
		public override int Priority => 4;

		public abstract bool IsPrimarySelection { get; }

		public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
		{
			if (designer == null)
			{
				throw new ArgumentNullException("designer");
			}
			Rectangle bounds = designer.Bounds;
			bounds.Inflate(WorkflowTheme.CurrentTheme.AmbientTheme.SelectionSize.Width / 2, WorkflowTheme.CurrentTheme.AmbientTheme.SelectionSize.Height / 2);
			return bounds;
		}

		protected override void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer)
		{
			ActivityDesignerPaint.DrawSelection(graphics, GetBounds(designer, activated), IsPrimarySelection, WorkflowTheme.CurrentTheme.AmbientTheme.SelectionSize, GetGrabHandles(designer));
		}

		public virtual Rectangle[] GetGrabHandles(ActivityDesigner designer)
		{
			Size selectionSize = WorkflowTheme.CurrentTheme.AmbientTheme.SelectionSize;
			Size size = new Size(selectionSize.Width, selectionSize.Height);
			Rectangle bounds = GetBounds(designer, activated: false);
			bounds.Inflate(selectionSize.Width, selectionSize.Height);
			ActivityDesigner parentDesigner = designer.ParentDesigner;
			Rectangle[] array = null;
			if (parentDesigner != null && parentDesigner is FreeformActivityDesigner)
			{
				return new Rectangle[8]
				{
					new Rectangle(bounds.Location, size),
					new Rectangle(new Point(bounds.Left + (bounds.Width - size.Width) / 2, bounds.Top), size),
					new Rectangle(bounds.Right - size.Width, bounds.Top, size.Width, size.Height),
					new Rectangle(new Point(bounds.Right - size.Width, bounds.Top + (bounds.Height - size.Height) / 2), size),
					new Rectangle(bounds.Right - size.Width, bounds.Bottom - size.Height, size.Width, size.Height),
					new Rectangle(new Point(bounds.Left + (bounds.Width - size.Width) / 2, bounds.Bottom - size.Height), size),
					new Rectangle(bounds.Left, bounds.Bottom - size.Height, size.Width, size.Height),
					new Rectangle(new Point(bounds.Left, bounds.Top + (bounds.Height - size.Height) / 2), size)
				};
			}
			return new Rectangle[1]
			{
				new Rectangle(bounds.Location, size)
			};
		}
	}
	internal sealed class PrimarySelectionGlyph : SelectionGlyph
	{
		private static PrimarySelectionGlyph defaultPrimarySelectionGlyph;

		internal static PrimarySelectionGlyph Default
		{
			get
			{
				if (defaultPrimarySelectionGlyph == null)
				{
					defaultPrimarySelectionGlyph = new PrimarySelectionGlyph();
				}
				return defaultPrimarySelectionGlyph;
			}
		}

		public override bool IsPrimarySelection => true;
	}
	internal sealed class NonPrimarySelectionGlyph : SelectionGlyph
	{
		private static NonPrimarySelectionGlyph defaultNonPrimarySelectionGlyph;

		internal static NonPrimarySelectionGlyph Default
		{
			get
			{
				if (defaultNonPrimarySelectionGlyph == null)
				{
					defaultNonPrimarySelectionGlyph = new NonPrimarySelectionGlyph();
				}
				return defaultNonPrimarySelectionGlyph;
			}
		}

		public override bool IsPrimarySelection => false;
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ShadowGlyph : DesignerGlyph
	{
		private static ShadowGlyph defaultShadowGlyph;

		internal static ShadowGlyph Default
		{
			get
			{
				if (defaultShadowGlyph == null)
				{
					defaultShadowGlyph = new ShadowGlyph();
				}
				return defaultShadowGlyph;
			}
		}

		public override int Priority => 1000000;

		public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
		{
			if (designer == null)
			{
				throw new ArgumentNullException("designer");
			}
			Rectangle bounds = designer.Bounds;
			bounds.Inflate(5, 5);
			return bounds;
		}

		protected override void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer)
		{
			if (!GetBounds(designer, activated).Size.IsEmpty)
			{
				bool roundEdges = designer.DesignerTheme.DesignerGeometry == DesignerGeometry.RoundedRectangle && !designer.IsRootDesigner;
				ActivityDesignerPaint.DrawDropShadow(graphics, designer.Bounds, designer.DesignerTheme.BorderPen.Color, 4, LightSourcePosition.Left | LightSourcePosition.Top, 0.5f, roundEdges);
			}
		}
	}
	internal abstract class ConnectorSelectionGlyph : SelectionGlyph
	{
		protected int connectorIndex;

		protected bool isPrimarySelectionGlyph = true;

		public ConnectorSelectionGlyph(int connectorIndex, bool isPrimarySelectionGlyph)
		{
			this.connectorIndex = connectorIndex;
			this.isPrimarySelectionGlyph = isPrimarySelectionGlyph;
		}
	}
	internal sealed class ConnectorDragDropGlyph : DesignerGlyph
	{
		private int connectorIndex;

		private Point glyphPoint = Point.Empty;

		public override int Priority => 2;

		public ConnectorDragDropGlyph(int connectorIndex, Point connectorCenter)
		{
			this.connectorIndex = connectorIndex;
			AmbientTheme ambientTheme = WorkflowTheme.CurrentTheme.AmbientTheme;
			glyphPoint = new Point(connectorCenter.X - ambientTheme.DropIndicatorSize.Width / 2, connectorCenter.Y - ambientTheme.DropIndicatorSize.Height / 2);
		}

		public override Rectangle GetBounds(ActivityDesigner designer, bool activated)
		{
			return new Rectangle(glyphPoint, WorkflowTheme.CurrentTheme.AmbientTheme.DropIndicatorSize);
		}

		protected override void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer)
		{
			ActivityDesignerPaint.DrawImage(graphics, AmbientTheme.DropIndicatorImage, GetBounds(designer, activated), DesignerContentAlignment.Fill);
		}
	}
	internal sealed class ConnectionPointGlyph : DesignerGlyph
	{
		private ConnectionPoint connectionPoint;

		public override int Priority => 1;

		internal ConnectionPointGlyph(ConnectionPoint connectionPoint)
		{
			this.connectionPoint = connectionPoint;
		}

		protected override void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer)
		{
			if (designer.Activity != null && designer.Activity.Site != null && connectionPoint != null)
			{
				Rectangle viewPort = ((designer.Activity.Site.GetService(typeof(WorkflowView)) is WorkflowView workflowView) ? workflowView.ViewPortRectangle : Rectangle.Empty);
				Rectangle clipRectangle = ((designer.ParentDesigner != null) ? designer.ParentDesigner.Bounds : designer.Bounds);
				ConnectionManager connectionManager = designer.Activity.Site.GetService(typeof(ConnectionManager)) as ConnectionManager;
				ActivityDesignerPaintEventArgs e = new ActivityDesignerPaintEventArgs(graphics, clipRectangle, viewPort, designer.DesignerTheme);
				bool drawHighlighted = connectionManager != null && connectionPoint.Equals(connectionManager.SnappedConnectionPoint);
				connectionPoint.OnPaint(e, drawHighlighted);
			}
		}
	}
	[ActivityDesignerTheme(typeof(ThrowDesignerTheme))]
	internal sealed class ThrowDesigner : ActivityDesigner
	{
	}
	internal sealed class ThrowDesignerTheme : ActivityDesignerTheme
	{
		public ThrowDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
			ForeColor = Color.FromArgb(255, 0, 0, 0);
			BorderColor = Color.FromArgb(255, 200, 45, 17);
			BorderStyle = DashStyle.Solid;
			BackColorStart = Color.FromArgb(255, 251, 215, 208);
			BackColorEnd = Color.FromArgb(255, 243, 133, 114);
			BackgroundStyle = LinearGradientMode.Horizontal;
		}
	}
	[ActivityDesignerTheme(typeof(SequenceDesignerTheme))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class SequenceDesigner : SequentialActivityDesigner
	{
	}
	internal sealed class SequenceDesignerTheme : CompositeDesignerTheme
	{
		public SequenceDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
			ShowDropShadow = false;
			ConnectorStartCap = LineAnchor.None;
			ConnectorEndCap = LineAnchor.ArrowAnchor;
			ForeColor = Color.FromArgb(255, 0, 0, 115);
			BorderColor = Color.FromArgb(255, 224, 224, 224);
			BorderStyle = DashStyle.Dash;
			BackColorStart = Color.FromArgb(0, 0, 0, 0);
			BackColorEnd = Color.FromArgb(0, 0, 0, 0);
		}
	}
	[ActivityDesignerTheme(typeof(SuspendDesignerTheme))]
	internal sealed class SuspendDesigner : ActivityDesigner
	{
	}
	internal sealed class SuspendDesignerTheme : ActivityDesignerTheme
	{
		public SuspendDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
			ForeColor = Color.FromArgb(255, 0, 0, 0);
			BorderColor = Color.FromArgb(255, 165, 121, 115);
			BorderStyle = DashStyle.Solid;
			BackColorStart = Color.FromArgb(255, 255, 255, 223);
			BackColorEnd = Color.FromArgb(255, 255, 255, 149);
			BackgroundStyle = LinearGradientMode.Horizontal;
		}
	}
	[ActivityDesignerTheme(typeof(TerminateDesignerTheme))]
	internal sealed class TerminateDesigner : ActivityDesigner
	{
	}
	internal sealed class TerminateDesignerTheme : ActivityDesignerTheme
	{
		public TerminateDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
			ForeColor = Color.FromArgb(255, 0, 0, 0);
			BorderColor = Color.FromArgb(255, 121, 115, 165);
			BorderStyle = DashStyle.Solid;
			BackColorStart = Color.FromArgb(255, 255, 232, 223);
			BackColorEnd = Color.FromArgb(255, 255, 179, 149);
			BackgroundStyle = LinearGradientMode.Horizontal;
		}
	}
	internal sealed class TransactionScopeActivityDesigner : SequenceDesigner
	{
		public override ReadOnlyCollection<DesignerView> Views
		{
			get
			{
				List<DesignerView> list = new List<DesignerView>();
				foreach (DesignerView view in base.Views)
				{
					Type type = view.UserData[SecondaryView.UserDataKey_ActivityType] as Type;
					if (type != null && !typeof(CancellationHandlerActivity).IsAssignableFrom(type) && !typeof(FaultHandlersActivity).IsAssignableFrom(type))
					{
						list.Add(view);
					}
				}
				return new ReadOnlyCollection<DesignerView>(list);
			}
		}
	}
	[ActivityDesignerTheme(typeof(CompensationDesignerTheme))]
	internal sealed class CompensationHandlerActivityDesigner : SequentialActivityDesigner
	{
		public override ReadOnlyCollection<DesignerView> Views
		{
			get
			{
				List<DesignerView> list = new List<DesignerView>();
				foreach (DesignerView view in base.Views)
				{
					if (view.ViewId != 2 && view.ViewId != 3 && view.ViewId != 4)
					{
						list.Add(view);
					}
				}
				return new ReadOnlyCollection<DesignerView>(list);
			}
		}

		public override bool CanExpandCollapse => false;

		public override bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection<Activity> activitiesToInsert)
		{
			foreach (Activity item in activitiesToInsert)
			{
				if (Helpers.IsFrameworkActivity(item))
				{
					return false;
				}
			}
			return base.CanInsertActivities(insertLocation, activitiesToInsert);
		}
	}
	internal sealed class CompensationDesignerTheme : CompositeDesignerTheme
	{
		public CompensationDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
			ShowDropShadow = false;
			ConnectorStartCap = LineAnchor.None;
			ConnectorEndCap = LineAnchor.ArrowAnchor;
			ForeColor = Color.FromArgb(255, 0, 0, 0);
			BorderColor = Color.FromArgb(255, 224, 224, 224);
			BorderStyle = DashStyle.Dash;
			BackColorStart = Color.FromArgb(53, 176, 224, 255);
			BackColorEnd = Color.FromArgb(53, 176, 224, 255);
		}
	}
	[ActivityDesignerTheme(typeof(CancellationDesignerTheme))]
	internal sealed class CancellationHandlerActivityDesigner : SequentialActivityDesigner
	{
		public override bool CanExpandCollapse => false;

		public override ReadOnlyCollection<DesignerView> Views
		{
			get
			{
				List<DesignerView> list = new List<DesignerView>();
				foreach (DesignerView view in base.Views)
				{
					if (view.ViewId != 2 && view.ViewId != 3 && view.ViewId != 4)
					{
						list.Add(view);
					}
				}
				return new ReadOnlyCollection<DesignerView>(list);
			}
		}

		public override bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection<Activity> activitiesToInsert)
		{
			foreach (Activity item in activitiesToInsert)
			{
				if (Helpers.IsFrameworkActivity(item))
				{
					return false;
				}
			}
			return base.CanInsertActivities(insertLocation, activitiesToInsert);
		}
	}
	internal sealed class CancellationDesignerTheme : CompositeDesignerTheme
	{
		public CancellationDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
			ShowDropShadow = false;
			ConnectorStartCap = LineAnchor.None;
			ConnectorEndCap = LineAnchor.ArrowAnchor;
			ForeColor = Color.FromArgb(255, 0, 0, 0);
			BorderColor = Color.FromArgb(255, 224, 224, 224);
			BorderStyle = DashStyle.Dash;
			BackColorStart = Color.FromArgb(53, 255, 176, 144);
			BackColorEnd = Color.FromArgb(53, 255, 176, 144);
		}
	}
	[ActivityDesignerTheme(typeof(FaultHandlerActivityDesignerTheme))]
	internal sealed class FaultHandlerActivityDesigner : SequentialActivityDesigner
	{
		public override ReadOnlyCollection<DesignerView> Views
		{
			get
			{
				List<DesignerView> list = new List<DesignerView>();
				foreach (DesignerView view in base.Views)
				{
					if (view.ViewId != 2 && view.ViewId != 3 && view.ViewId != 4)
					{
						list.Add(view);
					}
				}
				return new ReadOnlyCollection<DesignerView>(list);
			}
		}

		private bool InitializeField => false;

		public override bool CanExpandCollapse => false;

		protected override void PreFilterProperties(IDictionary properties)
		{
			base.PreFilterProperties(properties);
			if (properties["InitializeField"] == null)
			{
				properties["InitializeField"] = TypeDescriptor.CreateProperty(GetType(), "InitializeField", typeof(bool), DesignerSerializationVisibilityAttribute.Hidden, BrowsableAttribute.No);
			}
		}

		protected override void OnActivityChanged(ActivityChangedEventArgs e)
		{
			base.OnActivityChanged(e);
			if (e.Member != null && string.Equals(e.Member.Name, "FaultType", StringComparison.Ordinal))
			{
				TypeDescriptor.Refresh(e.Activity);
			}
		}

		public override bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner)
		{
			if (parentActivityDesigner == null)
			{
				throw new ArgumentNullException("parentActivityDesigner");
			}
			if (!(parentActivityDesigner.Activity is FaultHandlersActivity))
			{
				return false;
			}
			return base.CanBeParentedTo(parentActivityDesigner);
		}
	}
	internal sealed class FaultHandlerActivityDesignerTheme : CompositeDesignerTheme
	{
		public FaultHandlerActivityDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
			ShowDropShadow = false;
			ConnectorStartCap = LineAnchor.None;
			ConnectorEndCap = LineAnchor.ArrowAnchor;
			ForeColor = Color.FromArgb(255, 0, 0, 0);
			BorderColor = Color.FromArgb(255, 224, 224, 224);
			BorderStyle = DashStyle.Dash;
			BackColorStart = Color.FromArgb(0, 0, 0, 0);
			BackColorEnd = Color.FromArgb(0, 0, 0, 0);
		}
	}
	[ActivityDesignerTheme(typeof(FaultHandlersActivityDesignerTheme))]
	internal sealed class FaultHandlersActivityDesigner : ActivityPreviewDesigner
	{
		public override ReadOnlyCollection<DesignerView> Views
		{
			get
			{
				List<DesignerView> list = new List<DesignerView>();
				foreach (DesignerView view in base.Views)
				{
					if (view.ViewId != 2 && view.ViewId != 3 && view.ViewId != 4)
					{
						list.Add(view);
					}
				}
				return new ReadOnlyCollection<DesignerView>(list);
			}
		}

		public override bool CanExpandCollapse => false;

		public override object FirstSelectableObject
		{
			get
			{
				if (Expanded && IsVisible)
				{
					if (base.PreviewedDesigner != null || ContainedDesigners.Count > 0)
					{
						return base.FirstSelectableObject;
					}
					if (ContainedDesigners.Count == 0)
					{
						return new ConnectorHitTestInfo(this, HitTestLocations.Designer, 0).SelectableObject;
					}
				}
				return null;
			}
		}

		public override object LastSelectableObject
		{
			get
			{
				if (Expanded && IsVisible)
				{
					if (base.PreviewedDesigner != null || ContainedDesigners.Count > 0)
					{
						return base.LastSelectableObject;
					}
					if (ContainedDesigners.Count == 0)
					{
						return new ConnectorHitTestInfo(this, HitTestLocations.Designer, GetConnectors().GetLength(0) - 1).SelectableObject;
					}
				}
				return null;
			}
		}

		protected override void Initialize(Activity activity)
		{
			base.Initialize(activity);
			HelpText = DR.GetString("DropExceptionsHere");
			base.ShowPreview = false;
		}

		public override bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection<Activity> activitiesToInsert)
		{
			foreach (Activity item in activitiesToInsert)
			{
				if (!(item is FaultHandlerActivity))
				{
					return false;
				}
			}
			return base.CanInsertActivities(insertLocation, activitiesToInsert);
		}
	}
	internal sealed class FaultHandlersActivityDesignerTheme : ActivityPreviewDesignerTheme
	{
		public FaultHandlersActivityDesignerTheme(WorkflowTheme theme)
			: base(theme)
		{
			ShowDropShadow = false;
			ConnectorStartCap = LineAnchor.None;
			ConnectorEndCap = LineAnchor.None;
			ForeColor = Color.FromArgb(255, 0, 0, 0);
			BorderColor = Color.FromArgb(255, 224, 224, 224);
			BorderStyle = DashStyle.Dash;
			BackColorStart = Color.FromArgb(53, 255, 176, 176);
			BackColorEnd = Color.FromArgb(53, 255, 224, 224);
			base.PreviewForeColor = Color.FromArgb(255, 240, 240, 240);
			base.PreviewBorderColor = Color.FromArgb(255, 107, 109, 107);
			base.PreviewBackColor = Color.FromArgb(255, 255, 255, 255);
		}
	}
	internal sealed class CompensatableTransactionScopeActivityDesigner : SequenceDesigner
	{
		public override ReadOnlyCollection<DesignerView> Views
		{
			get
			{
				List<DesignerView> list = new List<DesignerView>();
				foreach (DesignerView view in base.Views)
				{
					Type type = view.UserData[SecondaryView.UserDataKey_ActivityType] as Type;
					if (type != null && !typeof(CancellationHandlerActivity).IsAssignableFrom(type) && !typeof(FaultHandlersActivity).IsAssignableFrom(type))
					{
						list.Add(view);
					}
				}
				return new ReadOnlyCollection<DesignerView>(list);
			}
		}
	}
	internal static class Helpers
	{
		private static readonly string VSExtensionProductRegistrySubKey = "Visual Studio Ext for Windows Workflow";

		internal static readonly string ProductRootRegKey = "SOFTWARE\\Microsoft\\Net Framework Setup\\NDP\\v4.0\\Setup\\Windows Workflow Foundation";

		internal static readonly string ProductInstallDirectory = GetInstallDirectory(getSDKDir: false);

		internal static readonly string ProductSDKInstallDirectory = GetInstallDirectory(getSDKDir: true);

		internal static readonly string TypeProviderAssemblyRegValueName = "References";

		private static readonly string ProductRootRegKey30 = "SOFTWARE\\Microsoft\\Net Framework Setup\\NDP\\v3.0\\Setup\\Windows Workflow Foundation";

		internal static readonly string ProductInstallDirectory30 = GetInstallDirectory30();

		private const string ProductCode = "{B644FB52-BB3D-4C43-80EC-57644210536A}";

		private const string ProductSDKCode = "{C8A7718A-FF6D-4DDC-AE36-BBF968D6799B}";

		private const string INSTALLPROPERTY_INSTALLLOCATION = "InstallLocation";

		internal const int FILENAME_MAX = 260;

		internal static string PerUserRegistryKey
		{
			get
			{
				string empty = string.Empty;
				using RegistryKey registryKey = Application.UserAppDataRegistry;
				empty = registryKey.ToString().Substring(Registry.CurrentUser.ToString().Length + 1);
				empty = empty.Substring(0, empty.LastIndexOf("\\"));
				return empty + "\\" + VSExtensionProductRegistrySubKey;
			}
		}

		private static string TypeProviderRegistryKeyPath => PerUserRegistryKey + "\\TypeProvider";

		internal static bool IsFileNameValid(string fileName)
		{
			int num = Path.GetInvalidPathChars().GetLength(0) + 5;
			char[] array = new char[num];
			Path.GetInvalidPathChars().CopyTo(array, 0);
			array[num - 5] = ':';
			array[num - 4] = '?';
			array[num - 3] = '*';
			array[num - 2] = '/';
			array[num - 1] = '\\';
			if (fileName != null && fileName.Length != 0 && fileName.Length <= 260)
			{
				return fileName.IndexOfAny(array) == -1;
			}
			return false;
		}

		internal static bool AreAllActivities(ICollection c)
		{
			if (c == null)
			{
				throw new ArgumentNullException("c");
			}
			foreach (object item in c)
			{
				if (!(item is Activity))
				{
					return false;
				}
			}
			return true;
		}

		internal static IDictionary PairUpCommonParentActivities(ICollection activities)
		{
			if (activities == null)
			{
				throw new ArgumentNullException("activities");
			}
			Hashtable hashtable = new Hashtable();
			foreach (Activity activity in activities)
			{
				if (activity.Parent != null)
				{
					ArrayList arrayList = (ArrayList)hashtable[activity.Parent];
					if (arrayList == null)
					{
						arrayList = new ArrayList();
						hashtable.Add(activity.Parent, arrayList);
					}
					arrayList.Add(activity);
				}
			}
			return hashtable;
		}

		internal static Activity[] GetTopLevelActivities(ICollection activities)
		{
			if (activities == null)
			{
				throw new ArgumentNullException("activities");
			}
			List<Activity> list = new List<Activity>();
			foreach (object activity2 in activities)
			{
				if (!(activity2 is Activity activity))
				{
					continue;
				}
				bool flag = false;
				Activity parent = activity.Parent;
				while (parent != null && !flag)
				{
					foreach (object activity3 in activities)
					{
						if (activity3 == parent)
						{
							flag = true;
							break;
						}
					}
					parent = parent.Parent;
				}
				if (!flag)
				{
					list.Add(activity);
				}
			}
			return list.ToArray();
		}

		internal static Activity[] GetNestedActivities(CompositeActivity compositeActivity)
		{
			if (compositeActivity == null)
			{
				throw new ArgumentNullException("compositeActivity");
			}
			IList<Activity> list = null;
			ArrayList arrayList = new ArrayList();
			Queue queue = new Queue();
			queue.Enqueue(compositeActivity);
			while (queue.Count > 0)
			{
				CompositeActivity compositeActivity2 = (CompositeActivity)queue.Dequeue();
				list = compositeActivity2.Activities;
				foreach (Activity item in list)
				{
					arrayList.Add(item);
					if (item is CompositeActivity)
					{
						queue.Enqueue(item);
					}
				}
			}
			return (Activity[])arrayList.ToArray(typeof(Activity));
		}

		internal static IList GetIdentifiersInCompositeActivity(CompositeActivity compositeActivity)
		{
			ArrayList arrayList = new ArrayList();
			if (compositeActivity != null)
			{
				arrayList.Add(compositeActivity.Name);
				IList<Activity> allNestedActivities = GetAllNestedActivities(compositeActivity);
				foreach (Activity item in allNestedActivities)
				{
					arrayList.Add(item.Name);
				}
			}
			return ArrayList.ReadOnly(arrayList);
		}

		internal static Activity[] GetAllNestedActivities(CompositeActivity compositeActivity)
		{
			if (compositeActivity == null)
			{
				throw new ArgumentNullException("compositeActivity");
			}
			ArrayList arrayList = new ArrayList();
			Queue queue = new Queue();
			queue.Enqueue(compositeActivity);
			while (queue.Count > 0)
			{
				CompositeActivity compositeActivity2 = (CompositeActivity)queue.Dequeue();
				if (compositeActivity2 != compositeActivity && IsCustomActivity(compositeActivity2))
				{
					continue;
				}
				foreach (Activity activity in compositeActivity2.Activities)
				{
					arrayList.Add(activity);
					if (activity is CompositeActivity)
					{
						queue.Enqueue(activity);
					}
				}
				foreach (Activity enabledActivity in compositeActivity2.EnabledActivities)
				{
					if (!arrayList.Contains(enabledActivity))
					{
						arrayList.Add(enabledActivity);
						if (enabledActivity is CompositeActivity)
						{
							queue.Enqueue(enabledActivity);
						}
					}
				}
			}
			return (Activity[])arrayList.ToArray(typeof(Activity));
		}

		internal static string MergeNamespaces(string primaryNs, string secondaryNs)
		{
			string text = primaryNs;
			if (secondaryNs != null && secondaryNs.Length > 0)
			{
				text = ((text == null || text.Length <= 0) ? secondaryNs : (text + "." + secondaryNs));
			}
			if (text == null)
			{
				text = string.Empty;
			}
			return text;
		}

		internal static Activity GetRootActivity(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			while (activity.Parent != null)
			{
				activity = activity.Parent;
			}
			return activity;
		}

		internal static Stream SerializeDesignersToStream(ICollection activities)
		{
			Stream stream = new MemoryStream();
			BinaryWriter writer = new BinaryWriter(stream);
			Queue<IComponent> queue = new Queue<IComponent>();
			foreach (IComponent activity in activities)
			{
				queue.Enqueue(activity);
			}
			while (queue.Count > 0)
			{
				IComponent component = queue.Dequeue();
				if (component == null || component.Site == null)
				{
					continue;
				}
				if (!(component.Site.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
				{
					throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).Name));
				}
				if (!(designerHost.GetDesigner(component) is ActivityDesigner activityDesigner))
				{
					continue;
				}
				try
				{
					((IPersistUIState)activityDesigner).SaveViewState(writer);
					if (!(component is CompositeActivity compositeActivity))
					{
						continue;
					}
					foreach (Activity activity2 in compositeActivity.Activities)
					{
						queue.Enqueue(activity2);
					}
				}
				catch
				{
				}
			}
			return stream;
		}

		internal static void DeserializeDesignersFromStream(ICollection activities, Stream stateStream)
		{
			if (stateStream.Length == 0L)
			{
				return;
			}
			BinaryReader reader = new BinaryReader(stateStream);
			stateStream.Seek(0L, SeekOrigin.Begin);
			Queue<IComponent> queue = new Queue<IComponent>();
			foreach (IComponent activity in activities)
			{
				queue.Enqueue(activity);
			}
			while (queue.Count > 0)
			{
				IComponent component = queue.Dequeue();
				if (component == null || component.Site == null)
				{
					continue;
				}
				if (!(component.Site.GetService(typeof(IDesignerHost)) is IDesignerHost designerHost))
				{
					throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(IDesignerHost).Name));
				}
				if (!(designerHost.GetDesigner(component) is ActivityDesigner activityDesigner))
				{
					continue;
				}
				try
				{
					((IPersistUIState)activityDesigner).LoadViewState(reader);
					if (!(component is CompositeActivity compositeActivity))
					{
						continue;
					}
					foreach (Activity activity2 in compositeActivity.Activities)
					{
						queue.Enqueue(activity2);
					}
				}
				catch
				{
				}
			}
		}

		internal static string GetBaseIdentifier(Activity activity)
		{
			string name = activity.GetType().Name;
			StringBuilder stringBuilder = new StringBuilder(name.Length);
			for (int i = 0; i < name.Length; i++)
			{
				if (char.IsUpper(name[i]) && (i == 0 || i == name.Length - 1 || char.IsUpper(name[i + 1])))
				{
					stringBuilder.Append(char.ToLowerInvariant(name[i]));
					continue;
				}
				stringBuilder.Append(name.Substring(i));
				break;
			}
			return stringBuilder.ToString();
		}

		internal static string GetRootNamespace(IServiceProvider serviceProvider)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			string result = string.Empty;
			IWorkflowCompilerOptionsService workflowCompilerOptionsService = (IWorkflowCompilerOptionsService)serviceProvider.GetService(typeof(IWorkflowCompilerOptionsService));
			if (workflowCompilerOptionsService != null && workflowCompilerOptionsService.RootNamespace != null)
			{
				result = workflowCompilerOptionsService.RootNamespace;
			}
			return result;
		}

		internal static Type GetDataSourceClass(Activity activity, IServiceProvider serviceProvider)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			Type type = null;
			string text = null;
			if (activity == GetRootActivity(activity))
			{
				text = activity.GetValue(WorkflowMarkupSerializer.XClassProperty) as string;
			}
			if (!string.IsNullOrEmpty(text))
			{
				ITypeProvider typeProvider = (ITypeProvider)serviceProvider.GetService(typeof(ITypeProvider));
				if (typeProvider == null)
				{
					throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(ITypeProvider).Name));
				}
				return typeProvider.GetType(text);
			}
			return activity.GetType();
		}

		internal static Activity GetDataSourceActivity(Activity activity, string inputName, out string name)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (string.IsNullOrEmpty(inputName))
			{
				throw new ArgumentException("inputName");
			}
			name = inputName;
			if (inputName.IndexOf('.') == -1)
			{
				return activity;
			}
			int num = inputName.LastIndexOf('.');
			string activityName = inputName.Substring(0, num);
			name = inputName.Substring(num + 1);
			Activity activity2 = ParseActivityForBind(activity, activityName);
			if (activity2 == null)
			{
				activity2 = ParseActivity(GetRootActivity(activity), activityName);
			}
			return activity2;
		}

		internal static void GetNamespaceAndClassName(string fullQualifiedName, out string namespaceName, out string className)
		{
			namespaceName = string.Empty;
			className = string.Empty;
			if (fullQualifiedName != null)
			{
				int num = fullQualifiedName.LastIndexOf('.');
				if (num != -1)
				{
					namespaceName = fullQualifiedName.Substring(0, num);
					className = fullQualifiedName.Substring(num + 1);
				}
				else
				{
					className = fullQualifiedName;
				}
			}
		}

		internal static CodeTypeDeclaration GetCodeNamespaceAndClass(CodeNamespaceCollection namespaces, string namespaceName, string className, out CodeNamespace codeNamespace)
		{
			codeNamespace = null;
			foreach (CodeNamespace @namespace in namespaces)
			{
				if (@namespace.Name == namespaceName)
				{
					codeNamespace = @namespace;
					break;
				}
			}
			CodeTypeDeclaration result = null;
			if (codeNamespace != null)
			{
				foreach (CodeTypeDeclaration type in codeNamespace.Types)
				{
					if (type.Name == className)
					{
						result = type;
						break;
					}
				}
			}
			return result;
		}

		internal static string GetClassName(string fullQualifiedName)
		{
			if (fullQualifiedName == null)
			{
				return null;
			}
			string result = fullQualifiedName;
			int num = fullQualifiedName.LastIndexOf('.');
			if (num != -1)
			{
				result = fullQualifiedName.Substring(num + 1);
			}
			return result;
		}

		[DllImport("msi.dll", CharSet = CharSet.Auto, ExactSpelling = true, SetLastError = true)]
		private static extern int MsiGetProductInfoW(string szProduct, string szProperty, StringBuilder lpValueBuf, ref int pcchValueBuf);

		private static string GetInstallDirectory(bool getSDKDir)
		{
			string text = string.Empty;
			try
			{
				int pcchValueBuf = 261;
				StringBuilder stringBuilder = new StringBuilder(pcchValueBuf);
				int num = MsiGetProductInfoW(getSDKDir ? "{C8A7718A-FF6D-4DDC-AE36-BBF968D6799B}" : "{B644FB52-BB3D-4C43-80EC-57644210536A}", "InstallLocation", stringBuilder, ref pcchValueBuf);
				int lastWin32Error = Marshal.GetLastWin32Error();
				if (num == 0)
				{
					text = stringBuilder.ToString();
				}
			}
			catch
			{
			}
			if (string.IsNullOrEmpty(text))
			{
				try
				{
					if (!getSDKDir)
					{
						using RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(ProductRootRegKey);
						if (registryKey != null)
						{
							text = (string)registryKey.GetValue("InstallDir");
						}
					}
				}
				catch
				{
				}
			}
			if (string.IsNullOrEmpty(text))
			{
				text = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
			}
			return text;
		}

		private static string GetInstallDirectory30()
		{
			string text = string.Empty;
			try
			{
				int pcchValueBuf = 261;
				StringBuilder stringBuilder = new StringBuilder(pcchValueBuf);
				int num = MsiGetProductInfoW("{B644FB52-BB3D-4C43-80EC-57644210536A}", "InstallLocation", stringBuilder, ref pcchValueBuf);
				int lastWin32Error = Marshal.GetLastWin32Error();
				if (num == 0)
				{
					text = stringBuilder.ToString();
				}
			}
			catch
			{
			}
			if (string.IsNullOrEmpty(text))
			{
				try
				{
					using RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(ProductRootRegKey30);
					if (registryKey != null)
					{
						text = (string)registryKey.GetValue("InstallDir");
					}
				}
				catch
				{
				}
			}
			return text;
		}

		internal static Type GetBaseType(PropertyInfo property, object owner, IServiceProvider serviceProvider)
		{
			if (owner == null)
			{
				throw new ArgumentNullException("owner");
			}
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			if (property != null)
			{
				if (owner is IDynamicPropertyTypeProvider dynamicPropertyTypeProvider)
				{
					Type propertyType = dynamicPropertyTypeProvider.GetPropertyType(serviceProvider, property.Name);
					if (propertyType != null)
					{
						return propertyType;
					}
				}
				return property.PropertyType;
			}
			return null;
		}

		internal static AccessTypes GetAccessType(PropertyInfo property, object owner, IServiceProvider serviceProvider)
		{
			if (owner == null)
			{
				throw new ArgumentNullException("owner");
			}
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			if (property != null && owner is IDynamicPropertyTypeProvider dynamicPropertyTypeProvider)
			{
				return dynamicPropertyTypeProvider.GetAccessType(serviceProvider, property.Name);
			}
			return AccessTypes.Read;
		}

		internal static bool IsChildActivity(CompositeActivity parent, Activity activity)
		{
			foreach (Activity activity2 in parent.Activities)
			{
				if (activity == activity2)
				{
					return true;
				}
				if (activity2 is CompositeActivity && IsChildActivity(activity2 as CompositeActivity, activity))
				{
					return true;
				}
			}
			return false;
		}

		internal static bool TypesEqual(CodeTypeReference typeLeft, Type typeRight)
		{
			if (typeRight.IsArray && typeLeft.ArrayRank != typeRight.GetArrayRank())
			{
				return false;
			}
			if (!typeLeft.BaseType.Equals(typeRight.FullName))
			{
				return false;
			}
			if (typeLeft.ArrayRank > 0)
			{
				return TypesEqual(typeLeft.ArrayElementType, typeRight.GetElementType());
			}
			return true;
		}

		internal static bool TypesEqual(CodeTypeReference typeLeft, CodeTypeReference typeRight)
		{
			if (typeLeft.ArrayRank != typeRight.ArrayRank)
			{
				return false;
			}
			if (!typeLeft.BaseType.Equals(typeRight.BaseType))
			{
				return false;
			}
			if (typeLeft.ArrayRank > 0)
			{
				return TypesEqual(typeLeft.ArrayElementType, typeRight.ArrayElementType);
			}
			return true;
		}

		internal static DesignerSerializationVisibility GetSerializationVisibility(MemberInfo memberInfo)
		{
			if (memberInfo == null)
			{
				throw new ArgumentNullException("memberInfo");
			}
			DesignerSerializationVisibility result = DesignerSerializationVisibility.Visible;
			object[] customAttributes = memberInfo.GetCustomAttributes(typeof(DesignerSerializationVisibilityAttribute), inherit: true);
			if (customAttributes.Length != 0)
			{
				result = (customAttributes[0] as DesignerSerializationVisibilityAttribute).Visibility;
			}
			else if (Attribute.IsDefined(memberInfo, typeof(DesignerSerializationVisibilityAttribute)))
			{
				result = (Attribute.GetCustomAttribute(memberInfo, typeof(DesignerSerializationVisibilityAttribute)) as DesignerSerializationVisibilityAttribute).Visibility;
			}
			return result;
		}

		internal static MethodInfo GetMethodExactMatch(Type type, string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
		{
			MethodInfo result = null;
			MethodInfo[] methods = type.GetMethods(bindingAttr);
			MethodInfo[] array = methods;
			foreach (MethodInfo methodInfo in array)
			{
				if (!(((bindingAttr & BindingFlags.IgnoreCase) == BindingFlags.IgnoreCase) ? (string.Compare(methodInfo.Name, name, StringComparison.OrdinalIgnoreCase) == 0) : (string.Compare(methodInfo.Name, name, StringComparison.Ordinal) == 0)))
				{
					continue;
				}
				bool flag = false;
				if (types != null)
				{
					ParameterInfo[] parameters = methodInfo.GetParameters();
					if (parameters.GetLength(0) == types.Length)
					{
						int num = 0;
						while (!flag && num < parameters.Length)
						{
							flag = parameters[num].ParameterType == null || !parameters[num].ParameterType.IsAssignableFrom(types[num]);
							num++;
						}
					}
					else
					{
						flag = true;
					}
				}
				if (!flag)
				{
					result = methodInfo;
					break;
				}
			}
			return result;
		}

		internal static T GetAttributeFromObject<T>(object attributeObject) where T : Attribute
		{
			if (attributeObject is AttributeInfoAttribute)
			{
				return (T)((AttributeInfoAttribute)attributeObject).AttributeInfo.CreateAttribute();
			}
			if (attributeObject is T)
			{
				return (T)attributeObject;
			}
			return null;
		}

		internal static Type GetDelegateFromEvent(EventInfo eventInfo)
		{
			if (eventInfo.EventHandlerType != null)
			{
				return eventInfo.EventHandlerType;
			}
			return TypeProvider.GetEventHandlerType(eventInfo);
		}

		internal static void AddTypeProviderAssembliesFromRegistry(TypeProvider typeProvider, IServiceProvider serviceProvider)
		{
			if (typeProvider == null)
			{
				throw new ArgumentNullException("typeProvider");
			}
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(TypeProviderRegistryKeyPath);
			if (registryKey == null)
			{
				return;
			}
			ITypeProviderCreator typeProviderCreator = serviceProvider.GetService(typeof(ITypeProviderCreator)) as ITypeProviderCreator;
			string[] array = (string[])registryKey.GetValue(TypeProviderAssemblyRegValueName);
			foreach (string text in array)
			{
				try
				{
					if (typeProviderCreator != null)
					{
						bool flag = true;
						Assembly transientAssembly = typeProviderCreator.GetTransientAssembly(AssemblyName.GetAssemblyName(text));
						if (!(transientAssembly != null))
						{
							continue;
						}
						Type[] types = transientAssembly.GetTypes();
						int num = 0;
						if (num < types.Length)
						{
							Type type = types[num];
							if (typeProvider.GetType(type.AssemblyQualifiedName) != null)
							{
								flag = false;
							}
						}
						if (flag)
						{
							typeProvider.AddAssembly(transientAssembly);
						}
						continue;
					}
					typeProvider.AddAssemblyReference(text);
				}
				catch
				{
				}
			}
			registryKey.Close();
		}

		internal static void UpdateTypeProviderAssembliesRegistry(string assemblyName)
		{
			RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(TypeProviderRegistryKeyPath);
			if (registryKey == null)
			{
				return;
			}
			try
			{
				ArrayList arrayList = null;
				arrayList = ((registryKey.ValueCount <= 0) ? new ArrayList() : new ArrayList((string[])registryKey.GetValue(TypeProviderAssemblyRegValueName)));
				if (!arrayList.Contains(assemblyName))
				{
					arrayList.Add(assemblyName);
					registryKey.SetValue(TypeProviderAssemblyRegValueName, (string[])arrayList.ToArray(typeof(string)));
				}
			}
			catch
			{
			}
			finally
			{
				registryKey.Close();
			}
		}

		internal static CompositeActivity GetDeclaringActivity(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			for (CompositeActivity parent = activity.Parent; parent != null; parent = parent.Parent)
			{
				if (parent.Parent == null)
				{
					return parent;
				}
				if (IsCustomActivity(parent))
				{
					return parent;
				}
			}
			return null;
		}

		internal static bool IsActivityLocked(Activity activity)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			for (CompositeActivity parent = activity.Parent; parent != null; parent = parent.Parent)
			{
				if (parent.Parent == null)
				{
					return false;
				}
				if (IsCustomActivity(parent))
				{
					return true;
				}
			}
			return false;
		}

		internal static Activity GetEnclosingActivity(Activity activity)
		{
			if (IsActivityLocked(activity))
			{
				return GetDeclaringActivity(activity);
			}
			return GetRootActivity(activity);
		}

		public static IList<Activity> GetAllEnabledActivities(CompositeActivity compositeActivity)
		{
			if (compositeActivity == null)
			{
				throw new ArgumentNullException("compositeActivity");
			}
			List<Activity> list = new List<Activity>(compositeActivity.EnabledActivities);
			foreach (Activity activity in compositeActivity.Activities)
			{
				if (activity.Enabled && IsFrameworkActivity(activity))
				{
					list.Add(activity);
				}
			}
			return list;
		}

		public static bool IsFrameworkActivity(Activity activity)
		{
			if (!(activity is CancellationHandlerActivity) && !(activity is CompensationHandlerActivity))
			{
				return activity is FaultHandlersActivity;
			}
			return true;
		}

		internal static MethodInfo GetInterfaceMethod(Type interfaceType, string methodName)
		{
			MethodInfo result = null;
			string text = string.Empty;
			string name = string.Empty;
			if (methodName.LastIndexOf('.') > 0)
			{
				text = methodName.Substring(0, methodName.LastIndexOf('.'));
				name = methodName.Substring(methodName.LastIndexOf('.') + 1);
			}
			if (!string.IsNullOrEmpty(text))
			{
				Type[] interfaces = interfaceType.GetInterfaces();
				foreach (Type type in interfaces)
				{
					if (string.Compare(type.FullName, text, StringComparison.Ordinal) == 0)
					{
						result = type.GetMethod(name);
						break;
					}
				}
			}
			else
			{
				result = interfaceType.GetMethod(methodName);
			}
			return result;
		}

		internal static XmlWriter CreateXmlWriter(object output)
		{
			XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();
			xmlWriterSettings.Indent = true;
			xmlWriterSettings.IndentChars = "\t";
			xmlWriterSettings.OmitXmlDeclaration = true;
			xmlWriterSettings.CloseOutput = true;
			if (output is string)
			{
				return XmlWriter.Create(output as string, xmlWriterSettings);
			}
			if (output is TextWriter)
			{
				return XmlWriter.Create(output as TextWriter, xmlWriterSettings);
			}
			return null;
		}

		internal static string GetDesignTimeTypeName(object owner, object key)
		{
			string result = null;
			if (owner is DependencyObject dependencyObject && key != null && dependencyObject.UserData.Contains(UserDataKeys.DesignTimeTypeNames) && dependencyObject.UserData[UserDataKeys.DesignTimeTypeNames] is Hashtable hashtable && hashtable.ContainsKey(key))
			{
				result = hashtable[key] as string;
			}
			return result;
		}

		internal static void SetDesignTimeTypeName(object owner, object key, string value)
		{
			if (owner is DependencyObject dependencyObject && key != null)
			{
				if (!dependencyObject.UserData.Contains(UserDataKeys.DesignTimeTypeNames))
				{
					dependencyObject.UserData[UserDataKeys.DesignTimeTypeNames] = new Hashtable();
				}
				Hashtable hashtable = dependencyObject.UserData[UserDataKeys.DesignTimeTypeNames] as Hashtable;
				hashtable[key] = value;
			}
		}

		internal static bool IsCustomActivity(CompositeActivity compositeActivity)
		{
			if (compositeActivity == null)
			{
				throw new ArgumentNullException("compositeActivity");
			}
			if (compositeActivity.UserData.Contains(UserDataKeys.CustomActivity))
			{
				return (bool)compositeActivity.UserData[UserDataKeys.CustomActivity];
			}
			try
			{
				if (Activator.CreateInstance(compositeActivity.GetType()) is CompositeActivity compositeActivity2 && compositeActivity2.Activities.Count > 0)
				{
					compositeActivity.UserData[UserDataKeys.CustomActivityDefaultName] = compositeActivity2.Name;
					compositeActivity.UserData[UserDataKeys.CustomActivity] = true;
					return true;
				}
			}
			catch
			{
			}
			compositeActivity.UserData[UserDataKeys.CustomActivity] = false;
			return false;
		}

		internal static Activity ParseActivity(Activity parsingContext, string activityName)
		{
			if (parsingContext == null)
			{
				throw new ArgumentNullException("parsingContext");
			}
			if (activityName == null)
			{
				throw new ArgumentNullException("activityName");
			}
			string id = activityName;
			string text = string.Empty;
			int num = activityName.IndexOf(".");
			if (num != -1)
			{
				id = activityName.Substring(0, num);
				text = activityName.Substring(num + 1);
				if (text.Length == 0)
				{
					return null;
				}
			}
			Activity activity = GetActivity(parsingContext, id);
			if (activity != null)
			{
				if (text.Length > 0)
				{
					if (!(activity is CompositeActivity) || !IsCustomActivity(activity as CompositeActivity))
					{
						return null;
					}
					string[] array = text.Split('.');
					for (int i = 0; i < array.Length; i++)
					{
						Activity activity2 = GetActivity(activity, array[i]);
						if (activity2 == null || !IsActivityLocked(activity2))
						{
							return null;
						}
						CompositeActivity declaringActivity = GetDeclaringActivity(activity2);
						if (activity != declaringActivity)
						{
							return null;
						}
						activity = activity2;
					}
					return activity;
				}
				if (IsActivityLocked(activity) && !IsDeclaringActivityMatchesContext(activity, parsingContext))
				{
					return null;
				}
				return activity;
			}
			return null;
		}

		internal static Activity ParseActivityForBind(Activity context, string activityName)
		{
			if (context == null)
			{
				throw new ArgumentNullException("context");
			}
			if (activityName == null)
			{
				throw new ArgumentNullException("activityName");
			}
			if (string.Equals(activityName, "/Self", StringComparison.Ordinal))
			{
				return context;
			}
			if (activityName.StartsWith("/Parent", StringComparison.OrdinalIgnoreCase))
			{
				Activity activity = context;
				string[] array = activityName.Split(new char[1] { '/' }, StringSplitOptions.RemoveEmptyEntries);
				for (int i = 0; i < array.Length; i++)
				{
					if (activity == null)
					{
						break;
					}
					string a = array[i].Trim();
					activity = (string.Equals(a, "Parent", StringComparison.OrdinalIgnoreCase) ? activity.Parent : null);
				}
				return activity;
			}
			if (IsActivityLocked(context))
			{
				Activity activity2 = null;
				Activity declaringActivity = GetDeclaringActivity(context);
				Guid guid = GetRuntimeContextGuid(context);
				Guid runtimeContextGuid = GetRuntimeContextGuid(declaringActivity);
				Activity parsingContext = context;
				Activity parent = context.Parent;
				Guid runtimeContextGuid2 = GetRuntimeContextGuid(parent);
				while (activity2 == null && runtimeContextGuid != guid)
				{
					while (parent != null && runtimeContextGuid2 == guid)
					{
						parsingContext = parent;
						parent = parent.Parent;
						runtimeContextGuid2 = GetRuntimeContextGuid(parent);
					}
					activity2 = ParseActivity(parsingContext, activityName);
					guid = runtimeContextGuid2;
				}
				if (activity2 == null)
				{
					activity2 = ParseActivity(declaringActivity, activityName);
				}
				if (activity2 == null)
				{
					if (!declaringActivity.UserData.Contains(UserDataKeys.CustomActivityDefaultName))
					{
						Activity activity3 = Activator.CreateInstance(declaringActivity.GetType()) as Activity;
						declaringActivity.UserData[UserDataKeys.CustomActivityDefaultName] = activity3.Name;
					}
					if ((string)declaringActivity.UserData[UserDataKeys.CustomActivityDefaultName] == activityName)
					{
						activity2 = declaringActivity;
					}
				}
				return activity2;
			}
			Activity activity4 = null;
			Activity activity5 = context;
			bool flag = false;
			if (activity5 is CompositeActivity compositeActivity && activity5.Parent != null && IsCustomActivity(compositeActivity))
			{
				flag = true;
				activity5 = activity5.Parent;
			}
			while (activity4 == null && activity5 != null)
			{
				activity4 = activity5.GetActivityByName(activityName, withinThisActivityOnly: true);
				activity5 = activity5.Parent;
			}
			if (flag && activity4 == null)
			{
				activity5 = context;
				activity4 = activity5.GetActivityByName(activityName, withinThisActivityOnly: true);
			}
			if (activity4 != null)
			{
				return activity4;
			}
			return ParseActivity(GetRootActivity(context), activityName);
		}

		private static Guid GetRuntimeContextGuid(Activity currentActivity)
		{
			Activity activity = currentActivity;
			Guid guid = (Guid)activity.GetValue(Activity.ActivityContextGuidProperty);
			while (guid == Guid.Empty && activity.Parent != null)
			{
				activity = activity.Parent;
				guid = (Guid)activity.GetValue(Activity.ActivityContextGuidProperty);
			}
			return guid;
		}

		private static bool IsDeclaringActivityMatchesContext(Activity currentActivity, Activity context)
		{
			CompositeActivity compositeActivity = context as CompositeActivity;
			CompositeActivity declaringActivity = GetDeclaringActivity(currentActivity);
			if (IsActivityLocked(context) && (compositeActivity == null || !IsCustomActivity(compositeActivity)))
			{
				compositeActivity = GetDeclaringActivity(context);
			}
			if (compositeActivity == declaringActivity)
			{
				return true;
			}
			return false;
		}

		internal static bool IsAlternateFlowActivity(Activity activity)
		{
			if (activity == null)
			{
				return false;
			}
			bool flag = false;
			if (!activity.UserData.Contains(typeof(AlternateFlowActivityAttribute)))
			{
				flag = activity.GetType().GetCustomAttributes(typeof(AlternateFlowActivityAttribute), inherit: true).Length != 0;
				activity.UserData[typeof(AlternateFlowActivityAttribute)] = flag;
			}
			else
			{
				flag = (bool)activity.UserData[typeof(AlternateFlowActivityAttribute)];
			}
			return flag;
		}

		private static Activity GetActivity(Activity containerActivity, string id)
		{
			if (containerActivity != null)
			{
				Queue queue = new Queue();
				queue.Enqueue(containerActivity);
				while (queue.Count > 0)
				{
					Activity activity = (Activity)queue.Dequeue();
					if (!activity.Enabled)
					{
						continue;
					}
					if (activity.Name == id)
					{
						return activity;
					}
					if (!(activity is CompositeActivity))
					{
						continue;
					}
					foreach (Activity activity2 in ((CompositeActivity)activity).Activities)
					{
						queue.Enqueue(activity2);
					}
				}
			}
			return null;
		}
	}
	internal sealed class TypeDescriptorContext : ITypeDescriptorContext, IServiceProvider
	{
		private IServiceProvider serviceProvider;

		private PropertyDescriptor propDesc;

		private object instance;

		public IContainer Container => (IContainer)serviceProvider.GetService(typeof(IContainer));

		public object Instance => instance;

		public PropertyDescriptor PropertyDescriptor => propDesc;

		public TypeDescriptorContext(IServiceProvider serviceProvider, PropertyDescriptor propDesc, object instance)
		{
			this.serviceProvider = serviceProvider;
			this.propDesc = propDesc;
			this.instance = instance;
		}

		public object GetService(Type serviceType)
		{
			return serviceProvider.GetService(serviceType);
		}

		public bool OnComponentChanging()
		{
			IComponentChangeService componentChangeService = (IComponentChangeService)serviceProvider.GetService(typeof(IComponentChangeService));
			if (componentChangeService != null)
			{
				try
				{
					componentChangeService.OnComponentChanging(instance, propDesc);
				}
				catch (CheckoutException ex)
				{
					if (ex == CheckoutException.Canceled)
					{
						return false;
					}
					throw ex;
				}
			}
			return true;
		}

		public void OnComponentChanged()
		{
			((IComponentChangeService)serviceProvider.GetService(typeof(IComponentChangeService)))?.OnComponentChanged(instance, propDesc, null, null);
		}
	}
	internal static class DebuggerHelpers
	{
		internal static Activity ParseActivity(Activity parsingContext, string activityName)
		{
			if (parsingContext == null)
			{
				throw new ArgumentNullException("parsingContext");
			}
			if (activityName == null)
			{
				throw new ArgumentNullException("activityName");
			}
			string text = activityName;
			string text2 = string.Empty;
			int num = activityName.IndexOf(".");
			if (num != -1)
			{
				text = activityName.Substring(0, num);
				text2 = activityName.Substring(num + 1);
				if (text2.Length == 0)
				{
					return null;
				}
			}
			Activity activity = null;
			activity = GetActivity(parsingContext, text);
			if (activity == null && parsingContext is CompositeActivity && parsingContext.Parent != null && Helpers.IsCustomActivity(parsingContext as CompositeActivity))
			{
				activity = GetActivity(parsingContext, parsingContext.QualifiedName + "." + text);
			}
			if (activity != null)
			{
				if (text2.Length > 0)
				{
					if (!(activity is CompositeActivity) || !Helpers.IsCustomActivity(activity as CompositeActivity))
					{
						return null;
					}
					string[] array = text2.Split('.');
					for (int i = 0; i < array.Length; i++)
					{
						Activity activity2 = GetActivity(activity, activity.QualifiedName + "." + array[i]);
						if (activity2 == null || !Helpers.IsActivityLocked(activity2))
						{
							return null;
						}
						CompositeActivity declaringActivity = Helpers.GetDeclaringActivity(activity2);
						if (activity != declaringActivity)
						{
							return null;
						}
						activity = activity2;
					}
					return activity;
				}
				if (Helpers.IsActivityLocked(activity) && !IsDeclaringActivityMatchesContext(activity, parsingContext))
				{
					return null;
				}
				return activity;
			}
			return null;
		}

		private static Activity GetActivity(Activity containerActivity, string id)
		{
			if (containerActivity != null)
			{
				Queue queue = new Queue();
				queue.Enqueue(containerActivity);
				while (queue.Count > 0)
				{
					Activity activity = (Activity)queue.Dequeue();
					if (!activity.Enabled)
					{
						continue;
					}
					if (activity.QualifiedName == id)
					{
						return activity;
					}
					if (!(activity is CompositeActivity))
					{
						continue;
					}
					foreach (Activity activity2 in ((CompositeActivity)activity).Activities)
					{
						queue.Enqueue(activity2);
					}
				}
			}
			return null;
		}

		private static bool IsDeclaringActivityMatchesContext(Activity currentActivity, Activity context)
		{
			CompositeActivity compositeActivity = context as CompositeActivity;
			CompositeActivity declaringActivity = Helpers.GetDeclaringActivity(currentActivity);
			if (Helpers.IsActivityLocked(context) && (compositeActivity == null || !Helpers.IsCustomActivity(compositeActivity)))
			{
				compositeActivity = Helpers.GetDeclaringActivity(context);
			}
			if (compositeActivity == declaringActivity)
			{
				return true;
			}
			return false;
		}
	}
	internal static class PropertyDescriptorUtils
	{
		internal static ISite GetSite(IServiceProvider serviceProvider, object component)
		{
			ISite site = null;
			if (component != null)
			{
				if (component is IComponent && ((IComponent)component).Site != null)
				{
					site = ((IComponent)component).Site;
				}
				if (site == null && component.GetType().IsArray && (component as object[]).Length != 0 && (component as object[])[0] is IComponent)
				{
					site = ((IComponent)(component as object[])[0]).Site;
				}
				if (site == null && serviceProvider != null && serviceProvider.GetService(typeof(IReferenceService)) is IReferenceService referenceService)
				{
					IComponent component2 = referenceService.GetComponent(component);
					if (component2 != null)
					{
						site = component2.Site;
					}
				}
			}
			if (site == null)
			{
				site = serviceProvider as ISite;
			}
			return site;
		}

		internal static IComponent GetComponent(ITypeDescriptorContext context)
		{
			return ((context != null) ? GetSite(context, context.Instance) : null)?.Component;
		}

		internal static Type GetBaseType(PropertyDescriptor property, object owner, IServiceProvider serviceProvider)
		{
			Type type = null;
			Type type2 = owner.GetType();
			if (owner != null && owner is IDynamicPropertyTypeProvider dynamicPropertyTypeProvider)
			{
				type = dynamicPropertyTypeProvider.GetPropertyType(serviceProvider, property.Name);
			}
			if (type == null)
			{
				type = property.PropertyType;
			}
			return type;
		}

		internal static void SetPropertyValue(IServiceProvider serviceProvider, PropertyDescriptor propertyDescriptor, object component, object value)
		{
			ComponentChangeDispatcher componentChangeDispatcher = new ComponentChangeDispatcher(serviceProvider, component, propertyDescriptor);
			try
			{
				propertyDescriptor.SetValue(component, value);
			}
			catch (Exception ex)
			{
				if (ex is TargetInvocationException && ex.InnerException != null)
				{
					throw ex.InnerException;
				}
				throw ex;
			}
			finally
			{
				componentChangeDispatcher.Dispose();
			}
		}
	}
	internal sealed class ComponentChangeDispatcher : IDisposable
	{
		private IServiceProvider serviceProvider;

		private object component;

		private PropertyDescriptor property;

		private object oldValue;

		private object newValue;

		public ComponentChangeDispatcher(IServiceProvider serviceProvider, object component, PropertyDescriptor propertyDescriptor)
		{
			this.serviceProvider = serviceProvider;
			this.component = component;
			property = propertyDescriptor;
			if (!(serviceProvider.GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService))
			{
				return;
			}
			try
			{
				newValue = (oldValue = propertyDescriptor.GetValue(component));
				propertyDescriptor.AddValueChanged(component, OnValueChanged);
				componentChangeService.OnComponentChanging(component, propertyDescriptor);
			}
			catch (CheckoutException ex)
			{
				if (ex == CheckoutException.Canceled)
				{
					return;
				}
				throw ex;
			}
		}

		public void Dispose()
		{
			if (serviceProvider.GetService(typeof(IComponentChangeService)) is IComponentChangeService componentChangeService)
			{
				componentChangeService.OnComponentChanged(component, property, oldValue, newValue);
			}
		}

		private void OnValueChanged(object sender, EventArgs e)
		{
			newValue = property.GetValue(component);
			property.RemoveValueChanged(component, OnValueChanged);
		}
	}
	internal class DynamicPropertyDescriptor : PropertyDescriptor
	{
		private IServiceProvider serviceProvider;

		private PropertyDescriptor realPropertyDescriptor;

		public IServiceProvider ServiceProvider => serviceProvider;

		public PropertyDescriptor RealPropertyDescriptor => realPropertyDescriptor;

		public override string Category => realPropertyDescriptor.Category;

		public override AttributeCollection Attributes
		{
			get
			{
				ArrayList arrayList = new ArrayList();
				arrayList.AddRange(realPropertyDescriptor.Attributes);
				arrayList.Add(new MergablePropertyAttribute(allowMerge: false));
				return new AttributeCollection((Attribute[])arrayList.ToArray(typeof(Attribute)));
			}
		}

		public override TypeConverter Converter => realPropertyDescriptor.Converter;

		public override string Description => realPropertyDescriptor.Description;

		public override string DisplayName => realPropertyDescriptor.DisplayName;

		public override Type ComponentType => realPropertyDescriptor.ComponentType;

		public override Type PropertyType => realPropertyDescriptor.PropertyType;

		public override bool IsReadOnly => realPropertyDescriptor.IsReadOnly;

		public DynamicPropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor descriptor)
			: base(descriptor, null)
		{
			this.serviceProvider = serviceProvider;
			realPropertyDescriptor = descriptor;
		}

		public override void ResetValue(object component)
		{
			realPropertyDescriptor.ResetValue(component);
		}

		public override bool CanResetValue(object component)
		{
			return realPropertyDescriptor.CanResetValue(component);
		}

		public override bool ShouldSerializeValue(object component)
		{
			if (string.Equals(realPropertyDescriptor.GetType().FullName, "System.ComponentModel.Design.InheritedPropertyDescriptor", StringComparison.Ordinal))
			{
				return true;
			}
			return realPropertyDescriptor.ShouldSerializeValue(component);
		}

		public override object GetValue(object component)
		{
			if (component == null)
			{
				return null;
			}
			return realPropertyDescriptor.GetValue(component);
		}

		public override void SetValue(object component, object value)
		{
			if (component is IComponent)
			{
				realPropertyDescriptor.SetValue(component, value);
			}
			else
			{
				PropertyDescriptorUtils.SetPropertyValue(ServiceProvider, realPropertyDescriptor, component, value);
			}
		}
	}
	internal class ParameterInfoBasedPropertyDescriptor : PropertyDescriptor
	{
		private Type componentType;

		private string desc = string.Empty;

		private bool avoidDuplication;

		private object parameter;

		private Type parameterType;

		private const string parameterPrefix = "(Parameter) ";

		internal Type ParameterType
		{
			get
			{
				Type elementType = parameterType;
				if (elementType.IsByRef)
				{
					elementType = elementType.GetElementType();
				}
				return elementType;
			}
		}

		public override string Description => desc;

		public override string Category => SR.GetString("Parameters");

		public override string DisplayName => Name;

		public override bool IsReadOnly => false;

		public override Type ComponentType => componentType;

		public override string Name
		{
			get
			{
				if (avoidDuplication)
				{
					return GetParameterPropertyName(componentType, base.Name);
				}
				return base.Name;
			}
		}

		public override Type PropertyType
		{
			get
			{
				Type typeFromHandle = ParameterType;
				if (typeFromHandle == null)
				{
					typeFromHandle = typeof(ActivityBind);
				}
				return typeFromHandle;
			}
		}

		public override TypeConverter Converter => new ActivityBindTypeConverter();

		public override AttributeCollection Attributes
		{
			get
			{
				ArrayList arrayList = new ArrayList();
				arrayList.AddRange(base.Attributes);
				arrayList.AddRange(TypeDescriptor.GetAttributes(PropertyType));
				return new AttributeCollection((Attribute[])arrayList.ToArray(typeof(Attribute)));
			}
		}

		internal ParameterInfoBasedPropertyDescriptor(Type componentType, ParameterInfo paramInfo, bool avoidDuplication, params Attribute[] attributes)
			: base((paramInfo.Position == -1) ? "(ReturnValue)" : paramInfo.Name, attributes)
		{
			if (componentType == null)
			{
				throw new ArgumentNullException("componentType");
			}
			if (paramInfo == null)
			{
				throw new ArgumentNullException("paramInfo");
			}
			if (paramInfo.ParameterType == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_ParameterTypeResolution", paramInfo.Name));
			}
			this.componentType = componentType;
			parameter = paramInfo;
			this.avoidDuplication = avoidDuplication;
			parameterType = paramInfo.ParameterType;
			string empty = string.Empty;
			if (paramInfo.ParameterType != null && (paramInfo.ParameterType.IsByRef || (paramInfo.IsIn && paramInfo.IsOut)))
			{
				empty = SR.GetString("Ref");
			}
			else if (paramInfo.IsOut || paramInfo.Name == null)
			{
				empty = SR.GetString("Out");
			}
			else
			{
				empty = SR.GetString("In");
			}
			desc = SR.GetString("ParameterDescription", paramInfo.ParameterType.FullName);
		}

		internal ParameterInfoBasedPropertyDescriptor(Type componentType, string propertyName, Type propertyType, bool avoidDuplication, params Attribute[] attributes)
			: base(propertyName, attributes)
		{
			if (componentType == null)
			{
				throw new ArgumentNullException("componentType");
			}
			if (propertyType == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_ParameterTypeResolution", propertyName));
			}
			this.componentType = componentType;
			parameterType = propertyType;
			this.avoidDuplication = avoidDuplication;
			desc = SR.GetString("InvokeParameterDescription", propertyType.FullName.ToString());
		}

		public override object GetEditor(Type editorBaseType)
		{
			return TypeDescriptor.GetEditor(PropertyType, editorBaseType);
		}

		internal static MemberInfo FindMatchingMember(string name, Type ownerType, bool ignoreCase)
		{
			MemberInfo result = null;
			MemberInfo[] members = ownerType.GetMembers(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
			foreach (MemberInfo memberInfo in members)
			{
				if (memberInfo.Name.Equals(name, ignoreCase ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture))
				{
					result = memberInfo;
					break;
				}
			}
			return result;
		}

		public override void ResetValue(object component)
		{
			if (PropertyType != null && !PropertyType.IsValueType)
			{
				SetValue(component, null);
			}
		}

		public override bool CanResetValue(object component)
		{
			return false;
		}

		public override bool ShouldSerializeValue(object component)
		{
			return false;
		}

		public override void SetValue(object component, object value)
		{
			if (component == null)
			{
				return;
			}
			IServiceProvider site = MemberDescriptor.GetSite(component);
			ComponentChangeDispatcher componentChangeDispatcher = ((site != null) ? new ComponentChangeDispatcher(site, component, this) : null);
			try
			{
				WorkflowParameterBindingCollection parameterBindings = GetParameterBindings(component);
				if (parameterBindings != null)
				{
					string empty = string.Empty;
					empty = ((!Name.StartsWith("(Parameter) ", StringComparison.Ordinal)) ? Name : Name.Substring("(Parameter) ".Length));
					WorkflowParameterBinding workflowParameterBinding = null;
					if (parameterBindings.Contains(empty))
					{
						workflowParameterBinding = parameterBindings[empty];
					}
					else
					{
						workflowParameterBinding = new WorkflowParameterBinding(empty);
						parameterBindings.Add(workflowParameterBinding);
					}
					if (value is ActivityBind)
					{
						workflowParameterBinding.SetBinding(WorkflowParameterBinding.ValueProperty, value as ActivityBind);
					}
					else
					{
						workflowParameterBinding.SetValue(WorkflowParameterBinding.ValueProperty, value);
					}
					OnValueChanged(component, EventArgs.Empty);
				}
			}
			catch (Exception ex)
			{
				if (ex is TargetInvocationException && ex.InnerException != null)
				{
					throw ex.InnerException;
				}
				throw ex;
			}
			finally
			{
				componentChangeDispatcher?.Dispose();
			}
		}

		public override object GetValue(object component)
		{
			WorkflowParameterBindingCollection parameterBindings = GetParameterBindings(component);
			string text = Name;
			string key = (text.StartsWith("(Parameter) ", StringComparison.Ordinal) ? text.Substring("(Parameter) ".Length) : text);
			if (parameterBindings != null && parameterBindings.Contains(key))
			{
				if (parameterBindings[key].IsBindingSet(WorkflowParameterBinding.ValueProperty))
				{
					return parameterBindings[key].GetBinding(WorkflowParameterBinding.ValueProperty);
				}
				return parameterBindings[key].GetValue(WorkflowParameterBinding.ValueProperty);
			}
			return null;
		}

		private WorkflowParameterBindingCollection GetParameterBindings(object component)
		{
			WorkflowParameterBindingCollection result = null;
			MemberInfo property = component.GetType().GetProperty("ParameterBindings", BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy | BindingFlags.GetProperty | BindingFlags.ExactBinding, null, typeof(WorkflowParameterBindingCollection), new Type[0], new ParameterModifier[0]);
			if (property != null)
			{
				result = component.GetType().InvokeMember("ParameterBindings", BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy | BindingFlags.GetProperty | BindingFlags.ExactBinding, null, component, new object[0], CultureInfo.InvariantCulture) as WorkflowParameterBindingCollection;
			}
			return result;
		}

		public static string GetParameterPropertyName(Type componentType, string paramName)
		{
			string result = paramName;
			if (FindMatchingMember(paramName, componentType, ignoreCase: false) != null)
			{
				result = "(Parameter) " + paramName;
			}
			return result;
		}
	}
	internal interface IPropertyValueProvider
	{
		ICollection GetPropertyValues(ITypeDescriptorContext typeDescriptorContext);
	}
	internal class PropertyValueProviderTypeConverter : TypeConverter
	{
		public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
		{
			IPropertyValueProvider propertyValueProvider = null;
			propertyValueProvider = ((!(context.Instance is object[] array) || array.Length == 0) ? (context.Instance as IPropertyValueProvider) : (array[0] as IPropertyValueProvider));
			ICollection values = new object[0];
			if (propertyValueProvider != null)
			{
				values = propertyValueProvider.GetPropertyValues(context);
			}
			return new StandardValuesCollection(values);
		}

		public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
		{
			return true;
		}

		public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
		{
			return true;
		}
	}
	internal class TypePropertyDescriptor : DynamicPropertyDescriptor
	{
		public override TypeConverter Converter
		{
			get
			{
				TypeConverter typeConverter = base.Converter;
				string fullName = typeConverter.GetType().FullName;
				Type type = Assembly.GetExecutingAssembly().GetType(fullName);
				if (type != null && typeof(TypePropertyTypeConverter).IsAssignableFrom(type))
				{
					return typeConverter;
				}
				return new TypePropertyTypeConverter();
			}
		}

		public TypePropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor actualPropDesc)
			: base(serviceProvider, actualPropDesc)
		{
		}

		public override object GetValue(object component)
		{
			if (component == null)
			{
				throw new ArgumentNullException("component");
			}
			object obj = base.GetValue(component);
			if (obj == null && component is DependencyObject owner)
			{
				object key = DependencyProperty.FromName(base.RealPropertyDescriptor.Name, base.RealPropertyDescriptor.ComponentType);
				obj = Helpers.GetDesignTimeTypeName(owner, key);
				if (string.IsNullOrEmpty(obj as string))
				{
					key = base.RealPropertyDescriptor.ComponentType.FullName + "." + base.RealPropertyDescriptor.Name;
					obj = Helpers.GetDesignTimeTypeName(owner, key);
				}
			}
			return obj;
		}

		public override void SetValue(object component, object value)
		{
			if (component == null)
			{
				throw new ArgumentNullException("component");
			}
			if (value != null)
			{
				Type type = value as Type;
				if (PropertyDescriptorUtils.GetComponent(new TypeDescriptorContext(base.ServiceProvider, base.RealPropertyDescriptor, component)) is ITypeFilterProvider typeFilterProvider)
				{
					typeFilterProvider.CanFilterType(type, throwOnError: true);
				}
			}
			base.SetValue(component, value);
		}
	}
	internal class TypePropertyValueProviderTypeConverter : TypePropertyTypeConverter
	{
		public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
		{
			IPropertyValueProvider propertyValueProvider = null;
			propertyValueProvider = ((!(context.Instance is object[] array) || array.Length == 0) ? (context.Instance as IPropertyValueProvider) : (array[0] as IPropertyValueProvider));
			ICollection values = new object[0];
			if (propertyValueProvider != null && context != null)
			{
				values = propertyValueProvider.GetPropertyValues(context);
			}
			return new StandardValuesCollection(values);
		}

		public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
		{
			return true;
		}

		public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
		{
			return true;
		}
	}
	internal class TypePropertyTypeConverter : TypeConverter
	{
		public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
		{
			if (sourceType == null)
			{
				throw new ArgumentNullException("sourceType");
			}
			if (object.Equals(sourceType, typeof(string)))
			{
				return true;
			}
			return base.CanConvertFrom(context, sourceType);
		}

		public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
		{
			if (destinationType == null)
			{
				throw new ArgumentNullException("destinationType");
			}
			if (object.Equals(destinationType, typeof(Type)))
			{
				return true;
			}
			return base.CanConvertTo(context, destinationType);
		}

		public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object valueToConvert)
		{
			string text = valueToConvert as string;
			if (string.IsNullOrEmpty(text))
			{
				return null;
			}
			if (context != null && context.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider)
			{
				return typeProvider.GetType(text, throwOnError: true);
			}
			return base.ConvertFrom(context, culture, valueToConvert);
		}

		public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
		{
			if (value is Type && object.Equals(destinationType, typeof(string)))
			{
				return ((Type)value).FullName;
			}
			return base.ConvertTo(context, culture, value, destinationType);
		}
	}
}
namespace System.Workflow.ComponentModel.Compiler
{
	[ComImport]
	[Guid("59B2D1D0-5DB0-4F9F-9609-13F0168516D6")]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	internal interface IVsHierarchy
	{
	}
	[ComImport]
	[Guid("6d5140c1-7436-11ce-8034-00aa006009fa")]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	internal interface IOleServiceProvider
	{
		[PreserveSig]
		int QueryService(ref Guid guidService, ref Guid riid, out IntPtr ppvObject);
	}
	[ComImport]
	[Guid("8AA9644E-1F6A-4F4C-83E3-D0BAD4B2BB21")]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	internal interface IWorkflowBuildHostProperties
	{
		bool SkipWorkflowCompilation { get; set; }
	}
	internal class ServiceProvider : IServiceProvider
	{
		private static readonly Guid IID_IUnknown = new Guid("{00000000-0000-0000-C000-000000000046}");

		private IOleServiceProvider serviceProvider;

		public ServiceProvider(IOleServiceProvider sp)
		{
			serviceProvider = sp;
		}

		public object GetService(Type serviceType)
		{
			if (serviceType == null)
			{
				throw new ArgumentNullException("serviceType");
			}
			IntPtr ppvObject = IntPtr.Zero;
			Guid guidService = serviceType.GUID;
			Guid riid = IID_IUnknown;
			int num = serviceProvider.QueryService(ref guidService, ref riid, out ppvObject);
			object result = null;
			if (num >= 0)
			{
				try
				{
					result = Marshal.GetObjectForIUnknown(ppvObject);
				}
				finally
				{
					Marshal.Release(ppvObject);
				}
			}
			return result;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class CompileWorkflowTask : Task, ITask
	{
		private class CompilerOptionsBuilder
		{
			public void AddCustomOption(StringBuilder options, ITaskItem option)
			{
				GetOptionInfo(option, out var optionName, out var optionValue, out var optionDelimiter);
				if (!string.IsNullOrWhiteSpace(optionName))
				{
					if (string.IsNullOrEmpty(optionValue))
					{
						options.AppendFormat(" /{0}", optionName);
					}
					else if (string.IsNullOrEmpty(optionDelimiter))
					{
						options.AppendFormat(" /{0}{1}", optionName, optionValue);
					}
					else
					{
						options.AppendFormat(" /{0}{1}{2}", optionName, optionDelimiter, optionValue);
					}
				}
			}

			protected virtual void GetOptionInfo(ITaskItem option, out string optionName, out string optionValue, out string optionDelimiter)
			{
				optionName = option.ItemSpec;
				optionValue = option.GetMetadata("value");
				optionDelimiter = option.GetMetadata("delimiter");
			}
		}

		private abstract class VBCompilerOptionsBuilder : CompilerOptionsBuilder
		{
			private const string SuppressWarningOption = "nowarn";

			protected sealed override void GetOptionInfo(ITaskItem option, out string optionName, out string optionValue, out string optionDelimiter)
			{
				base.GetOptionInfo(option, out optionName, out optionValue, out optionDelimiter);
				if (string.Compare(optionName, "nowarn", StringComparison.OrdinalIgnoreCase) != 0 || string.IsNullOrWhiteSpace(optionValue))
				{
					return;
				}
				string[] array = optionValue.Split(',');
				StringBuilder stringBuilder = new StringBuilder();
				for (int i = 0; i < array.Length; i++)
				{
					string text = array[i].Trim();
					if (IsValidWarning(text))
					{
						if (stringBuilder.Length == 0)
						{
							stringBuilder.Append(text);
						}
						else
						{
							stringBuilder.AppendFormat(",{0}", text);
						}
					}
				}
				optionValue = stringBuilder.ToString();
				if (string.IsNullOrWhiteSpace(optionValue))
				{
					optionName = string.Empty;
				}
			}

			protected abstract bool IsValidWarning(string warning);
		}

		private class WhidbeyVBCompilerOptionsBuilder : VBCompilerOptionsBuilder
		{
			private static HashSet<string> validWarnings = new HashSet<string>(StringComparer.Ordinal)
			{
				"40000", "40003", "40004", "40005", "40007", "40008", "40009", "40010", "40011", "40012",
				"40014", "40018", "40019", "40020", "40021", "40022", "40023", "40024", "40025", "40026",
				"40027", "40028", "40029", "40030", "40031", "40032", "40033", "40034", "40035", "40038",
				"40039", "40040", "40041", "40042", "40043", "40046", "40047", "40048", "40049", "40050",
				"40051", "40052", "40053", "40054", "40055", "40056", "40057", "41000", "41001", "41002",
				"41003", "41004", "41005", "41006", "41998", "41999", "42000", "42001", "42002", "42003",
				"42004", "42014", "42015", "42016", "42017", "42018", "42019", "42020", "42021", "42022",
				"42024", "42025", "42026", "42028", "42029", "42030", "42031", "42032", "42033", "42034",
				"42035", "42036", "42101", "42102", "42104", "42105", "42106", "42107", "42108", "42109",
				"42200", "42203", "42204", "42205", "42206", "42300", "42301", "42302", "42303", "42304",
				"42305", "42306", "42307", "42308", "42309", "42310", "42311", "42312", "42313", "42314",
				"42315", "42316", "42317", "42318", "42319", "42320", "42321"
			};

			protected override bool IsValidWarning(string warning)
			{
				return validWarnings.Contains(warning);
			}
		}

		private class OrcasVBCompilerOptionsBuilder : VBCompilerOptionsBuilder
		{
			private static HashSet<string> validWarnings = new HashSet<string>(StringComparer.Ordinal)
			{
				"40000", "40003", "40004", "40005", "40007", "40008", "40009", "40010", "40011", "40012",
				"40014", "40018", "40019", "40020", "40021", "40022", "40023", "40024", "40025", "40026",
				"40027", "40028", "40029", "40030", "40031", "40032", "40033", "40034", "40035", "40038",
				"40039", "40040", "40041", "40042", "40043", "40046", "40047", "40048", "40049", "40050",
				"40051", "40052", "40053", "40054", "40055", "40056", "40057", "41000", "41001", "41002",
				"41003", "41004", "41005", "41006", "41007", "41008", "41998", "41999", "42000", "42001",
				"42002", "42004", "42014", "42015", "42016", "42017", "42018", "42019", "42020", "42021",
				"42022", "42024", "42025", "42026", "42028", "42029", "42030", "42031", "42032", "42033",
				"42034", "42035", "42036", "42099", "42101", "42102", "42104", "42105", "42106", "42107",
				"42108", "42109", "42110", "42111", "42200", "42203", "42204", "42205", "42206", "42207",
				"42300", "42301", "42302", "42303", "42304", "42305", "42306", "42307", "42308", "42309",
				"42310", "42311", "42312", "42313", "42314", "42315", "42316", "42317", "42318", "42319",
				"42320", "42321", "42322", "42324", "42326", "42327", "42328"
			};

			protected override bool IsValidWarning(string warning)
			{
				return validWarnings.Contains(warning);
			}
		}

		private string projectExt;

		private string projectDirectory;

		private object hostObject;

		private string rootNamespace;

		private string imports;

		private string assemblyName;

		private ITaskItem[] xomlFiles;

		private ITaskItem[] referenceFiles;

		private ITaskItem[] sourceCodeFiles;

		private ITaskItem[] resourceFiles;

		private ITaskItem[] outputFiles;

		private ITaskItem[] compilationOptions;

		private SupportedLanguages projectType;

		private StringCollection temporaryFiles = new StringCollection();

		private bool delaySign;

		private string targetFramework;

		private string keyContainer;

		private string keyFile;

		public string ProjectDirectory
		{
			get
			{
				return projectDirectory;
			}
			set
			{
				projectDirectory = value;
			}
		}

		public string ProjectExtension
		{
			get
			{
				return projectExt;
			}
			set
			{
				projectExt = value;
				if (string.Compare(projectExt, ".csproj", StringComparison.OrdinalIgnoreCase) == 0)
				{
					ProjectType = SupportedLanguages.CSharp;
				}
				else if (string.Compare(projectExt, ".vbproj", StringComparison.OrdinalIgnoreCase) == 0)
				{
					ProjectType = SupportedLanguages.VB;
				}
			}
		}

		public string RootNamespace
		{
			get
			{
				return rootNamespace;
			}
			set
			{
				rootNamespace = value;
			}
		}

		public string AssemblyName
		{
			get
			{
				return assemblyName;
			}
			set
			{
				assemblyName = value;
			}
		}

		public string Imports
		{
			get
			{
				return imports;
			}
			set
			{
				imports = value;
			}
		}

		public ITaskItem[] WorkflowMarkupFiles
		{
			get
			{
				return xomlFiles;
			}
			set
			{
				if (value != null)
				{
					ArrayList arrayList = new ArrayList();
					foreach (ITaskItem taskItem in value)
					{
						if (taskItem != null)
						{
							string itemSpec = taskItem.ItemSpec;
							if (itemSpec != null && itemSpec.EndsWith(".xoml", StringComparison.OrdinalIgnoreCase))
							{
								arrayList.Add(taskItem);
							}
						}
					}
					if (arrayList.Count > 0)
					{
						xomlFiles = arrayList.ToArray(typeof(ITaskItem)) as ITaskItem[];
					}
				}
				else
				{
					xomlFiles = value;
				}
			}
		}

		public ITaskItem[] ReferenceFiles
		{
			get
			{
				return referenceFiles;
			}
			set
			{
				referenceFiles = value;
			}
		}

		public ITaskItem[] ResourceFiles
		{
			get
			{
				return resourceFiles;
			}
			set
			{
				resourceFiles = value;
			}
		}

		public ITaskItem[] SourceCodeFiles
		{
			get
			{
				return sourceCodeFiles;
			}
			set
			{
				sourceCodeFiles = value;
			}
		}

		public ITaskItem[] CompilationOptions
		{
			get
			{
				return compilationOptions;
			}
			set
			{
				compilationOptions = value;
			}
		}

		public bool DelaySign
		{
			get
			{
				return delaySign;
			}
			set
			{
				delaySign = value;
			}
		}

		public string TargetFramework
		{
			get
			{
				return targetFramework;
			}
			set
			{
				targetFramework = value;
			}
		}

		public string KeyContainer
		{
			get
			{
				return keyContainer;
			}
			set
			{
				keyContainer = value;
			}
		}

		public string KeyFile
		{
			get
			{
				return keyFile;
			}
			set
			{
				keyFile = value;
			}
		}

		public new object HostObject => hostObject;

		ITaskHost ITask.HostObject
		{
			get
			{
				return (ITaskHost)hostObject;
			}
			set
			{
				hostObject = value;
			}
		}

		public bool BuildingProject { get; set; }

		[Output]
		public ITaskItem[] OutputFiles
		{
			get
			{
				if (outputFiles == null)
				{
					if (ProjectType == SupportedLanguages.VB)
					{
						outputFiles = new ITaskItem[0];
					}
					else
					{
						ArrayList arrayList = new ArrayList();
						if (WorkflowMarkupFiles != null)
						{
							arrayList.AddRange(WorkflowMarkupFiles);
						}
						outputFiles = arrayList.ToArray(typeof(ITaskItem)) as ITaskItem[];
					}
				}
				return outputFiles;
			}
		}

		[Output]
		public string KeepTemporaryFiles => ShouldKeepTempFiles().ToString();

		[Output]
		public string[] TemporaryFiles
		{
			get
			{
				string[] array = new string[temporaryFiles.Count];
				temporaryFiles.CopyTo(array, 0);
				return array;
			}
		}

		private SupportedLanguages ProjectType
		{
			get
			{
				return projectType;
			}
			set
			{
				projectType = value;
			}
		}

		public CompileWorkflowTask()
			: base(new ResourceManager("System.Workflow.ComponentModel.BuildTasksStrings", Assembly.GetExecutingAssembly()))
		{
			BuildingProject = true;
		}

		public override bool Execute()
		{
			if (!ValidateParameters())
			{
				return false;
			}
			if (WorkflowMarkupFiles == null)
			{
				base.Log.LogMessageFromResources(MessageImportance.Normal, "NoXomlFiles");
			}
			if (ReferenceFiles == null || ReferenceFiles.Length == 0)
			{
				base.Log.LogMessageFromResources(MessageImportance.Normal, "NoReferenceFiles");
			}
			if (SourceCodeFiles == null || SourceCodeFiles.Length == 0)
			{
				base.Log.LogMessageFromResources(MessageImportance.Normal, "NoSourceCodeFiles");
			}
			IWorkflowBuildHostProperties workflowBuildHostProperties = HostObject as IWorkflowBuildHostProperties;
			if (!BuildingProject || (workflowBuildHostProperties != null && workflowBuildHostProperties.SkipWorkflowCompilation))
			{
				return true;
			}
			int num = 0;
			int num2 = 0;
			WorkflowCompilerParameters workflowCompilerParameters = new WorkflowCompilerParameters();
			IWorkflowCompilerErrorLogger workflowCompilerErrorLogger = null;
			IServiceProvider serviceProvider = null;
			if (HostObject is IOleServiceProvider)
			{
				serviceProvider = new ServiceProvider(HostObject as IOleServiceProvider);
				workflowCompilerErrorLogger = serviceProvider.GetService(typeof(IWorkflowCompilerErrorLogger)) as IWorkflowCompilerErrorLogger;
			}
			string[] files = GetFiles(SourceCodeFiles, ProjectDirectory);
			ITaskItem[] array = ReferenceFiles;
			foreach (ITaskItem taskItem in array)
			{
				workflowCompilerParameters.ReferencedAssemblies.Add(taskItem.ItemSpec);
			}
			if (string.IsNullOrEmpty(targetFramework))
			{
				string text = null;
				RegistryKey registryKey = null;
				try
				{
					registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\NET Framework Setup\\NDP");
					if (registryKey != null)
					{
						string[] subKeyNames = registryKey.GetSubKeyNames();
						if (subKeyNames != null)
						{
							char[] separator = new char[1] { '.' };
							foreach (string text2 in subKeyNames)
							{
								if (text2.Length <= 0)
								{
									continue;
								}
								string text3 = text2.TrimStart('v', 'V');
								if (!string.IsNullOrEmpty(text3))
								{
									string[] array2 = text3.Split(separator);
									string text4 = null;
									text4 = ((array2.Length <= 1) ? string.Format(CultureInfo.InvariantCulture, "v{0}.0", new object[1] { array2[0] }) : string.Format(CultureInfo.InvariantCulture, "v{0}.{1}", new object[2]
									{
										array2[0],
										array2[1]
									}));
									if (string.Compare(text4, "v3.5", StringComparison.OrdinalIgnoreCase) == 0)
									{
										text = new FrameworkName(".NETFramework", new Version(3, 5)).ToString();
										break;
									}
								}
							}
						}
					}
				}
				catch (SecurityException)
				{
				}
				catch (UnauthorizedAccessException)
				{
				}
				catch (IOException)
				{
				}
				finally
				{
					registryKey?.Close();
				}
				if (text == null)
				{
					text = new FrameworkName(".NETFramework", new Version(2, 0)).ToString();
				}
				workflowCompilerParameters.MultiTargetingInformation = new MultiTargetingInfo(text);
			}
			else
			{
				workflowCompilerParameters.MultiTargetingInformation = new MultiTargetingInfo(targetFramework);
			}
			CompilerOptionsBuilder optionsBuilder;
			if (ProjectType == SupportedLanguages.VB)
			{
				string compilerVersion = workflowCompilerParameters.CompilerVersion;
				optionsBuilder = ((compilerVersion == "v2.0") ? new WhidbeyVBCompilerOptionsBuilder() : ((!(compilerVersion == "v3.5")) ? new CompilerOptionsBuilder() : new OrcasVBCompilerOptionsBuilder()));
			}
			else
			{
				optionsBuilder = new CompilerOptionsBuilder();
			}
			workflowCompilerParameters.CompilerOptions = PrepareCompilerOptions(optionsBuilder);
			workflowCompilerParameters.GenerateCodeCompileUnitOnly = true;
			workflowCompilerParameters.LanguageToUse = ProjectType.ToString();
			workflowCompilerParameters.TempFiles.KeepFiles = ShouldKeepTempFiles();
			workflowCompilerParameters.OutputAssembly = AssemblyName;
			if (!string.IsNullOrEmpty(assemblyName))
			{
				string text5 = (workflowCompilerParameters.GenerateExecutable ? ".exe" : ".dll");
				workflowCompilerParameters.OutputAssembly += text5;
			}
			CodeDomProvider codeDomProvider = null;
			codeDomProvider = ((ProjectType != 0) ? CompilerHelpers.CreateCodeProviderInstance(typeof(CSharpCodeProvider), workflowCompilerParameters.CompilerVersion) : CompilerHelpers.CreateCodeProviderInstance(typeof(VBCodeProvider), workflowCompilerParameters.CompilerVersion));
			using (TempFileCollection tempFileCollection = new TempFileCollection(Environment.GetEnvironmentVariable("temp", EnvironmentVariableTarget.User), keepFiles: true))
			{
				ITaskItem[] array3 = new TaskItem[1];
				outputFiles = array3;
				string[] array4;
				if (WorkflowMarkupFiles != null)
				{
					array4 = new string[WorkflowMarkupFiles.GetLength(0) + files.Length];
					int k;
					for (k = 0; k < WorkflowMarkupFiles.GetLength(0); k++)
					{
						array4[k] = Path.Combine(ProjectDirectory, WorkflowMarkupFiles[k].ItemSpec);
					}
					files.CopyTo(array4, k);
				}
				else
				{
					array4 = new string[files.Length];
					files.CopyTo(array4, 0);
				}
				WorkflowCompilerResults workflowCompilerResults = new CompilerWrapper().Compile(workflowCompilerParameters, array4);
				foreach (WorkflowCompilerError error in workflowCompilerResults.Errors)
				{
					if (error.IsWarning)
					{
						num2++;
						if (workflowCompilerErrorLogger != null)
						{
							error.FileName = Path.Combine(ProjectDirectory, error.FileName);
							workflowCompilerErrorLogger.LogError(error);
							workflowCompilerErrorLogger.LogMessage(error.ToString() + "\n");
						}
						else
						{
							base.Log.LogWarning(error.ErrorText, error.ErrorNumber, error.FileName, error.Line, error.Column);
						}
					}
					else
					{
						num++;
						if (workflowCompilerErrorLogger != null)
						{
							error.FileName = Path.Combine(ProjectDirectory, error.FileName);
							workflowCompilerErrorLogger.LogError(error);
							workflowCompilerErrorLogger.LogMessage(error.ToString() + "\n");
						}
						else
						{
							base.Log.LogError(error.ErrorText, error.ErrorNumber, error.FileName, error.Line, error.Column);
						}
					}
				}
				if (!workflowCompilerResults.Errors.HasErrors)
				{
					CodeCompileUnit compiledUnit = workflowCompilerResults.CompiledUnit;
					if (compiledUnit != null)
					{
						WorkflowMarkupSerializationHelpers.FixStandardNamespacesAndRootNamespace(compiledUnit.Namespaces, RootNamespace, CompilerHelpers.GetSupportedLanguage(ProjectType.ToString()));
						string text6 = tempFileCollection.AddExtension(codeDomProvider.FileExtension);
						using (StreamWriter writer = new StreamWriter(new FileStream(text6, FileMode.Create, FileAccess.Write), Encoding.UTF8))
						{
							CodeGeneratorOptions codeGeneratorOptions = new CodeGeneratorOptions();
							codeGeneratorOptions.BracingStyle = "C";
							codeDomProvider.GenerateCodeFromCompileUnit(compiledUnit, writer, codeGeneratorOptions);
						}
						outputFiles[0] = new TaskItem(text6);
						temporaryFiles.Add(text6);
						base.Log.LogMessageFromResources(MessageImportance.Normal, "TempCodeFile", text6);
					}
				}
			}
			if (num > 0 || num2 > 0)
			{
				workflowCompilerErrorLogger?.LogMessage(string.Format(CultureInfo.CurrentCulture, "\nCompile complete -- {0} errors, {1} warnings \n", new object[2] { num, num2 }));
			}
			base.Log.LogMessageFromResources(MessageImportance.Normal, "XomlValidationCompleted", num, num2);
			return num == 0;
		}

		private bool ValidateParameters()
		{
			if (ProjectDirectory == null || ProjectDirectory.Trim().Length == 0)
			{
				base.Log.LogErrorFromResources("NoProjectType");
				return false;
			}
			if (ProjectExtension == null || ProjectExtension.Trim().Length == 0)
			{
				base.Log.LogErrorFromResources("NoProjectType");
				return false;
			}
			if (string.Compare(ProjectExtension, ".csproj", StringComparison.OrdinalIgnoreCase) != 0 && string.Compare(ProjectExtension, ".vbproj", StringComparison.OrdinalIgnoreCase) != 0)
			{
				base.Log.LogErrorFromResources("UnsupportedProjectType");
				return false;
			}
			return true;
		}

		private static string[] GetFiles(ITaskItem[] taskItems, string projDir)
		{
			if (taskItems == null)
			{
				return new string[0];
			}
			string[] array = new string[taskItems.Length];
			for (int i = 0; i < taskItems.Length; i++)
			{
				if (projDir != null)
				{
					array[i] = Path.Combine(projDir, taskItems[i].ItemSpec);
				}
				else
				{
					array[i] = taskItems[i].ItemSpec;
				}
			}
			return array;
		}

		private static bool HasManifestResourceName(ITaskItem resourceFile, out string manifestResourceName)
		{
			IEnumerator enumerator = resourceFile.MetadataNames.GetEnumerator();
			manifestResourceName = null;
			bool flag = false;
			while (!flag && enumerator.MoveNext())
			{
				string text = (string)enumerator.Current;
				if (text == "ManifestResourceName")
				{
					flag = true;
					manifestResourceName = resourceFile.GetMetadata(text);
				}
			}
			return flag;
		}

		private string PrepareCompilerOptions(CompilerOptionsBuilder optionsBuilder)
		{
			StringBuilder stringBuilder = new StringBuilder();
			if (DelaySign)
			{
				stringBuilder.Append(" /delaysign+");
			}
			if (KeyContainer != null && KeyContainer.Trim().Length > 0)
			{
				stringBuilder.AppendFormat(" /keycontainer:{0}", KeyContainer);
			}
			if (KeyFile != null && KeyFile.Trim().Length > 0)
			{
				stringBuilder.AppendFormat(" /keyfile:\"{0}\"", Path.Combine(ProjectDirectory, KeyFile));
			}
			if (compilationOptions != null && compilationOptions.Length != 0)
			{
				ITaskItem[] array = compilationOptions;
				foreach (ITaskItem option in array)
				{
					optionsBuilder.AddCustomOption(stringBuilder, option);
				}
			}
			if (resourceFiles != null && resourceFiles.Length != 0)
			{
				ITaskItem[] array2 = resourceFiles;
				foreach (ITaskItem taskItem in array2)
				{
					if (HasManifestResourceName(taskItem, out var manifestResourceName))
					{
						stringBuilder.AppendFormat(" /resource:\"{0}\",{1}", Path.Combine(ProjectDirectory, taskItem.ItemSpec), manifestResourceName);
					}
					else
					{
						stringBuilder.AppendFormat(" /resource:\"{0}\"", Path.Combine(ProjectDirectory, taskItem.ItemSpec));
					}
				}
			}
			if (ProjectType == SupportedLanguages.VB)
			{
				if (!string.IsNullOrEmpty(RootNamespace))
				{
					stringBuilder.AppendFormat(" /rootnamespace:{0}", RootNamespace);
				}
				stringBuilder.AppendFormat(" /imports:{0}", Imports.Replace(';', ','));
			}
			if (stringBuilder.Length > 0 && char.IsWhiteSpace(stringBuilder[0]))
			{
				stringBuilder.Remove(0, 0);
			}
			return stringBuilder.ToString();
		}

		private bool ShouldKeepTempFiles()
		{
			bool result = false;
			if (ProjectType == SupportedLanguages.VB)
			{
				result = true;
			}
			else
			{
				try
				{
					RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(Helpers.ProductRootRegKey);
					if (registryKey != null)
					{
						object value = registryKey.GetValue("KeepTempFiles");
						result = Convert.ToInt32(value, CultureInfo.InvariantCulture) != 0;
					}
				}
				catch
				{
				}
			}
			return result;
		}
	}
	internal sealed class CreateWorkflowManifestResourceNameForCSharp : CreateCSharpManifestResourceName
	{
		private bool lastAskedFileWasXoml;

		[Output]
		public new ITaskItem[] ResourceFilesWithManifestResourceNames
		{
			get
			{
				for (int i = 0; i < base.ResourceFilesWithManifestResourceNames.Length; i++)
				{
					ITaskItem taskItem = base.ResourceFilesWithManifestResourceNames[i];
					taskItem.SetMetadata("LogicalName", taskItem.GetMetadata("ManifestResourceName"));
				}
				return base.ResourceFilesWithManifestResourceNames;
			}
			set
			{
				base.ResourceFilesWithManifestResourceNames = value;
			}
		}

		protected override string CreateManifestName(string fileName, string linkFileName, string rootNamespace, string dependentUponFileName, Stream binaryStream)
		{
			string empty = string.Empty;
			empty = (lastAskedFileWasXoml ? TasksHelper.GetXomlManifestName(fileName, linkFileName, rootNamespace, binaryStream) : base.CreateManifestName(fileName, linkFileName, rootNamespace, dependentUponFileName, binaryStream));
			string extension = Path.GetExtension(fileName);
			if (string.Compare(extension, ".rules", StringComparison.OrdinalIgnoreCase) == 0 || string.Compare(extension, ".layout", StringComparison.OrdinalIgnoreCase) == 0)
			{
				empty += extension;
			}
			lastAskedFileWasXoml = false;
			return empty;
		}

		protected override bool IsSourceFile(string fileName)
		{
			string extension = Path.GetExtension(fileName);
			if (string.Compare(extension, ".xoml", StringComparison.OrdinalIgnoreCase) == 0)
			{
				lastAskedFileWasXoml = true;
				return true;
			}
			return base.IsSourceFile(fileName);
		}
	}
	internal sealed class CreateWorkflowManifestResourceNameForVB : CreateVisualBasicManifestResourceName
	{
		private bool lastAskedFileWasXoml;

		protected override string CreateManifestName(string fileName, string linkFileName, string rootNamespace, string dependentUponFileName, Stream binaryStream)
		{
			string empty = string.Empty;
			empty = (lastAskedFileWasXoml ? TasksHelper.GetXomlManifestName(fileName, linkFileName, rootNamespace, binaryStream) : base.CreateManifestName(fileName, linkFileName, rootNamespace, dependentUponFileName, binaryStream));
			string extension = Path.GetExtension(fileName);
			if (string.Compare(extension, ".rules", StringComparison.OrdinalIgnoreCase) == 0 || string.Compare(extension, ".layout", StringComparison.OrdinalIgnoreCase) == 0)
			{
				empty += extension;
			}
			lastAskedFileWasXoml = false;
			return empty;
		}

		protected override bool IsSourceFile(string fileName)
		{
			string extension = Path.GetExtension(fileName);
			if (string.Compare(extension, ".xoml", StringComparison.OrdinalIgnoreCase) == 0)
			{
				lastAskedFileWasXoml = true;
				return true;
			}
			return base.IsSourceFile(fileName);
		}
	}
	internal static class TasksHelper
	{
		internal static string GetXomlManifestName(string fileName, string linkFileName, string rootNamespace, Stream binaryStream)
		{
			string text = string.Empty;
			string text2 = linkFileName;
			if (text2 == null || text2.Length == 0)
			{
				text2 = fileName;
			}
			Culture.ItemCultureInfo itemCultureInfo = Culture.GetItemCultureInfo(text2);
			if (binaryStream != null)
			{
				string text3 = null;
				try
				{
					XmlTextReader xmlTextReader = new XmlTextReader(binaryStream)
					{
						DtdProcessing = DtdProcessing.Prohibit
					};
					if (xmlTextReader.MoveToContent() == XmlNodeType.Element && xmlTextReader.MoveToAttribute("Class", "http://schemas.microsoft.com/winfx/2006/xaml"))
					{
						text3 = xmlTextReader.Value;
					}
				}
				catch
				{
				}
				if (text3 != null && text3.Length > 0)
				{
					text = text3;
					if (itemCultureInfo.culture != null && itemCultureInfo.culture.Length > 0)
					{
						text = text + "." + itemCultureInfo.culture;
					}
				}
			}
			if (text.Length == 0)
			{
				if (!string.IsNullOrEmpty(rootNamespace))
				{
					text = rootNamespace + ".";
				}
				string path = CreateManifestResourceName.MakeValidEverettIdentifier(Path.GetDirectoryName(itemCultureInfo.cultureNeutralFilename));
				if (string.Compare(Path.GetExtension(itemCultureInfo.cultureNeutralFilename), ".resx", StringComparison.OrdinalIgnoreCase) == 0)
				{
					text += Path.Combine(path, Path.GetFileNameWithoutExtension(itemCultureInfo.cultureNeutralFilename));
					text = text.Replace(Path.DirectorySeparatorChar, '.');
					text = text.Replace(Path.AltDirectorySeparatorChar, '.');
					if (itemCultureInfo.culture != null && itemCultureInfo.culture.Length > 0)
					{
						text = text + "." + itemCultureInfo.culture;
					}
				}
				else
				{
					text += Path.Combine(path, Path.GetFileName(itemCultureInfo.cultureNeutralFilename));
					text = text.Replace(Path.DirectorySeparatorChar, '.');
					text = text.Replace(Path.AltDirectorySeparatorChar, '.');
					if (itemCultureInfo.culture != null && itemCultureInfo.culture.Length > 0)
					{
						text = itemCultureInfo.culture + Path.DirectorySeparatorChar + text;
					}
				}
			}
			return text;
		}
	}
	internal static class Culture
	{
		internal struct ItemCultureInfo
		{
			internal string culture;

			internal string cultureNeutralFilename;
		}

		private static string[] cultureInfoStrings;

		internal static ItemCultureInfo GetItemCultureInfo(string name)
		{
			ItemCultureInfo result = default(ItemCultureInfo);
			result.culture = null;
			string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(name);
			string text = Path.GetExtension(fileNameWithoutExtension);
			bool flag = false;
			if (text != null && text.Length > 1)
			{
				text = text.Substring(1);
				flag = IsValidCultureString(text);
			}
			if (flag)
			{
				if (result.culture == null || result.culture.Length == 0)
				{
					result.culture = text;
				}
				string extension = Path.GetExtension(name);
				string fileNameWithoutExtension2 = Path.GetFileNameWithoutExtension(fileNameWithoutExtension);
				string directoryName = Path.GetDirectoryName(name);
				string path = fileNameWithoutExtension2 + extension;
				result.cultureNeutralFilename = Path.Combine(directoryName, path);
			}
			else
			{
				result.cultureNeutralFilename = name;
			}
			return result;
		}

		private static bool IsValidCultureString(string cultureString)
		{
			if (cultureInfoStrings == null)
			{
				CultureInfo[] cultures = CultureInfo.GetCultures(CultureTypes.AllCultures);
				cultureInfoStrings = new string[cultures.Length];
				for (int i = 0; i < cultures.Length; i++)
				{
					cultureInfoStrings[i] = cultures[i].ToString().ToLowerInvariant();
				}
				Array.Sort(cultureInfoStrings);
			}
			bool result = true;
			if (Array.BinarySearch(cultureInfoStrings, cultureString.ToLowerInvariant()) < 0)
			{
				result = false;
			}
			return result;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class CompileWorkflowCleanupTask : Task, ITask
	{
		private ITaskItem[] temporaryFiles;

		public ITaskItem[] TemporaryFiles
		{
			get
			{
				return temporaryFiles;
			}
			set
			{
				temporaryFiles = value;
			}
		}

		public CompileWorkflowCleanupTask()
			: base(new ResourceManager("System.Workflow.ComponentModel.BuildTasksStrings", Assembly.GetExecutingAssembly()))
		{
		}

		public override bool Execute()
		{
			if (temporaryFiles != null)
			{
				ITaskItem[] array = temporaryFiles;
				foreach (ITaskItem taskItem in array)
				{
					string itemSpec = taskItem.ItemSpec;
					if (File.Exists(itemSpec))
					{
						FileStream fileStream = File.Open(itemSpec, FileMode.Truncate);
						fileStream.Close();
					}
				}
			}
			return true;
		}
	}
	internal sealed class ReferencedAssemblyResolver
	{
		private StringCollection referencedAssemblies = new StringCollection();

		private Assembly localAssembly;

		private bool resolving;

		public ReferencedAssemblyResolver(StringCollection referencedAssemblies, Assembly localAssembly)
		{
			this.referencedAssemblies = referencedAssemblies;
			this.localAssembly = localAssembly;
		}

		public Assembly ResolveEventHandler(object sender, ResolveEventArgs args)
		{
			return ResolveAssembly(args.Name);
		}

		internal void SetLocalAssembly(Assembly localAsm)
		{
			localAssembly = localAsm;
		}

		private Assembly ResolveAssembly(string name)
		{
			if (resolving)
			{
				return null;
			}
			if (localAssembly != null && name == localAssembly.FullName)
			{
				return localAssembly;
			}
			try
			{
				resolving = true;
				AssemblyName thatName = new AssemblyName(name);
				StringEnumerator enumerator = referencedAssemblies.GetEnumerator();
				try
				{
					while (enumerator.MoveNext())
					{
						string current = enumerator.Current;
						try
						{
							AssemblyName assemblyName = AssemblyName.GetAssemblyName(current);
							if (assemblyName != null && ParseHelpers.AssemblyNameEquals(assemblyName, thatName))
							{
								Assembly assembly = null;
								try
								{
									return Assembly.Load(assemblyName);
								}
								catch
								{
									return Assembly.LoadFrom(current);
								}
							}
						}
						catch
						{
						}
					}
				}
				finally
				{
					if (enumerator is IDisposable disposable)
					{
						disposable.Dispose();
					}
				}
			}
			finally
			{
				resolving = false;
			}
			return null;
		}
	}
	internal sealed class WorkflowCompilerConfigurationSectionGroup : ConfigurationSectionGroup
	{
	}
	internal sealed class AuthorizedTypesSectionHandler : IConfigurationSectionHandler
	{
		private const string TargetFxVersionAttribute = "version";

		object IConfigurationSectionHandler.Create(object parent, object configContext, XmlNode section)
		{
			Dictionary<string, IList<AuthorizedType>> dictionary = new Dictionary<string, IList<AuthorizedType>>();
			XmlAttributeOverrides xmlAttributeOverrides = new XmlAttributeOverrides();
			XmlAttributes xmlAttributes = new XmlAttributes();
			xmlAttributes.XmlRoot = new XmlRootAttribute("authorizedType");
			xmlAttributeOverrides.Add(typeof(AuthorizedType), xmlAttributes);
			XmlSerializer xmlSerializer = new XmlSerializer(typeof(AuthorizedType), xmlAttributeOverrides);
			foreach (XmlNode childNode in section.ChildNodes)
			{
				if (!(childNode.Attributes.GetNamedItem("version") is XmlAttribute { Value: var value }) || string.IsNullOrEmpty(value))
				{
					continue;
				}
				if (!dictionary.TryGetValue(value, out var value2))
				{
					value2 = new List<AuthorizedType>();
					dictionary.Add(value, value2);
				}
				foreach (XmlNode childNode2 in childNode.ChildNodes)
				{
					if (xmlSerializer.Deserialize(new XmlNodeReader(childNode2)) is AuthorizedType item)
					{
						value2.Add(item);
					}
				}
			}
			return dictionary;
		}
	}
	[XmlType("authorizedType")]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class AuthorizedType
	{
		private string assemblyName;

		private string namespaceName;

		private string typeName;

		private bool isAuthorized;

		private Regex regex;

		[XmlAttribute]
		public string Assembly
		{
			get
			{
				return assemblyName;
			}
			set
			{
				assemblyName = value;
			}
		}

		[XmlAttribute]
		public string Namespace
		{
			get
			{
				return namespaceName;
			}
			set
			{
				namespaceName = value;
			}
		}

		[XmlAttribute]
		public string TypeName
		{
			get
			{
				return typeName;
			}
			set
			{
				typeName = value;
			}
		}

		[XmlAttribute]
		public string Authorized
		{
			get
			{
				return isAuthorized.ToString();
			}
			set
			{
				isAuthorized = bool.Parse(value);
			}
		}

		[XmlIgnore]
		public Regex RegularExpression
		{
			get
			{
				if (regex == null)
				{
					regex = new Regex(MakeRegex(string.Format(CultureInfo.InvariantCulture, "{0}.{1}, {2}", new object[3] { namespaceName, typeName, assemblyName })), RegexOptions.Compiled);
					return regex;
				}
				return regex;
			}
		}

		private static string MakeRegex(string inputString)
		{
			string text = inputString.Replace("\\", "\\\\");
			text = text.Replace("[", "\\[");
			text = text.Replace("^", "\\^");
			text = text.Replace("$", "\\$");
			text = text.Replace("|", "\\|");
			text = text.Replace("+", "\\+");
			text = text.Replace("(", "\\(");
			text = text.Replace(")", "\\)");
			text = text.Replace(".", "\\x2E");
			text = text.Replace("*", "[\\w\\x60\\x2E]{0,}");
			text = text.Replace("?", "\\w{1,1}");
			return text.Replace(" ", "\\s{0,}");
		}
	}
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowMarkupSourceAttribute : Attribute
	{
		private string fileName;

		private string md5Digest;

		public string FileName => fileName;

		public string MD5Digest => md5Digest;

		public WorkflowMarkupSourceAttribute(string fileName, string md5Digest)
		{
			this.fileName = fileName;
			this.md5Digest = md5Digest;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface IWorkflowCompilerOptionsService
	{
		string RootNamespace { get; }

		string Language { get; }

		bool CheckTypes { get; }
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class WorkflowCompilerOptionsService : IWorkflowCompilerOptionsService
	{
		internal const string DefaultLanguage = "CSharp";

		public virtual string RootNamespace => string.Empty;

		public virtual string Language => "CSharp";

		public virtual bool CheckTypes => false;

		public virtual string TargetFrameworkMoniker => string.Empty;
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowCompilationContext
	{
		private abstract class ContextScope : IDisposable, IServiceProvider
		{
			private IServiceProvider serviceProvider;

			private WorkflowCompilationContext currentContext;

			private bool disposed;

			public abstract string RootNamespace { get; }

			public abstract string Language { get; }

			public abstract bool CheckTypes { get; }

			public abstract FrameworkName TargetFramework { get; }

			protected ContextScope(IServiceProvider serviceProvider)
			{
				this.serviceProvider = serviceProvider;
				currentContext = Current;
				Current = new WorkflowCompilationContext(this);
			}

			~ContextScope()
			{
				DisposeImpl();
			}

			public void Dispose()
			{
				DisposeImpl();
				GC.SuppressFinalize(this);
			}

			public object GetService(Type serviceType)
			{
				return serviceProvider.GetService(serviceType);
			}

			private void DisposeImpl()
			{
				if (!disposed)
				{
					Current = currentContext;
					disposed = true;
				}
			}
		}

		private class InterfaceContextScope : ContextScope
		{
			private IWorkflowCompilerOptionsService service;

			public override string RootNamespace => service.RootNamespace;

			public override string Language => service.Language;

			public override bool CheckTypes => service.CheckTypes;

			public override FrameworkName TargetFramework => null;

			public InterfaceContextScope(IServiceProvider serviceProvider, IWorkflowCompilerOptionsService service)
				: base(serviceProvider)
			{
				this.service = service;
			}
		}

		private class StandardContextScope : ContextScope
		{
			private WorkflowCompilerOptionsService service;

			private FrameworkName fxName;

			public override string RootNamespace => service.RootNamespace;

			public override string Language => service.Language;

			public override bool CheckTypes => service.CheckTypes;

			public override FrameworkName TargetFramework
			{
				get
				{
					if (fxName == null)
					{
						string targetFrameworkMoniker = service.TargetFrameworkMoniker;
						if (!string.IsNullOrEmpty(targetFrameworkMoniker))
						{
							fxName = new FrameworkName(targetFrameworkMoniker);
						}
					}
					return fxName;
				}
			}

			public StandardContextScope(IServiceProvider serviceProvider, WorkflowCompilerOptionsService service)
				: base(serviceProvider)
			{
				this.service = service;
			}
		}

		private class ParametersContextScope : ContextScope
		{
			private WorkflowCompilerParameters parameters;

			public override string RootNamespace => WorkflowCompilerParameters.ExtractRootNamespace(parameters);

			public override string Language => parameters.LanguageToUse;

			public override bool CheckTypes => parameters.CheckTypes;

			public override FrameworkName TargetFramework
			{
				get
				{
					if (parameters.MultiTargetingInformation != null)
					{
						return parameters.MultiTargetingInformation.TargetFramework;
					}
					return null;
				}
			}

			public ParametersContextScope(IServiceProvider serviceProvider, WorkflowCompilerParameters parameters)
				: base(serviceProvider)
			{
				this.parameters = parameters;
			}
		}

		private class DefaultContextScope : ContextScope
		{
			public override string RootNamespace => string.Empty;

			public override string Language => "CSharp";

			public override bool CheckTypes => false;

			public override FrameworkName TargetFramework => null;

			public DefaultContextScope(IServiceProvider serviceProvider)
				: base(serviceProvider)
			{
			}
		}

		[ThreadStatic]
		private static WorkflowCompilationContext current;

		private ContextScope scope;

		private ReadOnlyCollection<AuthorizedType> authorizedTypes;

		public static WorkflowCompilationContext Current
		{
			get
			{
				return current;
			}
			private set
			{
				current = value;
			}
		}

		public string RootNamespace => scope.RootNamespace;

		public string Language => scope.Language;

		public bool CheckTypes => scope.CheckTypes;

		internal FrameworkName TargetFramework => scope.TargetFramework;

		internal Version TargetFrameworkVersion
		{
			get
			{
				FrameworkName targetFramework = scope.TargetFramework;
				if (targetFramework != null)
				{
					return targetFramework.Version;
				}
				return MultiTargetingInfo.DefaultTargetFramework;
			}
		}

		internal IServiceProvider ServiceProvider => scope;

		private WorkflowCompilationContext(ContextScope scope)
		{
			this.scope = scope;
		}

		public static IDisposable CreateScope(IServiceProvider serviceProvider)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			if (serviceProvider.GetService(typeof(IWorkflowCompilerOptionsService)) is IWorkflowCompilerOptionsService optionsService)
			{
				return CreateScope(serviceProvider, optionsService);
			}
			return new DefaultContextScope(serviceProvider);
		}

		public IList<AuthorizedType> GetAuthorizedTypes()
		{
			if (authorizedTypes == null)
			{
				try
				{
					IDictionary<string, IList<AuthorizedType>> dictionary = ConfigurationManager.GetSection("System.Workflow.ComponentModel.WorkflowCompiler/authorizedTypes") as IDictionary<string, IList<AuthorizedType>>;
					Version version = null;
					FrameworkName targetFramework = scope.TargetFramework;
					version = ((!(targetFramework != null)) ? MultiTargetingInfo.DefaultTargetFramework : targetFramework.Version);
					string key = string.Format(CultureInfo.InvariantCulture, "v{0}.{1}", new object[2] { version.Major, version.Minor });
					if (dictionary.TryGetValue(key, out var value))
					{
						authorizedTypes = new ReadOnlyCollection<AuthorizedType>(value);
					}
				}
				catch
				{
				}
			}
			return authorizedTypes;
		}

		internal static IDisposable CreateScope(IServiceProvider serviceProvider, WorkflowCompilerParameters parameters)
		{
			return new ParametersContextScope(serviceProvider, parameters);
		}

		private static IDisposable CreateScope(IServiceProvider serviceProvider, IWorkflowCompilerOptionsService optionsService)
		{
			if (optionsService is WorkflowCompilerOptionsService service)
			{
				return new StandardContextScope(serviceProvider, service);
			}
			return new InterfaceContextScope(serviceProvider, optionsService);
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowCompiler
	{
		public WorkflowCompilerResults Compile(WorkflowCompilerParameters parameters, params string[] files)
		{
			if (parameters == null)
			{
				throw new ArgumentNullException("parameters");
			}
			if (files == null)
			{
				throw new ArgumentNullException("files");
			}
			string text = null;
			string text2 = null;
			AppDomainSetup setupInformation = AppDomain.CurrentDomain.SetupInformation;
			setupInformation.LoaderOptimization = LoaderOptimization.MultiDomainHost;
			AppDomain appDomain = AppDomain.CreateDomain("CompilerDomain", null, setupInformation);
			bool flag = false;
			string outputAssembly = parameters.OutputAssembly;
			try
			{
				if (parameters.GenerateInMemory)
				{
					flag = true;
					parameters.GenerateInMemory = false;
					if (string.IsNullOrEmpty(parameters.OutputAssembly))
					{
						text2 = Path.GetTempFileName();
						parameters.OutputAssembly = text2 + ".dll";
					}
					else
					{
						int num = 0;
						while (true)
						{
							try
							{
								num++;
								text = Path.GetTempPath() + "\\" + Guid.NewGuid().ToString();
								DirectoryInfo directoryInfo = Directory.CreateDirectory(text);
								parameters.OutputAssembly = directoryInfo.FullName + "\\" + parameters.OutputAssembly;
							}
							catch
							{
								if (num >= 10)
								{
									throw;
								}
								continue;
							}
							break;
						}
					}
				}
				WorkflowCompilerInternal workflowCompilerInternal = (WorkflowCompilerInternal)appDomain.CreateInstanceAndUnwrap(Assembly.GetExecutingAssembly().FullName, typeof(WorkflowCompilerInternal).FullName);
				WorkflowCompilerResults workflowCompilerResults = workflowCompilerInternal.Compile(parameters, files);
				if (flag && !workflowCompilerResults.Errors.HasErrors)
				{
					workflowCompilerResults.CompiledAssembly = Assembly.Load(File.ReadAllBytes(workflowCompilerResults.PathToAssembly));
					workflowCompilerResults.PathToAssembly = null;
				}
				return workflowCompilerResults;
			}
			finally
			{
				string outputAssembly2 = parameters.OutputAssembly;
				if (flag)
				{
					parameters.GenerateInMemory = true;
					parameters.OutputAssembly = outputAssembly;
				}
				AppDomain.Unload(appDomain);
				if (flag)
				{
					try
					{
						File.Delete(outputAssembly2);
						if (text2 != null)
						{
							File.Delete(text2);
						}
						if (text != null)
						{
							Directory.Delete(text, recursive: true);
						}
					}
					catch
					{
					}
				}
			}
		}
	}
	internal sealed class TypeAuthorizerClass : ITypeAuthorizer
	{
		public IList<AuthorizedType> AuthorizedTypes { get; private set; }

		public WorkflowCompilerResults Results { get; private set; }

		public string Filename { get; private set; }

		public TypeAuthorizerClass(IList<AuthorizedType> authorizedTypes, WorkflowCompilerResults results, string filename)
		{
			if (results == null)
			{
				throw new ArgumentNullException("results");
			}
			if (string.IsNullOrWhiteSpace(filename))
			{
				throw new ArgumentException("filename");
			}
			AuthorizedTypes = authorizedTypes;
			Results = results;
			Filename = filename;
		}

		public bool IsTypeAuthorized(Type typeToAuthorize)
		{
			if (typeToAuthorize == null)
			{
				Results.Errors.Add(new WorkflowCompilerError(Filename, -1, -1, 363.ToString(CultureInfo.InvariantCulture), SR.GetString("Error_TypeNotAuthorized", SR.GetString("NullConditionExpression"))));
				return false;
			}
			bool flag = false;
			if (AuthorizedTypes != null)
			{
				foreach (AuthorizedType authorizedType in AuthorizedTypes)
				{
					if (authorizedType.RegularExpression.IsMatch(typeToAuthorize.AssemblyQualifiedName))
					{
						flag = string.Compare(bool.TrueString, authorizedType.Authorized, StringComparison.OrdinalIgnoreCase) == 0;
						if (!flag)
						{
							break;
						}
					}
				}
			}
			if (!flag)
			{
				Results.Errors.Add(new WorkflowCompilerError(Filename, -1, -1, 363.ToString(CultureInfo.InvariantCulture), SR.GetString("Error_TypeNotAuthorized", typeToAuthorize)));
			}
			return flag;
		}
	}
	internal sealed class WorkflowCompilerInternal : MarshalByRefObject
	{
		public override object InitializeLifetimeService()
		{
			return null;
		}

		public WorkflowCompilerResults Compile(WorkflowCompilerParameters parameters, string[] allFiles)
		{
			WorkflowCompilerResults workflowCompilerResults = new WorkflowCompilerResults(parameters.TempFiles);
			StringCollection stringCollection = new StringCollection();
			StringCollection stringCollection2 = new StringCollection();
			foreach (string text in allFiles)
			{
				if (text.EndsWith(".xoml", StringComparison.OrdinalIgnoreCase))
				{
					stringCollection.Add(text);
				}
				else
				{
					stringCollection2.Add(text);
				}
			}
			string[] array = new string[stringCollection.Count];
			stringCollection.CopyTo(array, 0);
			string[] array2 = new string[stringCollection2.Count];
			stringCollection2.CopyTo(array2, 0);
			string text2 = typeof(object).Assembly.Location;
			ServiceContainer serviceContainer = new ServiceContainer();
			MultiTargetingInfo multiTargetingInformation = parameters.MultiTargetingInformation;
			if (multiTargetingInformation == null)
			{
				XomlCompilerHelper.FixReferencedAssemblies(parameters, workflowCompilerResults, parameters.LibraryPaths);
			}
			string fileName = Path.GetFileName(text2);
			ReferencedAssemblyResolver referencedAssemblyResolver = new ReferencedAssemblyResolver(parameters.ReferencedAssemblies, parameters.LocalAssembly);
			AppDomain.CurrentDomain.AssemblyResolve += referencedAssemblyResolver.ResolveEventHandler;
			TypeProvider typeProvider = new TypeProvider(new ServiceContainer());
			int num = -1;
			if (parameters.ReferencedAssemblies != null && parameters.ReferencedAssemblies.Count > 0)
			{
				for (int j = 0; j < parameters.ReferencedAssemblies.Count; j++)
				{
					string text3 = parameters.ReferencedAssemblies[j];
					if (num == -1 && string.Compare(fileName, Path.GetFileName(text3), StringComparison.OrdinalIgnoreCase) == 0)
					{
						num = j;
						text2 = text3;
					}
					typeProvider.AddAssemblyReference(text3);
				}
			}
			if (num != -1)
			{
				parameters.ReferencedAssemblies.RemoveAt(num);
				if (string.IsNullOrEmpty(parameters.CoreAssemblyFileName))
				{
					parameters.CoreAssemblyFileName = text2;
				}
			}
			else
			{
				typeProvider.AddAssemblyReference(text2);
			}
			serviceContainer.AddService(typeof(ITypeProvider), typeProvider);
			TempFileCollection tempFiles = null;
			string localAssemblyPath = string.Empty;
			string createdDirectoryName = null;
			try
			{
				using (WorkflowCompilationContext.CreateScope(serviceContainer, parameters))
				{
					parameters.LocalAssembly = GenerateLocalAssembly(array, array2, parameters, workflowCompilerResults, out tempFiles, out localAssemblyPath, out createdDirectoryName);
					if (parameters.LocalAssembly != null)
					{
						referencedAssemblyResolver.SetLocalAssembly(parameters.LocalAssembly);
						typeProvider.SetLocalAssembly(parameters.LocalAssembly);
						typeProvider.AddAssembly(parameters.LocalAssembly);
						workflowCompilerResults.Errors.Clear();
						XomlCompilerHelper.InternalCompileFromDomBatch(array, array2, parameters, workflowCompilerResults, localAssemblyPath);
					}
				}
			}
			catch (Exception ex)
			{
				workflowCompilerResults.Errors.Add(new WorkflowCompilerError(string.Empty, -1, -1, 348.ToString(CultureInfo.InvariantCulture), SR.GetString("Error_CompilationFailed", ex.Message)));
			}
			finally
			{
				if (tempFiles != null && !parameters.TempFiles.KeepFiles)
				{
					foreach (string item in tempFiles)
					{
						try
						{
							File.Delete(item);
						}
						catch
						{
						}
					}
					try
					{
						if (createdDirectoryName != null)
						{
							Directory.Delete(createdDirectoryName, recursive: true);
						}
					}
					catch
					{
					}
				}
			}
			return workflowCompilerResults;
		}

		private static ValidationErrorCollection ValidateIdentifiers(IServiceProvider serviceProvider, Activity activity)
		{
			ValidationErrorCollection validationErrors = new ValidationErrorCollection();
			Dictionary<string, int> names = new Dictionary<string, int>();
			Walker walker3 = new Walker();
			walker3.FoundActivity += delegate(Walker walker2, WalkerEventArgs e)
			{
				Activity currentActivity = e.CurrentActivity;
				if (!currentActivity.Enabled)
				{
					e.Action = WalkerAction.Skip;
				}
				else
				{
					ValidationError validationError = null;
					if (names.ContainsKey(currentActivity.QualifiedName))
					{
						if (names[currentActivity.QualifiedName] != 1)
						{
							validationError = new ValidationError(SR.GetString("Error_DuplicatedActivityID", currentActivity.QualifiedName), 1538, isWarning: false, "Name");
							validationError.UserData[typeof(Activity)] = currentActivity;
							validationErrors.Add(validationError);
							names[currentActivity.QualifiedName] = 1;
						}
					}
					else if (!string.IsNullOrEmpty(currentActivity.Name))
					{
						names[currentActivity.Name] = 0;
						validationError = ValidationHelpers.ValidateIdentifier("Name", serviceProvider, currentActivity.Name);
						if (validationError != null)
						{
							validationError.UserData[typeof(Activity)] = currentActivity;
							validationErrors.Add(validationError);
						}
					}
				}
			};
			walker3.Walk(activity);
			return validationErrors;
		}

		private Assembly GenerateLocalAssembly(string[] files, string[] codeFiles, WorkflowCompilerParameters parameters, WorkflowCompilerResults results, out TempFileCollection tempFiles2, out string localAssemblyPath, out string createdDirectoryName)
		{
			localAssemblyPath = string.Empty;
			createdDirectoryName = null;
			tempFiles2 = null;
			CodeCompileUnit value = GenerateCodeFromFileBatch(files, parameters, results);
			if (results.Errors.HasErrors)
			{
				return null;
			}
			SupportedLanguages supportedLanguage = CompilerHelpers.GetSupportedLanguage(parameters.LanguageToUse);
			CodeDomProvider codeDomProvider = CompilerHelpers.GetCodeDomProvider(supportedLanguage, parameters.CompilerVersion);
			CompilerParameters compilerParameters = XomlCompilerHelper.CloneCompilerParameters(parameters);
			compilerParameters.TempFiles.KeepFiles = true;
			tempFiles2 = compilerParameters.TempFiles;
			compilerParameters.GenerateInMemory = true;
			if (string.IsNullOrEmpty(parameters.OutputAssembly))
			{
				string text2 = (compilerParameters.OutputAssembly = compilerParameters.TempFiles.AddExtension("dll"));
				localAssemblyPath = text2;
			}
			else
			{
				string text3 = compilerParameters.TempFiles.BasePath;
				int num = 0;
				while (true)
				{
					try
					{
						if (!Directory.Exists(text3))
						{
							Directory.CreateDirectory(text3);
							createdDirectoryName = text3;
						}
					}
					catch
					{
						if (num >= 10)
						{
							throw;
						}
						text3 = compilerParameters.TempFiles.BasePath + num++;
						continue;
					}
					break;
				}
				string text2 = (compilerParameters.OutputAssembly = text3 + "\\" + Path.GetFileName(compilerParameters.OutputAssembly));
				localAssemblyPath = text2;
				compilerParameters.TempFiles.AddFile(localAssemblyPath, keepFile: true);
				string text5 = Path.GetFileNameWithoutExtension(localAssemblyPath) + ".pdb";
				compilerParameters.TempFiles.AddFile(Path.GetDirectoryName(localAssemblyPath) + "\\" + text5, keepFile: true);
			}
			compilerParameters.TreatWarningsAsErrors = false;
			if (compilerParameters.CompilerOptions != null && compilerParameters.CompilerOptions.Length > 0)
			{
				string compilerOptions = compilerParameters.CompilerOptions;
				ArrayList arrayList = new ArrayList();
				int num2 = 0;
				int i = 0;
				bool flag = false;
				for (; i < compilerOptions.Length; i++)
				{
					int num3 = i - num2;
					if (compilerOptions[i] == '"')
					{
						flag = !flag;
					}
					else if (compilerOptions[i] == ' ' && !flag)
					{
						if (num2 == i)
						{
							num2++;
							continue;
						}
						string value2 = compilerOptions.Substring(num2, i - num2);
						arrayList.Add(value2);
						num2 = i + 1;
					}
				}
				if (num2 != i)
				{
					string value3 = compilerOptions.Substring(num2, i - num2);
					arrayList.Add(value3);
				}
				string[] array = arrayList.ToArray(typeof(string)) as string[];
				compilerParameters.CompilerOptions = string.Empty;
				string[] array2 = array;
				foreach (string text6 in array2)
				{
					if (text6.Length > 0 && !text6.StartsWith("/delaysign", StringComparison.OrdinalIgnoreCase) && !text6.StartsWith("/keyfile", StringComparison.OrdinalIgnoreCase) && !text6.StartsWith("/keycontainer", StringComparison.OrdinalIgnoreCase))
					{
						compilerParameters.CompilerOptions = compilerParameters.CompilerOptions + " " + text6;
					}
				}
			}
			compilerParameters.CompilerOptions = ((compilerParameters.CompilerOptions == null) ? "/optimize-" : (compilerParameters.CompilerOptions + " /optimize-"));
			compilerParameters.IncludeDebugInformation = true;
			if (supportedLanguage == SupportedLanguages.CSharp)
			{
				compilerParameters.CompilerOptions += " /unsafe";
			}
			ArrayList arrayList2 = new ArrayList((ICollection)parameters.UserCodeCompileUnits);
			arrayList2.Add(value);
			ArrayList arrayList3 = new ArrayList();
			arrayList3.AddRange(codeFiles);
			arrayList3.AddRange(XomlCompilerHelper.GenerateFiles(codeDomProvider, compilerParameters, (CodeCompileUnit[])arrayList2.ToArray(typeof(CodeCompileUnit))));
			CompilerResults compilerResults = codeDomProvider.CompileAssemblyFromFile(compilerParameters, (string[])arrayList3.ToArray(typeof(string)));
			if (compilerResults.Errors.HasErrors)
			{
				results.AddCompilerErrorsFromCompilerResults(compilerResults);
				return null;
			}
			return compilerResults.CompiledAssembly;
		}

		internal static CodeCompileUnit GenerateCodeFromFileBatch(string[] files, WorkflowCompilerParameters parameters, WorkflowCompilerResults results)
		{
			WorkflowCompilationContext current = WorkflowCompilationContext.Current;
			if (current == null)
			{
				throw new Exception(SR.GetString("Error_MissingCompilationContext"));
			}
			CodeCompileUnit codeCompileUnit = new CodeCompileUnit();
			foreach (string text in files)
			{
				TypeAuthorizerClass typeAuthorizerClass = null;
				if (parameters.CheckTypes)
				{
					typeAuthorizerClass = new TypeAuthorizerClass(current.GetAuthorizedTypes(), results, text);
				}
				Activity activity = null;
				try
				{
					DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager(current.ServiceProvider);
					using (designerSerializationManager.CreateSession())
					{
						WorkflowMarkupSerializationManager workflowMarkupSerializationManager = new WorkflowMarkupSerializationManager(designerSerializationManager);
						workflowMarkupSerializationManager.WorkflowMarkupStack.Push(parameters);
						workflowMarkupSerializationManager.LocalAssembly = parameters.LocalAssembly;
						using (XmlReader textReader = XmlReader.Create(text))
						{
							activity = ((typeAuthorizerClass != null) ? WorkflowMarkupSerializationHelpers.LoadXomlDocument(workflowMarkupSerializationManager, textReader, text, typeAuthorizerClass) : WorkflowMarkupSerializationHelpers.LoadXomlDocument(workflowMarkupSerializationManager, textReader, text));
						}
						if (parameters.LocalAssembly != null)
						{
							foreach (object error in designerSerializationManager.Errors)
							{
								if (error is WorkflowMarkupSerializationException)
								{
									results.Errors.Add(new WorkflowCompilerError(text, (WorkflowMarkupSerializationException)error));
								}
								else
								{
									results.Errors.Add(new WorkflowCompilerError(text, -1, -1, 347.ToString(CultureInfo.InvariantCulture), error.ToString()));
								}
							}
						}
					}
				}
				catch (WorkflowMarkupSerializationException exception)
				{
					results.Errors.Add(new WorkflowCompilerError(text, exception));
					continue;
				}
				catch (Exception ex)
				{
					results.Errors.Add(new WorkflowCompilerError(text, -1, -1, 347.ToString(CultureInfo.InvariantCulture), SR.GetString("Error_CompilationFailed", ex.Message)));
					continue;
				}
				if (activity == null)
				{
					results.Errors.Add(new WorkflowCompilerError(text, 1, 1, 347.ToString(CultureInfo.InvariantCulture), SR.GetString("Error_RootActivityTypeInvalid")));
					continue;
				}
				if (string.IsNullOrEmpty(activity.GetValue(WorkflowMarkupSerializer.XClassProperty) as string))
				{
					results.Errors.Add(new WorkflowCompilerError(text, 1, 1, 347.ToString(CultureInfo.InvariantCulture), SR.GetString("Error_CannotCompile_No_XClass")));
					continue;
				}
				if (parameters.CompileWithNoCode && XomlCompilerHelper.HasCodeWithin(activity))
				{
					ValidationError validationError = new ValidationError(SR.GetString("Error_CodeWithinNotAllowed"), 362);
					validationError.UserData[typeof(Activity)] = activity;
					results.Errors.Add(XomlCompilerHelper.CreateXomlCompilerError(validationError, parameters));
				}
				ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
				validationErrorCollection = ValidateIdentifiers(current.ServiceProvider, activity);
				foreach (ValidationError item in validationErrorCollection)
				{
					results.Errors.Add(XomlCompilerHelper.CreateXomlCompilerError(item, parameters));
				}
				if (!results.Errors.HasErrors)
				{
					codeCompileUnit.Namespaces.AddRange(WorkflowMarkupSerializationHelpers.GenerateCodeFromXomlDocument(activity, text, current.RootNamespace, CompilerHelpers.GetSupportedLanguage(current.Language), current.ServiceProvider));
				}
			}
			WorkflowMarkupSerializationHelpers.FixStandardNamespacesAndRootNamespace(codeCompileUnit.Namespaces, current.RootNamespace, CompilerHelpers.GetSupportedLanguage(current.Language));
			return codeCompileUnit;
		}
	}
	internal static class XomlCompilerHelper
	{
		internal static object LineNumber = new object();

		internal static object ColumnNumber = new object();

		private static StringCollection standardAssemblies = null;

		private static char[] trimCharsArray = null;

		private static StringCollection StandardAssemblies
		{
			get
			{
				if (standardAssemblies == null)
				{
					StringCollection stringCollection = new StringCollection();
					stringCollection.Add("System.Workflow.ComponentModel.dll");
					stringCollection.Add("System.Workflow.Runtime.dll");
					stringCollection.Add("System.Workflow.Activities.dll");
					stringCollection.Add("System.dll");
					stringCollection.Add("System.Transactions.dll");
					stringCollection.Add("System.drawing.dll");
					stringCollection.Add("System.Web.dll");
					stringCollection.Add("System.Web.Services.dll");
					standardAssemblies = stringCollection;
				}
				return standardAssemblies;
			}
		}

		internal static void InternalCompileFromDomBatch(string[] files, string[] codeFiles, WorkflowCompilerParameters parameters, WorkflowCompilerResults results, string localAssemblyPath)
		{
			StringEnumerator enumerator = parameters.LibraryPaths.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					string current = enumerator.Current;
					if (!CheckPathName(current))
					{
						WorkflowCompilerError workflowCompilerError = new WorkflowCompilerError(string.Empty, 0, 0, 352.ToString(CultureInfo.InvariantCulture), string.Format(CultureInfo.CurrentCulture, SR.GetString("LibraryPathIsInvalid"), new object[1] { current }));
						workflowCompilerError.IsWarning = true;
						results.Errors.Add(workflowCompilerError);
					}
				}
			}
			finally
			{
				if (enumerator is IDisposable disposable)
				{
					disposable.Dispose();
				}
			}
			IList<AuthorizedType> list = null;
			if (parameters.CheckTypes)
			{
				list = WorkflowCompilationContext.Current.GetAuthorizedTypes();
				if (list == null)
				{
					ValidationError error = new ValidationError(SR.GetString("Error_ConfigFileMissingOrInvalid"), 376);
					results.Errors.Add(CreateXomlCompilerError(error, parameters));
					return;
				}
			}
			ITypeProvider typeProvider = WorkflowCompilationContext.Current.ServiceProvider.GetService(typeof(ITypeProvider)) as ITypeProvider;
			ArrayList arrayList = new ArrayList();
			using (PDBReader pDBReader = new PDBReader(localAssemblyPath))
			{
				Type[] types = typeProvider.LocalAssembly.GetTypes();
				foreach (Type type in types)
				{
					if (!TypeProvider.IsAssignable(typeof(Activity), type) || type.IsAbstract)
					{
						continue;
					}
					string fileLocation = string.Empty;
					WorkflowMarkupSourceAttribute[] array = (WorkflowMarkupSourceAttribute[])type.GetCustomAttributes(typeof(WorkflowMarkupSourceAttribute), inherit: false);
					if (array != null && array.Length != 0)
					{
						fileLocation = array[0].FileName;
					}
					else
					{
						ConstructorInfo constructor = type.GetConstructor(Type.EmptyTypes);
						if (constructor != null)
						{
							try
							{
								uint line = 0u;
								uint column = 0u;
								pDBReader.GetSourceLocationForOffset((uint)constructor.MetadataToken, 0u, out fileLocation, out line, out column);
							}
							catch
							{
							}
						}
						if (string.IsNullOrEmpty(fileLocation))
						{
							MethodInfo method = type.GetMethod("InitializeComponent", BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, Type.EmptyTypes, null);
							if (method != null)
							{
								try
								{
									uint line2 = 0u;
									uint column2 = 0u;
									pDBReader.GetSourceLocationForOffset((uint)method.MetadataToken, 0u, out fileLocation, out line2, out column2);
									if (!string.IsNullOrEmpty(fileLocation))
									{
										if (fileLocation.EndsWith(".designer.cs", StringComparison.OrdinalIgnoreCase))
										{
											fileLocation = fileLocation.Substring(0, fileLocation.Length - ".designer.cs".Length) + ".cs";
										}
										else if (fileLocation.EndsWith(".designer.vb", StringComparison.OrdinalIgnoreCase))
										{
											fileLocation = fileLocation.Substring(0, fileLocation.Length - ".designer.vb".Length) + ".vb";
										}
									}
								}
								catch
								{
								}
							}
						}
					}
					Activity activity = null;
					try
					{
						try
						{
							Activity.ActivityType = type;
							activity = Activator.CreateInstance(type) as Activity;
						}
						finally
						{
							Activity.ActivityType = null;
						}
						activity.UserData[UserDataKeys.CustomActivity] = false;
						if (activity is CompositeActivity)
						{
							CompositeActivity compositeActivity = activity as CompositeActivity;
							if (compositeActivity.CanModifyActivities)
							{
								results.Errors.Add(CreateXomlCompilerError(new ValidationError(SR.GetString("Error_Missing_CanModifyProperties_False", activity.GetType().FullName), 279), parameters));
							}
						}
						if (array.Length != 0)
						{
							DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager(WorkflowCompilationContext.Current.ServiceProvider);
							Activity activity2 = null;
							using (designerSerializationManager.CreateSession())
							{
								WorkflowMarkupSerializationManager workflowMarkupSerializationManager = new WorkflowMarkupSerializationManager(designerSerializationManager);
								workflowMarkupSerializationManager.LocalAssembly = parameters.LocalAssembly;
								using XmlReader reader = XmlReader.Create(array[0].FileName);
								activity2 = new WorkflowMarkupSerializer().Deserialize(workflowMarkupSerializationManager, reader) as Activity;
							}
							if (activity2 is CompositeActivity)
							{
								ActivityMarkupSerializer.ReplaceChildActivities(activity as CompositeActivity, activity2 as CompositeActivity);
							}
						}
					}
					catch (TargetInvocationException ex)
					{
						if (ex.InnerException is TypeInitializationException && ex.InnerException.InnerException != null)
						{
							results.Errors.Add(CreateXomlCompilerError(new ValidationError(SR.GetString("Error_CustomActivityCantCreate", type.FullName, ex.InnerException.InnerException.ToString()), 279), parameters));
						}
						else if (ex.InnerException.InnerException != null)
						{
							results.Errors.Add(CreateXomlCompilerError(new ValidationError(ex.InnerException.InnerException.ToString(), 279), parameters));
						}
						else
						{
							results.Errors.Add(CreateXomlCompilerError(new ValidationError(SR.GetString("Error_CustomActivityCantCreate", type.FullName, ex.InnerException.ToString()), 279), parameters));
						}
						continue;
					}
					catch (Exception ex2)
					{
						results.Errors.Add(CreateXomlCompilerError(new ValidationError(SR.GetString("Error_CustomActivityCantCreate", type.FullName, ex2.ToString()), 279), parameters));
						continue;
					}
					activity.SetValue(ActivityCodeDomSerializer.MarkupFileNameProperty, fileLocation);
					activity.SetValue(WorkflowMarkupSerializer.XClassProperty, type.FullName);
					ValidateActivity(activity, parameters, results);
					arrayList.Add(activity);
				}
			}
			foreach (KeyValuePair<object, Exception> typeLoadError in typeProvider.TypeLoadErrors)
			{
				WorkflowCompilerError workflowCompilerError2 = new WorkflowCompilerError(string.Empty, 0, 0, 353.ToString(CultureInfo.InvariantCulture), typeLoadError.Value.Message);
				workflowCompilerError2.IsWarning = true;
				results.Errors.Add(workflowCompilerError2);
			}
			results.CompiledUnit = WorkflowCompilerInternal.GenerateCodeFromFileBatch(files, parameters, results);
			WorkflowCompilationContext current3 = WorkflowCompilationContext.Current;
			if (current3 == null)
			{
				throw new Exception(SR.GetString("Error_MissingCompilationContext"));
			}
			WorkflowMarkupSerializationHelpers.ReapplyRootNamespace(results.CompiledUnit.Namespaces, current3.RootNamespace, CompilerHelpers.GetSupportedLanguage(current3.Language));
			WorkflowMarkupSerializationHelpers.FixStandardNamespacesAndRootNamespace(results.CompiledUnit.Namespaces, current3.RootNamespace, CompilerHelpers.GetSupportedLanguage(current3.Language));
			if (results.Errors.HasErrors)
			{
				return;
			}
			CodeGenerationManager codeGenerationManager = new CodeGenerationManager(WorkflowCompilationContext.Current.ServiceProvider);
			codeGenerationManager.Context.Push(results.CompiledUnit.Namespaces);
			foreach (Activity item in arrayList)
			{
				if (item.Parent == null)
				{
					ActivityCodeGenerator[] codeGenerators = codeGenerationManager.GetCodeGenerators(item.GetType());
					foreach (ActivityCodeGenerator activityCodeGenerator in codeGenerators)
					{
						activityCodeGenerator.GenerateCode(codeGenerationManager, item);
					}
				}
			}
			if (parameters.GenerateCodeCompileUnitOnly && !parameters.CheckTypes)
			{
				return;
			}
			SupportedLanguages supportedLanguage = CompilerHelpers.GetSupportedLanguage(parameters.LanguageToUse);
			CodeDomProvider codeDomProvider = CompilerHelpers.GetCodeDomProvider(supportedLanguage, parameters.CompilerVersion);
			ArrayList arrayList2 = new ArrayList((ICollection)parameters.UserCodeCompileUnits);
			arrayList2.Add(results.CompiledUnit);
			ArrayList arrayList3 = new ArrayList();
			arrayList3.AddRange(codeFiles);
			arrayList3.AddRange(GenerateFiles(codeDomProvider, parameters, (CodeCompileUnit[])arrayList2.ToArray(typeof(CodeCompileUnit))));
			CompilerResults compilerResults = codeDomProvider.CompileAssemblyFromFile(parameters, (string[])arrayList3.ToArray(typeof(string)));
			results.AddCompilerErrorsFromCompilerResults(compilerResults);
			results.PathToAssembly = compilerResults.PathToAssembly;
			results.NativeCompilerReturnValue = compilerResults.NativeCompilerReturnValue;
			if (!results.Errors.HasErrors && parameters.CheckTypes)
			{
				foreach (string typeRefName in MetaDataReader.GetTypeRefNames(compilerResults.CompiledAssembly.Location))
				{
					bool flag = false;
					foreach (AuthorizedType item2 in list)
					{
						if (item2.RegularExpression.IsMatch(typeRefName))
						{
							flag = string.Compare(bool.TrueString, item2.Authorized, StringComparison.OrdinalIgnoreCase) == 0;
							if (!flag)
							{
								break;
							}
						}
					}
					if (!flag)
					{
						ValidationError error2 = new ValidationError(SR.GetString("Error_TypeNotAuthorized", typeRefName), 363);
						results.Errors.Add(CreateXomlCompilerError(error2, parameters));
					}
				}
			}
			if (!results.Errors.HasErrors && !parameters.GenerateCodeCompileUnitOnly && parameters.GenerateInMemory && (string.IsNullOrEmpty(parameters.CompilerOptions) || !parameters.CompilerOptions.ToLower(CultureInfo.InvariantCulture).Contains("/delaysign")))
			{
				results.CompiledAssembly = compilerResults.CompiledAssembly;
			}
		}

		internal static string ProcessCompilerOptions(string options, out bool noCode, out bool checkTypes)
		{
			if (string.IsNullOrEmpty(options))
			{
				noCode = false;
				checkTypes = false;
			}
			else
			{
				noCode = ExtractCompilerOptionSwitch(ref options, "/nocode", out var compilerSwitchValue);
				checkTypes = ExtractCompilerOptionSwitch(ref options, "/checktypes", out compilerSwitchValue);
			}
			return options;
		}

		private static bool ExtractCompilerOptionSwitch(ref string options, string compilerSwitch, out string compilerSwitchValue)
		{
			int num = options.IndexOf(compilerSwitch, StringComparison.OrdinalIgnoreCase);
			if (num != -1)
			{
				int num2 = num + compilerSwitch.Length;
				int i;
				for (i = 0; num2 + i < options.Length && !char.IsWhiteSpace(options[num2 + i]); i++)
				{
				}
				if (i > 0)
				{
					compilerSwitchValue = options.Substring(num2, i);
				}
				else
				{
					compilerSwitchValue = string.Empty;
				}
				RemoveCompilerOptionSwitch(ref options, num, compilerSwitch.Length + i);
				return true;
			}
			compilerSwitchValue = string.Empty;
			return false;
		}

		private static void RemoveCompilerOptionSwitch(ref string options, int startPos, int length)
		{
			if (startPos > 0 && char.IsWhiteSpace(options[startPos - 1]))
			{
				options = options.Remove(startPos - 1, length + 1);
			}
			else if (startPos == 0 && startPos + length + 1 < options.Length && char.IsWhiteSpace(options[startPos + length + 1]))
			{
				options = options.Remove(startPos, length + 1);
			}
			else
			{
				options = options.Remove(startPos, length);
			}
		}

		internal static CompilerParameters CloneCompilerParameters(WorkflowCompilerParameters sourceParams)
		{
			CompilerParameters compilerParameters = new CompilerParameters();
			compilerParameters.CompilerOptions = ProcessCompilerOptions(sourceParams.CompilerOptions, out var _, out var _);
			StringEnumerator enumerator = sourceParams.EmbeddedResources.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					string current = enumerator.Current;
					compilerParameters.EmbeddedResources.Add(current);
				}
			}
			finally
			{
				if (enumerator is IDisposable disposable)
				{
					disposable.Dispose();
				}
			}
			compilerParameters.GenerateExecutable = sourceParams.GenerateExecutable;
			compilerParameters.GenerateInMemory = sourceParams.GenerateInMemory;
			compilerParameters.IncludeDebugInformation = sourceParams.IncludeDebugInformation;
			StringEnumerator enumerator2 = sourceParams.LinkedResources.GetEnumerator();
			try
			{
				while (enumerator2.MoveNext())
				{
					string current2 = enumerator2.Current;
					compilerParameters.LinkedResources.Add(current2);
				}
			}
			finally
			{
				if (enumerator2 is IDisposable disposable2)
				{
					disposable2.Dispose();
				}
			}
			compilerParameters.MainClass = sourceParams.MainClass;
			compilerParameters.OutputAssembly = sourceParams.OutputAssembly;
			StringEnumerator enumerator3 = sourceParams.ReferencedAssemblies.GetEnumerator();
			try
			{
				while (enumerator3.MoveNext())
				{
					string current3 = enumerator3.Current;
					compilerParameters.ReferencedAssemblies.Add(current3);
				}
			}
			finally
			{
				if (enumerator3 is IDisposable disposable3)
				{
					disposable3.Dispose();
				}
			}
			compilerParameters.TreatWarningsAsErrors = sourceParams.TreatWarningsAsErrors;
			compilerParameters.UserToken = sourceParams.UserToken;
			compilerParameters.WarningLevel = sourceParams.WarningLevel;
			compilerParameters.Win32Resource = sourceParams.Win32Resource;
			compilerParameters.CoreAssemblyFileName = sourceParams.CoreAssemblyFileName;
			return compilerParameters;
		}

		internal static void FixReferencedAssemblies(WorkflowCompilerParameters parameters, WorkflowCompilerResults results, StringCollection libraryPaths)
		{
			StringEnumerator enumerator = StandardAssemblies.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					string current = enumerator.Current;
					bool flag = true;
					StringEnumerator enumerator2 = parameters.ReferencedAssemblies.GetEnumerator();
					try
					{
						while (enumerator2.MoveNext())
						{
							string current2 = enumerator2.Current;
							if (current2 != null && current2.Length > 0)
							{
								string fileName = Path.GetFileName(current2);
								string fileName2 = Path.GetFileName(current);
								if (fileName != null && fileName2 != null && string.Compare(fileName, fileName2, StringComparison.OrdinalIgnoreCase) == 0)
								{
									flag = false;
									break;
								}
							}
						}
					}
					finally
					{
						if (enumerator2 is IDisposable disposable)
						{
							disposable.Dispose();
						}
					}
					if (flag)
					{
						parameters.ReferencedAssemblies.Add(current);
					}
				}
			}
			finally
			{
				if (enumerator is IDisposable disposable2)
				{
					disposable2.Dispose();
				}
			}
			StringCollection stringCollection = ResolveAssemblyReferences(parameters.ReferencedAssemblies, GetCompleteLibraryPaths(libraryPaths), results);
			parameters.ReferencedAssemblies.Clear();
			StringEnumerator enumerator3 = stringCollection.GetEnumerator();
			try
			{
				while (enumerator3.MoveNext())
				{
					string current3 = enumerator3.Current;
					if (!parameters.ReferencedAssemblies.Contains(current3))
					{
						parameters.ReferencedAssemblies.Add(current3);
					}
				}
			}
			finally
			{
				if (enumerator3 is IDisposable disposable3)
				{
					disposable3.Dispose();
				}
			}
		}

		internal static string TrimDirectorySeparatorChar(string dir)
		{
			if (trimCharsArray == null)
			{
				trimCharsArray = new char[1] { Path.DirectorySeparatorChar };
			}
			return dir.TrimEnd(trimCharsArray);
		}

		private static StringCollection GetCompleteLibraryPaths(StringCollection userLibraryPaths)
		{
			StringCollection stringCollection = new StringCollection();
			stringCollection.Add(Environment.CurrentDirectory);
			stringCollection.Add(TrimDirectorySeparatorChar(RuntimeEnvironment.GetRuntimeDirectory()));
			string[] array = new string[userLibraryPaths.Count];
			userLibraryPaths.CopyTo(array, 0);
			stringCollection.AddRange(array);
			string environmentVariable = Environment.GetEnvironmentVariable("LIB");
			if (environmentVariable != null && environmentVariable.Length > 0)
			{
				string[] value = Environment.GetEnvironmentVariable("LIB").Split(',', ';');
				stringCollection.AddRange(value);
			}
			return stringCollection;
		}

		private static StringCollection ResolveAssemblyReferences(StringCollection originalReferences, StringCollection libraryPaths, WorkflowCompilerResults results)
		{
			StringCollection stringCollection = new StringCollection();
			StringEnumerator enumerator = originalReferences.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					string current = enumerator.Current;
					if (CheckFileNameUsingPaths(current, libraryPaths, out var fullFileName))
					{
						stringCollection.Add(fullFileName);
						continue;
					}
					WorkflowCompilerError value = new WorkflowCompilerError(string.Empty, 0, 0, 354.ToString(CultureInfo.InvariantCulture), SR.GetString("Error_ReferencedAssemblyIsInvalid", current));
					results.Errors.Add(value);
				}
				return stringCollection;
			}
			finally
			{
				if (enumerator is IDisposable disposable)
				{
					disposable.Dispose();
				}
			}
		}

		private static void ResolveReferencedAssemblies(CompilerParameters parameters, CodeCompileUnit cu)
		{
			if (cu.ReferencedAssemblies.Count <= 0)
			{
				return;
			}
			StringEnumerator enumerator = cu.ReferencedAssemblies.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					string current = enumerator.Current;
					if (!parameters.ReferencedAssemblies.Contains(current))
					{
						parameters.ReferencedAssemblies.Add(current);
					}
				}
			}
			finally
			{
				if (enumerator is IDisposable disposable)
				{
					disposable.Dispose();
				}
			}
		}

		private static bool CheckFileNameUsingPaths(string fileName, StringCollection paths, out string fullFileName)
		{
			fullFileName = null;
			string text = fileName.Trim('"');
			FileInfo fileInfo = new FileInfo(text);
			if (text.Length != fileInfo.Name.Length)
			{
				if (fileInfo.Exists)
				{
					fullFileName = fileInfo.FullName;
				}
				return fileInfo.Exists;
			}
			StringEnumerator enumerator = paths.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					string current = enumerator.Current;
					string text2 = current + Path.DirectorySeparatorChar + text;
					FileInfo fileInfo2 = new FileInfo(text2);
					if (fileInfo2.Exists)
					{
						fullFileName = text2;
						return true;
					}
				}
			}
			finally
			{
				if (enumerator is IDisposable disposable)
				{
					disposable.Dispose();
				}
			}
			return false;
		}

		internal static bool CheckPathName(string pathName)
		{
			string text = pathName.Trim('"');
			text = text.TrimEnd(Path.DirectorySeparatorChar);
			return Directory.Exists(text);
		}

		internal static WorkflowCompilerError CreateXomlCompilerError(ValidationError error, WorkflowCompilerParameters parameters)
		{
			WorkflowCompilerError workflowCompilerError = new WorkflowCompilerError(GetFileName(error), (int)GetValue(error, LineNumber), (int)GetValue(error, ColumnNumber), string.Empty, GetPrettifiedErrorText(error));
			if (!parameters.TreatWarningsAsErrors)
			{
				workflowCompilerError.IsWarning = error.IsWarning;
			}
			workflowCompilerError.ErrorNumber = "WF" + error.ErrorNumber.ToString(CultureInfo.InvariantCulture);
			if (error.UserData != null)
			{
				foreach (DictionaryEntry userDatum in error.UserData)
				{
					if (userDatum.Key == typeof(Activity) && userDatum.Value is Activity)
					{
						workflowCompilerError.UserData[userDatum.Key] = ((Activity)userDatum.Value).QualifiedName;
					}
					else
					{
						workflowCompilerError.UserData[userDatum.Key] = userDatum.Value;
					}
				}
			}
			return workflowCompilerError;
		}

		internal static ValidationErrorCollection MorphIntoFriendlyValidationErrors(IEnumerable<ValidationError> errors)
		{
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			foreach (ValidationError error in errors)
			{
				if (error != null)
				{
					if (error.GetType() == typeof(ValidationError))
					{
						ValidationError item = new ValidationError(GetPrettifiedErrorText(error), error.ErrorNumber, error.IsWarning);
						validationErrorCollection.Add(item);
					}
					else
					{
						validationErrorCollection.Add(error);
					}
				}
			}
			return validationErrorCollection;
		}

		private static string GetFileName(ValidationError error)
		{
			Activity activity = error.UserData[typeof(Activity)] as Activity;
			while (activity != null && activity.Parent != null)
			{
				activity = activity.Parent;
			}
			string text = string.Empty;
			if (activity != null)
			{
				text = activity.GetValue(ActivityCodeDomSerializer.MarkupFileNameProperty) as string;
			}
			if (text == null)
			{
				text = string.Empty;
			}
			return text;
		}

		private static string GetPrettifiedErrorText(ValidationError error)
		{
			string text = error.ErrorText;
			if (error.UserData[typeof(Activity)] is Activity activity)
			{
				string text2 = ((Helpers.GetRootActivity(activity) != activity) ? activity.QualifiedName : activity.GetType().Name);
				if (text2 == null || text2.Length == 0)
				{
					text2 = SR.GetString("EmptyValue");
				}
				text = ((!error.IsWarning) ? (SR.GetString("Error_ActivityValidation", text2) + " " + text) : (SR.GetString("Warning_ActivityValidation", text2) + " " + text));
			}
			return text;
		}

		private static uint GetValue(ValidationError error, object key)
		{
			Activity activity = error.UserData[typeof(Activity)] as Activity;
			while (activity != null && activity.Parent != null)
			{
				activity = activity.Parent;
			}
			uint result = 0u;
			if (activity != null && activity.UserData[key] != null)
			{
				result = (uint)activity.UserData[key];
			}
			return result;
		}

		internal static bool HasCodeWithin(Activity rootActivity)
		{
			bool hasCodeWithin = false;
			Walker walker2 = new Walker();
			walker2.FoundActivity += delegate(Walker walker, WalkerEventArgs e)
			{
				Activity currentActivity = e.CurrentActivity;
				if (!currentActivity.Enabled && AppSettings.AllowXCode)
				{
					e.Action = WalkerAction.Skip;
				}
				else if (currentActivity.GetValue(WorkflowMarkupSerializer.XCodeProperty) is CodeTypeMemberCollection { Count: not 0 })
				{
					hasCodeWithin = true;
					e.Action = WalkerAction.Abort;
				}
			};
			walker2.Walk(rootActivity);
			return hasCodeWithin;
		}

		internal static void ValidateActivity(Activity activity, WorkflowCompilerParameters parameters, WorkflowCompilerResults results)
		{
			ValidationErrorCollection validationErrorCollection = null;
			ValidationManager validationManager = new ValidationManager(WorkflowCompilationContext.Current.ServiceProvider);
			Validator[] validators = validationManager.GetValidators(activity.GetType());
			foreach (Validator validator in validators)
			{
				try
				{
					validationErrorCollection = validator.Validate(validationManager, activity);
					foreach (ValidationError item in validationErrorCollection)
					{
						if (!item.UserData.Contains(typeof(Activity)))
						{
							item.UserData[typeof(Activity)] = activity;
						}
						results.Errors.Add(CreateXomlCompilerError(item, parameters));
					}
				}
				catch (TargetInvocationException ex)
				{
					Exception ex2 = ex.InnerException ?? ex;
					ValidationError error = new ValidationError(SR.GetString("Error_ValidatorThrewException", ex2.GetType().FullName, validator.GetType().FullName, activity.Name, ex2.ToString()), 1575);
					results.Errors.Add(CreateXomlCompilerError(error, parameters));
				}
				catch (Exception ex3)
				{
					ValidationError error2 = new ValidationError(SR.GetString("Error_ValidatorThrewException", ex3.GetType().FullName, validator.GetType().FullName, activity.Name, ex3.ToString()), 1575);
					results.Errors.Add(CreateXomlCompilerError(error2, parameters));
				}
			}
		}

		internal static string[] GenerateFiles(CodeDomProvider codeDomProvider, CompilerParameters parameters, CodeCompileUnit[] ccus)
		{
			CodeGeneratorOptions codeGeneratorOptions = new CodeGeneratorOptions();
			codeGeneratorOptions.BracingStyle = "C";
			string[] array = new string[ccus.Length];
			for (int i = 0; i < ccus.Length; i++)
			{
				if (!AppSettings.DisableXOMLCompilerIdentifierValidation)
				{
					CodeGenerator.ValidateIdentifiers(ccus[i]);
				}
				ResolveReferencedAssemblies(parameters, ccus[i]);
				array[i] = parameters.TempFiles.AddExtension(i + codeDomProvider.FileExtension);
				Stream stream = new FileStream(array[i], FileMode.Create, FileAccess.Write, FileShare.Read);
				try
				{
					using StreamWriter streamWriter = new StreamWriter(stream, Encoding.UTF8);
					codeDomProvider.GenerateCodeFromCompileUnit(ccus[i], streamWriter, codeGeneratorOptions);
					streamWriter.Flush();
				}
				finally
				{
					stream.Close();
				}
			}
			return array;
		}
	}
	internal static class MetaDataReader
	{
		private static class Guids
		{
			public const string CLSID_MetaDataDispenser = "E5CB7A31-7512-11d2-89CE-0080C792E5D8";

			public const string IID_IMetaDataDispenser = "809C652E-7396-11d2-9771-00A0C9B4D50C";

			public const string IID_IMetaDataImport = "7DAC8207-D3AE-4c75-9B67-92801A497D44";

			public const string IID_IMetaDataAssemblyImport = "EE62470B-E94B-424e-9B7C-2F00C9249F93";
		}

		private enum MetadataTokenType
		{
			ModuleRef = 436207616,
			AssemblyRef = 587202560
		}

		private struct OsInfo
		{
			private uint osPlatformId;

			private uint osMajorVersion;

			private uint osMinorVersion;
		}

		private struct AssemblyMetadata
		{
			public ushort majorVersion;

			public ushort minorVersion;

			public ushort buildNumber;

			public ushort revisionNumber;

			public IntPtr locale;

			public uint localeSize;

			public IntPtr processorIds;

			public uint processorIdCount;

			public IntPtr osInfo;

			public uint osInfoCount;
		}

		[ComImport]
		[Guid("E5CB7A31-7512-11d2-89CE-0080C792E5D8")]
		private class MetaDataDispenser
		{
		}

		[ComImport]
		[Guid("809C652E-7396-11d2-9771-00A0C9B4D50C")]
		[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
		private interface IMetaDataDispenser
		{
			void DefineScope();

			int OpenScope([In][MarshalAs(UnmanagedType.LPWStr)] string scopeName, uint openFlags, [In] ref Guid riid, [MarshalAs(UnmanagedType.IUnknown)] out object unknown);

			void OpenScopeOnMemory();
		}

		[ComImport]
		[Guid("7DAC8207-D3AE-4c75-9B67-92801A497D44")]
		[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
		private interface IMetaDataImport
		{
			void CloseEnum([In] IntPtr enumHandle);

			void CountEnum();

			void ResetEnum();

			void EnumTypeDefs();

			void EnumInterfaceImpls();

			int EnumTypeRefs([In][Out] ref IntPtr enumHandle, [In][Out][MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 2)] uint[] rTypeRefs, uint cMax, ref uint typeRefs);

			void FindTypeDefByName();

			void GetScopeProps();

			void GetModuleFromScope();

			void GetTypeDefProps();

			void GetInterfaceImplProps();

			int GetTypeRefProps([In] uint typeRefToken, out uint resolutionScopeToken, IntPtr typeRefName, uint nameLength, out uint actualLength);
		}

		[ComImport]
		[Guid("EE62470B-E94B-424e-9B7C-2F00C9249F93")]
		[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
		private interface IMetaDataAssemblyImport
		{
			void GetAssemblyProps();

			int GetAssemblyRefProps([In] uint assemblyRefToken, out IntPtr publicKeyOrToken, out uint sizePublicKeyOrToken, IntPtr assemblyName, [In] uint assemblyNameBufferSize, out uint assemblyNameSize, out AssemblyMetadata assemblyMetaData, out IntPtr hashValueBlob, out uint hashValueSize, out uint assemblyRefFlags);
		}

		private static MetadataTokenType TokenTypeFromToken(uint token)
		{
			return (MetadataTokenType)((int)token & -16777216);
		}

		internal static IEnumerable GetTypeRefNames(string assemblyLocation)
		{
			if (!(new MetaDataDispenser() is IMetaDataDispenser metaDataDispenser))
			{
				throw new InvalidOperationException(string.Format(SR.GetString("Error_MetaDataInterfaceMissing"), assemblyLocation, "IMetaDataDispenser"));
			}
			Guid riid = new Guid("7DAC8207-D3AE-4c75-9B67-92801A497D44");
			object metaDataImportObj = null;
			NativeMethods.ThrowOnFailure(metaDataDispenser.OpenScope(assemblyLocation, 0u, ref riid, out metaDataImportObj));
			if (!(metaDataImportObj is IMetaDataImport metaDataImport))
			{
				throw new InvalidOperationException(string.Format(SR.GetString("Error_MetaDataInterfaceMissing"), assemblyLocation, "IMetaDataImport"));
			}
			IntPtr enumHandle = default(IntPtr);
			uint[] typeRefs = new uint[20];
			uint typeRefCount = 0u;
			try
			{
				do
				{
					NativeMethods.ThrowOnFailure(metaDataImport.EnumTypeRefs(ref enumHandle, typeRefs, (uint)typeRefs.Length, ref typeRefCount));
					for (int typeRefIndex = 0; typeRefIndex < typeRefCount; typeRefIndex++)
					{
						IntPtr zero = IntPtr.Zero;
						NativeMethods.ThrowOnFailure(metaDataImport.GetTypeRefProps(typeRefs[typeRefIndex], out var resolutionScopeToken, zero, 0u, out var actualLength));
						if (actualLength == 0)
						{
							continue;
						}
						_ = string.Empty;
						zero = Marshal.AllocCoTaskMem((int)(2 * (actualLength + 1)));
						string text;
						try
						{
							NativeMethods.ThrowOnFailure(metaDataImport.GetTypeRefProps(typeRefs[typeRefIndex], out resolutionScopeToken, zero, actualLength, out actualLength));
						}
						finally
						{
							text = Marshal.PtrToStringUni(zero);
							Marshal.FreeCoTaskMem(zero);
						}
						if (!(metaDataImportObj is IMetaDataAssemblyImport metaDataAssemblyImport))
						{
							throw new InvalidOperationException(string.Format(SR.GetString("Error_MetaDataInterfaceMissing"), assemblyLocation, "IMetaDataAssemblyImport"));
						}
						if (TokenTypeFromToken(resolutionScopeToken) != MetadataTokenType.AssemblyRef)
						{
							continue;
						}
						IntPtr publicKeyOrToken = IntPtr.Zero;
						IntPtr assemblyName = IntPtr.Zero;
						IntPtr hashValueBlob = IntPtr.Zero;
						NativeMethods.ThrowOnFailure(metaDataAssemblyImport.GetAssemblyRefProps(resolutionScopeToken, out publicKeyOrToken, out var sizePublicKeyOrToken, assemblyName, 0u, out var assemblyNameSize, out var assemblyMetadata, out hashValueBlob, out var hashValueSize, out var assemblyRefFlags));
						if (assemblyNameSize != 0)
						{
							assemblyName = Marshal.AllocCoTaskMem((int)(2 * (assemblyNameSize + 1)));
						}
						if (assemblyMetadata.localeSize != 0)
						{
							assemblyMetadata.locale = Marshal.AllocCoTaskMem((int)(2 * (assemblyMetadata.localeSize + 1)));
						}
						try
						{
							if (assemblyNameSize != 0 || assemblyMetadata.localeSize != 0)
							{
								NativeMethods.ThrowOnFailure(metaDataAssemblyImport.GetAssemblyRefProps(resolutionScopeToken, out publicKeyOrToken, out sizePublicKeyOrToken, assemblyName, assemblyNameSize, out assemblyNameSize, out assemblyMetadata, out hashValueBlob, out hashValueSize, out assemblyRefFlags));
							}
							string text2 = string.Empty;
							for (int i = 0; i < sizePublicKeyOrToken; i++)
							{
								text2 += string.Format("{0}", Marshal.ReadByte(publicKeyOrToken, i).ToString("x2"));
							}
							yield return string.Format("{0}, {1}, Version={2}.{3}.{4}.{5}, Culture={6}, PublicKeyToken={7}", text, Marshal.PtrToStringUni(assemblyName), assemblyMetadata.majorVersion, assemblyMetadata.minorVersion, assemblyMetadata.buildNumber, assemblyMetadata.revisionNumber, string.IsNullOrEmpty(Marshal.PtrToStringUni(assemblyMetadata.locale)) ? "neutral" : Marshal.PtrToStringUni(assemblyMetadata.locale), string.IsNullOrEmpty(text2) ? "null" : text2);
						}
						finally
						{
							if (assemblyName != IntPtr.Zero && assemblyNameSize != 0)
							{
								Marshal.FreeCoTaskMem(assemblyName);
								_ = IntPtr.Zero;
							}
							if (assemblyMetadata.locale != IntPtr.Zero && assemblyMetadata.localeSize != 0)
							{
								Marshal.FreeCoTaskMem(assemblyMetadata.locale);
								assemblyMetadata.locale = IntPtr.Zero;
							}
						}
					}
				}
				while (typeRefCount != 0);
			}
			finally
			{
				metaDataImport.CloseEnum(enumHandle);
			}
		}
	}
	[Serializable]
	internal class MultiTargetingInfo : ISerializable
	{
		public static class MultiTargetingUtilities
		{
			private class RuntimeManager
			{
				private const string NDPSetupRegistryBranch = "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP";

				private string netFxRuntimeRoot;

				public string NetFxRuntimeRoot => netFxRuntimeRoot;

				public RuntimeManager()
				{
					string path = XomlCompilerHelper.TrimDirectorySeparatorChar(RuntimeEnvironment.GetRuntimeDirectory());
					netFxRuntimeRoot = XomlCompilerHelper.TrimDirectorySeparatorChar(Path.GetDirectoryName(path));
				}
			}

			private class ReferenceManager
			{
				private string frameworkReferenceAssemblyRoot;

				private HashSet<string> frameworkReferenceDirectories;

				public string FrameworkReferenceAssemblyRoot => frameworkReferenceAssemblyRoot;

				public ReferenceManager()
				{
					frameworkReferenceAssemblyRoot = ToolLocationHelper.GetProgramFilesReferenceAssemblyRoot();
					frameworkReferenceDirectories = new HashSet<string>(StringComparer.CurrentCultureIgnoreCase);
					IList<string> supportedTargetFrameworks = ToolLocationHelper.GetSupportedTargetFrameworks();
					for (int i = 0; i < supportedTargetFrameworks.Count; i++)
					{
						FrameworkName frameworkName = new FrameworkName(supportedTargetFrameworks[i]);
						IList<string> pathToReferenceAssemblies = ToolLocationHelper.GetPathToReferenceAssemblies(frameworkName);
						for (int j = 0; j < pathToReferenceAssemblies.Count; j++)
						{
							string item = XomlCompilerHelper.TrimDirectorySeparatorChar(pathToReferenceAssemblies[j]);
							if (!frameworkReferenceDirectories.Contains(item))
							{
								frameworkReferenceDirectories.Add(item);
							}
						}
					}
				}

				public bool IsFrameworkReferenceAssembly(string path)
				{
					string item = XomlCompilerHelper.TrimDirectorySeparatorChar(Path.GetDirectoryName(Path.GetFullPath(path)));
					return frameworkReferenceDirectories.Contains(item);
				}
			}

			private const string RuntimeReferencePrefix = "<RUNTIME>";

			private const string FrameworkReferencePrefix = "<FRAMEWORK>";

			private static RuntimeManager runtimeManager;

			private static ReferenceManager refManager;

			public static bool IsFrameworkReferenceAssembly(string path)
			{
				EnsureReferenceManager();
				return refManager.IsFrameworkReferenceAssembly(path);
			}

			public static WorkflowCompilerParameters NormalizeReferencedAssemblies(WorkflowCompilerParameters parameters)
			{
				EnsureRuntimeManager();
				EnsureReferenceManager();
				string[] array = new string[parameters.ReferencedAssemblies.Count];
				bool wasNormelized = false;
				for (int i = 0; i < parameters.ReferencedAssemblies.Count; i++)
				{
					array[i] = NormalizePath(parameters.ReferencedAssemblies[i], ref wasNormelized);
				}
				if (wasNormelized)
				{
					return new WorkflowCompilerParameters(parameters, array);
				}
				return parameters;
			}

			public static WorkflowCompilerParameters RenormalizeReferencedAssemblies(WorkflowCompilerParameters parameters)
			{
				EnsureRuntimeManager();
				EnsureReferenceManager();
				string[] array = new string[parameters.ReferencedAssemblies.Count];
				bool wasRenormelized = false;
				for (int i = 0; i < parameters.ReferencedAssemblies.Count; i++)
				{
					array[i] = RenormalizePath(parameters.ReferencedAssemblies[i], ref wasRenormelized);
				}
				if (wasRenormelized)
				{
					return new WorkflowCompilerParameters(parameters, array);
				}
				return parameters;
			}

			private static void EnsureRuntimeManager()
			{
				if (runtimeManager == null)
				{
					runtimeManager = new RuntimeManager();
				}
			}

			private static void EnsureReferenceManager()
			{
				if (refManager == null)
				{
					refManager = new ReferenceManager();
				}
			}

			private static string NormalizePath(string path, ref bool wasNormelized)
			{
				path = Path.GetFullPath(path);
				if (IsPathUnderDirectory(path, runtimeManager.NetFxRuntimeRoot))
				{
					wasNormelized = true;
					return path.Replace(runtimeManager.NetFxRuntimeRoot, "<RUNTIME>");
				}
				if (IsPathUnderDirectory(path, refManager.FrameworkReferenceAssemblyRoot))
				{
					wasNormelized = true;
					return path.Replace(refManager.FrameworkReferenceAssemblyRoot, "<FRAMEWORK>");
				}
				return path;
			}

			private static string RenormalizePath(string path, ref bool wasRenormelized)
			{
				if (path.StartsWith("<RUNTIME>", StringComparison.Ordinal))
				{
					wasRenormelized = true;
					return path.Replace("<RUNTIME>", runtimeManager.NetFxRuntimeRoot);
				}
				if (path.StartsWith("<FRAMEWORK>", StringComparison.Ordinal))
				{
					wasRenormelized = true;
					return path.Replace("<FRAMEWORK>", refManager.FrameworkReferenceAssemblyRoot);
				}
				return path;
			}

			private static bool IsPathUnderDirectory(string path, string parentDirectory)
			{
				if (!path.StartsWith(parentDirectory, StringComparison.CurrentCultureIgnoreCase))
				{
					return false;
				}
				int length = parentDirectory.Length;
				if (path.Length == length)
				{
					return false;
				}
				if (path[length] != Path.DirectorySeparatorChar && path[length] != Path.AltDirectorySeparatorChar)
				{
					return false;
				}
				return true;
			}
		}

		internal static readonly Version DefaultTargetFramework = new Version("4.0");

		private static readonly Version TargetFramework30 = new Version("3.0");

		internal const string TargetFramework30CompilerVersion = "v2.0";

		private static readonly Version TargetFramework35 = new Version("3.5");

		internal const string TargetFramework35CompilerVersion = "v3.5";

		private static readonly Version TargetFramework40 = new Version("4.0");

		internal const string TargetFramework40CompilerVersion = "v4.0";

		private const string TargetFramework40CompatiblePrefix = "v4.";

		private const string SerializationItem_TargetFramework = "TargetFramework";

		private static IDictionary<Version, string> KnownSupportedTargetFrameworksAndRelatedCompilerVersions = new Dictionary<Version, string>
		{
			{ TargetFramework30, "v2.0" },
			{ TargetFramework35, "v3.5" },
			{ TargetFramework40, "v4.0" }
		};

		private FrameworkName targetFramework;

		private string compilerVersion;

		public FrameworkName TargetFramework => targetFramework;

		public string CompilerVersion
		{
			get
			{
				if (compilerVersion == null)
				{
					compilerVersion = GetCompilerVersion(targetFramework.Version);
				}
				return compilerVersion;
			}
		}

		public MultiTargetingInfo(string targetFramework)
		{
			this.targetFramework = new FrameworkName(targetFramework);
		}

		protected MultiTargetingInfo(SerializationInfo info, StreamingContext context)
		{
			if (info == null)
			{
				throw new ArgumentNullException("info");
			}
			targetFramework = new FrameworkName(info.GetString("TargetFramework"));
		}

		[SecurityCritical]
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			if (info == null)
			{
				throw new ArgumentNullException("info");
			}
			info.AddValue("TargetFramework", targetFramework.FullName, typeof(string));
		}

		private static string GetCompilerVersion(Version targetFrameworkVersion)
		{
			Version key = ((targetFrameworkVersion.Major != 4) ? new Version(targetFrameworkVersion.Major, targetFrameworkVersion.Minor) : TargetFramework40);
			if (!KnownSupportedTargetFrameworksAndRelatedCompilerVersions.TryGetValue(key, out var value))
			{
				return string.Empty;
			}
			return value;
		}
	}
	[Serializable]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowCompilerParameters : CompilerParameters
	{
		internal const string NoCodeSwitch = "/nocode";

		internal const string CheckTypesSwitch = "/checktypes";

		private bool generateCCU;

		private string languageToUse = "CSharp";

		private IList<CodeCompileUnit> userCodeCCUs;

		private StringCollection libraryPaths;

		private Assembly localAssembly;

		private bool compileWithNoCode;

		private bool checkTypes;

		private string compilerOptions;

		[OptionalField(VersionAdded = 2)]
		private MultiTargetingInfo mtInfo;

		public new string CompilerOptions
		{
			get
			{
				return compilerOptions;
			}
			set
			{
				compilerOptions = value;
				base.CompilerOptions = XomlCompilerHelper.ProcessCompilerOptions(value, out compileWithNoCode, out checkTypes);
			}
		}

		public bool GenerateCodeCompileUnitOnly
		{
			get
			{
				return generateCCU;
			}
			set
			{
				generateCCU = value;
			}
		}

		public string LanguageToUse
		{
			get
			{
				return languageToUse;
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					throw new ArgumentNullException("value");
				}
				if (string.Compare(value, SupportedLanguages.CSharp.ToString(), StringComparison.OrdinalIgnoreCase) != 0 && string.Compare(value, SupportedLanguages.VB.ToString(), StringComparison.OrdinalIgnoreCase) != 0)
				{
					throw new NotSupportedException(SR.GetString("Error_LanguageNeedsToBeVBCSharp", value));
				}
				languageToUse = value;
			}
		}

		public StringCollection LibraryPaths
		{
			get
			{
				if (libraryPaths == null)
				{
					libraryPaths = new StringCollection();
				}
				return libraryPaths;
			}
		}

		public IList<CodeCompileUnit> UserCodeCompileUnits
		{
			get
			{
				if (userCodeCCUs == null)
				{
					userCodeCCUs = new List<CodeCompileUnit>();
				}
				return userCodeCCUs;
			}
		}

		internal Assembly LocalAssembly
		{
			get
			{
				return localAssembly;
			}
			set
			{
				localAssembly = value;
			}
		}

		internal bool CompileWithNoCode => compileWithNoCode;

		internal bool CheckTypes => checkTypes;

		internal string CompilerVersion
		{
			get
			{
				if (mtInfo == null)
				{
					return string.Empty;
				}
				return mtInfo.CompilerVersion;
			}
		}

		internal MultiTargetingInfo MultiTargetingInformation
		{
			get
			{
				return mtInfo;
			}
			set
			{
				mtInfo = value;
			}
		}

		public WorkflowCompilerParameters()
		{
		}

		public WorkflowCompilerParameters(string[] assemblyNames)
			: base(assemblyNames)
		{
		}

		public WorkflowCompilerParameters(string[] assemblyNames, string outputName)
			: base(assemblyNames, outputName)
		{
		}

		public WorkflowCompilerParameters(string[] assemblyNames, string outputName, bool includeDebugInformation)
			: base(assemblyNames, outputName, includeDebugInformation)
		{
		}

		public WorkflowCompilerParameters(WorkflowCompilerParameters parameters)
			: this(parameters, null)
		{
		}

		internal WorkflowCompilerParameters(WorkflowCompilerParameters parameters, string[] newReferencedAssemblies)
			: this()
		{
			if (parameters == null)
			{
				throw new ArgumentNullException("parameters");
			}
			CompilerOptions = parameters.CompilerOptions;
			StringEnumerator enumerator = parameters.EmbeddedResources.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					string current = enumerator.Current;
					base.EmbeddedResources.Add(current);
				}
			}
			finally
			{
				if (enumerator is IDisposable disposable)
				{
					disposable.Dispose();
				}
			}
			base.GenerateExecutable = parameters.GenerateExecutable;
			base.GenerateInMemory = parameters.GenerateInMemory;
			base.IncludeDebugInformation = parameters.IncludeDebugInformation;
			StringEnumerator enumerator2 = parameters.LinkedResources.GetEnumerator();
			try
			{
				while (enumerator2.MoveNext())
				{
					string current2 = enumerator2.Current;
					base.LinkedResources.Add(current2);
				}
			}
			finally
			{
				if (enumerator2 is IDisposable disposable2)
				{
					disposable2.Dispose();
				}
			}
			base.MainClass = parameters.MainClass;
			base.OutputAssembly = parameters.OutputAssembly;
			if (newReferencedAssemblies != null)
			{
				base.ReferencedAssemblies.AddRange(newReferencedAssemblies);
			}
			else
			{
				StringEnumerator enumerator3 = parameters.ReferencedAssemblies.GetEnumerator();
				try
				{
					while (enumerator3.MoveNext())
					{
						string current3 = enumerator3.Current;
						base.ReferencedAssemblies.Add(current3);
					}
				}
				finally
				{
					if (enumerator3 is IDisposable disposable3)
					{
						disposable3.Dispose();
					}
				}
			}
			base.TreatWarningsAsErrors = parameters.TreatWarningsAsErrors;
			base.UserToken = parameters.UserToken;
			base.WarningLevel = parameters.WarningLevel;
			base.Win32Resource = parameters.Win32Resource;
			generateCCU = parameters.generateCCU;
			languageToUse = parameters.languageToUse;
			if (parameters.libraryPaths != null)
			{
				libraryPaths = new StringCollection();
				StringEnumerator enumerator4 = parameters.libraryPaths.GetEnumerator();
				try
				{
					while (enumerator4.MoveNext())
					{
						string current4 = enumerator4.Current;
						libraryPaths.Add(current4);
					}
				}
				finally
				{
					if (enumerator4 is IDisposable disposable4)
					{
						disposable4.Dispose();
					}
				}
			}
			if (parameters.userCodeCCUs != null)
			{
				userCodeCCUs = new List<CodeCompileUnit>(parameters.userCodeCCUs);
			}
			localAssembly = parameters.localAssembly;
		}

		internal static string ExtractRootNamespace(WorkflowCompilerParameters parameters)
		{
			string result = string.Empty;
			if (parameters.CompilerOptions != null && CompilerHelpers.GetSupportedLanguage(parameters.LanguageToUse) == SupportedLanguages.VB)
			{
				Regex regex = new Regex("\\s*[/-]rootnamespace[:=]\\s*(?<RootNamespace>[^\\s]*)");
				Match match = regex.Match(parameters.CompilerOptions);
				if (match.Success)
				{
					result = match.Groups["RootNamespace"].Value;
				}
			}
			return result;
		}
	}
	[Serializable]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowCompilerResults : CompilerResults
	{
		private CodeCompileUnit compiledCCU;

		public CodeCompileUnit CompiledUnit
		{
			get
			{
				return compiledCCU;
			}
			internal set
			{
				compiledCCU = value;
			}
		}

		internal WorkflowCompilerResults(TempFileCollection tempFiles)
			: base(tempFiles)
		{
		}

		internal void AddCompilerErrorsFromCompilerResults(CompilerResults results)
		{
			foreach (CompilerError error in results.Errors)
			{
				base.Errors.Add(new WorkflowCompilerError(error));
			}
			StringEnumerator enumerator2 = results.Output.GetEnumerator();
			try
			{
				while (enumerator2.MoveNext())
				{
					string current = enumerator2.Current;
					base.Output.Add(current);
				}
			}
			finally
			{
				if (enumerator2 is IDisposable disposable)
				{
					disposable.Dispose();
				}
			}
		}
	}
	[ComImport]
	[Guid("AEA0CDAE-ADB5-46c6-A5ED-DBD516B3E0C1")]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[ComVisible(false)]
	internal interface IWorkflowCompilerError
	{
		string Document { get; }

		bool IsWarning { get; }

		string Text { get; }

		string ErrorNumber { get; }

		int LineNumber { get; }

		int ColumnNumber { get; }
	}
	[ComImport]
	[Guid("A5367E37-D7AF-4372-8079-D1D6726AEDC8")]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[ComVisible(false)]
	internal interface IWorkflowCompilerErrorLogger
	{
		void LogError(IWorkflowCompilerError error);

		void LogMessage(string message);
	}
	[Serializable]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowCompilerError : CompilerError, IWorkflowCompilerError
	{
		private Hashtable userData;

		private bool incrementLineAndColumn;

		private string propertyName;

		public string PropertyName
		{
			get
			{
				return propertyName;
			}
			set
			{
				propertyName = value;
			}
		}

		public IDictionary UserData
		{
			get
			{
				if (userData == null)
				{
					userData = new Hashtable();
				}
				return userData;
			}
		}

		string IWorkflowCompilerError.Document => base.FileName;

		bool IWorkflowCompilerError.IsWarning => base.IsWarning;

		string IWorkflowCompilerError.Text => base.ErrorText;

		string IWorkflowCompilerError.ErrorNumber => base.ErrorNumber;

		int IWorkflowCompilerError.LineNumber => base.Line;

		int IWorkflowCompilerError.ColumnNumber => base.Column;

		public WorkflowCompilerError()
		{
		}

		public WorkflowCompilerError(string fileName, int line, int column, string errorNumber, string errorText)
			: base(fileName, line, column, errorNumber, errorText)
		{
		}

		public WorkflowCompilerError(string fileName, WorkflowMarkupSerializationException exception)
		{
			if (exception == null)
			{
				throw new ArgumentNullException("exception");
			}
			base.FileName = fileName;
			base.Line = exception.LineNumber - 1;
			base.Column = exception.LinePosition - 1;
			base.ErrorText = exception.Message;
			base.ErrorNumber = 347.ToString(CultureInfo.InvariantCulture);
			incrementLineAndColumn = true;
		}

		internal WorkflowCompilerError(CompilerError error)
		{
			if (error == null)
			{
				throw new ArgumentNullException("error");
			}
			base.Column = error.Column - 1;
			base.ErrorNumber = error.ErrorNumber;
			base.ErrorText = error.ErrorText;
			base.FileName = error.FileName;
			base.IsWarning = error.IsWarning;
			base.Line = error.Line - 1;
			incrementLineAndColumn = true;
		}

		public override string ToString()
		{
			if (base.FileName.Length > 0)
			{
				if (base.Line <= 0 || base.Column <= 0)
				{
					return string.Format(CultureInfo.CurrentCulture, "{0} : {1} {2}: {3}", base.FileName, base.IsWarning ? "warning" : "error", base.ErrorNumber, base.ErrorText);
				}
				return string.Format(CultureInfo.CurrentCulture, "{0}({1},{2}) : {3} {4}: {5}", base.FileName, incrementLineAndColumn ? (base.Line + 1) : base.Line, incrementLineAndColumn ? (base.Column + 1) : base.Column, base.IsWarning ? "warning" : "error", base.ErrorNumber, base.ErrorText);
			}
			return string.Format(CultureInfo.CurrentCulture, "{0} {1}: {2}", new object[3]
			{
				base.IsWarning ? "warning" : "error",
				base.ErrorNumber,
				base.ErrorText
			});
		}
	}
	internal sealed class PDBReader : IDisposable
	{
		private const string IMetaDataImportGuid = "7DAC8207-D3AE-4c75-9B67-92801A497D44";

		private ISymUnmanagedReader symReader;

		public PDBReader(string assemblyPath)
		{
			object unknown = null;
			IMetaDataDispenser metaDataDispenser = null;
			try
			{
				Guid riid = new Guid("7DAC8207-D3AE-4c75-9B67-92801A497D44");
				metaDataDispenser = (IMetaDataDispenser)new MetaDataDispenser();
				metaDataDispenser.OpenScope(assemblyPath, 0u, ref riid, out unknown);
				symReader = (ISymUnmanagedReader)new CorSymReader_SxS();
				symReader.Initialize(unknown, assemblyPath, null, null);
			}
			finally
			{
				if (unknown != null)
				{
					Marshal.ReleaseComObject(unknown);
				}
				if (metaDataDispenser != null)
				{
					Marshal.ReleaseComObject(metaDataDispenser);
				}
			}
		}

		~PDBReader()
		{
			Dispose();
		}

		void IDisposable.Dispose()
		{
			Dispose();
			GC.SuppressFinalize(this);
		}

		private void Dispose()
		{
			if (symReader != null)
			{
				Marshal.ReleaseComObject(symReader);
				symReader = null;
			}
		}

		public void GetSourceLocationForOffset(uint methodDef, uint offset, out string fileLocation, out uint line, out uint column)
		{
			fileLocation = null;
			line = 0u;
			column = 0u;
			ISymUnmanagedMethod symUnmanagedMethod = null;
			ISymUnmanagedDocument[] array = null;
			uint actualPointsCount = 0u;
			try
			{
				symUnmanagedMethod = symReader.GetMethod(methodDef);
				actualPointsCount = symUnmanagedMethod.GetSequencePointCount();
				array = new ISymUnmanagedDocument[actualPointsCount];
				uint[] array2 = new uint[actualPointsCount];
				uint[] array3 = new uint[actualPointsCount];
				uint[] array4 = new uint[actualPointsCount];
				uint[] endLines = new uint[actualPointsCount];
				uint[] endColumns = new uint[actualPointsCount];
				symUnmanagedMethod.GetSequencePoints(actualPointsCount, out actualPointsCount, array2, array, array3, array4, endLines, endColumns);
				uint num;
				for (num = 1u; num < actualPointsCount && array2[num] <= offset; num++)
				{
				}
				num--;
				while (array4[num] == 0 && num != 0)
				{
					num--;
				}
				for (; num < actualPointsCount && array4[num] == 0; num++)
				{
				}
				if (num >= actualPointsCount || array4[num] == 0)
				{
					num = 0u;
				}
				line = array3[num];
				column = array4[num];
				ISymUnmanagedDocument symUnmanagedDocument = array[num];
				uint actualUrlLength = 261u;
				string text = new string('\0', (int)actualUrlLength);
				symUnmanagedDocument.GetURL(actualUrlLength, out actualUrlLength, text);
				fileLocation = text.Substring(0, (int)(actualUrlLength - 1));
			}
			finally
			{
				for (uint num2 = 0u; num2 < actualPointsCount; num2++)
				{
					if (array[num2] != null)
					{
						Marshal.ReleaseComObject(array[num2]);
					}
				}
				if (symUnmanagedMethod != null)
				{
					Marshal.ReleaseComObject(symUnmanagedMethod);
				}
			}
		}
	}
	[ComImport]
	[Guid("0A3976C5-4529-4ef8-B0B0-42EED37082CD")]
	internal class CorSymReader_SxS
	{
	}
	[ComImport]
	[CoClass(typeof(CorSymReader_SxS))]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("B4CE6286-2A6B-3712-A3B7-1EE1DAD467B5")]
	internal interface ISymUnmanagedReader
	{
		void GetDocument();

		void GetDocuments();

		void GetUserEntryPoint();

		ISymUnmanagedMethod GetMethod(uint methodDef);

		void GetMethodByVersion();

		void GetVariables();

		void GetGlobalVariables();

		void GetMethodFromDocumentPosition();

		void GetSymAttribute();

		void GetNamespaces();

		void Initialize([In][MarshalAs(UnmanagedType.IUnknown)] object metaDataImport, [In][MarshalAs(UnmanagedType.LPWStr)] string pdbPath, [In][MarshalAs(UnmanagedType.LPWStr)] string searchPath, [In][MarshalAs(UnmanagedType.IUnknown)] object stream);

		void UpdateSymbolStore();

		void ReplaceSymbolStore();

		void GetSymbolStoreFileName();

		void GetMethodsFromDocumentPosition();

		void GetDocumentVersion();

		void GetMethodVersion();
	}
	[ComImport]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("B62B923C-B500-3158-A543-24F307A8B7E1")]
	internal interface ISymUnmanagedMethod
	{
		uint GetToken();

		uint GetSequencePointCount();

		object GetRootScope();

		object GetScopeFromOffset(uint offset);

		uint GetOffset([In][MarshalAs(UnmanagedType.IUnknown)] ISymUnmanagedDocument document, uint line, uint column);

		void GetRanges([In][MarshalAs(UnmanagedType.IUnknown)] ISymUnmanagedDocument document, uint line, uint column, uint rangeCount, out uint actualRangeCount, [In][Out][MarshalAs(UnmanagedType.LPArray)] uint[] ranges);

		void GetParameters();

		void GetNamespace();

		void GetSourceStartEnd([In][Out][MarshalAs(UnmanagedType.LPArray)] ISymUnmanagedDocument[] documents, [In][Out][MarshalAs(UnmanagedType.LPArray)] uint[] lines, [In][Out][MarshalAs(UnmanagedType.LPArray)] uint[] columns, [MarshalAs(UnmanagedType.Bool)] out bool positionsDefined);

		void GetSequencePoints(uint pointsCount, out uint actualPointsCount, [In][Out][MarshalAs(UnmanagedType.LPArray)] uint[] offsets, [In][Out][MarshalAs(UnmanagedType.LPArray)] ISymUnmanagedDocument[] documents, [In][Out][MarshalAs(UnmanagedType.LPArray)] uint[] lines, [In][Out][MarshalAs(UnmanagedType.LPArray)] uint[] columns, [In][Out][MarshalAs(UnmanagedType.LPArray)] uint[] endLines, [In][Out][MarshalAs(UnmanagedType.LPArray)] uint[] endColumns);
	}
	[ComImport]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("40DE4037-7C81-3E1E-B022-AE1ABFF2CA08")]
	internal interface ISymUnmanagedDocument
	{
		void GetURL(uint urlLength, out uint actualUrlLength, [In][Out][MarshalAs(UnmanagedType.LPWStr)] string url);

		void GetDocumentType();

		void GetLanguage();

		void GetLanguageVendor();

		void GetCheckSumAlgorithmId();

		void GetCheckSum();

		void FindClosestLine();

		void HasEmbeddedSource();

		void GetSourceLength();

		void GetSourceRange();
	}
	[ComImport]
	[Guid("E5CB7A31-7512-11d2-89CE-0080C792E5D8")]
	internal class MetaDataDispenser
	{
	}
	[ComImport]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[CoClass(typeof(MetaDataDispenser))]
	[Guid("809C652E-7396-11d2-9771-00A0C9B4D50C")]
	internal interface IMetaDataDispenser
	{
		void DefineScope();

		void OpenScope([In][MarshalAs(UnmanagedType.LPWStr)] string scope, uint flags, [In] ref Guid riid, [MarshalAs(UnmanagedType.IUnknown)] out object unknown);

		void OpenScopeOnMemory();
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityCodeGenerator
	{
		public virtual void GenerateCode(CodeGenerationManager manager, object obj)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (!(obj is Activity activity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(Activity).FullName), "obj");
			}
			manager.Context.Push(activity);
			Walker walker = new Walker();
			walker.FoundProperty += delegate(Walker w, WalkerEventArgs args)
			{
				if (args.CurrentValue is ActivityBind activityBind)
				{
					if (args.CurrentProperty != null)
					{
						manager.Context.Push(args.CurrentProperty);
					}
					manager.Context.Push(args.CurrentPropertyOwner);
					ActivityCodeGenerator[] codeGenerators = manager.GetCodeGenerators(activityBind.GetType());
					foreach (ActivityCodeGenerator activityCodeGenerator in codeGenerators)
					{
						activityCodeGenerator.GenerateCode(manager, args.CurrentValue);
					}
					manager.Context.Pop();
					if (args.CurrentProperty != null)
					{
						manager.Context.Pop();
					}
				}
			};
			walker.WalkProperties(activity, obj);
			manager.Context.Pop();
		}

		protected CodeTypeDeclaration GetCodeTypeDeclaration(CodeGenerationManager manager, string fullClassName)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (fullClassName == null)
			{
				throw new ArgumentNullException("fullClassName");
			}
			Helpers.GetNamespaceAndClassName(fullClassName, out var namespaceName, out var className);
			if (!(manager.Context[typeof(CodeNamespaceCollection)] is CodeNamespaceCollection namespaces))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(CodeNamespaceCollection).Name));
			}
			CodeNamespace codeNamespace = null;
			return Helpers.GetCodeNamespaceAndClass(namespaces, namespaceName, className, out codeNamespace);
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class CodeGenerationManager : IServiceProvider
	{
		private Hashtable hashOfGenerators = new Hashtable();

		private IServiceProvider serviceProvider;

		private ContextStack context;

		public ContextStack Context
		{
			get
			{
				if (context == null)
				{
					context = new ContextStack();
				}
				return context;
			}
		}

		public CodeGenerationManager(IServiceProvider serviceProvider)
		{
			this.serviceProvider = serviceProvider;
		}

		public object GetService(Type serviceType)
		{
			if (serviceProvider == null)
			{
				return null;
			}
			return serviceProvider.GetService(serviceType);
		}

		public ActivityCodeGenerator[] GetCodeGenerators(Type type)
		{
			if (type == null)
			{
				throw new ArgumentNullException("type");
			}
			if (hashOfGenerators.Contains(type))
			{
				return ((List<ActivityCodeGenerator>)hashOfGenerators[type]).ToArray();
			}
			List<ActivityCodeGenerator> list = new List<ActivityCodeGenerator>();
			object[] array = ComponentDispenser.CreateComponents(type, typeof(ActivityCodeGeneratorAttribute));
			for (int i = 0; i < array.Length; i++)
			{
				ActivityCodeGenerator item = (ActivityCodeGenerator)array[i];
				list.Add(item);
			}
			hashOfGenerators[type] = list;
			return list.ToArray();
		}
	}
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = false, Inherited = true)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ActivityCodeGeneratorAttribute : Attribute
	{
		private string codeGeneratorTypeName;

		public string CodeGeneratorTypeName => codeGeneratorTypeName;

		public ActivityCodeGeneratorAttribute(Type codeGeneratorType)
		{
			if (codeGeneratorType == null)
			{
				throw new ArgumentNullException("codeGeneratorType");
			}
			if (!typeof(ActivityCodeGenerator).IsAssignableFrom(codeGeneratorType))
			{
				throw new ArgumentException(SR.GetString("Error_NotCodeGeneratorType"), "codeGeneratorType");
			}
			if (codeGeneratorType.GetConstructor(new Type[0]) == null)
			{
				throw new ArgumentException(SR.GetString("Error_MissingDefaultConstructor", codeGeneratorType.FullName), "codeGeneratorType");
			}
			codeGeneratorTypeName = codeGeneratorType.AssemblyQualifiedName;
		}

		public ActivityCodeGeneratorAttribute(string codeGeneratorTypeName)
		{
			if (codeGeneratorTypeName == null)
			{
				throw new ArgumentNullException("codeGeneratorTypeName");
			}
			this.codeGeneratorTypeName = codeGeneratorTypeName;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class CompositeActivityCodeGenerator : ActivityCodeGenerator
	{
		public override void GenerateCode(CodeGenerationManager manager, object obj)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (!(obj is CompositeActivity compositeActivity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(CompositeActivity).FullName), "obj");
			}
			base.GenerateCode(manager, obj);
			foreach (Activity allEnabledActivity in Helpers.GetAllEnabledActivities(compositeActivity))
			{
				ActivityCodeGenerator[] codeGenerators = manager.GetCodeGenerators(allEnabledActivity.GetType());
				foreach (ActivityCodeGenerator activityCodeGenerator in codeGenerators)
				{
					activityCodeGenerator.GenerateCode(manager, allEnabledActivity);
				}
			}
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityValidator : DependencyObjectValidator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (!(obj is Activity activity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(Activity).FullName), "obj");
			}
			if (manager.Context == null)
			{
				throw new ArgumentException("manager", SR.GetString("Error_MissingContextProperty"));
			}
			manager.Context.Push(activity);
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			validationErrorCollection.AddRange(base.Validate(manager, obj));
			if (activity.Parent == null)
			{
				validationErrorCollection.AddRange(ValidationHelpers.ValidateUniqueIdentifiers(activity));
				if (!activity.Enabled)
				{
					ValidationError validationError = new ValidationError(SR.GetString("Error_RootIsNotEnabled"), 1576);
					validationError.PropertyName = "Enabled";
					validationErrorCollection.Add(validationError);
				}
			}
			Activity rootActivity = Helpers.GetRootActivity(activity);
			if (activity != rootActivity)
			{
				ValidationError validationError2 = ValidationHelpers.ValidateNameProperty("Name", manager, activity.Name);
				if (validationError2 != null)
				{
					validationErrorCollection.Add(validationError2);
				}
			}
			try
			{
				validationErrorCollection.AddRange(ValidateProperties(manager, obj));
				return validationErrorCollection;
			}
			finally
			{
				manager.Context.Pop();
			}
		}
	}
	[Serializable]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class WorkflowValidationFailedException : Exception
	{
		private ValidationErrorCollection errors;

		public ValidationErrorCollection Errors => errors;

		private WorkflowValidationFailedException(SerializationInfo info, StreamingContext context)
			: base(info, context)
		{
			if (info == null)
			{
				throw new ArgumentNullException("info");
			}
			errors = (ValidationErrorCollection)info.GetValue("errors", typeof(ValidationErrorCollection));
			if (errors == null)
			{
				throw new SerializationException(SR.GetString("Error_SerializationInsufficientState"));
			}
		}

		public WorkflowValidationFailedException()
			: base(SR.GetString("Error_WorkflowLoadValidationFailed"))
		{
		}

		public WorkflowValidationFailedException(string message)
			: base(message)
		{
		}

		public WorkflowValidationFailedException(string message, Exception innerException)
			: base(message, innerException)
		{
		}

		public WorkflowValidationFailedException(string message, ValidationErrorCollection errors)
			: base(message)
		{
			if (errors == null)
			{
				throw new ArgumentNullException("errors");
			}
			this.errors = XomlCompilerHelper.MorphIntoFriendlyValidationErrors(errors);
		}

		public override void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			if (info == null)
			{
				throw new ArgumentNullException("info");
			}
			base.GetObjectData(info, context);
			info.AddValue("errors", errors, typeof(ValidationErrorCollection));
		}
	}
	[Flags]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum AccessTypes
	{
		Read = 1,
		Write = 2,
		ReadWrite = 3
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class BindValidationContext
	{
		private Type targetType;

		private AccessTypes access = AccessTypes.Read;

		public Type TargetType => targetType;

		public AccessTypes Access => access;

		public BindValidationContext(Type targetType)
			: this(targetType, AccessTypes.Read)
		{
		}

		public BindValidationContext(Type targetType, AccessTypes access)
		{
			if (targetType == null)
			{
				throw new ArgumentNullException("targetType");
			}
			this.targetType = targetType;
			this.access = access;
		}
	}
	internal static class BindValidatorHelper
	{
		internal static Type GetActivityType(IServiceProvider serviceProvider, Activity refActivity)
		{
			Type result = null;
			string text = refActivity.GetValue(WorkflowMarkupSerializer.XClassProperty) as string;
			if (refActivity.Site != null && !string.IsNullOrEmpty(text))
			{
				if (serviceProvider.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider && !string.IsNullOrEmpty(text))
				{
					result = typeProvider.GetType(text, throwOnError: false);
				}
			}
			else
			{
				result = refActivity.GetType();
			}
			return result;
		}
	}
	internal sealed class FieldBindValidator : Validator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is FieldBind fieldBind))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(FieldBind).FullName), "obj");
			}
			if (!(manager.Context[typeof(PropertyValidationContext)] is PropertyValidationContext validationContext))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(BindValidationContext).Name));
			}
			if (!(manager.Context[typeof(Activity)] is Activity activity))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(Activity).Name));
			}
			ValidationError validationError = null;
			if (string.IsNullOrEmpty(fieldBind.Name))
			{
				validationError = new ValidationError(SR.GetString("Error_PropertyNotSet", "Name"), 278);
				validationError.PropertyName = GetFullPropertyName(manager) + ".Name";
			}
			else
			{
				BindValidationContext bindValidationContext = manager.Context[typeof(BindValidationContext)] as BindValidationContext;
				if (bindValidationContext == null)
				{
					Type baseType = BindHelpers.GetBaseType(manager, validationContext);
					if (baseType != null)
					{
						AccessTypes accessType = BindHelpers.GetAccessType(manager, validationContext);
						bindValidationContext = new BindValidationContext(baseType, accessType);
					}
				}
				if (bindValidationContext != null)
				{
					Type targetType = bindValidationContext.TargetType;
					if (validationError == null)
					{
						validationErrorCollection.AddRange(ValidateField(manager, activity, fieldBind, new BindValidationContext(targetType, bindValidationContext.Access)));
					}
				}
			}
			if (validationError != null)
			{
				validationErrorCollection.Add(validationError);
			}
			return validationErrorCollection;
		}

		private ValidationErrorCollection ValidateField(ValidationManager manager, Activity activity, FieldBind bind, BindValidationContext validationContext)
		{
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			string name = bind.Name;
			Activity enclosingActivity = Helpers.GetEnclosingActivity(activity);
			Activity activity2 = enclosingActivity;
			if (name.IndexOf('.') != -1 && activity2 != null)
			{
				activity2 = Helpers.GetDataSourceActivity(activity, bind.Name, out name);
			}
			if (activity2 == null)
			{
				ValidationError validationError = new ValidationError(SR.GetString("Error_NoEnclosingContext", activity.Name), 304);
				validationError.PropertyName = GetFullPropertyName(manager) + ".Name";
				validationErrorCollection.Add(validationError);
			}
			else
			{
				ValidationError validationError2 = null;
				Type dataSourceClass = Helpers.GetDataSourceClass(activity2, manager);
				if (dataSourceClass == null)
				{
					validationError2 = new ValidationError(SR.GetString("Error_TypeNotResolvedInFieldName", "Name"), 287);
					validationError2.PropertyName = GetFullPropertyName(manager);
				}
				else
				{
					FieldInfo field = dataSourceClass.GetField(name, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy);
					if (field == null)
					{
						validationError2 = new ValidationError(SR.GetString("Error_FieldNotExists", GetFullPropertyName(manager), name), 288);
						validationError2.PropertyName = GetFullPropertyName(manager);
					}
					else if (field.FieldType == null)
					{
						validationError2 = new ValidationError(SR.GetString("Error_FieldTypeNotResolved", GetFullPropertyName(manager), name), 290);
						validationError2.PropertyName = GetFullPropertyName(manager);
					}
					else
					{
						MemberInfo memberInfo = field;
						if ((bind.Path == null || bind.Path.Length == 0) && validationContext.TargetType != null && !ActivityBindValidator.DoesTargetTypeMatch(validationContext.TargetType, field.FieldType, validationContext.Access))
						{
							validationError2 = new ValidationError(SR.GetString("Error_FieldTypeMismatch", GetFullPropertyName(manager), field.FieldType.FullName, validationContext.TargetType.FullName), 319);
							validationError2.PropertyName = GetFullPropertyName(manager);
						}
						else if (!string.IsNullOrEmpty(bind.Path))
						{
							memberInfo = MemberBind.GetMemberInfo(field.FieldType, bind.Path);
							if (memberInfo == null)
							{
								validationError2 = new ValidationError(SR.GetString("Error_InvalidMemberPath", name, bind.Path), 300);
								validationError2.PropertyName = GetFullPropertyName(manager) + ".Path";
							}
							else
							{
								using ((WorkflowCompilationContext.Current == null) ? WorkflowCompilationContext.CreateScope(manager) : null)
								{
									if (WorkflowCompilationContext.Current.CheckTypes)
									{
										validationError2 = MemberBind.ValidateTypesInPath(field.FieldType, bind.Path);
										if (validationError2 != null)
										{
											validationError2.PropertyName = GetFullPropertyName(manager) + ".Path";
										}
									}
								}
								if (validationError2 == null)
								{
									Type memberType = ((memberInfo is FieldInfo) ? (memberInfo as FieldInfo).FieldType : (memberInfo as PropertyInfo).PropertyType);
									if (!ActivityBindValidator.DoesTargetTypeMatch(validationContext.TargetType, memberType, validationContext.Access))
									{
										validationError2 = new ValidationError(SR.GetString("Error_TargetTypeDataSourcePathMismatch", validationContext.TargetType.FullName), 321);
										validationError2.PropertyName = GetFullPropertyName(manager) + ".Path";
									}
								}
							}
						}
						if (validationError2 == null)
						{
							if (memberInfo is PropertyInfo)
							{
								PropertyInfo propertyInfo = memberInfo as PropertyInfo;
								if (!propertyInfo.CanRead && (validationContext.Access & AccessTypes.Read) != 0)
								{
									validationError2 = new ValidationError(SR.GetString("Error_PropertyNoGetter", propertyInfo.Name, bind.Path), 322);
									validationError2.PropertyName = GetFullPropertyName(manager) + ".Path";
								}
								else if (!propertyInfo.CanWrite && (validationContext.Access & AccessTypes.Write) != 0)
								{
									validationError2 = new ValidationError(SR.GetString("Error_PropertyNoSetter", propertyInfo.Name, bind.Path), 323);
									validationError2.PropertyName = GetFullPropertyName(manager) + ".Path";
								}
							}
							else if (memberInfo is FieldInfo)
							{
								FieldInfo fieldInfo = memberInfo as FieldInfo;
								if ((fieldInfo.Attributes & (FieldAttributes.InitOnly | FieldAttributes.Literal)) != 0 && (validationContext.Access & AccessTypes.Write) != 0)
								{
									validationError2 = new ValidationError(SR.GetString("Error_ReadOnlyField", fieldInfo.Name), 325);
									validationError2.PropertyName = GetFullPropertyName(manager) + ".Path";
								}
							}
						}
					}
				}
				if (validationError2 != null)
				{
					validationErrorCollection.Add(validationError2);
				}
			}
			return validationErrorCollection;
		}
	}
	internal sealed class PropertyBindValidator : Validator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is PropertyBind propertyBind))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(PropertyBind).FullName), "obj");
			}
			if (!(manager.Context[typeof(PropertyValidationContext)] is PropertyValidationContext validationContext))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(BindValidationContext).Name));
			}
			if (!(manager.Context[typeof(Activity)] is Activity activity))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(Activity).Name));
			}
			ValidationError validationError = null;
			if (string.IsNullOrEmpty(propertyBind.Name))
			{
				validationError = new ValidationError(SR.GetString("Error_PropertyNotSet", "Name"), 278);
				validationError.PropertyName = GetFullPropertyName(manager) + ".Name";
			}
			else
			{
				BindValidationContext bindValidationContext = manager.Context[typeof(BindValidationContext)] as BindValidationContext;
				if (bindValidationContext == null)
				{
					Type baseType = BindHelpers.GetBaseType(manager, validationContext);
					if (baseType != null)
					{
						AccessTypes accessType = BindHelpers.GetAccessType(manager, validationContext);
						bindValidationContext = new BindValidationContext(baseType, accessType);
					}
				}
				if (bindValidationContext != null)
				{
					Type targetType = bindValidationContext.TargetType;
					if (validationError == null)
					{
						validationErrorCollection.AddRange(ValidateBindProperty(manager, activity, propertyBind, new BindValidationContext(targetType, bindValidationContext.Access)));
					}
				}
			}
			if (validationError != null)
			{
				validationErrorCollection.Add(validationError);
			}
			return validationErrorCollection;
		}

		private ValidationErrorCollection ValidateBindProperty(ValidationManager manager, Activity activity, PropertyBind bind, BindValidationContext validationContext)
		{
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			string name = bind.Name;
			Activity enclosingActivity = Helpers.GetEnclosingActivity(activity);
			Activity activity2 = enclosingActivity;
			if (name.IndexOf('.') != -1 && activity2 != null)
			{
				activity2 = Helpers.GetDataSourceActivity(activity, bind.Name, out name);
			}
			if (activity2 == null)
			{
				ValidationError validationError = new ValidationError(SR.GetString("Error_NoEnclosingContext", activity.Name), 304);
				validationError.PropertyName = GetFullPropertyName(manager) + ".Name";
				validationErrorCollection.Add(validationError);
			}
			else
			{
				ValidationError validationError2 = null;
				PropertyInfo propertyInfo = null;
				Type type = null;
				if (propertyInfo == null)
				{
					type = BindValidatorHelper.GetActivityType(manager, activity2);
					if (type != null)
					{
						propertyInfo = type.GetProperty(name, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public);
					}
				}
				if (type == null)
				{
					validationError2 = new ValidationError(SR.GetString("Error_TypeNotResolvedInPropertyName", "Name"), 355);
					validationError2.PropertyName = GetFullPropertyName(manager);
				}
				else if (propertyInfo == null)
				{
					validationError2 = new ValidationError(SR.GetString("Error_PropertyNotExists", GetFullPropertyName(manager), name), 356);
					validationError2.PropertyName = GetFullPropertyName(manager);
				}
				else if (!propertyInfo.CanRead)
				{
					validationError2 = new ValidationError(SR.GetString("Error_PropertyReferenceNoGetter", GetFullPropertyName(manager), name), 360);
					validationError2.PropertyName = GetFullPropertyName(manager);
				}
				else if (propertyInfo.GetGetMethod() == null)
				{
					validationError2 = new ValidationError(SR.GetString("Error_PropertyReferenceGetterNoAccess", GetFullPropertyName(manager), name), 1546);
					validationError2.PropertyName = GetFullPropertyName(manager);
				}
				else if (activity2 != enclosingActivity && !propertyInfo.GetGetMethod().IsAssembly && !propertyInfo.GetGetMethod().IsPublic)
				{
					validationError2 = new ValidationError(SR.GetString("Error_PropertyNotAccessible", GetFullPropertyName(manager), name), 357);
					validationError2.PropertyName = GetFullPropertyName(manager);
				}
				else if (propertyInfo.PropertyType == null)
				{
					validationError2 = new ValidationError(SR.GetString("Error_PropertyTypeNotResolved", GetFullPropertyName(manager), name), 358);
					validationError2.PropertyName = GetFullPropertyName(manager);
				}
				else
				{
					MemberInfo memberInfo = propertyInfo;
					if ((bind.Path == null || bind.Path.Length == 0) && validationContext.TargetType != null && !ActivityBindValidator.DoesTargetTypeMatch(validationContext.TargetType, propertyInfo.PropertyType, validationContext.Access))
					{
						validationError2 = new ValidationError(SR.GetString("Error_PropertyTypeMismatch", GetFullPropertyName(manager), propertyInfo.PropertyType.FullName, validationContext.TargetType.FullName), 359);
						validationError2.PropertyName = GetFullPropertyName(manager);
					}
					else if (!string.IsNullOrEmpty(bind.Path))
					{
						memberInfo = MemberBind.GetMemberInfo(propertyInfo.PropertyType, bind.Path);
						if (memberInfo == null)
						{
							validationError2 = new ValidationError(SR.GetString("Error_InvalidMemberPath", name, bind.Path), 300);
							validationError2.PropertyName = GetFullPropertyName(manager) + ".Path";
						}
						else
						{
							using ((WorkflowCompilationContext.Current == null) ? WorkflowCompilationContext.CreateScope(manager) : null)
							{
								if (WorkflowCompilationContext.Current.CheckTypes)
								{
									validationError2 = MemberBind.ValidateTypesInPath(propertyInfo.PropertyType, bind.Path);
									if (validationError2 != null)
									{
										validationError2.PropertyName = GetFullPropertyName(manager) + ".Path";
									}
								}
							}
							if (validationError2 == null)
							{
								Type memberType = ((memberInfo is FieldInfo) ? (memberInfo as FieldInfo).FieldType : (memberInfo as PropertyInfo).PropertyType);
								if (!ActivityBindValidator.DoesTargetTypeMatch(validationContext.TargetType, memberType, validationContext.Access))
								{
									validationError2 = new ValidationError(SR.GetString("Error_TargetTypeDataSourcePathMismatch", validationContext.TargetType.FullName), 321);
									validationError2.PropertyName = GetFullPropertyName(manager) + ".Path";
								}
							}
						}
					}
					if (validationError2 == null)
					{
						if (memberInfo is PropertyInfo)
						{
							PropertyInfo propertyInfo2 = memberInfo as PropertyInfo;
							if (!propertyInfo2.CanRead && (validationContext.Access & AccessTypes.Read) != 0)
							{
								validationError2 = new ValidationError(SR.GetString("Error_PropertyNoGetter", propertyInfo2.Name, bind.Path), 322);
								validationError2.PropertyName = GetFullPropertyName(manager) + ".Path";
							}
							else if (!propertyInfo2.CanWrite && (validationContext.Access & AccessTypes.Write) != 0)
							{
								validationError2 = new ValidationError(SR.GetString("Error_PropertyNoSetter", propertyInfo2.Name, bind.Path), 323);
								validationError2.PropertyName = GetFullPropertyName(manager) + ".Path";
							}
						}
						else if (memberInfo is FieldInfo)
						{
							FieldInfo fieldInfo = memberInfo as FieldInfo;
							if ((fieldInfo.Attributes & (FieldAttributes.InitOnly | FieldAttributes.Literal)) != 0 && (validationContext.Access & AccessTypes.Write) != 0)
							{
								validationError2 = new ValidationError(SR.GetString("Error_ReadOnlyField", fieldInfo.Name), 325);
								validationError2.PropertyName = GetFullPropertyName(manager) + ".Path";
							}
						}
					}
				}
				if (validationError2 != null)
				{
					validationErrorCollection.Add(validationError2);
				}
			}
			return validationErrorCollection;
		}
	}
	internal sealed class MethodBindValidator : Validator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is MethodBind methodBind))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(MethodBind).FullName), "obj");
			}
			if (!(manager.Context[typeof(PropertyValidationContext)] is PropertyValidationContext validationContext))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(BindValidationContext).Name));
			}
			if (!(manager.Context[typeof(Activity)] is Activity activity))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(Activity).Name));
			}
			ValidationError validationError = null;
			if (string.IsNullOrEmpty(methodBind.Name))
			{
				validationError = new ValidationError(SR.GetString("Error_PropertyNotSet", "Name"), 278);
				validationError.PropertyName = GetFullPropertyName(manager) + ".Name";
			}
			else
			{
				BindValidationContext bindValidationContext = manager.Context[typeof(BindValidationContext)] as BindValidationContext;
				if (bindValidationContext == null)
				{
					Type baseType = BindHelpers.GetBaseType(manager, validationContext);
					if (baseType != null)
					{
						AccessTypes accessType = BindHelpers.GetAccessType(manager, validationContext);
						bindValidationContext = new BindValidationContext(baseType, accessType);
					}
				}
				if (bindValidationContext != null)
				{
					Type targetType = bindValidationContext.TargetType;
					if (validationError == null)
					{
						validationErrorCollection.AddRange(ValidateMethod(manager, activity, methodBind, new BindValidationContext(targetType, bindValidationContext.Access)));
					}
				}
			}
			if (validationError != null)
			{
				validationErrorCollection.Add(validationError);
			}
			return validationErrorCollection;
		}

		private ValidationErrorCollection ValidateMethod(ValidationManager manager, Activity activity, MethodBind bind, BindValidationContext validationBindContext)
		{
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			if ((validationBindContext.Access & AccessTypes.Write) != 0)
			{
				ValidationError validationError = new ValidationError(SR.GetString("Error_HandlerReadOnly"), 307);
				validationError.PropertyName = GetFullPropertyName(manager);
				validationErrorCollection.Add(validationError);
			}
			else if (!TypeProvider.IsAssignable(typeof(Delegate), validationBindContext.TargetType))
			{
				ValidationError validationError2 = new ValidationError(SR.GetString("Error_TypeNotDelegate", validationBindContext.TargetType.FullName), 308);
				validationError2.PropertyName = GetFullPropertyName(manager);
				validationErrorCollection.Add(validationError2);
			}
			else
			{
				string name = bind.Name;
				Activity enclosingActivity = Helpers.GetEnclosingActivity(activity);
				Activity activity2 = enclosingActivity;
				if (name.IndexOf('.') != -1 && activity2 != null)
				{
					activity2 = Helpers.GetDataSourceActivity(activity, bind.Name, out name);
				}
				if (activity2 == null)
				{
					ValidationError validationError3 = new ValidationError(SR.GetString("Error_NoEnclosingContext", activity.Name), 304);
					validationError3.PropertyName = GetFullPropertyName(manager) + ".Name";
					validationErrorCollection.Add(validationError3);
				}
				else
				{
					string text = string.Empty;
					int errorNumber = -1;
					Type dataSourceClass = Helpers.GetDataSourceClass(activity2, manager);
					if (dataSourceClass == null)
					{
						text = SR.GetString("Error_TypeNotResolvedInMethodName", GetFullPropertyName(manager) + ".Name");
						errorNumber = 309;
					}
					else
					{
						try
						{
							ValidationHelpers.ValidateIdentifier(manager, name);
						}
						catch (Exception ex)
						{
							validationErrorCollection.Add(new ValidationError(ex.Message, 281));
						}
						MethodInfo method = validationBindContext.TargetType.GetMethod("Invoke");
						if (method == null)
						{
							throw new Exception(SR.GetString("Error_DelegateNoInvoke", validationBindContext.TargetType.FullName));
						}
						List<Type> list = new List<Type>();
						ParameterInfo[] parameters = method.GetParameters();
						foreach (ParameterInfo parameterInfo in parameters)
						{
							list.Add(parameterInfo.ParameterType);
						}
						MethodInfo methodExactMatch = Helpers.GetMethodExactMatch(dataSourceClass, name, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy, null, list.ToArray(), null);
						if (methodExactMatch == null)
						{
							if (dataSourceClass.GetMethod(name, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy) != null)
							{
								text = SR.GetString("Error_MethodSignatureMismatch", GetFullPropertyName(manager) + ".Name");
								errorNumber = 310;
							}
							else
							{
								text = SR.GetString("Error_MethodNotExists", GetFullPropertyName(manager) + ".Name", bind.Name);
								errorNumber = 311;
							}
						}
						else if (!method.ReturnType.Equals(methodExactMatch.ReturnType))
						{
							text = SR.GetString("Error_MethodReturnTypeMismatch", GetFullPropertyName(manager), method.ReturnType.FullName);
							errorNumber = 313;
						}
					}
					if (text.Length > 0)
					{
						ValidationError validationError4 = new ValidationError(text, errorNumber);
						validationError4.PropertyName = GetFullPropertyName(manager) + ".Path";
						validationErrorCollection.Add(validationError4);
					}
				}
			}
			return validationErrorCollection;
		}
	}
	internal sealed class ActivityBindValidator : Validator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is ActivityBind activityBind))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(ActivityBind).FullName), "obj");
			}
			if (!(manager.Context[typeof(Activity)] is Activity activity))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(Activity).Name));
			}
			if (!(manager.Context[typeof(PropertyValidationContext)] is PropertyValidationContext validationContext))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(BindValidationContext).Name));
			}
			ValidationError validationError = null;
			if (string.IsNullOrEmpty(activityBind.Name))
			{
				validationError = new ValidationError(SR.GetString("Error_IDNotSetForActivitySource"), 1555);
				validationError.PropertyName = GetFullPropertyName(manager) + ".Name";
				validationErrorCollection.Add(validationError);
			}
			else
			{
				Activity activity2 = Helpers.ParseActivityForBind(activity, activityBind.Name);
				if (activity2 == null)
				{
					validationError = ((!activityBind.Name.StartsWith("/")) ? new ValidationError(SR.GetString("Error_CannotResolveActivity", activityBind.Name), 297) : new ValidationError(SR.GetString("Error_CannotResolveRelativeActivity", activityBind.Name), 296));
					validationError.PropertyName = GetFullPropertyName(manager) + ".Name";
					validationErrorCollection.Add(validationError);
				}
				if (string.IsNullOrEmpty(activityBind.Path))
				{
					validationError = new ValidationError(SR.GetString("Error_PathNotSetForActivitySource"), 299);
					validationError.PropertyName = GetFullPropertyName(manager) + ".Path";
					validationErrorCollection.Add(validationError);
				}
				if (activity2 != null && validationErrorCollection.Count == 0)
				{
					string text = activityBind.Path;
					string text2 = string.Empty;
					int num = text.IndexOfAny(new char[3] { '.', '/', '[' });
					if (num != -1)
					{
						text2 = text.Substring(num);
						text2 = (text2.StartsWith(".") ? text2.Substring(1) : text2);
						text = text.Substring(0, num);
					}
					Type baseType = BindHelpers.GetBaseType(manager, validationContext);
					MemberInfo memberInfo = null;
					Type type = null;
					if (!string.IsNullOrEmpty(text))
					{
						type = BindValidatorHelper.GetActivityType(manager, activity2);
						if (type != null)
						{
							memberInfo = MemberBind.GetMemberInfo(type, text);
							if (memberInfo == null && text2.StartsWith("[", StringComparison.Ordinal))
							{
								string text3 = activityBind.Path.Substring(num);
								int num2 = text3.IndexOf(']');
								if (num2 != -1)
								{
									string text4 = text3.Substring(0, num2 + 1);
									text2 = ((num2 + 1 < text3.Length) ? text3.Substring(num2 + 1) : string.Empty);
									text2 = (text2.StartsWith(".") ? text2.Substring(1) : text2);
									text3 = text4;
								}
								text += text3;
								memberInfo = MemberBind.GetMemberInfo(type, text);
							}
						}
					}
					Validator validator = null;
					object obj2 = null;
					if (memberInfo != null)
					{
						string text5 = ((!string.IsNullOrEmpty(activity2.QualifiedName)) ? activity2.QualifiedName : activityBind.Name);
						if (memberInfo is FieldInfo)
						{
							obj2 = new FieldBind(text5 + "." + text, text2);
							validator = new FieldBindValidator();
						}
						else if (memberInfo is MethodInfo)
						{
							if (typeof(Delegate).IsAssignableFrom(baseType))
							{
								obj2 = new MethodBind(text5 + "." + text);
								validator = new MethodBindValidator();
							}
							else
							{
								validationError = new ValidationError(SR.GetString("Error_InvalidMemberType", text, GetFullPropertyName(manager)), 1577);
								validationError.PropertyName = GetFullPropertyName(manager);
								validationErrorCollection.Add(validationError);
							}
						}
						else if (memberInfo is PropertyInfo)
						{
							if (activity2 == activity)
							{
								obj2 = new PropertyBind(text5 + "." + text, text2);
								validator = new PropertyBindValidator();
							}
							else
							{
								obj2 = activityBind;
								validator = this;
							}
						}
						else if (memberInfo is EventInfo)
						{
							obj2 = activityBind;
							validator = this;
						}
					}
					else if (memberInfo == null && baseType != null && typeof(Delegate).IsAssignableFrom(baseType))
					{
						obj2 = activityBind;
						validator = this;
					}
					if (validator != null && obj2 != null)
					{
						if (validator == this && obj2 is ActivityBind)
						{
							validationErrorCollection.AddRange(ValidateActivityBind(manager, obj2));
						}
						else
						{
							validationErrorCollection.AddRange(validator.Validate(manager, obj2));
						}
					}
					else if (validationError == null)
					{
						validationError = new ValidationError(SR.GetString("Error_PathCouldNotBeResolvedToMember", activityBind.Path, (!string.IsNullOrEmpty(activity2.QualifiedName)) ? activity2.QualifiedName : activity2.GetType().Name), 1549);
						validationError.PropertyName = GetFullPropertyName(manager);
						validationErrorCollection.Add(validationError);
					}
				}
			}
			return validationErrorCollection;
		}

		internal static bool DoesTargetTypeMatch(Type baseType, Type memberType, AccessTypes access)
		{
			if ((access & AccessTypes.ReadWrite) == AccessTypes.ReadWrite)
			{
				return TypeProvider.IsRepresentingTheSameType(memberType, baseType);
			}
			if ((access & AccessTypes.Read) == AccessTypes.Read)
			{
				return TypeProvider.IsAssignable(baseType, memberType, equalBasedOnSameTypeRepresenting: true);
			}
			if ((access & AccessTypes.Write) == AccessTypes.Write)
			{
				return TypeProvider.IsAssignable(memberType, baseType, equalBasedOnSameTypeRepresenting: true);
			}
			return false;
		}

		private ValidationErrorCollection ValidateActivityBind(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			ActivityBind bind = obj as ActivityBind;
			if (!(manager.Context[typeof(PropertyValidationContext)] is PropertyValidationContext validationContext))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(BindValidationContext).Name));
			}
			if (!(manager.Context[typeof(Activity)] is Activity))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(Activity).Name));
			}
			ValidationError validationError = null;
			BindValidationContext bindValidationContext = manager.Context[typeof(BindValidationContext)] as BindValidationContext;
			if (bindValidationContext == null)
			{
				Type baseType = BindHelpers.GetBaseType(manager, validationContext);
				if (baseType != null)
				{
					AccessTypes accessType = BindHelpers.GetAccessType(manager, validationContext);
					bindValidationContext = new BindValidationContext(baseType, accessType);
				}
			}
			if (bindValidationContext != null)
			{
				Type targetType = bindValidationContext.TargetType;
				if (validationError == null)
				{
					validationErrorCollection.AddRange(ValidateActivity(manager, bind, new BindValidationContext(targetType, bindValidationContext.Access)));
				}
			}
			if (validationError != null)
			{
				validationErrorCollection.Add(validationError);
			}
			return validationErrorCollection;
		}

		private ValidationErrorCollection ValidateActivity(ValidationManager manager, ActivityBind bind, BindValidationContext validationContext)
		{
			ValidationError validationError = null;
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			if (!(manager.Context[typeof(Activity)] is Activity activity))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(Activity).Name));
			}
			Activity activity2 = Helpers.ParseActivityForBind(activity, bind.Name);
			if (activity2 == null)
			{
				validationError = (bind.Name.StartsWith("/", StringComparison.Ordinal) ? new ValidationError(SR.GetString("Error_CannotResolveRelativeActivity", bind.Name), 296) : new ValidationError(SR.GetString("Error_CannotResolveActivity", bind.Name), 297));
				validationError.PropertyName = GetFullPropertyName(manager) + ".Name";
			}
			else if (bind.Path == null || bind.Path.Length == 0)
			{
				validationError = new ValidationError(SR.GetString("Error_PathNotSetForActivitySource"), 299);
				validationError.PropertyName = GetFullPropertyName(manager) + ".Path";
			}
			else
			{
				if (!bind.Name.StartsWith("/", StringComparison.Ordinal) && !ValidationHelpers.IsActivitySourceInOrder(activity2, activity))
				{
					validationError = new ValidationError(SR.GetString("Error_BindActivityReference", activity2.QualifiedName, activity.QualifiedName), 298, isWarning: true);
					validationError.PropertyName = GetFullPropertyName(manager) + ".Name";
				}
				IDesignerHost designerHost = manager.GetService(typeof(IDesignerHost)) as IDesignerHost;
				WorkflowDesignerLoader workflowDesignerLoader = manager.GetService(typeof(WorkflowDesignerLoader)) as WorkflowDesignerLoader;
				if (designerHost != null && workflowDesignerLoader != null)
				{
					Type type = null;
					if (designerHost.RootComponent == activity2)
					{
						if (!(manager.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider))
						{
							throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(ITypeProvider).FullName));
						}
						type = typeProvider.GetType(designerHost.RootComponentClassName);
					}
					else
					{
						activity2.GetType();
					}
					if (type != null)
					{
						MemberInfo memberInfo = MemberBind.GetMemberInfo(type, bind.Path);
						if (memberInfo == null || (memberInfo is PropertyInfo && !(memberInfo as PropertyInfo).CanRead))
						{
							validationError = new ValidationError(SR.GetString("Error_InvalidMemberPath", activity2.QualifiedName, bind.Path), 300);
							validationError.PropertyName = GetFullPropertyName(manager) + ".Path";
						}
						else
						{
							Type type2 = null;
							if (memberInfo is FieldInfo)
							{
								type2 = ((FieldInfo)memberInfo).FieldType;
							}
							else if (memberInfo is PropertyInfo)
							{
								type2 = ((PropertyInfo)memberInfo).PropertyType;
							}
							else if (memberInfo is EventInfo)
							{
								type2 = ((EventInfo)memberInfo).EventHandlerType;
							}
							if (!DoesTargetTypeMatch(validationContext.TargetType, type2, validationContext.Access))
							{
								if (typeof(WorkflowParameterBinding).IsAssignableFrom(memberInfo.DeclaringType))
								{
									validationError = new ValidationError(SR.GetString("Warning_ParameterBinding", bind.Path, activity2.QualifiedName, validationContext.TargetType.FullName), 1572, isWarning: true);
									validationError.PropertyName = GetFullPropertyName(manager) + ".Path";
								}
								else
								{
									validationError = new ValidationError(SR.GetString("Error_TargetTypeMismatch", memberInfo.Name, type2.FullName, validationContext.TargetType.FullName), 301);
									validationError.PropertyName = GetFullPropertyName(manager) + ".Path";
								}
							}
						}
					}
				}
				else
				{
					MemberInfo memberInfo2 = MemberBind.GetMemberInfo(activity2.GetType(), bind.Path);
					if (memberInfo2 == null || (memberInfo2 is PropertyInfo && !(memberInfo2 as PropertyInfo).CanRead))
					{
						validationError = new ValidationError(SR.GetString("Error_InvalidMemberPath", activity2.QualifiedName, bind.Path), 300);
						validationError.PropertyName = GetFullPropertyName(manager) + ".Path";
					}
					else
					{
						DependencyProperty dependencyProperty = DependencyProperty.FromName(memberInfo2.Name, memberInfo2.DeclaringType);
						object obj = BindHelpers.ResolveActivityPath(activity2, bind.Path);
						if (obj == null)
						{
							Type type3 = null;
							if (memberInfo2 is FieldInfo)
							{
								type3 = ((FieldInfo)memberInfo2).FieldType;
							}
							else if (memberInfo2 is PropertyInfo)
							{
								type3 = ((PropertyInfo)memberInfo2).PropertyType;
							}
							else if (memberInfo2 is EventInfo)
							{
								type3 = ((EventInfo)memberInfo2).EventHandlerType;
							}
							if (!TypeProvider.IsAssignable(typeof(ActivityBind), type3) && !DoesTargetTypeMatch(validationContext.TargetType, type3, validationContext.Access))
							{
								if (typeof(WorkflowParameterBinding).IsAssignableFrom(memberInfo2.DeclaringType))
								{
									validationError = new ValidationError(SR.GetString("Warning_ParameterBinding", bind.Path, activity2.QualifiedName, validationContext.TargetType.FullName), 1572, isWarning: true);
									validationError.PropertyName = GetFullPropertyName(manager) + ".Path";
								}
								else
								{
									validationError = new ValidationError(SR.GetString("Error_TargetTypeMismatch", memberInfo2.Name, type3.FullName, validationContext.TargetType.FullName), 301);
									validationError.PropertyName = GetFullPropertyName(manager) + ".Path";
								}
							}
						}
						else if (obj is ActivityBind && activity2.Parent != null)
						{
							ActivityBind obj2 = obj as ActivityBind;
							bool flag = false;
							BindRecursionContext bindRecursionContext = manager.Context[typeof(BindRecursionContext)] as BindRecursionContext;
							if (bindRecursionContext == null)
							{
								bindRecursionContext = new BindRecursionContext();
								manager.Context.Push(bindRecursionContext);
								flag = true;
							}
							if (bindRecursionContext.Contains(activity, bind))
							{
								validationError = new ValidationError(SR.GetString("Bind_ActivityDataSourceRecursionDetected"), 303);
								validationError.PropertyName = GetFullPropertyName(manager) + ".Path";
							}
							else
							{
								bindRecursionContext.Add(activity, bind);
								PropertyValidationContext propertyValidationContext = null;
								propertyValidationContext = ((dependencyProperty == null) ? new PropertyValidationContext(activity2, memberInfo2 as PropertyInfo, memberInfo2.Name) : new PropertyValidationContext(activity2, dependencyProperty));
								validationErrorCollection.AddRange(ValidationHelpers.ValidateProperty(manager, activity2, obj2, propertyValidationContext, validationContext));
							}
							if (flag)
							{
								manager.Context.Pop();
							}
						}
						else if (validationContext.TargetType != null && !DoesTargetTypeMatch(validationContext.TargetType, obj.GetType(), validationContext.Access))
						{
							validationError = new ValidationError(SR.GetString("Error_TargetTypeMismatch", memberInfo2.Name, obj.GetType().FullName, validationContext.TargetType.FullName), 301);
							validationError.PropertyName = GetFullPropertyName(manager) + ".Path";
						}
					}
				}
			}
			if (validationError != null)
			{
				validationErrorCollection.Add(validationError);
			}
			return validationErrorCollection;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class CompositeActivityValidator : ActivityValidator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			if (!(obj is CompositeActivity compositeActivity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(CompositeActivity).FullName), "obj");
			}
			if (Helpers.IsActivityLocked(compositeActivity))
			{
				return new ValidationErrorCollection();
			}
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			foreach (Activity alternateFlowActivity in ((ISupportAlternateFlow)compositeActivity).AlternateFlowActivities)
			{
				num += ((alternateFlowActivity is CancellationHandlerActivity) ? 1 : 0);
				num2 += ((alternateFlowActivity is FaultHandlersActivity) ? 1 : 0);
				num3 += ((alternateFlowActivity is CompensationHandlerActivity) ? 1 : 0);
			}
			if (num > 1)
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Error_MoreThanOneCancelHandler", compositeActivity.GetType().Name), 1319));
			}
			if (num2 > 1)
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Error_MoreThanOneFaultHandlersActivityDecl", compositeActivity.GetType().Name), 1322));
			}
			if (num3 > 1)
			{
				validationErrorCollection.Add(new ValidationError(SR.GetString("Error_MoreThanOneCompensationDecl", compositeActivity.GetType().Name), 1323));
			}
			if (manager.ValidateChildActivities)
			{
				foreach (Activity allEnabledActivity in Helpers.GetAllEnabledActivities(compositeActivity))
				{
					validationErrorCollection.AddRange(ValidationHelpers.ValidateActivity(manager, allEnabledActivity));
				}
			}
			return validationErrorCollection;
		}

		public override ValidationError ValidateActivityChange(Activity activity, ActivityChangeAction action)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (action == null)
			{
				throw new ArgumentNullException("action");
			}
			if (activity.ExecutionStatus != 0 && activity.ExecutionStatus != ActivityExecutionStatus.Executing && activity.ExecutionStatus != ActivityExecutionStatus.Closed)
			{
				return new ValidationError(SR.GetString("Error_DynamicActivity", activity.QualifiedName, Enum.GetName(typeof(ActivityExecutionStatus), activity.ExecutionStatus)), 260);
			}
			return null;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ConditionValidator : DependencyObjectValidator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is ActivityCondition))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(ActivityCondition).FullName), "obj");
			}
			validationErrorCollection.AddRange(ValidateProperties(manager, obj));
			return validationErrorCollection;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class DependencyObjectValidator : Validator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is DependencyObject dependencyObject))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(DependencyObject).FullName), "obj");
			}
			ArrayList arrayList = new ArrayList();
			foreach (DependencyProperty item in DependencyProperty.FromType(dependencyObject.GetType()))
			{
				if (!item.IsAttached)
				{
					arrayList.Add(item);
				}
			}
			foreach (DependencyProperty metaDependencyProperty in dependencyObject.MetaDependencyProperties)
			{
				if (metaDependencyProperty.IsAttached && obj.GetType().GetProperty(metaDependencyProperty.Name, BindingFlags.Instance | BindingFlags.Public) == null)
				{
					arrayList.Add(metaDependencyProperty);
				}
			}
			foreach (DependencyProperty item2 in arrayList)
			{
				object[] attributes = item2.DefaultMetadata.GetAttributes(typeof(ValidationOptionAttribute));
				object[] array = attributes;
				if (array.Length == 0 || ((ValidationOptionAttribute)array[0]).ValidationOption != 0)
				{
					validationErrorCollection.AddRange(ValidateDependencyProperty(dependencyObject, item2, manager));
				}
			}
			return validationErrorCollection;
		}

		private ValidationErrorCollection ValidateDependencyProperty(DependencyObject dependencyObject, DependencyProperty dependencyProperty, ValidationManager manager)
		{
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			Attribute[] attributes = dependencyProperty.DefaultMetadata.GetAttributes(typeof(ValidationOptionAttribute));
			ValidationOption validationOption = ((attributes.Length == 0) ? ValidationOption.Optional : ((ValidationOptionAttribute)attributes[0]).ValidationOption);
			if (!(manager.Context[typeof(Activity)] is Activity activity))
			{
				throw new InvalidOperationException(SR.GetString("Error_ContextStackItemMissing", typeof(Activity).FullName));
			}
			PropertyValidationContext context = new PropertyValidationContext(activity, dependencyProperty);
			manager.Context.Push(context);
			try
			{
				if (dependencyProperty.DefaultMetadata.DefaultValue != null)
				{
					if (!dependencyProperty.PropertyType.IsValueType && dependencyProperty.PropertyType != typeof(string))
					{
						validationErrorCollection.Add(new ValidationError(SR.GetString("Error_PropertyDefaultIsReference", dependencyProperty.Name), 424));
					}
					else if (!dependencyProperty.PropertyType.IsAssignableFrom(dependencyProperty.DefaultMetadata.DefaultValue.GetType()))
					{
						validationErrorCollection.Add(new ValidationError(SR.GetString("Error_PropertyDefaultTypeMismatch", dependencyProperty.Name, dependencyProperty.PropertyType.FullName, dependencyProperty.DefaultMetadata.DefaultValue.GetType().FullName), 425));
					}
				}
				object obj = null;
				if (dependencyObject.IsBindingSet(dependencyProperty))
				{
					obj = dependencyObject.GetBinding(dependencyProperty);
				}
				else if (!dependencyProperty.IsEvent)
				{
					obj = dependencyObject.GetValue(dependencyProperty);
				}
				if (obj == null || obj == dependencyProperty.DefaultMetadata.DefaultValue)
				{
					if (dependencyProperty.IsEvent)
					{
						obj = dependencyObject.GetHandler(dependencyProperty);
						if (obj == null)
						{
							obj = WorkflowMarkupSerializationHelpers.GetEventHandlerName(dependencyObject, dependencyProperty.Name);
						}
						if (obj is string && !string.IsNullOrEmpty((string)obj))
						{
							validationErrorCollection.AddRange(ValidateEvent(activity, dependencyProperty, obj, manager));
						}
					}
					else
					{
						obj = dependencyObject.GetValue(dependencyProperty);
					}
				}
				bool flag = activity.Parent != null || (activity is CompositeActivity && ((CompositeActivity)activity).EnabledActivities.Count != 0);
				if (validationOption == ValidationOption.Required && (obj == null || (obj is string && string.IsNullOrEmpty((string)obj))) && dependencyProperty.DefaultMetadata.IsMetaProperty && flag)
				{
					validationErrorCollection.Add(ValidationError.GetNotSetValidationError(GetFullPropertyName(manager)));
				}
				else if (obj != null)
				{
					if (obj is IList)
					{
						PropertyValidationContext context2 = new PropertyValidationContext(obj, null, string.Empty);
						manager.Context.Push(context2);
						try
						{
							foreach (object item in (IList)obj)
							{
								validationErrorCollection.AddRange(ValidationHelpers.ValidateObject(manager, item));
							}
						}
						finally
						{
							manager.Context.Pop();
						}
					}
					else if (dependencyProperty.ValidatorType != null)
					{
						Validator validator = null;
						try
						{
							if (!(Activator.CreateInstance(dependencyProperty.ValidatorType) is Validator validator2))
							{
								validationErrorCollection.Add(new ValidationError(SR.GetString("Error_CreateValidator", dependencyProperty.ValidatorType.FullName), 262));
							}
							else
							{
								validationErrorCollection.AddRange(validator2.Validate(manager, obj));
							}
						}
						catch
						{
							validationErrorCollection.Add(new ValidationError(SR.GetString("Error_CreateValidator", dependencyProperty.ValidatorType.FullName), 262));
						}
					}
					else
					{
						validationErrorCollection.AddRange(ValidationHelpers.ValidateObject(manager, obj));
					}
				}
			}
			finally
			{
				manager.Context.Pop();
			}
			return validationErrorCollection;
		}

		private ValidationErrorCollection ValidateEvent(Activity activity, DependencyProperty dependencyProperty, object propValue, ValidationManager manager)
		{
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			if (propValue is string && !string.IsNullOrEmpty((string)propValue))
			{
				bool flag = false;
				Type type = null;
				Activity rootActivity = Helpers.GetRootActivity(activity);
				Activity enclosingActivity = Helpers.GetEnclosingActivity(activity);
				string text = rootActivity.GetValue(WorkflowMarkupSerializer.XClassProperty) as string;
				if (rootActivity == enclosingActivity && !string.IsNullOrEmpty(text))
				{
					if (!(manager.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider))
					{
						throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(ITypeProvider).FullName));
					}
					type = typeProvider.GetType(text);
				}
				else
				{
					type = enclosingActivity.GetType();
				}
				if (type != null)
				{
					MethodInfo method = dependencyProperty.PropertyType.GetMethod("Invoke");
					if (method != null)
					{
						List<Type> list = new List<Type>();
						ParameterInfo[] parameters = method.GetParameters();
						foreach (ParameterInfo parameterInfo in parameters)
						{
							list.Add(parameterInfo.ParameterType);
						}
						MethodInfo methodExactMatch = Helpers.GetMethodExactMatch(type, propValue as string, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy, null, list.ToArray(), null);
						if (methodExactMatch != null && TypeProvider.IsAssignable(method.ReturnType, methodExactMatch.ReturnType))
						{
							flag = true;
						}
					}
				}
				if (!flag)
				{
					ValidationError validationError = new ValidationError(SR.GetString("Error_CantResolveEventHandler", dependencyProperty.Name, propValue as string), 1551);
					validationError.PropertyName = GetFullPropertyName(manager);
					validationErrorCollection.Add(validationError);
				}
			}
			return validationErrorCollection;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class PropertyValidationContext
	{
		private string propertyName = string.Empty;

		private object propertyOwner;

		private object propertyInfo;

		public string PropertyName
		{
			get
			{
				if (propertyInfo is DependencyProperty)
				{
					return ((DependencyProperty)propertyInfo).Name;
				}
				return propertyName;
			}
		}

		public object PropertyOwner => propertyOwner;

		public object Property => propertyInfo;

		public PropertyValidationContext(object propertyOwner, PropertyInfo propertyInfo, string propertyName)
		{
			if (propertyName == null)
			{
				throw new ArgumentNullException("propertyName");
			}
			if (propertyOwner == null)
			{
				throw new ArgumentNullException("propertyOwner");
			}
			this.propertyOwner = propertyOwner;
			this.propertyName = propertyName;
			this.propertyInfo = propertyInfo;
		}

		public PropertyValidationContext(object propertyOwner, DependencyProperty dependencyProperty)
		{
			if (propertyOwner == null)
			{
				throw new ArgumentNullException("propertyOwner");
			}
			this.propertyOwner = propertyOwner;
			propertyInfo = dependencyProperty;
		}
	}
	internal sealed class SynchronizationValidator : Validator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is Activity activity))
			{
				return validationErrorCollection;
			}
			if (activity.GetValue(Activity.SynchronizationHandlesProperty) is ICollection<string> collection)
			{
				foreach (string item in collection)
				{
					ValidationError validationError = ValidationHelpers.ValidateIdentifier("SynchronizationHandles", manager, item);
					if (validationError != null)
					{
						validationErrorCollection.Add(validationError);
					}
				}
			}
			return validationErrorCollection;
		}
	}
	internal sealed class TransactionContextValidator : Validator
	{
		public override ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = base.Validate(manager, obj);
			if (!(obj is Activity activity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(Activity).FullName), "obj");
			}
			WorkflowTransactionOptions transactionOptions = TransactedContextFilter.GetTransactionOptions(activity);
			if (transactionOptions != null)
			{
				CompositeActivity faultHandlers = FaultAndCancellationHandlingFilter.GetFaultHandlers(activity);
				if (faultHandlers != null)
				{
					ValidationError item = new ValidationError(SR.GetString("Error_AtomicScopeWithFaultHandlersActivityDecl", activity.Name), 1324);
					validationErrorCollection.Add(item);
				}
				Activity cancellationHandler = FaultAndCancellationHandlingFilter.GetCancellationHandler(activity);
				if (cancellationHandler != null)
				{
					ValidationError item2 = new ValidationError(SR.GetString("Error_AtomicScopeWithCancellationHandlerActivity", activity.Name), 1397);
					validationErrorCollection.Add(item2);
				}
				for (Activity parent = activity.Parent; parent != null; parent = parent.Parent)
				{
					if (parent.SupportsTransaction)
					{
						validationErrorCollection.Add(new ValidationError(SR.GetString("Error_AtomicScopeNestedInNonLRT"), 1326));
						break;
					}
				}
				Queue<Activity> queue = new Queue<Activity>(Helpers.GetAllEnabledActivities((CompositeActivity)activity));
				while (queue.Count > 0)
				{
					Activity activity2 = queue.Dequeue();
					if (activity2.PersistOnClose)
					{
						validationErrorCollection.Add(new ValidationError(SR.GetString("Error_LRTScopeNestedInNonLRT"), 1327));
						break;
					}
					if (activity2 is ICompensatableActivity)
					{
						validationErrorCollection.Add(new ValidationError(SR.GetString("Error_NestedCompensatableActivity", activity2.QualifiedName), 422));
						break;
					}
					if (!(activity2 is CompositeActivity))
					{
						continue;
					}
					foreach (Activity allEnabledActivity in Helpers.GetAllEnabledActivities((CompositeActivity)activity2))
					{
						queue.Enqueue(allEnabledActivity);
					}
				}
				if (transactionOptions.TimeoutDuration.Ticks < 0)
				{
					ValidationError validationError = new ValidationError(SR.GetString("Error_NegativeValue", transactionOptions.TimeoutDuration.ToString(), "TimeoutDuration"), 1329);
					validationError.PropertyName = "TimeoutDuration";
					validationErrorCollection.Add(validationError);
				}
			}
			return validationErrorCollection;
		}

		public override ValidationError ValidateActivityChange(Activity activity, ActivityChangeAction action)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (action == null)
			{
				throw new ArgumentNullException("action");
			}
			if (action is AddedActivityAction addedActivityAction)
			{
				Queue<Activity> queue = new Queue<Activity>();
				queue.Enqueue(addedActivityAction.AddedActivity);
				while (queue.Count != 0)
				{
					Activity activity2 = queue.Dequeue();
					if (activity2.SupportsTransaction)
					{
						return new ValidationError(SR.GetString("Error_AtomicScopeNestedInNonLRT"), 1326);
					}
					if (activity2.PersistOnClose)
					{
						return new ValidationError(SR.GetString("Error_NestedPersistOnClose", activity.QualifiedName), 418);
					}
					if (activity2 is ICompensatableActivity)
					{
						return new ValidationError(SR.GetString("Error_NestedCompensatableActivity", activity.QualifiedName), 422);
					}
					if (!(activity2 is CompositeActivity compositeActivity))
					{
						continue;
					}
					foreach (Activity enabledActivity in compositeActivity.EnabledActivities)
					{
						queue.Enqueue(enabledActivity);
					}
				}
			}
			return base.ValidateActivityChange(activity, action);
		}
	}
	[Serializable]
	public sealed class ValidationError
	{
		private string errorText = string.Empty;

		private int errorNumber;

		private Hashtable userData;

		private bool isWarning;

		private string propertyName;

		public string PropertyName
		{
			get
			{
				return propertyName;
			}
			set
			{
				propertyName = value;
			}
		}

		public string ErrorText => errorText;

		public bool IsWarning => isWarning;

		public int ErrorNumber => errorNumber;

		public IDictionary UserData
		{
			get
			{
				if (userData == null)
				{
					userData = new Hashtable();
				}
				return userData;
			}
		}

		public ValidationError(string errorText, int errorNumber)
			: this(errorText, errorNumber, isWarning: false, null)
		{
		}

		public ValidationError(string errorText, int errorNumber, bool isWarning)
			: this(errorText, errorNumber, isWarning, null)
		{
		}

		public ValidationError(string errorText, int errorNumber, bool isWarning, string propertyName)
		{
			this.errorText = errorText;
			this.errorNumber = errorNumber;
			this.isWarning = isWarning;
			this.propertyName = propertyName;
		}

		public static ValidationError GetNotSetValidationError(string propertyName)
		{
			ValidationError validationError = new ValidationError(SR.GetString("Error_PropertyNotSet", propertyName), 278);
			validationError.PropertyName = propertyName;
			return validationError;
		}

		public override string ToString()
		{
			return string.Format(CultureInfo.InvariantCulture, "{0} {1}: {2}", new object[3]
			{
				isWarning ? "warning" : "error",
				errorNumber,
				errorText
			});
		}
	}
	[Serializable]
	public sealed class ValidationErrorCollection : Collection<ValidationError>
	{
		public bool HasErrors
		{
			get
			{
				if (base.Count > 0)
				{
					using IEnumerator<ValidationError> enumerator = GetEnumerator();
					while (enumerator.MoveNext())
					{
						ValidationError current = enumerator.Current;
						if (current != null && !current.IsWarning)
						{
							return true;
						}
					}
				}
				return false;
			}
		}

		public bool HasWarnings
		{
			get
			{
				if (base.Count > 0)
				{
					using IEnumerator<ValidationError> enumerator = GetEnumerator();
					while (enumerator.MoveNext())
					{
						ValidationError current = enumerator.Current;
						if (current != null && current.IsWarning)
						{
							return true;
						}
					}
				}
				return false;
			}
		}

		public ValidationErrorCollection()
		{
		}

		public ValidationErrorCollection(ValidationErrorCollection value)
		{
			AddRange(value);
		}

		public ValidationErrorCollection(IEnumerable<ValidationError> value)
		{
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			AddRange(value);
		}

		protected override void InsertItem(int index, ValidationError item)
		{
			if (item == null)
			{
				throw new ArgumentNullException("item");
			}
			base.InsertItem(index, item);
		}

		protected override void SetItem(int index, ValidationError item)
		{
			if (item == null)
			{
				throw new ArgumentNullException("item");
			}
			base.SetItem(index, item);
		}

		public void AddRange(IEnumerable<ValidationError> value)
		{
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			foreach (ValidationError item in value)
			{
				Add(item);
			}
		}

		public ValidationError[] ToArray()
		{
			ValidationError[] array = new ValidationError[base.Count];
			CopyTo(array, 0);
			return array;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ValidationManager : IServiceProvider
	{
		private Hashtable hashOfValidators = new Hashtable();

		private IServiceProvider serviceProvider;

		private ContextStack context;

		private bool validateChildActivities = true;

		public ContextStack Context
		{
			get
			{
				if (context == null)
				{
					context = new ContextStack();
				}
				return context;
			}
		}

		public bool ValidateChildActivities => validateChildActivities;

		public ValidationManager(IServiceProvider serviceProvider)
			: this(serviceProvider, validateChildActivities: true)
		{
		}

		public ValidationManager(IServiceProvider serviceProvider, bool validateChildActivities)
		{
			this.serviceProvider = serviceProvider;
			this.validateChildActivities = validateChildActivities;
		}

		public Validator[] GetValidators(Type type)
		{
			if (hashOfValidators.Contains(type))
			{
				return ((List<Validator>)hashOfValidators[type]).ToArray();
			}
			List<Validator> list = new List<Validator>();
			object[] array = ComponentDispenser.CreateComponents(type, typeof(ActivityValidatorAttribute));
			for (int i = 0; i < array.Length; i++)
			{
				Validator item = (Validator)array[i];
				list.Add(item);
			}
			hashOfValidators[type] = list;
			return list.ToArray();
		}

		public object GetService(Type serviceType)
		{
			return serviceProvider.GetService(serviceType);
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public enum ValidationOption
	{
		None,
		Optional,
		Required
	}
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Event, AllowMultiple = false, Inherited = true)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ValidationOptionAttribute : Attribute
	{
		private ValidationOption validationOption;

		public ValidationOption ValidationOption => validationOption;

		public ValidationOptionAttribute(ValidationOption validationOption)
		{
			this.validationOption = validationOption;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class Validator
	{
		public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			return new ValidationErrorCollection();
		}

		public virtual ValidationError ValidateActivityChange(Activity activity, ActivityChangeAction action)
		{
			if (activity == null)
			{
				throw new ArgumentNullException("activity");
			}
			if (action == null)
			{
				throw new ArgumentNullException("action");
			}
			return null;
		}

		public virtual ValidationErrorCollection ValidateProperties(ValidationManager manager, object obj)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			ValidationErrorCollection errors = new ValidationErrorCollection();
			Activity activity = manager.Context[typeof(Activity)] as Activity;
			Walker walker = new Walker(useEnabledActivities: true);
			walker.FoundProperty += delegate(Walker w, WalkerEventArgs args)
			{
				if (args.CurrentProperty != null)
				{
					DependencyProperty dependencyProperty = DependencyProperty.FromName(args.CurrentProperty.Name, args.CurrentProperty.DeclaringType);
					if (dependencyProperty == null)
					{
						object[] customAttributes = args.CurrentProperty.GetCustomAttributes(typeof(ValidationOptionAttribute), inherit: true);
						if (customAttributes.Length == 0 || ((ValidationOptionAttribute)customAttributes[0]).ValidationOption != 0)
						{
							errors.AddRange(ValidateProperty(args.CurrentProperty, args.CurrentPropertyOwner, args.CurrentValue, manager));
							args.Action = WalkerAction.Skip;
						}
					}
				}
			};
			walker.WalkProperties(activity, obj);
			return errors;
		}

		protected string GetFullPropertyName(ValidationManager manager)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			string text = string.Empty;
			for (int i = 0; manager.Context[i] != null; i++)
			{
				if (manager.Context[i] is PropertyValidationContext)
				{
					PropertyValidationContext propertyValidationContext = manager.Context[i] as PropertyValidationContext;
					text = ((!(propertyValidationContext.PropertyName == string.Empty)) ? ((!(text == string.Empty)) ? (propertyValidationContext.PropertyName + "." + text) : propertyValidationContext.PropertyName) : string.Empty);
				}
			}
			return text;
		}

		protected internal ValidationErrorCollection ValidateProperty(PropertyInfo propertyInfo, object propertyOwner, object propertyValue, ValidationManager manager)
		{
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			object[] customAttributes = propertyInfo.GetCustomAttributes(typeof(ValidationOptionAttribute), inherit: true);
			ValidationOption validationOption = ((customAttributes.Length == 0) ? ValidationOption.Optional : ((ValidationOptionAttribute)customAttributes[0]).ValidationOption);
			PropertyValidationContext context = new PropertyValidationContext(propertyOwner, propertyInfo, propertyInfo.Name);
			manager.Context.Push(context);
			try
			{
				if (propertyValue != null)
				{
					validationErrorCollection.AddRange(ValidationHelpers.ValidateObject(manager, propertyValue));
					if (propertyValue is IList)
					{
						PropertyValidationContext context2 = new PropertyValidationContext(propertyValue, null, "");
						manager.Context.Push(context2);
						try
						{
							foreach (object item in (IList)propertyValue)
							{
								validationErrorCollection.AddRange(ValidationHelpers.ValidateObject(manager, item));
							}
						}
						finally
						{
							manager.Context.Pop();
						}
					}
				}
			}
			finally
			{
				manager.Context.Pop();
			}
			return validationErrorCollection;
		}
	}
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = false, Inherited = true)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ActivityValidatorAttribute : Attribute
	{
		private string validatorTypeName;

		public string ValidatorTypeName => validatorTypeName;

		public ActivityValidatorAttribute(Type validatorType)
		{
			if (validatorType != null)
			{
				validatorTypeName = validatorType.AssemblyQualifiedName;
			}
		}

		public ActivityValidatorAttribute(string validatorTypeName)
		{
			this.validatorTypeName = validatorTypeName;
		}
	}
	internal class AssemblyLoader
	{
		private Assembly assembly;

		private AssemblyName assemblyName;

		private TypeProvider typeProvider;

		private bool isLocalAssembly;

		internal AssemblyName AssemblyName
		{
			get
			{
				if (assemblyName == null)
				{
					assemblyName = assembly.GetName(copiedName: true);
				}
				return assemblyName;
			}
		}

		internal Assembly Assembly => assembly;

		internal AssemblyLoader(TypeProvider typeProvider, string filePath)
		{
			isLocalAssembly = false;
			this.typeProvider = typeProvider;
			if (File.Exists(filePath))
			{
				AssemblyName assemblyName = AssemblyName.GetAssemblyName(filePath);
				if (assemblyName != null)
				{
					ITypeResolutionService typeResolutionService = (ITypeResolutionService)typeProvider.GetService(typeof(ITypeResolutionService));
					if (typeResolutionService != null)
					{
						try
						{
							assembly = typeResolutionService.GetAssembly(assemblyName);
							if (assembly == null && assemblyName.GetPublicKeyToken() != null && assemblyName.GetPublicKeyToken().GetLength(0) == 0 && assemblyName.GetPublicKey() != null && assemblyName.GetPublicKey().GetLength(0) == 0)
							{
								AssemblyName assemblyName2 = (AssemblyName)assemblyName.Clone();
								assemblyName2.SetPublicKey(null);
								assemblyName2.SetPublicKeyToken(null);
								assembly = typeResolutionService.GetAssembly(assemblyName2);
							}
						}
						catch
						{
						}
					}
					if (assembly == null)
					{
						try
						{
							if (MultiTargetingInfo.MultiTargetingUtilities.IsFrameworkReferenceAssembly(filePath))
							{
								assembly = Assembly.Load(assemblyName.FullName);
							}
							else
							{
								assembly = Assembly.Load(assemblyName);
							}
						}
						catch
						{
						}
					}
				}
				if (assembly == null)
				{
					assembly = Assembly.LoadFrom(filePath);
				}
				return;
			}
			throw new FileNotFoundException();
		}

		internal AssemblyLoader(TypeProvider typeProvider, Assembly assembly, bool isLocalAssembly)
		{
			this.isLocalAssembly = isLocalAssembly;
			this.typeProvider = typeProvider;
			this.assembly = assembly;
		}

		internal Type GetType(string typeName)
		{
			if (assembly != null)
			{
				Type type = null;
				try
				{
					type = assembly.GetType(typeName);
				}
				catch (ArgumentException)
				{
				}
				if (type != null && (type.IsPublic || type.IsNestedPublic || (isLocalAssembly && type.Attributes != TypeAttributes.NestedPrivate)))
				{
					return type;
				}
			}
			return null;
		}

		internal Type[] GetTypes()
		{
			List<Type> list = new List<Type>();
			if (assembly != null)
			{
				Type[] types = assembly.GetTypes();
				foreach (Type type in types)
				{
					if (type.IsPublic || (isLocalAssembly && type.Attributes != TypeAttributes.NestedPrivate))
					{
						list.Add(type);
					}
				}
			}
			return list.ToArray();
		}
	}
	[CLSCompliant(false)]
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property, AllowMultiple = true)]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class AttributeInfoAttribute : Attribute
	{
		private AttributeInfo attributeInfo;

		public AttributeInfo AttributeInfo => attributeInfo;

		internal AttributeInfoAttribute(AttributeInfo attributeInfo)
		{
			if (attributeInfo == null)
			{
				throw new ArgumentNullException("attributeInfo");
			}
			this.attributeInfo = attributeInfo;
		}

		internal static AttributeInfoAttribute CreateAttributeInfoAttribute(Type attributeType, string[] argumentNames, object[] argumentValues)
		{
			return new AttributeInfoAttribute(new AttributeInfo(attributeType, argumentNames, argumentValues));
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class AttributeInfo
	{
		private Type attributeType;

		private string[] argumentNames;

		private object[] argumentValues;

		public Type AttributeType => attributeType;

		public ReadOnlyCollection<object> ArgumentValues
		{
			get
			{
				List<object> list = new List<object>(argumentValues);
				return list.AsReadOnly();
			}
		}

		public bool Creatable
		{
			get
			{
				if (attributeType.Assembly == null)
				{
					return false;
				}
				object[] array = argumentValues;
				foreach (object obj in array)
				{
					if (obj is Exception)
					{
						return false;
					}
				}
				return true;
			}
		}

		internal AttributeInfo(Type attributeType, string[] argumentNames, object[] argumentValues)
		{
			this.attributeType = attributeType;
			this.argumentNames = (string[])argumentNames.Clone();
			this.argumentValues = (object[])argumentValues.Clone();
		}

		public Attribute CreateAttribute()
		{
			if (!Creatable)
			{
				throw new InvalidOperationException(SR.GetString("CannotCreateAttribute"));
			}
			List<string> list = new List<string>();
			ArrayList arrayList = new ArrayList();
			ArrayList arrayList2 = new ArrayList();
			for (int i = 0; i < argumentNames.Length; i++)
			{
				if (argumentNames[i] == null || argumentNames[i].Length == 0)
				{
					arrayList2.Add(argumentValues[i]);
					continue;
				}
				list.Add(argumentNames[i]);
				arrayList.Add(argumentValues[i]);
			}
			Attribute attribute = (Attribute)Activator.CreateInstance(attributeType, arrayList2.ToArray());
			for (int j = 0; j < list.Count; j++)
			{
				attributeType.GetProperty(list[j]).SetValue(attribute, arrayList[j], null);
			}
			return attribute;
		}

		public object GetArgumentValueAs(IServiceProvider serviceProvider, int argumentIndex, Type requestedType)
		{
			if (argumentIndex >= ArgumentValues.Count || argumentIndex < 0)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidArgumentIndex"), "argumentIndex");
			}
			if (requestedType == null)
			{
				throw new ArgumentNullException("requestedType");
			}
			SupportedLanguages supportedLanguage = CompilerHelpers.GetSupportedLanguage(serviceProvider);
			if (requestedType == typeof(string))
			{
				string text = ArgumentValues[argumentIndex] as string;
				if (text != null)
				{
					try
					{
						text = Regex.Unescape(text);
					}
					catch
					{
					}
				}
				if (text != null)
				{
					if (text.EndsWith("\"", StringComparison.Ordinal))
					{
						text = text.Substring(0, text.Length - 1);
					}
					if (supportedLanguage == SupportedLanguages.CSharp && text.StartsWith("@\"", StringComparison.Ordinal))
					{
						text = text.Substring(2, text.Length - 2);
					}
					else if (text.StartsWith("\"", StringComparison.Ordinal))
					{
						text = text.Substring(1, text.Length - 1);
					}
				}
				return text;
			}
			if (requestedType.IsEnum)
			{
				string text2 = "";
				bool flag = true;
				string[] array = (ArgumentValues[argumentIndex] as string).Split(new string[1] { (supportedLanguage == SupportedLanguages.CSharp) ? "|" : "Or" }, StringSplitOptions.RemoveEmptyEntries);
				foreach (string text3 in array)
				{
					if (!flag)
					{
						text2 += ",";
					}
					int num = text3.LastIndexOf('.');
					text2 = ((num == -1) ? (text2 + text3) : (text2 + text3.Substring(num + 1)));
					flag = false;
				}
				return Enum.Parse(requestedType, text2);
			}
			if (requestedType == typeof(bool))
			{
				return Convert.ToBoolean(ArgumentValues[argumentIndex], CultureInfo.InvariantCulture);
			}
			if (requestedType == typeof(Type))
			{
				string text4 = "";
				if (ArgumentValues[argumentIndex] is CodeTypeOfExpression)
				{
					text4 = DesignTimeType.GetTypeNameFromCodeTypeReference((ArgumentValues[argumentIndex] as CodeTypeOfExpression).Type, null);
				}
				if (!(serviceProvider.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider))
				{
					throw new Exception(SR.GetString("General_MissingService", typeof(ITypeProvider).ToString()));
				}
				Type type = ParseHelpers.ParseTypeName(typeProvider, supportedLanguage, text4);
				if (type == null)
				{
					string[] parameters = null;
					string typeName = string.Empty;
					string elemantDecorator = string.Empty;
					if (ParseHelpers.ParseTypeName(text4, (supportedLanguage == SupportedLanguages.CSharp) ? ParseHelpers.ParseTypeNameLanguage.CSharp : ParseHelpers.ParseTypeNameLanguage.VB, out typeName, out parameters, out elemantDecorator) && typeName != null && parameters != null)
					{
						string text5 = typeName + "`" + parameters.Length.ToString(CultureInfo.InvariantCulture) + "[";
						string[] array2 = parameters;
						foreach (string text6 in array2)
						{
							if (text6 != parameters[0])
							{
								text5 += ",";
							}
							Type type2 = ParseHelpers.ParseTypeName(typeProvider, supportedLanguage, text6);
							text5 = ((!(type2 != null)) ? (text5 + "[" + text6 + "]") : (text5 + "[" + type2.FullName + "]"));
						}
						text5 += "]";
						type = ParseHelpers.ParseTypeName(typeProvider, supportedLanguage, text5);
					}
				}
				return type;
			}
			return null;
		}
	}
	internal class CodeDomLoader : IDisposable
	{
		private TypeProvider typeProvider;

		private CodeCompileUnit codeCompileUnit;

		private List<Type> types = new List<Type>();

		internal CodeDomLoader(TypeProvider typeProvider, CodeCompileUnit codeCompileUnit)
		{
			this.typeProvider = typeProvider;
			this.codeCompileUnit = codeCompileUnit;
			AddTypes();
		}

		internal void Refresh(EventHandler refresher)
		{
			RemoveTypes();
			refresher(typeProvider, EventArgs.Empty);
			AddTypes();
		}

		private void AddTypes()
		{
			if (typeProvider == null || types == null)
			{
				return;
			}
			types.Clear();
			foreach (CodeNamespace @namespace in codeCompileUnit.Namespaces)
			{
				foreach (CodeTypeDeclaration type2 in @namespace.Types)
				{
					string text = Helper.EnsureTypeName(type2.Name);
					if (@namespace.Name.Length > 0)
					{
						text = Helper.EnsureTypeName(@namespace.Name) + "." + text;
					}
					DesignTimeType designTimeType = typeProvider.GetType(text, throwOnError: false) as DesignTimeType;
					if (designTimeType == null)
					{
						designTimeType = new DesignTimeType(null, type2.Name, @namespace.Imports, @namespace.Name, typeProvider);
						types.Add(designTimeType);
						typeProvider.AddType(designTimeType);
					}
					designTimeType.AddCodeTypeDeclaration(type2);
				}
			}
			Queue queue = new Queue(types);
			while (queue.Count != 0)
			{
				Type type = queue.Dequeue() as Type;
				if (type.DeclaringType != null)
				{
					types.Add(type);
				}
				Type[] nestedTypes = type.GetNestedTypes(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
				foreach (Type obj in nestedTypes)
				{
					queue.Enqueue(obj);
				}
			}
		}

		private void RemoveTypes()
		{
			if (typeProvider != null && types != null)
			{
				typeProvider.RemoveTypes(types.ToArray());
				types.Clear();
			}
		}

		public void Dispose()
		{
			RemoveTypes();
			typeProvider = null;
			types = null;
		}
	}
	internal sealed class DesignTimeType : Type, ICloneable
	{
		internal class MemberSignature
		{
			private string name;

			private Type[] parameters;

			private Type returnType;

			private readonly int hashCode;

			public string Name => name;

			public Type ReturnType => returnType;

			public Type[] Parameters
			{
				get
				{
					if (parameters == null)
					{
						return null;
					}
					return (Type[])parameters.Clone();
				}
			}

			internal MemberSignature(MemberInfo memberInfo)
			{
				name = memberInfo.Name;
				if (memberInfo is MethodBase)
				{
					List<Type> list = new List<Type>();
					ParameterInfo[] array = (memberInfo as MethodBase).GetParameters();
					foreach (ParameterInfo parameterInfo in array)
					{
						list.Add(parameterInfo.ParameterType);
					}
					parameters = list.ToArray();
					if (memberInfo is MethodInfo)
					{
						returnType = ((MethodInfo)memberInfo).ReturnType;
					}
				}
				else if (memberInfo is PropertyInfo)
				{
					PropertyInfo propertyInfo = memberInfo as PropertyInfo;
					List<Type> list2 = new List<Type>();
					ParameterInfo[] indexParameters = propertyInfo.GetIndexParameters();
					foreach (ParameterInfo parameterInfo2 in indexParameters)
					{
						list2.Add(parameterInfo2.ParameterType);
					}
					parameters = list2.ToArray();
					returnType = propertyInfo.PropertyType;
				}
				hashCode = GetHashCodeImpl();
			}

			internal MemberSignature(string name, Type[] parameters, Type returnType)
			{
				this.name = name;
				this.returnType = returnType;
				if (parameters != null)
				{
					this.parameters = (Type[])parameters.Clone();
				}
				hashCode = GetHashCodeImpl();
			}

			public override bool Equals(object obj)
			{
				if (!(obj is MemberSignature memberSignature) || name != memberSignature.name || returnType != memberSignature.returnType)
				{
					return false;
				}
				if ((Parameters == null && memberSignature.Parameters != null) || (Parameters != null && memberSignature.Parameters == null))
				{
					return false;
				}
				if (Parameters != null)
				{
					if (parameters.Length != memberSignature.parameters.Length)
					{
						return false;
					}
					for (int i = 0; i < parameters.Length; i++)
					{
						if (parameters[i] != memberSignature.parameters[i])
						{
							return false;
						}
					}
				}
				return true;
			}

			public bool FilterSignature(MemberSignature maskSignature)
			{
				if (maskSignature == null)
				{
					throw new ArgumentNullException("maskSignature");
				}
				if ((maskSignature.Name != null && name != maskSignature.name) || (maskSignature.returnType != null && returnType != maskSignature.returnType))
				{
					return false;
				}
				if (maskSignature.parameters != null)
				{
					if (parameters == null)
					{
						return false;
					}
					if (parameters.Length != maskSignature.parameters.Length)
					{
						return false;
					}
					for (int i = 0; i < parameters.Length; i++)
					{
						if (!parameters[i].Equals(maskSignature.parameters[i]))
						{
							return false;
						}
					}
				}
				return true;
			}

			public override string ToString()
			{
				string text = string.Empty;
				if (returnType != null)
				{
					text = returnType.FullName + " ";
				}
				if (name != null && name.Length != 0)
				{
					text += name;
				}
				if (parameters != null && parameters.Length != 0)
				{
					text += "(";
					for (int i = 0; i < parameters.Length; i++)
					{
						if (i > 0)
						{
							text += ", ";
						}
						if (parameters[i] != null)
						{
							if (parameters[i].GetType() != null && parameters[i].GetType().IsByRef)
							{
								text += "ref ";
							}
							text += parameters[i].FullName;
						}
					}
					text += ")";
				}
				return text;
			}

			public override int GetHashCode()
			{
				return hashCode;
			}

			private int GetHashCodeImpl()
			{
				int num = 0;
				if (name != null)
				{
					num = name.GetHashCode();
				}
				if (parameters != null && parameters.Length != 0)
				{
					for (int i = 0; i < parameters.Length; i++)
					{
						if (parameters[i] != null)
						{
							num ^= parameters[i].GetHashCode();
						}
					}
				}
				if (returnType != null)
				{
					num ^= returnType.GetHashCode();
				}
				return num;
			}
		}

		private static readonly char[] nameSeparators = new char[2] { '.', '+' };

		private static readonly char[] elementDecorators = new char[3] { '[', '*', '&' };

		private Type declaringType;

		private string fullName;

		private TypeAttributes typeAttributes;

		private ITypeProvider typeProvider;

		private Attribute[] attributes;

		private ConstructorInfo[] constructors;

		private FieldInfo[] fields;

		private EventInfo[] events;

		private PropertyInfo[] properties;

		private MethodInfo[] methods;

		private Type[] nestedTypes = new Type[0];

		private List<CodeTypeDeclaration> codeDomTypes;

		private CodeNamespaceImportCollection codeNamespaceImports;

		private Guid guid = Guid.Empty;

		internal ITypeProvider Provider => typeProvider;

		public override Assembly Assembly => null;

		public override string AssemblyQualifiedName => FullName;

		public override Type BaseType
		{
			get
			{
				Type type = null;
				if (codeDomTypes != null)
				{
					foreach (CodeTypeDeclaration codeDomType in codeDomTypes)
					{
						foreach (CodeTypeReference baseType in codeDomType.BaseTypes)
						{
							Type type2 = ResolveType(GetTypeNameFromCodeTypeReference(baseType, this));
							if (type2 != null && !type2.IsInterface)
							{
								type = type2;
								break;
							}
						}
						if (type != null && !type.Equals(ResolveType("System.Object")))
						{
							break;
						}
					}
				}
				if (type == null)
				{
					if (base.IsArray)
					{
						type = ResolveType("System.Array");
					}
					else if (codeDomTypes != null && codeDomTypes.Count > 0)
					{
						if (codeDomTypes[0].IsStruct)
						{
							type = ResolveType("System.ValueType");
						}
						else if (codeDomTypes[0].IsEnum)
						{
							type = ResolveType("System.Enum");
						}
						else if (codeDomTypes[0].IsClass && !base.IsByRef && !base.IsPointer)
						{
							type = ResolveType("System.Object");
						}
						else if (codeDomTypes[0] is CodeTypeDelegate)
						{
							type = ResolveType("System.Delegate");
						}
					}
				}
				return type;
			}
		}

		public override Type DeclaringType => declaringType;

		public override string FullName => fullName;

		public override Guid GUID
		{
			get
			{
				if (guid == Guid.Empty)
				{
					guid = Guid.NewGuid();
				}
				return guid;
			}
		}

		public override Module Module => null;

		public override string Name
		{
			get
			{
				string text = fullName;
				int num = text.IndexOf('[');
				num = ((num == -1) ? text.LastIndexOfAny(nameSeparators) : text.Substring(0, num).LastIndexOfAny(nameSeparators));
				if (num != -1)
				{
					text = fullName.Substring(num + 1);
				}
				return text;
			}
		}

		public override string Namespace
		{
			get
			{
				if (fullName == Name)
				{
					return string.Empty;
				}
				if (declaringType != null)
				{
					return declaringType.Namespace;
				}
				return fullName.Substring(0, fullName.Length - Name.Length - 1);
			}
		}

		public override RuntimeTypeHandle TypeHandle
		{
			get
			{
				throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
			}
		}

		public override Type UnderlyingSystemType => this;

		internal DesignTimeType(Type declaringType, string typeName, CodeNamespaceImportCollection codeNamespaceImports, string namespaceName, ITypeProvider typeProvider)
		{
			if (typeName == null)
			{
				throw new ArgumentNullException("typeName");
			}
			if (codeNamespaceImports == null)
			{
				throw new ArgumentNullException("codeNamespaceImports");
			}
			if (typeProvider == null)
			{
				throw new ArgumentNullException("typeProvider");
			}
			if (namespaceName == null && declaringType == null)
			{
				throw new InvalidOperationException(SR.GetString("NamespaceAndDeclaringTypeCannotBeNull"));
			}
			typeName = Helper.EnsureTypeName(typeName);
			namespaceName = Helper.EnsureTypeName(namespaceName);
			if (declaringType == null)
			{
				if (namespaceName.Length == 0)
				{
					fullName = typeName;
				}
				else
				{
					fullName = namespaceName + "." + typeName;
				}
			}
			else
			{
				fullName = declaringType.FullName + "+" + typeName;
			}
			codeDomTypes = new List<CodeTypeDeclaration>();
			this.codeNamespaceImports = codeNamespaceImports;
			this.typeProvider = typeProvider;
			this.declaringType = declaringType;
			typeAttributes = TypeAttributes.NotPublic;
		}

		internal DesignTimeType(Type declaringType, string elementTypeFullName, ITypeProvider typeProvider)
		{
			if (typeProvider == null)
			{
				throw new ArgumentNullException("typeProvider");
			}
			if (elementTypeFullName.LastIndexOfAny(elementDecorators) == -1)
			{
				throw new ArgumentException(SR.GetString("NotElementType"), "elementTypeFullName");
			}
			if (elementTypeFullName == null)
			{
				throw new ArgumentNullException("FullName");
			}
			fullName = Helper.EnsureTypeName(elementTypeFullName);
			codeDomTypes = null;
			nestedTypes = new Type[0];
			codeNamespaceImports = null;
			this.typeProvider = typeProvider;
			this.declaringType = declaringType;
			Type elementType = GetElementType();
			if (elementType == null)
			{
				throw new ArgumentException(SR.GetString("NotElementType"), "elementTypeFullName");
			}
			if (base.IsArray)
			{
				typeAttributes = (elementType.Attributes & TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic | TypeAttributes.Sealed | TypeAttributes.Serializable;
			}
			else
			{
				typeAttributes = TypeAttributes.NotPublic;
			}
		}

		internal void AddCodeTypeDeclaration(CodeTypeDeclaration codeDomType)
		{
			if (codeDomType == null)
			{
				throw new ArgumentNullException("codeDomType");
			}
			typeAttributes |= codeDomType.TypeAttributes & ~TypeAttributes.Public;
			typeAttributes |= Helper.ConvertToTypeAttributes(codeDomType.Attributes, declaringType);
			foreach (CodeAttributeDeclaration customAttribute in codeDomType.CustomAttributes)
			{
				if (string.Equals(customAttribute.Name, "System.SerializableAttribute", StringComparison.Ordinal) || string.Equals(customAttribute.Name, "System.Serializable", StringComparison.Ordinal) || string.Equals(customAttribute.Name, "SerializableAttribute", StringComparison.Ordinal) || string.Equals(customAttribute.Name, "Serializable", StringComparison.Ordinal))
				{
					typeAttributes |= TypeAttributes.Serializable;
					break;
				}
			}
			codeDomTypes.Add(codeDomType);
			attributes = null;
			constructors = null;
			fields = null;
			events = null;
			properties = null;
			methods = null;
			LoadNestedTypes(codeDomType);
		}

		public Type GetEnumType()
		{
			if (codeDomTypes != null)
			{
				foreach (CodeTypeDeclaration codeDomType in codeDomTypes)
				{
					Type type = codeDomType.UserData[typeof(Enum)] as Type;
					if (type != null)
					{
						return type;
					}
					if (codeDomType.BaseTypes.Count > 1)
					{
						CodeTypeReference codeTypeReference = codeDomType.BaseTypes[1];
						Type type2 = codeTypeReference.UserData[typeof(Enum)] as Type;
						if (type2 != null)
						{
							return type2;
						}
					}
				}
			}
			return typeof(int);
		}

		public override object[] GetCustomAttributes(bool inherit)
		{
			return GetCustomAttributes(typeof(object), inherit);
		}

		public override object[] GetCustomAttributes(Type attributeType, bool inherit)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			if (codeDomTypes != null && attributes == null)
			{
				CodeAttributeDeclarationCollection codeAttributeDeclarationCollection = new CodeAttributeDeclarationCollection();
				foreach (CodeTypeDeclaration codeDomType in codeDomTypes)
				{
					codeAttributeDeclarationCollection.AddRange(codeDomType.CustomAttributes);
				}
				attributes = Helper.LoadCustomAttributes(codeAttributeDeclarationCollection, this);
			}
			if (attributes != null)
			{
				return Helper.GetCustomAttributes(attributeType, inherit, attributes, this);
			}
			return new object[0];
		}

		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr)
		{
			return GetMembersHelper(bindingAttr, ref constructors, searchBase: false);
		}

		public override EventInfo GetEvent(string name, BindingFlags bindingAttr)
		{
			return GetMemberHelper(bindingAttr, new MemberSignature(name, null, null), ref events);
		}

		public override EventInfo[] GetEvents(BindingFlags bindingAttr)
		{
			return GetMembersHelper(bindingAttr, ref events, searchBase: true);
		}

		public override FieldInfo GetField(string name, BindingFlags bindingAttr)
		{
			return GetMemberHelper(bindingAttr, new MemberSignature(name, null, null), ref fields);
		}

		public override FieldInfo[] GetFields(BindingFlags bindingAttr)
		{
			return GetMembersHelper(bindingAttr, ref fields, searchBase: true);
		}

		public override MethodInfo[] GetMethods(BindingFlags bindingAttr)
		{
			return GetMembersHelper(bindingAttr, ref methods, searchBase: true);
		}

		public override PropertyInfo[] GetProperties(BindingFlags bindingAttr)
		{
			return GetMembersHelper(bindingAttr, ref properties, searchBase: true);
		}

		public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr)
		{
			VerifyGetMemberArguments(name, bindingAttr);
			List<MemberInfo> list = new List<MemberInfo>();
			if ((type & MemberTypes.Method) != 0)
			{
				list.AddRange(GetMembersHelper(bindingAttr, new MemberSignature(name, null, null), ref methods));
			}
			if ((type & MemberTypes.Constructor) != 0)
			{
				list.AddRange(GetMembersHelper(bindingAttr, new MemberSignature(name, null, null), ref constructors));
			}
			if ((type & MemberTypes.Property) != 0)
			{
				list.AddRange(GetMembersHelper(bindingAttr, new MemberSignature(name, null, null), ref properties));
			}
			if ((type & MemberTypes.Event) != 0)
			{
				list.AddRange(GetMembersHelper(bindingAttr, new MemberSignature(name, null, null), ref events));
			}
			if ((type & MemberTypes.Field) != 0)
			{
				list.AddRange(GetMembersHelper(bindingAttr, new MemberSignature(name, null, null), ref fields));
			}
			if ((type & MemberTypes.NestedType) != 0)
			{
				list.AddRange(GetMembersHelper(bindingAttr, new MemberSignature(name, null, null), ref nestedTypes));
			}
			return list.ToArray();
		}

		public override MemberInfo[] GetMembers(BindingFlags bindingAttr)
		{
			VerifyGetMemberArguments(bindingAttr);
			ArrayList arrayList = new ArrayList();
			arrayList.AddRange(GetMethods(bindingAttr));
			arrayList.AddRange(GetProperties(bindingAttr));
			arrayList.AddRange(GetEvents(bindingAttr));
			arrayList.AddRange(GetFields(bindingAttr));
			arrayList.AddRange(GetNestedTypes(bindingAttr));
			return (MemberInfo[])arrayList.ToArray(typeof(MemberInfo));
		}

		public override MemberInfo[] GetDefaultMembers()
		{
			DefaultMemberAttribute defaultMemberAttribute = null;
			Type type = this;
			while (type != null)
			{
				object[] customAttributes = GetCustomAttributes(typeof(DefaultMemberAttribute), inherit: false);
				if (customAttributes != null && customAttributes.Length != 0)
				{
					defaultMemberAttribute = customAttributes[0] as DefaultMemberAttribute;
				}
				if (defaultMemberAttribute != null)
				{
					break;
				}
				type = type.BaseType;
			}
			if (defaultMemberAttribute == null)
			{
				return new MemberInfo[0];
			}
			string memberName = defaultMemberAttribute.MemberName;
			MemberInfo[] array = GetMember(memberName);
			if (array == null)
			{
				array = new MemberInfo[0];
			}
			return array;
		}

		public override Type GetNestedType(string name, BindingFlags bindingAttr)
		{
			return GetMemberHelper(bindingAttr, new MemberSignature(name, null, null), ref nestedTypes);
		}

		public override Type[] GetNestedTypes(BindingFlags bindingAttr)
		{
			return GetMembersHelper(bindingAttr, ref nestedTypes, searchBase: false);
		}

		public override Type GetInterface(string name, bool ignoreCase)
		{
			if (codeDomTypes != null)
			{
				StringComparison comparisonType = (ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal);
				foreach (CodeTypeDeclaration codeDomType in codeDomTypes)
				{
					foreach (CodeTypeReference baseType in codeDomType.BaseTypes)
					{
						Type type = ResolveType(GetTypeNameFromCodeTypeReference(baseType, this));
						if (type != null)
						{
							if (type.IsInterface && string.Equals(type.FullName, name, comparisonType))
							{
								return type;
							}
							Type @interface = type.GetInterface(name, ignoreCase);
							if (@interface != null)
							{
								return @interface;
							}
						}
					}
				}
			}
			return null;
		}

		public override Type[] GetInterfaces()
		{
			ArrayList arrayList = new ArrayList();
			if (codeDomTypes != null)
			{
				foreach (CodeTypeDeclaration codeDomType in codeDomTypes)
				{
					foreach (CodeTypeReference baseType in codeDomType.BaseTypes)
					{
						Type type = ResolveType(GetTypeNameFromCodeTypeReference(baseType, this));
						if (!(type != null))
						{
							continue;
						}
						if (type.IsInterface && !arrayList.Contains(type))
						{
							arrayList.Add(type);
						}
						Type[] interfaces = type.GetInterfaces();
						Type[] array = interfaces;
						foreach (Type type2 in array)
						{
							if (type2 != null && !arrayList.Contains(type2))
							{
								arrayList.Add(type2);
							}
						}
					}
				}
			}
			return (Type[])arrayList.ToArray(typeof(Type));
		}

		public override object InvokeMember(string name, BindingFlags bindingFlags, Binder binder, object target, object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParams)
		{
			throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
		}

		public override string ToString()
		{
			return fullName;
		}

		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		public override bool IsDefined(Type attributeType, bool inherit)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			GetCustomAttributes(inherit: true);
			if (Helper.IsDefined(attributeType, inherit, attributes, this))
			{
				return true;
			}
			return false;
		}

		public override Type GetElementType()
		{
			Type result = null;
			int num = fullName.LastIndexOfAny(elementDecorators);
			if (num >= 0)
			{
				result = ResolveType(fullName.Substring(0, num));
			}
			return result;
		}

		public override int GetArrayRank()
		{
			if (!base.IsArray)
			{
				throw new ArgumentException(TypeSystemSR.GetString("Error_TypeIsNotArray"));
			}
			int i = Name.LastIndexOf('[');
			int num = 1;
			for (; Name[i] != ']'; i++)
			{
				if (Name[i] == ',')
				{
					num++;
				}
			}
			return num;
		}

		public override bool IsAssignableFrom(Type c)
		{
			return TypeProvider.IsAssignable(this, c);
		}

		public override bool IsSubclassOf(Type c)
		{
			if (c == null)
			{
				return false;
			}
			return TypeProvider.IsSubclassOf(this, c);
		}

		public override Type MakeArrayType()
		{
			return typeProvider.GetType(string.Format(CultureInfo.InvariantCulture, "{0}[]", new object[1] { FullName }));
		}

		private void VerifyGetMemberArguments(string name, BindingFlags bindingAttr)
		{
			if (name == null)
			{
				throw new ArgumentNullException("name");
			}
			VerifyGetMemberArguments(bindingAttr);
		}

		private void VerifyGetMemberArguments(BindingFlags bindingAttr)
		{
			BindingFlags bindingFlags = BindingFlags.IgnoreCase | BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy;
			if ((bindingAttr & ~bindingFlags) != 0)
			{
				throw new ArgumentException(TypeSystemSR.GetString("Error_GetMemberBindingOptions"));
			}
		}

		internal Type ResolveType(string name)
		{
			Type type = null;
			type = typeProvider.GetType(name);
			if (type == null && !string.IsNullOrEmpty(Namespace))
			{
				type = typeProvider.GetType(Namespace + "." + name);
			}
			if (type == null)
			{
				type = typeProvider.GetType(fullName + "+" + name);
			}
			if (type == null && codeNamespaceImports != null)
			{
				foreach (CodeNamespaceImport codeNamespaceImport in codeNamespaceImports)
				{
					type = typeProvider.GetType(codeNamespaceImport.Namespace + "." + name);
					if (type != null)
					{
						break;
					}
				}
			}
			if (type == null)
			{
				string text = name;
				int num = name.IndexOf('.');
				int num2 = -1;
				while ((num2 = text.LastIndexOf('.')) != num && type == null)
				{
					text = text.Substring(0, num2) + "+" + text.Substring(num2 + 1);
					type = typeProvider.GetType(text);
				}
			}
			return type;
		}

		private bool FilterMember(MemberInfo memberInfo, BindingFlags bindingFlags)
		{
			bool flag = false;
			bool flag2 = false;
			if (base.IsInterface)
			{
				flag = true;
				flag2 = false;
			}
			else if (memberInfo is MethodBase)
			{
				flag = (memberInfo as MethodBase).IsPublic;
				flag2 = (memberInfo as MethodBase).IsStatic;
			}
			else if (memberInfo is DesignTimeEventInfo)
			{
				flag = (memberInfo as DesignTimeEventInfo).IsPublic;
				flag2 = (memberInfo as DesignTimeEventInfo).IsStatic;
			}
			else if (memberInfo is FieldInfo)
			{
				flag = (memberInfo as FieldInfo).IsPublic;
				flag2 = (memberInfo as FieldInfo).IsStatic;
			}
			else if (memberInfo is PropertyInfo)
			{
				PropertyInfo propertyInfo = memberInfo as PropertyInfo;
				MethodInfo methodInfo = null;
				methodInfo = ((!propertyInfo.CanRead) ? propertyInfo.GetSetMethod(nonPublic: true) : propertyInfo.GetGetMethod(nonPublic: true));
				if (methodInfo != null)
				{
					flag = methodInfo.IsPublic;
					flag2 = methodInfo.IsStatic;
				}
			}
			else if (memberInfo is Type)
			{
				flag = (memberInfo as Type).IsPublic || (memberInfo as Type).IsNestedPublic;
				if (!flag || (bindingFlags & BindingFlags.Public) == 0)
				{
					if (!flag)
					{
						return (bindingFlags & BindingFlags.NonPublic) != 0;
					}
					return false;
				}
				return true;
			}
			if ((flag && (bindingFlags & BindingFlags.Public) != 0) || (!flag && (bindingFlags & BindingFlags.NonPublic) != 0))
			{
				if (!flag2 || (bindingFlags & BindingFlags.Static) == 0)
				{
					if (!flag2)
					{
						return (bindingFlags & BindingFlags.Instance) != 0;
					}
					return false;
				}
				return true;
			}
			return false;
		}

		private T[] GetMembersHelper<T>(BindingFlags bindingAttr, ref T[] members, bool searchBase) where T : MemberInfo
		{
			VerifyGetMemberArguments(bindingAttr);
			EnsureMembers(typeof(T));
			Dictionary<MemberSignature, T> dictionary = new Dictionary<MemberSignature, T>();
			T[] array = members;
			foreach (T val in array)
			{
				MemberSignature key = new MemberSignature(val);
				if (FilterMember(val, bindingAttr) && !dictionary.ContainsKey(key))
				{
					dictionary.Add(new MemberSignature(val), val);
				}
			}
			if (searchBase && (bindingAttr & BindingFlags.DeclaredOnly) == 0)
			{
				if ((bindingAttr & BindingFlags.FlattenHierarchy) == 0)
				{
					bindingAttr &= ~BindingFlags.Static;
				}
				Type baseType = BaseType;
				if (baseType != null)
				{
					T[] array2 = GetBaseMembers(typeof(T), baseType, bindingAttr) as T[];
					T[] array3 = array2;
					foreach (T val2 in array3)
					{
						if ((!(val2 is FieldInfo) || !(val2 as FieldInfo).IsPrivate) && (!(val2 is MethodBase) || !(val2 as MethodBase).IsPrivate) && (!(val2 is Type) || !(val2 as Type).IsNestedPrivate))
						{
							MemberSignature key2 = new MemberSignature(val2);
							if (!dictionary.ContainsKey(key2))
							{
								dictionary.Add(key2, val2);
							}
						}
					}
				}
			}
			List<T> list = new List<T>(dictionary.Values);
			return list.ToArray();
		}

		private MemberInfo[] GetBaseMembers(Type type, Type baseType, BindingFlags bindingAttr)
		{
			MemberInfo[] result = null;
			if (type == typeof(PropertyInfo))
			{
				MemberInfo[] array = baseType.GetProperties(bindingAttr);
				result = array;
			}
			else if (type == typeof(EventInfo))
			{
				MemberInfo[] array = baseType.GetEvents(bindingAttr);
				result = array;
			}
			else if (type == typeof(ConstructorInfo))
			{
				MemberInfo[] array = baseType.GetConstructors(bindingAttr);
				result = array;
			}
			else if (type == typeof(MethodInfo))
			{
				MemberInfo[] array = baseType.GetMethods(bindingAttr);
				result = array;
			}
			else if (type == typeof(FieldInfo))
			{
				MemberInfo[] array = baseType.GetFields(bindingAttr);
				result = array;
			}
			else if (type == typeof(Type))
			{
				MemberInfo[] array = baseType.GetNestedTypes(bindingAttr);
				result = array;
			}
			return result;
		}

		private T[] GetMembersHelper<T>(BindingFlags bindingAttr, MemberSignature memberSignature, ref T[] members) where T : MemberInfo
		{
			List<T> list = new List<T>();
			T[] membersHelper = GetMembersHelper(bindingAttr, ref members, searchBase: true);
			foreach (T val in membersHelper)
			{
				MemberSignature memberSignature2 = new MemberSignature(val);
				if (memberSignature2.FilterSignature(memberSignature))
				{
					list.Add(val);
				}
			}
			return list.ToArray();
		}

		private T GetMemberHelper<T>(BindingFlags bindingAttr, MemberSignature memberSignature, ref T[] members) where T : MemberInfo
		{
			VerifyGetMemberArguments(bindingAttr);
			EnsureMembers(typeof(T));
			T[] array = members;
			foreach (T val in array)
			{
				MemberSignature memberSignature2 = new MemberSignature(val);
				if (memberSignature2.FilterSignature(memberSignature) && FilterMember(val, bindingAttr))
				{
					return val;
				}
			}
			if ((bindingAttr & BindingFlags.DeclaredOnly) == 0)
			{
				if ((bindingAttr & BindingFlags.FlattenHierarchy) == 0)
				{
					bindingAttr &= ~BindingFlags.Static;
				}
				Type baseType = BaseType;
				if (baseType != null)
				{
					T val2 = (T)GetBaseMember(typeof(T), baseType, bindingAttr, memberSignature);
					if (val2 != null)
					{
						if ((val2 is FieldInfo && (val2 as FieldInfo).IsPrivate) || (val2 is MethodBase && (val2 as MethodBase).IsPrivate) || (val2 is Type && (val2 as Type).IsNestedPrivate))
						{
							return null;
						}
						return val2;
					}
				}
			}
			return null;
		}

		internal MemberInfo GetBaseMember(Type type, Type baseType, BindingFlags bindingAttr, MemberSignature memberSignature)
		{
			if (memberSignature == null)
			{
				throw new ArgumentNullException("memberSignature");
			}
			if (baseType == null)
			{
				return null;
			}
			MemberInfo result = null;
			if (typeof(PropertyInfo).IsAssignableFrom(type))
			{
				result = ((memberSignature.Parameters == null) ? baseType.GetProperty(memberSignature.Name, bindingAttr) : baseType.GetProperty(memberSignature.Name, bindingAttr, null, memberSignature.ReturnType, memberSignature.Parameters, null));
			}
			else if (typeof(EventInfo).IsAssignableFrom(type))
			{
				result = baseType.GetEvent(memberSignature.Name, bindingAttr);
			}
			else if (typeof(ConstructorInfo).IsAssignableFrom(type))
			{
				result = baseType.GetConstructor(bindingAttr, null, memberSignature.Parameters, null);
			}
			else if (typeof(MethodInfo).IsAssignableFrom(type))
			{
				result = ((memberSignature.Parameters == null) ? baseType.GetMethod(memberSignature.Name, bindingAttr) : baseType.GetMethod(memberSignature.Name, bindingAttr, null, memberSignature.Parameters, null));
			}
			else if (typeof(FieldInfo).IsAssignableFrom(type))
			{
				result = baseType.GetField(memberSignature.Name, bindingAttr);
			}
			else if (typeof(Type).IsAssignableFrom(type))
			{
				result = baseType.GetNestedType(memberSignature.Name, bindingAttr);
			}
			return result;
		}

		internal static string GetTypeNameFromCodeTypeReference(CodeTypeReference codeTypeReference, DesignTimeType declaringType)
		{
			StringBuilder stringBuilder = new StringBuilder();
			if (codeTypeReference.ArrayRank == 0)
			{
				Type type = null;
				if (declaringType != null)
				{
					type = declaringType.ResolveType(codeTypeReference.BaseType);
				}
				if (type != null)
				{
					stringBuilder.Append(type.FullName);
				}
				else
				{
					stringBuilder.Append(codeTypeReference.BaseType);
				}
				if (codeTypeReference.TypeArguments != null && codeTypeReference.TypeArguments.Count > 0)
				{
					if (codeTypeReference.BaseType.IndexOf('`') == -1)
					{
						stringBuilder.Append(string.Format(CultureInfo.InvariantCulture, "`{0}", new object[1] { codeTypeReference.TypeArguments.Count }));
					}
					stringBuilder.Append("[");
					foreach (CodeTypeReference typeArgument in codeTypeReference.TypeArguments)
					{
						stringBuilder.Append("[");
						stringBuilder.Append(GetTypeNameFromCodeTypeReference(typeArgument, declaringType));
						stringBuilder.Append("],");
					}
					stringBuilder.Length--;
					stringBuilder.Append("]");
				}
			}
			else
			{
				stringBuilder.Append(GetTypeNameFromCodeTypeReference(codeTypeReference.ArrayElementType, declaringType));
				stringBuilder.Append("[");
				for (int i = 0; i < codeTypeReference.ArrayRank - 1; i++)
				{
					stringBuilder.Append(',');
				}
				stringBuilder.Append("]");
			}
			return stringBuilder.ToString();
		}

		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
		{
			return GetMemberHelper(bindingAttr, new MemberSignature(null, types, null), ref constructors);
		}

		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
		{
			return GetMemberHelper(bindingAttr, new MemberSignature(name, types, null), ref methods);
		}

		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)
		{
			return GetMemberHelper(bindingAttr, new MemberSignature(name, types, null), ref properties);
		}

		protected override TypeAttributes GetAttributeFlagsImpl()
		{
			return typeAttributes;
		}

		protected override bool HasElementTypeImpl()
		{
			int num = Name.LastIndexOfAny(elementDecorators);
			return num != -1;
		}

		protected override bool IsArrayImpl()
		{
			int num = Name.LastIndexOfAny(elementDecorators);
			if (num != -1 && Name[num] == '[')
			{
				return true;
			}
			return false;
		}

		protected override bool IsByRefImpl()
		{
			return fullName[fullName.Length - 1] == '&';
		}

		public override Type MakeByRefType()
		{
			return ResolveType(fullName + "&");
		}

		protected override bool IsCOMObjectImpl()
		{
			return false;
		}

		protected override bool IsContextfulImpl()
		{
			return false;
		}

		protected override bool IsMarshalByRefImpl()
		{
			return false;
		}

		protected override bool IsPointerImpl()
		{
			return fullName[fullName.Length - 1] == '*';
		}

		protected override bool IsPrimitiveImpl()
		{
			return false;
		}

		private void EnsureMembers(Type type)
		{
			if (type == typeof(PropertyInfo) && properties == null)
			{
				properties = GetCodeDomMembers<PropertyInfo>().ToArray();
			}
			else if (type == typeof(FieldInfo) && fields == null)
			{
				fields = GetCodeDomMembers<FieldInfo>().ToArray();
			}
			else if (type == typeof(ConstructorInfo) && constructors == null)
			{
				constructors = GetCodeDomConstructors().ToArray();
			}
			else if (type == typeof(EventInfo) && events == null)
			{
				events = GetCodeDomMembers<EventInfo>().ToArray();
			}
			else
			{
				if (!(type == typeof(MethodInfo)) || methods != null)
				{
					return;
				}
				EnsureMembers(typeof(PropertyInfo));
				EnsureMembers(typeof(EventInfo));
				List<MethodInfo> codeDomMembers = GetCodeDomMembers<MethodInfo>();
				MethodInfo methodInfo = null;
				PropertyInfo[] array = properties;
				foreach (PropertyInfo propertyInfo in array)
				{
					if ((methodInfo = propertyInfo.GetGetMethod()) != null)
					{
						codeDomMembers.Add(methodInfo);
					}
					if ((methodInfo = propertyInfo.GetSetMethod()) != null)
					{
						codeDomMembers.Add(methodInfo);
					}
				}
				EventInfo[] array2 = events;
				foreach (EventInfo eventInfo in array2)
				{
					if ((methodInfo = eventInfo.GetAddMethod()) != null)
					{
						codeDomMembers.Add(methodInfo);
					}
					if ((methodInfo = eventInfo.GetRemoveMethod()) != null)
					{
						codeDomMembers.Add(methodInfo);
					}
					if ((methodInfo = eventInfo.GetRaiseMethod()) != null)
					{
						codeDomMembers.Add(methodInfo);
					}
				}
				methods = codeDomMembers.ToArray();
			}
		}

		private List<T> GetCodeDomMembers<T>() where T : MemberInfo
		{
			List<T> list = new List<T>();
			if (codeDomTypes != null)
			{
				foreach (CodeTypeDeclaration codeDomType in codeDomTypes)
				{
					if (codeDomType is CodeTypeDelegate && typeof(T) == typeof(MethodInfo))
					{
						CodeMemberMethod codeMemberMethod = new CodeMemberMethod();
						codeMemberMethod.Name = "Invoke";
						codeMemberMethod.Attributes = MemberAttributes.Public;
						foreach (CodeParameterDeclarationExpression parameter in ((CodeTypeDelegate)codeDomType).Parameters)
						{
							codeMemberMethod.Parameters.Add(parameter);
						}
						codeMemberMethod.ReturnType = ((CodeTypeDelegate)codeDomType).ReturnType;
						list.Add((T)CreateMemberInfo(typeof(MethodInfo), codeMemberMethod));
					}
					foreach (CodeTypeMember member in codeDomType.Members)
					{
						T val = (T)CreateMemberInfo(typeof(T), member);
						if (val != null)
						{
							list.Add(val);
						}
					}
				}
			}
			return list;
		}

		private List<ConstructorInfo> GetCodeDomConstructors()
		{
			List<ConstructorInfo> codeDomMembers = GetCodeDomMembers<ConstructorInfo>();
			if (base.IsValueType || (codeDomMembers.Count == 0 && !base.IsAbstract))
			{
				CodeConstructor codeConstructor = new CodeConstructor();
				codeConstructor.Attributes = MemberAttributes.Public;
				ConstructorInfo item = new DesignTimeConstructorInfo(this, codeConstructor);
				codeDomMembers.Add(item);
			}
			return codeDomMembers;
		}

		private void LoadNestedTypes(CodeTypeDeclaration codeDomType)
		{
			List<Type> list = new List<Type>();
			Type[] array = nestedTypes;
			foreach (Type item in array)
			{
				list.Add(item);
			}
			foreach (CodeTypeMember member in codeDomType.Members)
			{
				if (!(member is CodeTypeDeclaration))
				{
					continue;
				}
				CodeTypeDeclaration codeTypeDeclaration = member as CodeTypeDeclaration;
				Type type = null;
				foreach (Type item2 in list)
				{
					if (item2.Name.Equals(Helper.EnsureTypeName(codeTypeDeclaration.Name)))
					{
						type = item2;
						break;
					}
				}
				if (type == null)
				{
					type = new DesignTimeType(this, codeTypeDeclaration.Name, codeNamespaceImports, fullName, typeProvider);
					list.Add(type);
					((TypeProvider)typeProvider).AddType(type);
				}
				((DesignTimeType)type).AddCodeTypeDeclaration(codeTypeDeclaration);
			}
			nestedTypes = list.ToArray();
		}

		private MemberInfo CreateMemberInfo(Type memberInfoType, CodeTypeMember member)
		{
			MemberInfo result = null;
			if (memberInfoType == typeof(PropertyInfo) && member is CodeMemberProperty)
			{
				result = new DesignTimePropertyInfo(this, member as CodeMemberProperty);
			}
			else if (memberInfoType == typeof(EventInfo) && member is CodeMemberEvent)
			{
				result = new DesignTimeEventInfo(this, member as CodeMemberEvent);
			}
			else if (memberInfoType == typeof(FieldInfo) && member is CodeMemberField)
			{
				result = new DesignTimeFieldInfo(this, member as CodeMemberField);
			}
			else if (memberInfoType == typeof(ConstructorInfo) && (member is CodeConstructor || member is CodeTypeConstructor))
			{
				result = new DesignTimeConstructorInfo(this, member as CodeMemberMethod);
			}
			else if (memberInfoType == typeof(MethodInfo) && member.GetType() == typeof(CodeMemberMethod))
			{
				result = new DesignTimeMethodInfo(this, member as CodeMemberMethod);
			}
			return result;
		}

		public object Clone()
		{
			return this;
		}
	}
	internal sealed class DesignTimeEventInfo : EventInfo
	{
		private string name;

		private DesignTimeMethodInfo addMethod;

		private DesignTimeMethodInfo removeMethod;

		private Attribute[] attributes;

		private MemberAttributes memberAttributes;

		private DesignTimeType declaringType;

		private CodeMemberEvent codeDomEvent;

		public override EventAttributes Attributes => EventAttributes.None;

		public override string Name => name;

		public override Type DeclaringType => declaringType;

		public override Type ReflectedType => declaringType;

		internal bool IsPublic => (memberAttributes & MemberAttributes.Public) != 0;

		internal bool IsStatic => (memberAttributes & MemberAttributes.Static) != 0;

		internal DesignTimeEventInfo(DesignTimeType declaringType, CodeMemberEvent codeDomEvent)
		{
			if (declaringType == null)
			{
				throw new ArgumentNullException("Declaring Type");
			}
			if (codeDomEvent == null)
			{
				throw new ArgumentNullException("codeDomEvent");
			}
			this.declaringType = declaringType;
			this.codeDomEvent = codeDomEvent;
			name = Helper.EnsureTypeName(codeDomEvent.Name);
			memberAttributes = codeDomEvent.Attributes;
			addMethod = null;
			removeMethod = null;
		}

		public override MethodInfo GetAddMethod(bool nonPublic)
		{
			if (addMethod == null)
			{
				Type type = declaringType.ResolveType(DesignTimeType.GetTypeNameFromCodeTypeReference(codeDomEvent.Type, declaringType));
				if (type != null)
				{
					CodeMemberMethod codeMemberMethod = new CodeMemberMethod();
					codeMemberMethod.Name = "add_" + name;
					codeMemberMethod.ReturnType = new CodeTypeReference(typeof(void));
					codeMemberMethod.Parameters.Add(new CodeParameterDeclarationExpression(codeDomEvent.Type, "Handler"));
					codeMemberMethod.Attributes = memberAttributes;
					addMethod = new DesignTimeMethodInfo(declaringType, codeMemberMethod, isSpecialName: true);
				}
			}
			return addMethod;
		}

		public override MethodInfo GetRemoveMethod(bool nonPublic)
		{
			if (removeMethod == null)
			{
				Type type = declaringType.ResolveType(DesignTimeType.GetTypeNameFromCodeTypeReference(codeDomEvent.Type, declaringType));
				if (type != null)
				{
					CodeMemberMethod codeMemberMethod = new CodeMemberMethod();
					codeMemberMethod.Name = "remove_" + name;
					codeMemberMethod.ReturnType = new CodeTypeReference(typeof(void));
					codeMemberMethod.Parameters.Add(new CodeParameterDeclarationExpression(type, "Handler"));
					codeMemberMethod.Attributes = memberAttributes;
					removeMethod = new DesignTimeMethodInfo(declaringType, codeMemberMethod, isSpecialName: true);
				}
			}
			return removeMethod;
		}

		public override MethodInfo GetRaiseMethod(bool nonPublic)
		{
			return null;
		}

		public override object[] GetCustomAttributes(bool inherit)
		{
			return GetCustomAttributes(typeof(object), inherit);
		}

		public override object[] GetCustomAttributes(Type attributeType, bool inherit)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			if (attributes == null)
			{
				attributes = Helper.LoadCustomAttributes(codeDomEvent.CustomAttributes, DeclaringType as DesignTimeType);
			}
			return Helper.GetCustomAttributes(attributeType, inherit, attributes, this);
		}

		public override bool IsDefined(Type attributeType, bool inherit)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			if (attributes == null)
			{
				attributes = Helper.LoadCustomAttributes(codeDomEvent.CustomAttributes, DeclaringType as DesignTimeType);
			}
			if (Helper.IsDefined(attributeType, inherit, attributes, this))
			{
				return true;
			}
			return false;
		}
	}
	internal sealed class DesignTimeFieldInfo : FieldInfo
	{
		private Attribute[] attributes;

		private FieldAttributes fieldAttributes;

		private DesignTimeType declaringType;

		private CodeMemberField codeDomField;

		public override RuntimeFieldHandle FieldHandle
		{
			get
			{
				throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
			}
		}

		public override Type FieldType => declaringType.ResolveType(DesignTimeType.GetTypeNameFromCodeTypeReference(codeDomField.Type, declaringType));

		public override FieldAttributes Attributes => fieldAttributes;

		public override string Name => Helper.EnsureTypeName(codeDomField.Name);

		public override Type DeclaringType => declaringType;

		public override Type ReflectedType => declaringType;

		internal DesignTimeFieldInfo(DesignTimeType declaringType, CodeMemberField codeDomField)
		{
			if (declaringType == null)
			{
				throw new ArgumentNullException("Declaring Type");
			}
			if (codeDomField == null)
			{
				throw new ArgumentNullException("codeDomEvent");
			}
			this.declaringType = declaringType;
			this.codeDomField = codeDomField;
			fieldAttributes = Helper.ConvertToFieldAttributes(codeDomField.Attributes);
		}

		public override object GetValue(object obj)
		{
			throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
		}

		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture)
		{
			throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
		}

		public override object[] GetCustomAttributes(bool inherit)
		{
			return GetCustomAttributes(typeof(object), inherit);
		}

		public override object[] GetCustomAttributes(Type attributeType, bool inherit)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			if (attributes == null)
			{
				attributes = Helper.LoadCustomAttributes(codeDomField.CustomAttributes, DeclaringType as DesignTimeType);
			}
			return Helper.GetCustomAttributes(attributeType, inherit, attributes, this);
		}

		public override bool IsDefined(Type attributeType, bool inherit)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			if (attributes == null)
			{
				attributes = Helper.LoadCustomAttributes(codeDomField.CustomAttributes, DeclaringType as DesignTimeType);
			}
			if (Helper.IsDefined(attributeType, inherit, attributes, this))
			{
				return true;
			}
			return false;
		}
	}
	internal static class Helper
	{
		internal static ParameterAttributes ConvertToParameterAttributes(FieldDirection direction)
		{
			ParameterAttributes parameterAttributes = ParameterAttributes.None;
			return direction switch
			{
				FieldDirection.In => ParameterAttributes.In, 
				FieldDirection.Out => ParameterAttributes.Out, 
				_ => ParameterAttributes.None, 
			};
		}

		internal static MethodAttributes ConvertToMethodAttributes(MemberAttributes memberAttributes)
		{
			MethodAttributes methodAttributes = MethodAttributes.PrivateScope;
			if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Assembly)
			{
				methodAttributes |= MethodAttributes.Assembly;
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Family)
			{
				methodAttributes |= MethodAttributes.Family;
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.FamilyAndAssembly)
			{
				methodAttributes |= MethodAttributes.FamANDAssem;
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.FamilyOrAssembly)
			{
				methodAttributes |= MethodAttributes.FamORAssem;
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Private)
			{
				methodAttributes |= MethodAttributes.Private;
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public)
			{
				methodAttributes |= MethodAttributes.Public;
			}
			if ((memberAttributes & MemberAttributes.ScopeMask) == MemberAttributes.Abstract)
			{
				methodAttributes |= MethodAttributes.Abstract;
			}
			else if ((memberAttributes & MemberAttributes.ScopeMask) == MemberAttributes.Final)
			{
				methodAttributes |= MethodAttributes.Final;
			}
			else if ((memberAttributes & MemberAttributes.ScopeMask) == MemberAttributes.Static)
			{
				methodAttributes |= MethodAttributes.Static;
			}
			if ((memberAttributes & MemberAttributes.VTableMask) == MemberAttributes.New)
			{
				methodAttributes |= MethodAttributes.VtableLayoutMask;
			}
			return methodAttributes;
		}

		internal static FieldAttributes ConvertToFieldAttributes(MemberAttributes memberAttributes)
		{
			FieldAttributes fieldAttributes = FieldAttributes.PrivateScope;
			if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Assembly)
			{
				fieldAttributes |= FieldAttributes.Assembly;
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Family)
			{
				fieldAttributes |= FieldAttributes.Family;
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.FamilyAndAssembly)
			{
				fieldAttributes |= FieldAttributes.FamANDAssem;
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.FamilyOrAssembly)
			{
				fieldAttributes |= FieldAttributes.FamORAssem;
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Private)
			{
				fieldAttributes |= FieldAttributes.Private;
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public)
			{
				fieldAttributes |= FieldAttributes.Public;
			}
			if ((memberAttributes & MemberAttributes.ScopeMask) == MemberAttributes.Const)
			{
				fieldAttributes |= FieldAttributes.Static | FieldAttributes.Literal;
			}
			else if ((memberAttributes & MemberAttributes.ScopeMask) == MemberAttributes.Static)
			{
				fieldAttributes |= FieldAttributes.Static;
			}
			return fieldAttributes;
		}

		internal static TypeAttributes ConvertToTypeAttributes(MemberAttributes memberAttributes, Type declaringType)
		{
			TypeAttributes typeAttributes = TypeAttributes.NotPublic;
			if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Assembly)
			{
				typeAttributes |= ((declaringType != null) ? TypeAttributes.NestedAssembly : TypeAttributes.NotPublic);
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Family)
			{
				typeAttributes |= ((declaringType != null) ? TypeAttributes.NestedFamily : TypeAttributes.NotPublic);
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.FamilyAndAssembly)
			{
				typeAttributes |= ((declaringType != null) ? TypeAttributes.NestedFamANDAssem : TypeAttributes.NotPublic);
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.FamilyOrAssembly)
			{
				typeAttributes |= ((declaringType != null) ? TypeAttributes.VisibilityMask : TypeAttributes.NotPublic);
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Private)
			{
				typeAttributes |= ((declaringType != null) ? TypeAttributes.NestedPrivate : TypeAttributes.NotPublic);
			}
			else if ((memberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public)
			{
				typeAttributes |= ((!(declaringType != null)) ? TypeAttributes.Public : TypeAttributes.NestedPublic);
			}
			if ((memberAttributes & MemberAttributes.ScopeMask) == MemberAttributes.Abstract)
			{
				typeAttributes |= TypeAttributes.Abstract;
			}
			else if ((memberAttributes & MemberAttributes.ScopeMask) == MemberAttributes.Final)
			{
				typeAttributes |= TypeAttributes.Sealed;
			}
			else if ((memberAttributes & MemberAttributes.Static) == MemberAttributes.Static)
			{
				typeAttributes |= TypeAttributes.Abstract | TypeAttributes.Sealed;
			}
			return typeAttributes;
		}

		internal static bool IncludeAccessor(MethodInfo accessor, bool nonPublic)
		{
			if (accessor == null)
			{
				return false;
			}
			if (nonPublic)
			{
				return true;
			}
			if (accessor.IsPublic)
			{
				return true;
			}
			return false;
		}

		internal static Attribute[] LoadCustomAttributes(CodeAttributeDeclarationCollection codeAttributeCollection, DesignTimeType declaringType)
		{
			if (declaringType == null)
			{
				throw new ArgumentNullException("declaringType");
			}
			if (codeAttributeCollection == null)
			{
				return new Attribute[0];
			}
			List<Attribute> list = new List<Attribute>();
			foreach (CodeAttributeDeclaration item in codeAttributeCollection)
			{
				string[] array = new string[item.Arguments.Count];
				object[] array2 = new object[item.Arguments.Count];
				Type type = declaringType.ResolveType(item.Name);
				if (!(type != null))
				{
					continue;
				}
				int num = 0;
				foreach (CodeAttributeArgument argument in item.Arguments)
				{
					array[num] = argument.Name;
					if (argument.Value is CodePrimitiveExpression)
					{
						array2[num] = (argument.Value as CodePrimitiveExpression).Value;
					}
					else if (argument.Value is CodeTypeOfExpression)
					{
						array2[num] = argument.Value;
					}
					else if (argument.Value is CodeSnippetExpression)
					{
						array2[num] = (argument.Value as CodeSnippetExpression).Value;
					}
					else
					{
						array2[num] = new ArgumentException(SR.GetString("Error_TypeSystemAttributeArgument"));
					}
					num++;
				}
				bool flag = false;
				foreach (AttributeInfoAttribute item2 in list)
				{
					if (item2.AttributeInfo.AttributeType.FullName.Equals(type.FullName))
					{
						flag = true;
						break;
					}
				}
				bool flag2 = false;
				if (flag && type.Assembly != null)
				{
					object[] customAttributes = type.GetCustomAttributes(typeof(AttributeUsageAttribute), inherit: true);
					if (customAttributes != null && customAttributes.Length != 0)
					{
						AttributeUsageAttribute attributeUsageAttribute = customAttributes[0] as AttributeUsageAttribute;
						flag2 = attributeUsageAttribute.AllowMultiple;
					}
				}
				if (!flag || flag2)
				{
					list.Add(AttributeInfoAttribute.CreateAttributeInfoAttribute(type, array, array2));
				}
			}
			return list.ToArray();
		}

		internal static object[] GetCustomAttributes(Type attributeType, bool inherit, Attribute[] attributes, MemberInfo memberInfo)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			ArrayList arrayList = new ArrayList();
			ArrayList arrayList2 = new ArrayList();
			if (attributeType == typeof(object))
			{
				arrayList.AddRange(attributes);
			}
			else
			{
				for (int i = 0; i < attributes.Length; i++)
				{
					AttributeInfoAttribute attributeInfoAttribute = (AttributeInfoAttribute)attributes[i];
					if (attributeInfoAttribute.AttributeInfo.AttributeType == attributeType)
					{
						arrayList.Add(attributeInfoAttribute);
						arrayList2.Add(attributeType);
					}
				}
			}
			if (inherit)
			{
				MemberInfo memberInfo2 = null;
				memberInfo2 = ((!(memberInfo is Type)) ? ((DesignTimeType)memberInfo.DeclaringType).GetBaseMember(memberInfo.GetType(), memberInfo.DeclaringType.BaseType, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, new DesignTimeType.MemberSignature(memberInfo)) : ((Type)memberInfo).BaseType);
				if (memberInfo2 != null)
				{
					object[] customAttributes = memberInfo2.GetCustomAttributes(attributeType, inherit);
					object[] array = customAttributes;
					for (int j = 0; j < array.Length; j++)
					{
						Attribute attribute = (Attribute)array[j];
						if (!(attribute is AttributeInfoAttribute) || !arrayList2.Contains(((AttributeInfoAttribute)attribute).AttributeInfo.AttributeType))
						{
							arrayList.Add(attribute);
						}
					}
				}
			}
			return arrayList.ToArray();
		}

		internal static bool IsDefined(Type attributeType, bool inherit, Attribute[] attributes, MemberInfo memberInfo)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			foreach (Attribute attribute in attributes)
			{
				if (attribute is AttributeInfoAttribute && (attribute as AttributeInfoAttribute).AttributeInfo.AttributeType == attributeType)
				{
					return true;
				}
			}
			MemberInfo memberInfo2 = null;
			memberInfo2 = ((!(memberInfo is Type)) ? ((DesignTimeType)memberInfo.DeclaringType).GetBaseMember(memberInfo.GetType(), memberInfo.DeclaringType.BaseType, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, new DesignTimeType.MemberSignature(memberInfo)) : ((Type)memberInfo).BaseType);
			if (memberInfo2 != null)
			{
				return memberInfo2.IsDefined(attributeType, inherit);
			}
			return false;
		}

		internal static string EnsureTypeName(string typeName)
		{
			if (typeName == null || typeName.Length == 0)
			{
				return typeName;
			}
			if (typeName.IndexOf('.') == -1)
			{
				if (typeName.StartsWith("@", StringComparison.Ordinal))
				{
					typeName = typeName.Substring(1);
				}
				else if (typeName.StartsWith("[", StringComparison.Ordinal) && typeName.EndsWith("]", StringComparison.Ordinal))
				{
					typeName = typeName.Substring(1, typeName.Length - 1);
				}
			}
			else
			{
				string[] array = typeName.Split('.');
				typeName = string.Empty;
				int i;
				for (i = 0; i < array.Length - 1; i++)
				{
					typeName += EnsureTypeName(array[i]);
					typeName += ".";
				}
				typeName += EnsureTypeName(array[i]);
			}
			return typeName;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public interface ITypeProvider
	{
		Assembly LocalAssembly { get; }

		ICollection<Assembly> ReferencedAssemblies { get; }

		IDictionary<object, Exception> TypeLoadErrors { get; }

		event EventHandler TypesChanged;

		event EventHandler TypeLoadErrorsChanged;

		Type GetType(string name);

		Type GetType(string name, bool throwOnError);

		Type[] GetTypes();
	}
	internal sealed class DesignTimeConstructorInfo : ConstructorInfo
	{
		private CodeMemberMethod codeConstructor;

		private DesignTimeType declaringType;

		private ParameterInfo[] parameters;

		private Attribute[] attributes;

		public override RuntimeMethodHandle MethodHandle
		{
			get
			{
				throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
			}
		}

		public override MethodAttributes Attributes => Helper.ConvertToMethodAttributes(codeConstructor.Attributes);

		public override string Name => ".ctor";

		public override Type DeclaringType => declaringType;

		public override Type ReflectedType => declaringType;

		internal DesignTimeConstructorInfo(DesignTimeType declaringType, CodeMemberMethod codeConstructor)
		{
			this.declaringType = declaringType;
			this.codeConstructor = codeConstructor;
		}

		public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)
		{
			throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
		}

		public override ParameterInfo[] GetParameters()
		{
			if (parameters == null)
			{
				CodeParameterDeclarationExpressionCollection codeParameterDeclarationExpressionCollection = codeConstructor.Parameters;
				ParameterInfo[] array = new ParameterInfo[codeParameterDeclarationExpressionCollection.Count];
				for (int i = 0; i < codeParameterDeclarationExpressionCollection.Count; i++)
				{
					array[i] = new DesignTimeParameterInfo(codeParameterDeclarationExpressionCollection[i], i, this);
				}
				parameters = array;
			}
			return parameters;
		}

		public override MethodImplAttributes GetMethodImplementationFlags()
		{
			return MethodImplAttributes.IL;
		}

		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)
		{
			throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
		}

		public override object[] GetCustomAttributes(bool inherit)
		{
			return GetCustomAttributes(typeof(object), inherit);
		}

		public override object[] GetCustomAttributes(Type attributeType, bool inherit)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			if (attributes == null)
			{
				attributes = Helper.LoadCustomAttributes(codeConstructor.CustomAttributes, DeclaringType as DesignTimeType);
			}
			return Helper.GetCustomAttributes(attributeType, inherit, attributes, this);
		}

		public override bool IsDefined(Type attributeType, bool inherit)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			if (attributes == null)
			{
				attributes = Helper.LoadCustomAttributes(codeConstructor.CustomAttributes, DeclaringType as DesignTimeType);
			}
			if (Helper.IsDefined(attributeType, inherit, attributes, this))
			{
				return true;
			}
			return false;
		}
	}
	internal class DesignTimeMethodInfo : MethodInfo
	{
		private CodeMemberMethod methodInfo;

		private ParameterInfo[] parameters;

		private DesignTimeType declaringType;

		private Attribute[] attributes;

		private ParameterInfo returnParam;

		private bool isSpecialName;

		public override Type ReturnType => declaringType.ResolveType(DesignTimeType.GetTypeNameFromCodeTypeReference(methodInfo.ReturnType, declaringType));

		public override ICustomAttributeProvider ReturnTypeCustomAttributes => null;

		public override ParameterInfo ReturnParameter
		{
			get
			{
				if (returnParam == null)
				{
					returnParam = new DesignTimeParameterInfo(methodInfo.ReturnType, this);
				}
				return returnParam;
			}
		}

		public override RuntimeMethodHandle MethodHandle
		{
			get
			{
				throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
			}
		}

		public override MethodAttributes Attributes => Helper.ConvertToMethodAttributes(methodInfo.Attributes) | (isSpecialName ? MethodAttributes.SpecialName : MethodAttributes.PrivateScope);

		public override string Name => Helper.EnsureTypeName(methodInfo.Name);

		public override Type DeclaringType => declaringType;

		public override Type ReflectedType => declaringType;

		internal DesignTimeMethodInfo(DesignTimeType declaringType, CodeMemberMethod methodInfo, bool isSpecialName)
		{
			this.declaringType = declaringType;
			this.methodInfo = methodInfo;
			this.isSpecialName = isSpecialName;
		}

		internal DesignTimeMethodInfo(DesignTimeType declaringType, CodeMemberMethod methodInfo)
		{
			this.declaringType = declaringType;
			this.methodInfo = methodInfo;
		}

		public override MethodInfo GetBaseDefinition()
		{
			throw new NotImplementedException();
		}

		public override ParameterInfo[] GetParameters()
		{
			if (parameters == null)
			{
				CodeParameterDeclarationExpressionCollection codeParameterDeclarationExpressionCollection = methodInfo.Parameters;
				ParameterInfo[] array = new ParameterInfo[codeParameterDeclarationExpressionCollection.Count];
				for (int i = 0; i < codeParameterDeclarationExpressionCollection.Count; i++)
				{
					array[i] = new DesignTimeParameterInfo(codeParameterDeclarationExpressionCollection[i], i, this);
				}
				parameters = array;
			}
			return parameters;
		}

		public override MethodImplAttributes GetMethodImplementationFlags()
		{
			return MethodImplAttributes.IL;
		}

		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)
		{
			throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
		}

		public override object[] GetCustomAttributes(bool inherit)
		{
			return GetCustomAttributes(typeof(object), inherit);
		}

		public override object[] GetCustomAttributes(Type attributeType, bool inherit)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			if (attributes == null)
			{
				if (methodInfo == null)
				{
					attributes = new Attribute[0];
				}
				else
				{
					attributes = Helper.LoadCustomAttributes(methodInfo.CustomAttributes, DeclaringType as DesignTimeType);
				}
			}
			return Helper.GetCustomAttributes(attributeType, inherit, attributes, this);
		}

		public override bool IsDefined(Type attributeType, bool inherit)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			if (attributes == null)
			{
				attributes = Helper.LoadCustomAttributes(methodInfo.CustomAttributes, DeclaringType as DesignTimeType);
			}
			if (Helper.IsDefined(attributeType, inherit, attributes, this))
			{
				return true;
			}
			return false;
		}
	}
	internal sealed class DesignTimeParameterInfo : ParameterInfo
	{
		private CodeTypeReference codeParameterType;

		private bool isRef;

		public override Type ParameterType
		{
			get
			{
				string text = DesignTimeType.GetTypeNameFromCodeTypeReference(codeParameterType, Member.DeclaringType as DesignTimeType);
				if ((AttrsImpl & ParameterAttributes.Out) > ParameterAttributes.None || isRef)
				{
					text += "&";
				}
				ClassImpl = (Member.DeclaringType as DesignTimeType).ResolveType(text);
				return base.ParameterType;
			}
		}

		internal DesignTimeParameterInfo(CodeParameterDeclarationExpression codeParameter, int position, MemberInfo member)
		{
			MemberImpl = member;
			NameImpl = Helper.EnsureTypeName(codeParameter.Name);
			codeParameterType = codeParameter.Type;
			AttrsImpl = Helper.ConvertToParameterAttributes(codeParameter.Direction);
			isRef = codeParameter.Direction == FieldDirection.Ref;
			PositionImpl = position;
		}

		internal DesignTimeParameterInfo(CodeTypeReference codeParameterType, MemberInfo member)
		{
			MemberImpl = member;
			NameImpl = null;
			this.codeParameterType = codeParameterType;
			AttrsImpl = ParameterAttributes.None;
			PositionImpl = -1;
		}
	}
	internal sealed class DesignTimePropertyInfo : PropertyInfo
	{
		private sealed class PropertyMethodInfo : MethodInfo
		{
			private string name = string.Empty;

			private DesignTimePropertyInfo property;

			private ParameterInfo[] parameters;

			private bool isGetter;

			internal bool IsGetter => isGetter;

			public override string Name => Helper.EnsureTypeName(name);

			public override Type DeclaringType => property.declaringType;

			public override Type ReflectedType => property.declaringType;

			public override ParameterInfo ReturnParameter
			{
				get
				{
					throw new NotImplementedException();
				}
			}

			public override Type ReturnType
			{
				get
				{
					if (isGetter)
					{
						return ((DesignTimeType)DeclaringType).ResolveType(DesignTimeType.GetTypeNameFromCodeTypeReference(property.CodeMemberProperty.Type, (DesignTimeType)DeclaringType));
					}
					return typeof(void);
				}
			}

			public override ICustomAttributeProvider ReturnTypeCustomAttributes
			{
				get
				{
					throw new NotImplementedException();
				}
			}

			public override RuntimeMethodHandle MethodHandle
			{
				get
				{
					throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
				}
			}

			public override MethodAttributes Attributes => Helper.ConvertToMethodAttributes(property.CodeMemberProperty.Attributes) | MethodAttributes.SpecialName;

			internal PropertyMethodInfo(bool isGetter, string name, DesignTimePropertyInfo property)
			{
				this.isGetter = isGetter;
				this.name = name;
				this.property = property;
			}

			public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)
			{
				throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
			}

			public override object[] GetCustomAttributes(bool inherit)
			{
				return GetCustomAttributes(typeof(object), inherit);
			}

			public override object[] GetCustomAttributes(Type attributeType, bool inherit)
			{
				return new object[0];
			}

			public override bool IsDefined(Type attributeType, bool inherit)
			{
				return false;
			}

			public override MethodInfo GetBaseDefinition()
			{
				throw new NotImplementedException();
			}

			public override ParameterInfo[] GetParameters()
			{
				if (parameters == null)
				{
					CodeParameterDeclarationExpressionCollection codeParameterDeclarationExpressionCollection = property.CodeMemberProperty.Parameters;
					ParameterInfo[] array = new ParameterInfo[IsGetter ? codeParameterDeclarationExpressionCollection.Count : (codeParameterDeclarationExpressionCollection.Count + 1)];
					for (int i = 0; i < codeParameterDeclarationExpressionCollection.Count; i++)
					{
						array[i] = new DesignTimeParameterInfo(codeParameterDeclarationExpressionCollection[i], i, property);
					}
					if (!IsGetter)
					{
						CodeParameterDeclarationExpression codeParameterDeclarationExpression = new CodeParameterDeclarationExpression(property.CodeMemberProperty.Type.BaseType, "value");
						codeParameterDeclarationExpression.Direction = FieldDirection.In;
						array[codeParameterDeclarationExpressionCollection.Count] = new DesignTimeParameterInfo(codeParameterDeclarationExpression, 0, property);
					}
					parameters = array;
				}
				return parameters;
			}

			public override MethodImplAttributes GetMethodImplementationFlags()
			{
				return MethodImplAttributes.IL;
			}
		}

		private Attribute[] attributes;

		private CodeMemberProperty property;

		private DesignTimeType declaringType;

		private MethodInfo getMethod;

		private MethodInfo setMethod;

		internal CodeMemberProperty CodeMemberProperty => property;

		public override Type PropertyType => declaringType.ResolveType(DesignTimeType.GetTypeNameFromCodeTypeReference(property.Type, declaringType));

		public override PropertyAttributes Attributes => PropertyAttributes.None;

		public override bool CanRead => property.HasGet;

		public override bool CanWrite => property.HasSet;

		public override string Name => Helper.EnsureTypeName(property.Name);

		public override Type DeclaringType => declaringType;

		public override Type ReflectedType => declaringType;

		internal DesignTimePropertyInfo(DesignTimeType declaringType, CodeMemberProperty property)
		{
			this.property = property;
			this.declaringType = declaringType;
		}

		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)
		{
			throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
		}

		public override MethodInfo[] GetAccessors(bool nonPublic)
		{
			ArrayList arrayList = new ArrayList();
			if (Helper.IncludeAccessor(GetGetMethod(nonPublic), nonPublic))
			{
				arrayList.Add(getMethod);
			}
			if (Helper.IncludeAccessor(GetSetMethod(nonPublic), nonPublic))
			{
				arrayList.Add(setMethod);
			}
			return arrayList.ToArray(typeof(MethodInfo)) as MethodInfo[];
		}

		public override MethodInfo GetGetMethod(bool nonPublic)
		{
			if (CanRead && getMethod == null)
			{
				string name = "get_" + Name;
				getMethod = new PropertyMethodInfo(isGetter: true, name, this);
			}
			if (nonPublic || (getMethod != null && (getMethod.Attributes & MethodAttributes.Public) == MethodAttributes.Public))
			{
				return getMethod;
			}
			return null;
		}

		public override MethodInfo GetSetMethod(bool nonPublic)
		{
			if (CanWrite && setMethod == null)
			{
				string name = "set_" + Name;
				setMethod = new PropertyMethodInfo(isGetter: false, name, this);
			}
			if (nonPublic || (setMethod != null && (setMethod.Attributes & MethodAttributes.Public) == MethodAttributes.Public))
			{
				return setMethod;
			}
			return null;
		}

		public override ParameterInfo[] GetIndexParameters()
		{
			int num = 0;
			ParameterInfo[] array = null;
			MethodInfo methodInfo = GetGetMethod(nonPublic: true);
			if (methodInfo != null)
			{
				array = methodInfo.GetParameters();
				num = array.Length;
			}
			else
			{
				methodInfo = GetSetMethod(nonPublic: true);
				if (methodInfo != null)
				{
					array = methodInfo.GetParameters();
					num = array.Length - 1;
				}
			}
			ParameterInfo[] array2 = new ParameterInfo[num];
			for (int i = 0; i < num; i++)
			{
				array2[i] = array[i];
			}
			return array2;
		}

		public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)
		{
			throw new NotImplementedException(TypeSystemSR.GetString("Error_RuntimeNotSupported"));
		}

		public override object[] GetCustomAttributes(bool inherit)
		{
			return GetCustomAttributes(typeof(object), inherit);
		}

		public override object[] GetCustomAttributes(Type attributeType, bool inherit)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			if (attributes == null)
			{
				attributes = Helper.LoadCustomAttributes(property.CustomAttributes, DeclaringType as DesignTimeType);
			}
			return Helper.GetCustomAttributes(attributeType, inherit, attributes, this);
		}

		public override bool IsDefined(Type attributeType, bool inherit)
		{
			if (attributeType == null)
			{
				throw new ArgumentNullException("attributeType");
			}
			if (attributes == null)
			{
				attributes = Helper.LoadCustomAttributes(property.CustomAttributes, DeclaringType as DesignTimeType);
			}
			if (Helper.IsDefined(attributeType, inherit, attributes, this))
			{
				return true;
			}
			return false;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class TypeProvider : ITypeProvider, IServiceProvider, IDisposable
	{
		internal static readonly char[] nameSeparators = new char[2] { '.', '+' };

		private IServiceProvider serviceProvider;

		private Hashtable designTimeTypes = new Hashtable();

		private Hashtable assemblyLoaders = new Hashtable();

		private Hashtable rawAssemblyLoaders = new Hashtable();

		private Hashtable compileUnitLoaders = new Hashtable();

		private Hashtable hashOfRTTypes = new Hashtable();

		private Hashtable hashOfDTTypes = new Hashtable();

		private List<string> addedAssemblies;

		private List<CodeCompileUnit> addedCompileUnits;

		private Dictionary<CodeCompileUnit, EventHandler> needRefreshCompileUnits;

		private bool executingEnsureCurrentTypes;

		private Hashtable typeLoadErrors = new Hashtable();

		private Assembly localAssembly;

		private Dictionary<Type, string> typeToAssemblyName;

		private Dictionary<PropertyInfo, bool> supportedProperties;

		public Func<Type, string> AssemblyNameResolver { get; set; }

		public Func<PropertyInfo, object, bool> IsSupportedPropertyResolver { get; set; }

		public IDictionary<object, Exception> TypeLoadErrors
		{
			get
			{
				Dictionary<object, Exception> dictionary = new Dictionary<object, Exception>();
				foreach (DictionaryEntry typeLoadError in typeLoadErrors)
				{
					Exception ex = typeLoadError.Value as Exception;
					while (ex is TargetInvocationException)
					{
						ex = ex.InnerException;
					}
					if (ex != null)
					{
						string text = null;
						if (typeLoadError.Key is CodeCompileUnit)
						{
							text = TypeSystemSR.GetString("Error_CodeCompileUnitNotLoaded", ex.Message);
						}
						else if (typeLoadError.Key is string)
						{
							text = TypeSystemSR.GetString("Error_AssemblyRefNotLoaded", typeLoadError.Key.ToString(), ex.Message);
						}
						if (text != null)
						{
							ex = new Exception(text, ex);
						}
						dictionary.Add(typeLoadError.Key, ex);
					}
				}
				return dictionary;
			}
		}

		public Assembly LocalAssembly => localAssembly;

		public ICollection<Assembly> ReferencedAssemblies
		{
			get
			{
				EnsureCurrentTypes();
				List<Assembly> list = new List<Assembly>();
				foreach (AssemblyLoader value in assemblyLoaders.Values)
				{
					if (value.Assembly != null)
					{
						list.Add(value.Assembly);
					}
				}
				foreach (Assembly key in rawAssemblyLoaders.Keys)
				{
					list.Add(key);
				}
				return list.AsReadOnly();
			}
		}

		public event EventHandler TypeLoadErrorsChanged;

		public event EventHandler TypesChanged;

		public TypeProvider(IServiceProvider serviceProvider)
		{
			this.serviceProvider = serviceProvider;
		}

		public void SetLocalAssembly(Assembly assembly)
		{
			localAssembly = assembly;
			if (this.TypesChanged != null)
			{
				FireEventsNoThrow(this.TypesChanged, new object[2]
				{
					this,
					EventArgs.Empty
				});
			}
		}

		public void AddAssembly(Assembly assembly)
		{
			if (assembly == null)
			{
				throw new ArgumentNullException("assembly");
			}
			if (rawAssemblyLoaders.Contains(assembly))
			{
				return;
			}
			try
			{
				rawAssemblyLoaders[assembly] = new AssemblyLoader(this, assembly, localAssembly == assembly);
				if (this.TypesChanged != null)
				{
					FireEventsNoThrow(this.TypesChanged, new object[2]
					{
						this,
						EventArgs.Empty
					});
				}
			}
			catch (Exception value)
			{
				typeLoadErrors[assembly.FullName] = value;
				if (this.TypeLoadErrorsChanged != null)
				{
					FireEventsNoThrow(this.TypeLoadErrorsChanged, new object[2]
					{
						this,
						EventArgs.Empty
					});
				}
			}
		}

		public void RemoveAssembly(Assembly assembly)
		{
			if (assembly == null)
			{
				throw new ArgumentNullException("assembly");
			}
			AssemblyLoader assemblyLoader = (AssemblyLoader)rawAssemblyLoaders[assembly];
			if (assemblyLoader != null)
			{
				rawAssemblyLoaders.Remove(assembly);
				RemoveCachedAssemblyWrappedTypes(assembly);
				if (this.TypesChanged != null)
				{
					FireEventsNoThrow(this.TypesChanged, new object[2]
					{
						this,
						EventArgs.Empty
					});
				}
			}
		}

		public void AddAssemblyReference(string path)
		{
			if (path == null)
			{
				throw new ArgumentNullException("path");
			}
			if (File.Exists(path) && !assemblyLoaders.ContainsKey(path) && (addedAssemblies == null || !addedAssemblies.Contains(path)))
			{
				if (addedAssemblies == null)
				{
					addedAssemblies = new List<string>();
				}
				addedAssemblies.Add(path);
				if (this.TypesChanged != null)
				{
					FireEventsNoThrow(this.TypesChanged, new object[2]
					{
						this,
						EventArgs.Empty
					});
				}
			}
		}

		public void RemoveAssemblyReference(string path)
		{
			if (path == null)
			{
				throw new ArgumentNullException("path");
			}
			if (assemblyLoaders[path] is AssemblyLoader assemblyLoader)
			{
				assemblyLoaders.Remove(path);
				RemoveCachedAssemblyWrappedTypes(assemblyLoader.Assembly);
			}
			if (addedAssemblies != null && addedAssemblies.Contains(path))
			{
				addedAssemblies.Remove(path);
			}
			if (typeLoadErrors.ContainsKey(path))
			{
				typeLoadErrors.Remove(path);
				if (this.TypeLoadErrorsChanged != null)
				{
					FireEventsNoThrow(this.TypeLoadErrorsChanged, new object[2]
					{
						this,
						EventArgs.Empty
					});
				}
			}
			if (this.TypesChanged != null)
			{
				FireEventsNoThrow(this.TypesChanged, new object[2]
				{
					this,
					EventArgs.Empty
				});
			}
		}

		public void AddCodeCompileUnit(CodeCompileUnit codeCompileUnit)
		{
			if (codeCompileUnit == null)
			{
				throw new ArgumentNullException("codeCompileUnit");
			}
			if (compileUnitLoaders.ContainsKey(codeCompileUnit) || (addedCompileUnits != null && addedCompileUnits.Contains(codeCompileUnit)))
			{
				throw new ArgumentException(TypeSystemSR.GetString("Error_DuplicateCodeCompileUnit"), "codeCompileUnit");
			}
			if (addedCompileUnits == null)
			{
				addedCompileUnits = new List<CodeCompileUnit>();
			}
			addedCompileUnits.Add(codeCompileUnit);
			if (needRefreshCompileUnits != null && needRefreshCompileUnits.ContainsKey(codeCompileUnit))
			{
				needRefreshCompileUnits.Remove(codeCompileUnit);
			}
			if (this.TypesChanged != null)
			{
				FireEventsNoThrow(this.TypesChanged, new object[2]
				{
					this,
					EventArgs.Empty
				});
			}
		}

		public void RemoveCodeCompileUnit(CodeCompileUnit codeCompileUnit)
		{
			if (codeCompileUnit == null)
			{
				throw new ArgumentNullException("codeCompileUnit");
			}
			if (compileUnitLoaders[codeCompileUnit] is CodeDomLoader codeDomLoader)
			{
				codeDomLoader.Dispose();
				compileUnitLoaders.Remove(codeCompileUnit);
			}
			if (addedCompileUnits != null && addedCompileUnits.Contains(codeCompileUnit))
			{
				addedCompileUnits.Remove(codeCompileUnit);
			}
			if (needRefreshCompileUnits != null && needRefreshCompileUnits.ContainsKey(codeCompileUnit))
			{
				needRefreshCompileUnits.Remove(codeCompileUnit);
			}
			if (typeLoadErrors.ContainsKey(codeCompileUnit))
			{
				typeLoadErrors.Remove(codeCompileUnit);
				if (this.TypeLoadErrorsChanged != null)
				{
					FireEventsNoThrow(this.TypeLoadErrorsChanged, new object[2]
					{
						this,
						EventArgs.Empty
					});
				}
			}
			if (this.TypesChanged != null)
			{
				FireEventsNoThrow(this.TypesChanged, new object[2]
				{
					this,
					EventArgs.Empty
				});
			}
		}

		public void RefreshCodeCompileUnit(CodeCompileUnit codeCompileUnit, EventHandler refresher)
		{
			if (codeCompileUnit == null)
			{
				throw new ArgumentNullException("codeCompileUnit");
			}
			if (!compileUnitLoaders.Contains(codeCompileUnit) && addedCompileUnits != null && !addedCompileUnits.Contains(codeCompileUnit))
			{
				throw new ArgumentException(TypeSystemSR.GetString("Error_NoCodeCompileUnit"), "codeCompileUnit");
			}
			if (needRefreshCompileUnits == null)
			{
				needRefreshCompileUnits = new Dictionary<CodeCompileUnit, EventHandler>();
			}
			needRefreshCompileUnits[codeCompileUnit] = refresher;
			if (this.TypesChanged != null)
			{
				FireEventsNoThrow(this.TypesChanged, new object[2]
				{
					this,
					EventArgs.Empty
				});
			}
		}

		public string GetAssemblyName(Type type)
		{
			if (type == null)
			{
				throw new ArgumentNullException("type");
			}
			if (typeToAssemblyName == null)
			{
				typeToAssemblyName = new Dictionary<Type, string>();
			}
			string value = null;
			if (!typeToAssemblyName.TryGetValue(type, out value) && type.Assembly != null)
			{
				value = ((AssemblyNameResolver == null) ? type.Assembly.FullName : AssemblyNameResolver(type));
				typeToAssemblyName.Add(type, value);
			}
			if (value == null)
			{
				value = string.Empty;
			}
			return value;
		}

		public bool IsSupportedProperty(PropertyInfo property, object declaringInstance)
		{
			if (property == null)
			{
				throw new ArgumentNullException("property");
			}
			if (declaringInstance == null)
			{
				throw new ArgumentNullException("declaringInstance");
			}
			if (IsSupportedPropertyResolver == null)
			{
				return true;
			}
			if (supportedProperties == null)
			{
				supportedProperties = new Dictionary<PropertyInfo, bool>();
			}
			bool value = false;
			if (!supportedProperties.TryGetValue(property, out value))
			{
				value = IsSupportedPropertyResolver(property, declaringInstance);
				supportedProperties.Add(property, value);
			}
			return value;
		}

		public Type GetType(string name)
		{
			if (name == null)
			{
				throw new ArgumentNullException("name");
			}
			return GetType(name, throwOnError: false);
		}

		public Type GetType(string name, bool throwOnError)
		{
			if (name == null)
			{
				throw new ArgumentNullException("name");
			}
			EnsureCurrentTypes();
			bool flag = false;
			Type type = null;
			string typeName = string.Empty;
			string[] parameters = null;
			string elemantDecorator = string.Empty;
			if (ParseHelpers.ParseTypeName(name, ParseHelpers.ParseTypeNameLanguage.NetFramework, out typeName, out parameters, out elemantDecorator))
			{
				if (parameters != null && parameters.Length != 0)
				{
					Type type2 = GetType(typeName, throwOnError);
					if (type2 == null || !type2.IsGenericTypeDefinition)
					{
						return null;
					}
					Type[] array = new Type[parameters.Length];
					for (int i = 0; i < parameters.Length; i++)
					{
						Type type3 = GetType(parameters[i], throwOnError);
						if (type3 == null)
						{
							return null;
						}
						array[i] = type3;
					}
					return type2.MakeGenericType(array);
				}
				if (elemantDecorator != string.Empty)
				{
					Type type4 = GetType(typeName);
					if (type4 != null)
					{
						StringBuilder stringBuilder = new StringBuilder(type4.FullName);
						for (int j = 0; j < elemantDecorator.Length; j++)
						{
							if (elemantDecorator[j] != ' ')
							{
								stringBuilder.Append(elemantDecorator[j]);
							}
						}
						name = stringBuilder.ToString();
						if (type4.Assembly != null)
						{
							type = type4.Assembly.GetType(name, throwOnError: false);
						}
						if (type == null)
						{
							if (hashOfDTTypes.Contains(name))
							{
								type = hashOfDTTypes[name] as Type;
							}
							else
							{
								type = new DesignTimeType(null, name, this);
								hashOfDTTypes.Add(name, type);
							}
							return type;
						}
					}
				}
				else
				{
					string text = string.Empty;
					int num = name.IndexOf(',');
					if (num != -1)
					{
						typeName = name.Substring(0, num);
						text = name.Substring(num + 1).Trim();
					}
					typeName = typeName.Trim();
					if (typeName.Length > 0)
					{
						type = designTimeTypes[typeName] as Type;
						if (type == null)
						{
							foreach (DictionaryEntry rawAssemblyLoader in rawAssemblyLoaders)
							{
								AssemblyLoader assemblyLoader = rawAssemblyLoader.Value as AssemblyLoader;
								if (text.Length != 0 && !ParseHelpers.AssemblyNameEquals(assemblyLoader.AssemblyName, text))
								{
									continue;
								}
								try
								{
									type = assemblyLoader.GetType(typeName);
								}
								catch (Exception ex)
								{
									if (!typeLoadErrors.Contains(rawAssemblyLoader.Key))
									{
										typeLoadErrors[rawAssemblyLoader.Key] = ex;
										flag = true;
									}
									if (throwOnError)
									{
										throw ex;
									}
								}
								if (type != null)
								{
									break;
								}
							}
						}
						if (type == null)
						{
							foreach (DictionaryEntry assemblyLoader3 in assemblyLoaders)
							{
								AssemblyLoader assemblyLoader2 = assemblyLoader3.Value as AssemblyLoader;
								if (text.Length != 0 && !ParseHelpers.AssemblyNameEquals(assemblyLoader2.AssemblyName, text))
								{
									continue;
								}
								try
								{
									type = assemblyLoader2.GetType(typeName);
								}
								catch (Exception ex2)
								{
									if (!typeLoadErrors.Contains(assemblyLoader3.Key))
									{
										typeLoadErrors[assemblyLoader3.Key] = ex2;
										flag = true;
									}
									if (throwOnError)
									{
										throw ex2;
									}
								}
								if (type != null)
								{
									break;
								}
							}
						}
						if (flag && this.TypeLoadErrorsChanged != null)
						{
							FireEventsNoThrow(this.TypeLoadErrorsChanged, new object[2]
							{
								this,
								EventArgs.Empty
							});
						}
						if (type == null && localAssembly != null && text == localAssembly.FullName)
						{
							type = localAssembly.GetType(typeName);
						}
					}
				}
			}
			if (type == null)
			{
				if (throwOnError)
				{
					throw new Exception(TypeSystemSR.GetString(CultureInfo.CurrentCulture, "Error_TypeResolution", name));
				}
				return null;
			}
			if (designTimeTypes != null && designTimeTypes.Count > 0 && type.Assembly != null && type.IsGenericTypeDefinition)
			{
				if (hashOfRTTypes.Contains(type))
				{
					type = (Type)hashOfRTTypes[type];
				}
				else
				{
					Type type5 = new RTTypeWrapper(this, type);
					hashOfRTTypes.Add(type, type5);
					type = type5;
				}
			}
			return type;
		}

		public Type[] GetTypes()
		{
			EnsureCurrentTypes();
			bool flag = false;
			typeLoadErrors.Clear();
			List<Type> list = new List<Type>();
			foreach (Type value in designTimeTypes.Values)
			{
				list.Add(value);
			}
			foreach (DictionaryEntry assemblyLoader3 in assemblyLoaders)
			{
				AssemblyLoader assemblyLoader = assemblyLoader3.Value as AssemblyLoader;
				try
				{
					list.AddRange(assemblyLoader.GetTypes());
				}
				catch (Exception ex)
				{
					if (ex is ReflectionTypeLoadException { Types: var types })
					{
						foreach (Type type in types)
						{
							if (type != null)
							{
								list.Add(type);
							}
						}
					}
					if (typeLoadErrors.Contains(assemblyLoader3.Key))
					{
						typeLoadErrors.Remove(assemblyLoader3.Key);
					}
					typeLoadErrors[assemblyLoader3.Key] = ex;
					flag = true;
				}
			}
			foreach (DictionaryEntry rawAssemblyLoader in rawAssemblyLoaders)
			{
				AssemblyLoader assemblyLoader2 = rawAssemblyLoader.Value as AssemblyLoader;
				try
				{
					list.AddRange(assemblyLoader2.GetTypes());
				}
				catch (Exception ex3)
				{
					if (ex3 is ReflectionTypeLoadException { Types: var types2 })
					{
						foreach (Type type2 in types2)
						{
							if (type2 != null)
							{
								list.Add(type2);
							}
						}
					}
					if (typeLoadErrors.Contains(rawAssemblyLoader.Key))
					{
						typeLoadErrors.Remove(rawAssemblyLoader.Key);
					}
					typeLoadErrors[rawAssemblyLoader.Key] = ex3;
					flag = true;
				}
			}
			if (flag && this.TypeLoadErrorsChanged != null)
			{
				FireEventsNoThrow(this.TypeLoadErrorsChanged, new object[2]
				{
					this,
					EventArgs.Empty
				});
			}
			return list.ToArray();
		}

		public static Type GetEventHandlerType(EventInfo eventInfo)
		{
			if (eventInfo == null)
			{
				throw new ArgumentNullException("eventInfo");
			}
			MethodInfo addMethod = eventInfo.GetAddMethod(nonPublic: true);
			if (addMethod != null)
			{
				ParameterInfo[] parameters = addMethod.GetParameters();
				Type typeFromHandle = typeof(Delegate);
				for (int i = 0; i < parameters.Length; i++)
				{
					Type parameterType = parameters[i].ParameterType;
					if (IsSubclassOf(parameterType, typeFromHandle))
					{
						return parameterType;
					}
				}
			}
			return null;
		}

		internal static bool IsRepresentingTheSameType(Type firstType, Type secondType)
		{
			if (firstType == null || secondType == null)
			{
				return false;
			}
			if (firstType == secondType)
			{
				return true;
			}
			if (firstType.FullName != secondType.FullName)
			{
				return false;
			}
			if (firstType.Assembly != secondType.Assembly)
			{
				return false;
			}
			if (firstType.Assembly != null && firstType.AssemblyQualifiedName != secondType.AssemblyQualifiedName)
			{
				return false;
			}
			return true;
		}

		internal static bool IsAssignable(Type toType, Type fromType, bool equalBasedOnSameTypeRepresenting)
		{
			if (toType == null || fromType == null)
			{
				return false;
			}
			if (equalBasedOnSameTypeRepresenting)
			{
				if (IsRepresentingTheSameType(fromType, toType))
				{
					return true;
				}
			}
			else if (fromType == toType)
			{
				return true;
			}
			if (toType.IsGenericTypeDefinition)
			{
				return toType.IsAssignableFrom(fromType);
			}
			if (toType.Assembly == null && fromType.Assembly != null)
			{
				return false;
			}
			if (fromType is RTTypeWrapper || fromType is DesignTimeType)
			{
				if (!(toType is RTTypeWrapper) && !(toType is DesignTimeType))
				{
					ITypeProvider typeProvider = ((fromType is RTTypeWrapper) ? (fromType as RTTypeWrapper).Provider : (fromType as DesignTimeType).Provider);
					if (typeProvider != null)
					{
						toType = typeProvider.GetType(toType.FullName);
					}
				}
			}
			else
			{
				if (!(toType is RTTypeWrapper) && !(toType is DesignTimeType))
				{
					return toType.IsAssignableFrom(fromType);
				}
				if (!(fromType is RTTypeWrapper) && !(fromType is DesignTimeType))
				{
					ITypeProvider typeProvider2 = ((toType is RTTypeWrapper) ? (toType as RTTypeWrapper).Provider : (toType as DesignTimeType).Provider);
					if (typeProvider2 != null)
					{
						fromType = typeProvider2.GetType(fromType.FullName);
					}
				}
			}
			if (toType == null || fromType == null)
			{
				return false;
			}
			if (equalBasedOnSameTypeRepresenting)
			{
				if (IsRepresentingTheSameType(fromType, toType))
				{
					return true;
				}
			}
			else if (fromType == toType)
			{
				return true;
			}
			if (IsSubclassOf(fromType, toType))
			{
				return true;
			}
			if (!toType.IsInterface)
			{
				return false;
			}
			Type[] interfaces = fromType.GetInterfaces();
			for (int i = 0; i < interfaces.Length; i++)
			{
				if (interfaces[i] == toType)
				{
					return true;
				}
				if (IsSubclassOf(interfaces[i], toType))
				{
					return true;
				}
			}
			return false;
		}

		public static bool IsAssignable(Type toType, Type fromType)
		{
			return IsAssignable(toType, fromType, equalBasedOnSameTypeRepresenting: false);
		}

		public static bool IsSubclassOf(Type subclass, Type superClass)
		{
			if (superClass == subclass)
			{
				return false;
			}
			if (subclass == null || superClass == null)
			{
				return false;
			}
			if (superClass == typeof(object))
			{
				return true;
			}
			subclass = subclass.BaseType;
			while (subclass != null)
			{
				if (superClass == subclass)
				{
					return true;
				}
				subclass = subclass.BaseType;
			}
			return false;
		}

		public static bool IsEnum(Type type)
		{
			if (type == null)
			{
				throw new ArgumentNullException("type");
			}
			return IsSubclassOf(type, typeof(Enum));
		}

		public static string[] GetEnumNames(Type enumType)
		{
			if (enumType == null)
			{
				throw new ArgumentNullException("enumType");
			}
			if (!IsSubclassOf(enumType, typeof(Enum)))
			{
				throw new ArgumentException(TypeSystemSR.GetString("Error_TypeIsNotEnum"));
			}
			FieldInfo[] fields = enumType.GetFields();
			List<string> list = new List<string>();
			for (int i = 0; i < fields.Length; i++)
			{
				list.Add(fields[i].Name);
			}
			list.Sort();
			return list.ToArray();
		}

		private void EnsureCurrentTypes()
		{
			if (executingEnsureCurrentTypes)
			{
				return;
			}
			try
			{
				bool flag = false;
				executingEnsureCurrentTypes = true;
				if (addedAssemblies != null)
				{
					string[] array = addedAssemblies.ToArray();
					addedAssemblies = null;
					string[] array2 = array;
					foreach (string text in array2)
					{
						AssemblyLoader assemblyLoader = null;
						try
						{
							assemblyLoader = new AssemblyLoader(this, text);
							assemblyLoaders[text] = assemblyLoader;
						}
						catch (Exception value)
						{
							typeLoadErrors[text] = value;
							flag = true;
						}
					}
				}
				if (addedCompileUnits != null)
				{
					CodeCompileUnit[] array3 = addedCompileUnits.ToArray();
					addedCompileUnits = null;
					CodeCompileUnit[] array4 = array3;
					foreach (CodeCompileUnit codeCompileUnit in array4)
					{
						CodeDomLoader codeDomLoader = null;
						try
						{
							codeDomLoader = new CodeDomLoader(this, codeCompileUnit);
							compileUnitLoaders[codeCompileUnit] = codeDomLoader;
						}
						catch (Exception value2)
						{
							codeDomLoader?.Dispose();
							typeLoadErrors[codeCompileUnit] = value2;
							flag = true;
						}
					}
				}
				if (needRefreshCompileUnits != null)
				{
					Dictionary<CodeCompileUnit, EventHandler> dictionary = new Dictionary<CodeCompileUnit, EventHandler>();
					foreach (KeyValuePair<CodeCompileUnit, EventHandler> needRefreshCompileUnit in needRefreshCompileUnits)
					{
						dictionary.Add(needRefreshCompileUnit.Key, needRefreshCompileUnit.Value);
					}
					needRefreshCompileUnits = null;
					foreach (KeyValuePair<CodeCompileUnit, EventHandler> item in dictionary)
					{
						if (compileUnitLoaders[item.Key] is CodeDomLoader codeDomLoader2)
						{
							try
							{
								codeDomLoader2.Refresh(item.Value);
							}
							catch (Exception value3)
							{
								typeLoadErrors[item.Value] = value3;
								flag = true;
							}
						}
					}
				}
				if (flag && this.TypeLoadErrorsChanged != null)
				{
					FireEventsNoThrow(this.TypeLoadErrorsChanged, new object[2]
					{
						this,
						EventArgs.Empty
					});
				}
			}
			finally
			{
				executingEnsureCurrentTypes = false;
			}
		}

		internal void AddType(Type type)
		{
			string fullName = type.FullName;
			if (!designTimeTypes.Contains(fullName))
			{
				designTimeTypes[fullName] = type;
			}
		}

		internal void RemoveTypes(Type[] types)
		{
			foreach (Type type in types)
			{
				string fullName = type.FullName;
				StringCollection stringCollection = new StringCollection();
				foreach (Type value in hashOfDTTypes.Values)
				{
					Type type3 = value;
					while (type3 != null && type3.HasElementType)
					{
						type3 = type3.GetElementType();
					}
					if (type3 == type)
					{
						stringCollection.Add(value.FullName);
					}
				}
				StringEnumerator enumerator2 = stringCollection.GetEnumerator();
				try
				{
					while (enumerator2.MoveNext())
					{
						string current = enumerator2.Current;
						hashOfDTTypes.Remove(current);
					}
				}
				finally
				{
					if (enumerator2 is IDisposable disposable)
					{
						disposable.Dispose();
					}
				}
				designTimeTypes.Remove(fullName);
			}
		}

		private static void FireEventsNoThrow(Delegate eventDelegator, object[] args)
		{
			if ((object)eventDelegator == null)
			{
				return;
			}
			Delegate[] invocationList = eventDelegator.GetInvocationList();
			foreach (Delegate @delegate in invocationList)
			{
				try
				{
					@delegate.DynamicInvoke(args);
				}
				catch (Exception)
				{
				}
			}
		}

		private void RemoveCachedAssemblyWrappedTypes(Assembly assembly)
		{
			ArrayList arrayList = new ArrayList(hashOfRTTypes.Keys);
			foreach (Type item in arrayList)
			{
				if (item.IsGenericTypeDefinition)
				{
					((RTTypeWrapper)hashOfRTTypes[item]).OnAssemblyRemoved(assembly);
				}
				if (item.Assembly == assembly)
				{
					hashOfRTTypes.Remove(item);
				}
			}
		}

		public object GetService(Type serviceType)
		{
			if (serviceProvider == null)
			{
				return null;
			}
			return serviceProvider.GetService(serviceType);
		}

		public void Dispose()
		{
			if (compileUnitLoaders != null)
			{
				foreach (CodeDomLoader value in compileUnitLoaders.Values)
				{
					value.Dispose();
				}
				compileUnitLoaders.Clear();
			}
			addedAssemblies = null;
			addedCompileUnits = null;
			needRefreshCompileUnits = null;
		}
	}
	internal class TypeSystemSR
	{
		private static TypeSystemSR loader;

		private ResourceManager resources;

		private static CultureInfo Culture => null;

		internal TypeSystemSR()
		{
			resources = new ResourceManager("System.Workflow.ComponentModel.Compiler.StringResources", Assembly.GetExecutingAssembly());
		}

		private static TypeSystemSR GetLoader()
		{
			if (loader == null)
			{
				loader = new TypeSystemSR();
			}
			return loader;
		}

		internal static string GetString(string name, params object[] args)
		{
			return GetString(Culture, name, args);
		}

		internal static string GetString(CultureInfo culture, string name, params object[] args)
		{
			TypeSystemSR typeSystemSR = GetLoader();
			if (typeSystemSR == null)
			{
				return null;
			}
			string @string = typeSystemSR.resources.GetString(name, culture);
			if (args != null && args.Length != 0)
			{
				return string.Format(CultureInfo.CurrentCulture, @string, args);
			}
			return @string;
		}

		internal static string GetString(string name)
		{
			return GetString(Culture, name);
		}

		internal static string GetString(CultureInfo culture, string name)
		{
			return GetLoader()?.resources.GetString(name, culture);
		}
	}
	internal sealed class RTTypeWrapper : Type, ICloneable
	{
		private class TypeArrayComparer : IEqualityComparer
		{
			bool IEqualityComparer.Equals(object x, object y)
			{
				Array array = x as Array;
				Array array2 = y as Array;
				if (array == null || array2 == null || array.Rank != 1 || array2.Rank != 1)
				{
					return false;
				}
				bool flag = false;
				if (array.Length == array2.Length)
				{
					int num = 0;
					while (!flag && num < array.Length)
					{
						flag = array.GetValue(num) != array2.GetValue(num);
						num++;
					}
				}
				else
				{
					flag = true;
				}
				return !flag;
			}

			int IEqualityComparer.GetHashCode(object obj)
			{
				return 0;
			}
		}

		private class RTConstructorInfoWrapper : ConstructorInfo
		{
			private RTTypeWrapper rtTypeWrapper;

			private ConstructorInfo ctorInfo;

			private ParameterInfo[] wrappedParameters;

			public override MethodAttributes Attributes => ctorInfo.Attributes;

			public override RuntimeMethodHandle MethodHandle => ctorInfo.MethodHandle;

			public override Type DeclaringType => rtTypeWrapper.ResolveTypeFromTypeSystem(ctorInfo.DeclaringType);

			public override MemberTypes MemberType => ctorInfo.MemberType;

			public override string Name => ctorInfo.Name;

			public override Type ReflectedType => rtTypeWrapper.ResolveTypeFromTypeSystem(ctorInfo.ReflectedType);

			public RTConstructorInfoWrapper(RTTypeWrapper rtTypeWrapper, ConstructorInfo ctorInfo)
			{
				this.rtTypeWrapper = rtTypeWrapper;
				this.ctorInfo = ctorInfo;
			}

			public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)
			{
				return ctorInfo.Invoke(invokeAttr, binder, parameters, culture);
			}

			public override MethodImplAttributes GetMethodImplementationFlags()
			{
				return ctorInfo.GetMethodImplementationFlags();
			}

			public override ParameterInfo[] GetParameters()
			{
				if (wrappedParameters == null)
				{
					List<ParameterInfo> list = new List<ParameterInfo>();
					ParameterInfo[] parameters = ctorInfo.GetParameters();
					foreach (ParameterInfo paramInfo in parameters)
					{
						list.Add(new RTParameterInfoWrapper(rtTypeWrapper, ctorInfo, paramInfo));
					}
					wrappedParameters = list.ToArray();
				}
				return wrappedParameters;
			}

			public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)
			{
				return ctorInfo.Invoke(obj, invokeAttr, binder, parameters, culture);
			}

			public override object[] GetCustomAttributes(Type attributeType, bool inherit)
			{
				return ctorInfo.GetCustomAttributes(attributeType, inherit);
			}

			public override object[] GetCustomAttributes(bool inherit)
			{
				return ctorInfo.GetCustomAttributes(inherit);
			}

			public override bool IsDefined(Type attributeType, bool inherit)
			{
				return ctorInfo.IsDefined(attributeType, inherit);
			}
		}

		private class RTFieldInfoWrapper : FieldInfo
		{
			private RTTypeWrapper rtTypeWrapper;

			private FieldInfo fieldInfo;

			public override int MetadataToken => fieldInfo.MetadataToken;

			public override Module Module => fieldInfo.Module;

			public override FieldAttributes Attributes => fieldInfo.Attributes;

			public override RuntimeFieldHandle FieldHandle => fieldInfo.FieldHandle;

			public override Type FieldType => rtTypeWrapper.ResolveTypeFromTypeSystem(fieldInfo.FieldType);

			public override Type DeclaringType => rtTypeWrapper.ResolveTypeFromTypeSystem(fieldInfo.DeclaringType);

			public override MemberTypes MemberType => fieldInfo.MemberType;

			public override string Name => fieldInfo.Name;

			public override Type ReflectedType => rtTypeWrapper.ResolveTypeFromTypeSystem(fieldInfo.ReflectedType);

			public RTFieldInfoWrapper(RTTypeWrapper rtTypeWrapper, FieldInfo fieldInfo)
			{
				this.rtTypeWrapper = rtTypeWrapper;
				this.fieldInfo = fieldInfo;
			}

			public override object GetValue(object obj)
			{
				return fieldInfo.GetValue(obj);
			}

			public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture)
			{
				fieldInfo.SetValue(obj, value, invokeAttr, binder, culture);
			}

			public override object[] GetCustomAttributes(Type attributeType, bool inherit)
			{
				return fieldInfo.GetCustomAttributes(attributeType, inherit);
			}

			public override object[] GetCustomAttributes(bool inherit)
			{
				return fieldInfo.GetCustomAttributes(inherit);
			}

			public override bool IsDefined(Type attributeType, bool inherit)
			{
				return fieldInfo.IsDefined(attributeType, inherit);
			}
		}

		private class RTPropertyInfoWrapper : PropertyInfo
		{
			private PropertyInfo propertyInfo;

			private RTTypeWrapper rtTypeWrapper;

			private ParameterInfo[] wrappedParameters;

			public override PropertyAttributes Attributes => propertyInfo.Attributes;

			public override bool CanRead => propertyInfo.CanRead;

			public override bool CanWrite => propertyInfo.CanWrite;

			public override Type PropertyType => rtTypeWrapper.ResolveTypeFromTypeSystem(propertyInfo.PropertyType);

			public override Type DeclaringType => rtTypeWrapper.ResolveTypeFromTypeSystem(propertyInfo.DeclaringType);

			public override MemberTypes MemberType => propertyInfo.MemberType;

			public override string Name => propertyInfo.Name;

			public override Type ReflectedType => rtTypeWrapper.ResolveTypeFromTypeSystem(propertyInfo.ReflectedType);

			public override int MetadataToken => propertyInfo.MetadataToken;

			public override Module Module => propertyInfo.Module;

			public RTPropertyInfoWrapper(RTTypeWrapper rtTypeWrapper, PropertyInfo propertyInfo)
			{
				this.rtTypeWrapper = rtTypeWrapper;
				this.propertyInfo = propertyInfo;
			}

			public override MethodInfo[] GetAccessors(bool nonPublic)
			{
				List<MethodInfo> list = new List<MethodInfo>();
				MethodInfo[] accessors = propertyInfo.GetAccessors(nonPublic);
				foreach (MethodInfo realInfo in accessors)
				{
					list.Add(rtTypeWrapper.EnsureMethodWrapped(realInfo));
				}
				return list.ToArray();
			}

			public override MethodInfo GetGetMethod(bool nonPublic)
			{
				MethodInfo getMethod = propertyInfo.GetGetMethod(nonPublic);
				if (getMethod == null)
				{
					return null;
				}
				return rtTypeWrapper.EnsureMethodWrapped(getMethod);
			}

			public override ParameterInfo[] GetIndexParameters()
			{
				if (wrappedParameters == null)
				{
					List<ParameterInfo> list = new List<ParameterInfo>();
					ParameterInfo[] indexParameters = propertyInfo.GetIndexParameters();
					foreach (ParameterInfo paramInfo in indexParameters)
					{
						list.Add(new RTParameterInfoWrapper(rtTypeWrapper, propertyInfo, paramInfo));
					}
					wrappedParameters = list.ToArray();
				}
				return wrappedParameters;
			}

			public override MethodInfo GetSetMethod(bool nonPublic)
			{
				MethodInfo setMethod = propertyInfo.GetSetMethod(nonPublic);
				if (setMethod == null)
				{
					return null;
				}
				return rtTypeWrapper.EnsureMethodWrapped(setMethod);
			}

			public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)
			{
				return propertyInfo.GetValue(obj, invokeAttr, binder, index, culture);
			}

			public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)
			{
				propertyInfo.SetValue(obj, value, invokeAttr, binder, index, culture);
			}

			public override object[] GetCustomAttributes(Type attributeType, bool inherit)
			{
				return propertyInfo.GetCustomAttributes(attributeType, inherit);
			}

			public override object[] GetCustomAttributes(bool inherit)
			{
				return propertyInfo.GetCustomAttributes(inherit);
			}

			public override bool IsDefined(Type attributeType, bool inherit)
			{
				return propertyInfo.IsDefined(attributeType, inherit);
			}
		}

		private class RTMethodInfoWrapper : MethodInfo
		{
			private MethodInfo methodInfo;

			private RTTypeWrapper rtTypeWrapper;

			private ParameterInfo[] wrappedParameters;

			public override Module Module => methodInfo.Module;

			public override int MetadataToken => methodInfo.MetadataToken;

			public override CallingConventions CallingConvention => methodInfo.CallingConvention;

			public override ParameterInfo ReturnParameter => new RTParameterInfoWrapper(rtTypeWrapper, this, methodInfo.ReturnParameter);

			public override Type ReturnType => rtTypeWrapper.ResolveTypeFromTypeSystem(methodInfo.ReturnType);

			public override ICustomAttributeProvider ReturnTypeCustomAttributes => methodInfo.ReturnTypeCustomAttributes;

			public override MethodAttributes Attributes => methodInfo.Attributes;

			public override RuntimeMethodHandle MethodHandle => methodInfo.MethodHandle;

			public override Type DeclaringType => rtTypeWrapper.ResolveTypeFromTypeSystem(methodInfo.DeclaringType);

			public override MemberTypes MemberType => methodInfo.MemberType;

			public override string Name => methodInfo.Name;

			public override Type ReflectedType => rtTypeWrapper.ResolveTypeFromTypeSystem(methodInfo.ReflectedType);

			public RTMethodInfoWrapper(RTTypeWrapper rtTypeWrapper, MethodInfo methodInfo)
			{
				this.rtTypeWrapper = rtTypeWrapper;
				this.methodInfo = methodInfo;
			}

			public override MethodBody GetMethodBody()
			{
				return methodInfo.GetMethodBody();
			}

			public override MethodInfo GetBaseDefinition()
			{
				return methodInfo.GetBaseDefinition();
			}

			public override MethodImplAttributes GetMethodImplementationFlags()
			{
				return methodInfo.GetMethodImplementationFlags();
			}

			public override ParameterInfo[] GetParameters()
			{
				if (wrappedParameters == null)
				{
					List<ParameterInfo> list = new List<ParameterInfo>();
					ParameterInfo[] parameters = methodInfo.GetParameters();
					foreach (ParameterInfo paramInfo in parameters)
					{
						list.Add(new RTParameterInfoWrapper(rtTypeWrapper, methodInfo, paramInfo));
					}
					wrappedParameters = list.ToArray();
				}
				return wrappedParameters;
			}

			public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture)
			{
				return methodInfo.Invoke(obj, invokeAttr, binder, parameters, culture);
			}

			public override object[] GetCustomAttributes(Type attributeType, bool inherit)
			{
				return methodInfo.GetCustomAttributes(attributeType, inherit);
			}

			public override object[] GetCustomAttributes(bool inherit)
			{
				return methodInfo.GetCustomAttributes(inherit);
			}

			public override bool IsDefined(Type attributeType, bool inherit)
			{
				return methodInfo.IsDefined(attributeType, inherit);
			}
		}

		private class RTEventInfoWrapper : EventInfo
		{
			private RTTypeWrapper rtTypeWrapper;

			private EventInfo eventInfo;

			public override EventAttributes Attributes => eventInfo.Attributes;

			public override Type DeclaringType => rtTypeWrapper.ResolveTypeFromTypeSystem(eventInfo.DeclaringType);

			public override MemberTypes MemberType => eventInfo.MemberType;

			public override string Name => eventInfo.Name;

			public override Type ReflectedType => rtTypeWrapper.ResolveTypeFromTypeSystem(eventInfo.ReflectedType);

			public override int MetadataToken => eventInfo.MetadataToken;

			public override Module Module => eventInfo.Module;

			public RTEventInfoWrapper(RTTypeWrapper rtTypeWrapper, EventInfo eventInfo)
			{
				this.rtTypeWrapper = rtTypeWrapper;
				this.eventInfo = eventInfo;
			}

			public override MethodInfo GetAddMethod(bool nonPublic)
			{
				MethodInfo addMethod = eventInfo.GetAddMethod(nonPublic);
				if (addMethod == null)
				{
					return null;
				}
				return rtTypeWrapper.EnsureMethodWrapped(addMethod);
			}

			public override MethodInfo GetRaiseMethod(bool nonPublic)
			{
				MethodInfo raiseMethod = eventInfo.GetRaiseMethod(nonPublic);
				if (raiseMethod == null)
				{
					return null;
				}
				return rtTypeWrapper.EnsureMethodWrapped(raiseMethod);
			}

			public override MethodInfo GetRemoveMethod(bool nonPublic)
			{
				MethodInfo removeMethod = eventInfo.GetRemoveMethod(nonPublic);
				if (removeMethod == null)
				{
					return null;
				}
				return rtTypeWrapper.EnsureMethodWrapped(removeMethod);
			}

			public override object[] GetCustomAttributes(Type attributeType, bool inherit)
			{
				return eventInfo.GetCustomAttributes(attributeType, inherit);
			}

			public override object[] GetCustomAttributes(bool inherit)
			{
				return eventInfo.GetCustomAttributes(inherit);
			}

			public override bool IsDefined(Type attributeType, bool inherit)
			{
				return eventInfo.IsDefined(attributeType, inherit);
			}
		}

		private class RTParameterInfoWrapper : ParameterInfo
		{
			private RTTypeWrapper rtTypeWrapper;

			private ParameterInfo paramInfo;

			private MemberInfo parentMember;

			public override ParameterAttributes Attributes => paramInfo.Attributes;

			public override MemberInfo Member => parentMember;

			public override string Name => paramInfo.Name;

			public override Type ParameterType => rtTypeWrapper.ResolveTypeFromTypeSystem(paramInfo.ParameterType);

			public override int Position => paramInfo.Position;

			public override object DefaultValue
			{
				get
				{
					throw new NotImplementedException();
				}
			}

			public RTParameterInfoWrapper(RTTypeWrapper rtTypeWrapper, MemberInfo parentMember, ParameterInfo paramInfo)
			{
				this.parentMember = parentMember;
				this.rtTypeWrapper = rtTypeWrapper;
				this.paramInfo = paramInfo;
			}

			public override object[] GetCustomAttributes(bool inherit)
			{
				return paramInfo.GetCustomAttributes(inherit);
			}

			public override bool IsDefined(Type attributeType, bool inherit)
			{
				return paramInfo.IsDefined(attributeType, inherit);
			}

			public override Type[] GetOptionalCustomModifiers()
			{
				return paramInfo.GetOptionalCustomModifiers();
			}

			public override Type[] GetRequiredCustomModifiers()
			{
				return paramInfo.GetRequiredCustomModifiers();
			}
		}

		private Type runtimeType;

		private Type[] typeArgs;

		private ITypeProvider typeProvider;

		private Hashtable memberMapping = new Hashtable();

		private Hashtable boundedTypes = new Hashtable(new TypeArrayComparer());

		internal ITypeProvider Provider => typeProvider;

		public override int MetadataToken => runtimeType.MetadataToken;

		public override Assembly Assembly
		{
			get
			{
				if (typeArgs != null)
				{
					Type[] array = typeArgs;
					foreach (Type type in array)
					{
						if (type.Assembly == null)
						{
							return null;
						}
					}
				}
				return runtimeType.Assembly;
			}
		}

		public override string AssemblyQualifiedName => FullName + ", " + runtimeType.Assembly.FullName;

		public override Type BaseType => ResolveTypeFromTypeSystem(runtimeType.BaseType);

		public override Type DeclaringType
		{
			get
			{
				if (runtimeType.DeclaringType == null)
				{
					return null;
				}
				return typeProvider.GetType(runtimeType.DeclaringType.AssemblyQualifiedName);
			}
		}

		public override string FullName
		{
			get
			{
				StringBuilder stringBuilder = new StringBuilder(runtimeType.FullName);
				if (typeArgs != null && typeArgs.Length != 0)
				{
					stringBuilder.Append("[");
					for (int i = 0; i < typeArgs.Length; i++)
					{
						stringBuilder.Append("[");
						stringBuilder.Append(typeArgs[i].AssemblyQualifiedName);
						stringBuilder.Append("]");
						if (i < typeArgs.Length - 1)
						{
							stringBuilder.Append(",");
						}
					}
					stringBuilder.Append("]");
				}
				return stringBuilder.ToString();
			}
		}

		public override Guid GUID => runtimeType.GUID;

		public override Module Module => runtimeType.Module;

		public override string Name
		{
			get
			{
				if (IsGenericType && !IsGenericTypeDefinition)
				{
					return GetGenericTypeDefinition().FullName.Substring(Namespace.Length + 1);
				}
				if (Namespace != null)
				{
					return FullName.Substring(Namespace.Length + 1);
				}
				return FullName;
			}
		}

		public override string Namespace => runtimeType.Namespace;

		public override RuntimeTypeHandle TypeHandle => runtimeType.TypeHandle;

		public override Type UnderlyingSystemType => runtimeType.UnderlyingSystemType;

		public override bool IsGenericTypeDefinition
		{
			get
			{
				if (typeArgs != null && typeArgs.GetLength(0) > 0)
				{
					return false;
				}
				return runtimeType.IsGenericTypeDefinition;
			}
		}

		public override bool IsGenericParameter => runtimeType.IsGenericParameter;

		public override int GenericParameterPosition => runtimeType.GenericParameterPosition;

		public override bool IsGenericType
		{
			get
			{
				if (typeArgs != null && typeArgs.GetLength(0) > 0)
				{
					return true;
				}
				return runtimeType.IsGenericType;
			}
		}

		public override bool ContainsGenericParameters
		{
			get
			{
				if (typeArgs != null && typeArgs.GetLength(0) > 0)
				{
					return false;
				}
				return runtimeType.ContainsGenericParameters;
			}
		}

		internal RTTypeWrapper(ITypeProvider typeProvider, Type runtimeType)
		{
			if (runtimeType == null)
			{
				throw new ArgumentNullException("runtimeType");
			}
			if (runtimeType.Assembly == null)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidRuntimeType"), "runtimeType");
			}
			this.typeProvider = typeProvider;
			this.runtimeType = runtimeType;
		}

		private RTTypeWrapper(ITypeProvider typeProvider, Type runtimeType, Type[] typeArgs)
		{
			if (runtimeType == null)
			{
				throw new ArgumentNullException("runtimeType");
			}
			if (runtimeType.Assembly == null)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "runtimeType");
			}
			this.typeProvider = typeProvider;
			this.runtimeType = runtimeType;
			if (!IsGenericTypeDefinition)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "runtimeType");
			}
			this.typeArgs = new Type[typeArgs.Length];
			for (int i = 0; i < typeArgs.Length; i++)
			{
				this.typeArgs[i] = typeArgs[i];
				if (this.typeArgs[i] == null)
				{
					throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "typeArgs");
				}
			}
		}

		private bool IsAssignable(Type type1, Type type2)
		{
			Type toType = ResolveTypeFromTypeSystem(type1);
			Type fromType = ResolveTypeFromTypeSystem(type2);
			return TypeProvider.IsAssignable(toType, fromType);
		}

		internal Type ResolveTypeFromTypeSystem(Type type)
		{
			if (type == null)
			{
				return null;
			}
			if (type.IsGenericParameter)
			{
				if (typeArgs == null)
				{
					return type;
				}
				type = typeArgs[type.GenericParameterPosition];
			}
			Type type2 = null;
			try
			{
				if (!string.IsNullOrEmpty(type.AssemblyQualifiedName))
				{
					type2 = typeProvider.GetType(type.AssemblyQualifiedName);
				}
			}
			catch
			{
			}
			if (type2 == null)
			{
				type2 = type;
			}
			if (type2.IsGenericType)
			{
				type2 = ResolveGenericTypeFromTypeSystem(type2);
			}
			return type2;
		}

		internal Type ResolveGenericTypeFromTypeSystem(Type type)
		{
			if (runtimeType.IsGenericTypeDefinition)
			{
				Type type2 = null;
				if (!type.IsNested)
				{
					type2 = typeProvider.GetType(type.Namespace + "." + type.Name);
				}
				else
				{
					type2 = type;
					string text = type.Name;
					while (type2.DeclaringType != null)
					{
						type2 = type2.DeclaringType;
						text = type2.Name + "+" + text;
					}
					text = type2.Namespace + "." + text;
					type2 = typeProvider.GetType(text);
				}
				if (type2 != null)
				{
					return type2.MakeGenericType(typeArgs);
				}
				return type;
			}
			return type;
		}

		public override bool Equals(object obj)
		{
			Type type = obj as Type;
			if (type is RTTypeWrapper)
			{
				type = ((RTTypeWrapper)type).runtimeType;
			}
			return runtimeType == type;
		}

		public override object[] GetCustomAttributes(bool inherit)
		{
			return runtimeType.GetCustomAttributes(inherit);
		}

		public override object[] GetCustomAttributes(Type attributeType, bool inherit)
		{
			return runtimeType.GetCustomAttributes(attributeType, inherit);
		}

		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr)
		{
			List<ConstructorInfo> list = new List<ConstructorInfo>();
			ConstructorInfo[] constructors = runtimeType.GetConstructors(bindingAttr);
			foreach (ConstructorInfo realInfo in constructors)
			{
				list.Add(EnsureConstructorWrapped(realInfo));
			}
			return list.ToArray();
		}

		public override EventInfo GetEvent(string name, BindingFlags bindingAttr)
		{
			EventInfo eventInfo = runtimeType.GetEvent(name, bindingAttr);
			if (eventInfo != null)
			{
				eventInfo = EnsureEventWrapped(eventInfo);
			}
			return eventInfo;
		}

		public override EventInfo[] GetEvents(BindingFlags bindingAttr)
		{
			List<EventInfo> list = new List<EventInfo>();
			EventInfo[] events = runtimeType.GetEvents(bindingAttr);
			foreach (EventInfo realInfo in events)
			{
				list.Add(EnsureEventWrapped(realInfo));
			}
			return list.ToArray();
		}

		public override FieldInfo GetField(string name, BindingFlags bindingAttr)
		{
			FieldInfo fieldInfo = runtimeType.GetField(name, bindingAttr);
			if (fieldInfo != null)
			{
				fieldInfo = EnsureFieldWrapped(fieldInfo);
			}
			return fieldInfo;
		}

		public override FieldInfo[] GetFields(BindingFlags bindingAttr)
		{
			List<FieldInfo> list = new List<FieldInfo>();
			FieldInfo[] fields = runtimeType.GetFields(bindingAttr);
			foreach (FieldInfo realInfo in fields)
			{
				list.Add(EnsureFieldWrapped(realInfo));
			}
			return list.ToArray();
		}

		public override MethodInfo[] GetMethods(BindingFlags bindingAttr)
		{
			List<MethodInfo> list = new List<MethodInfo>();
			MethodInfo[] methods = runtimeType.GetMethods(bindingAttr);
			foreach (MethodInfo realInfo in methods)
			{
				list.Add(EnsureMethodWrapped(realInfo));
			}
			return list.ToArray();
		}

		public override PropertyInfo[] GetProperties(BindingFlags bindingAttr)
		{
			List<PropertyInfo> list = new List<PropertyInfo>();
			PropertyInfo[] properties = runtimeType.GetProperties(bindingAttr);
			foreach (PropertyInfo realInfo in properties)
			{
				list.Add(EnsurePropertyWrapped(realInfo));
			}
			return list.ToArray();
		}

		public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr)
		{
			List<MemberInfo> list = new List<MemberInfo>();
			MemberInfo[] member = runtimeType.GetMember(name, type, bindingAttr);
			foreach (MemberInfo memberInfo in member)
			{
				list.Add(EnsureMemberWrapped(memberInfo));
			}
			return list.ToArray();
		}

		public override MemberInfo[] GetMembers(BindingFlags bindingAttr)
		{
			List<MemberInfo> list = new List<MemberInfo>();
			MemberInfo[] members = runtimeType.GetMembers(bindingAttr);
			foreach (MemberInfo memberInfo in members)
			{
				list.Add(EnsureMemberWrapped(memberInfo));
			}
			return list.ToArray();
		}

		public override Type GetNestedType(string name, BindingFlags bindingAttr)
		{
			Type type = runtimeType.GetNestedType(name, bindingAttr);
			if (type != null)
			{
				type = ResolveTypeFromTypeSystem(type);
			}
			return type;
		}

		public override Type[] GetNestedTypes(BindingFlags bindingAttr)
		{
			List<Type> list = new List<Type>();
			Type[] nestedTypes = runtimeType.GetNestedTypes(bindingAttr);
			foreach (Type type in nestedTypes)
			{
				list.Add(ResolveTypeFromTypeSystem(type));
			}
			return list.ToArray();
		}

		public override Type GetInterface(string name, bool ignoreCase)
		{
			Type type = runtimeType.GetInterface(name, ignoreCase);
			if (type != null)
			{
				type = ResolveTypeFromTypeSystem(type);
			}
			return type;
		}

		public override Type[] GetInterfaces()
		{
			List<Type> list = new List<Type>();
			Type[] interfaces = runtimeType.GetInterfaces();
			foreach (Type type in interfaces)
			{
				Type item = ResolveTypeFromTypeSystem(type);
				list.Add(item);
			}
			return list.ToArray();
		}

		public override object InvokeMember(string name, BindingFlags bindingFlags, Binder binder, object target, object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParams)
		{
			return runtimeType.InvokeMember(name, bindingFlags, binder, target, providedArgs, modifiers, culture, namedParams);
		}

		public override bool IsSubclassOf(Type potentialBaseType)
		{
			return TypeProvider.IsSubclassOf(runtimeType, potentialBaseType);
		}

		public override bool IsAssignableFrom(Type c)
		{
			Type type = runtimeType;
			if (type.IsGenericTypeDefinition && IsGenericType)
			{
				type = ResolveGenericTypeFromTypeSystem(type);
			}
			return TypeProvider.IsAssignable(type, c);
		}

		public override string ToString()
		{
			return runtimeType.ToString();
		}

		public override int GetHashCode()
		{
			return runtimeType.GetHashCode();
		}

		public override bool IsDefined(Type attributeType, bool inherit)
		{
			return runtimeType.IsDefined(attributeType, inherit);
		}

		public override Type GetElementType()
		{
			return ResolveTypeFromTypeSystem(runtimeType.GetElementType());
		}

		private PropertyInfo EnsurePropertyWrapped(PropertyInfo realInfo)
		{
			PropertyInfo propertyInfo = (PropertyInfo)memberMapping[realInfo];
			if (propertyInfo == null)
			{
				propertyInfo = new RTPropertyInfoWrapper(this, realInfo);
				memberMapping.Add(realInfo, propertyInfo);
			}
			return propertyInfo;
		}

		internal MethodInfo EnsureMethodWrapped(MethodInfo realInfo)
		{
			MethodInfo methodInfo = (MethodInfo)memberMapping[realInfo];
			if (methodInfo == null)
			{
				methodInfo = new RTMethodInfoWrapper(this, realInfo);
				memberMapping.Add(realInfo, methodInfo);
			}
			return methodInfo;
		}

		private MemberInfo EnsureMemberWrapped(MemberInfo memberInfo)
		{
			MemberInfo result = null;
			if (memberInfo is PropertyInfo)
			{
				result = EnsurePropertyWrapped(memberInfo as PropertyInfo);
			}
			else if (memberInfo is ConstructorInfo)
			{
				result = EnsureConstructorWrapped(memberInfo as ConstructorInfo);
			}
			else if (memberInfo is EventInfo)
			{
				result = EnsureEventWrapped(memberInfo as EventInfo);
			}
			else if (memberInfo is FieldInfo)
			{
				result = EnsureFieldWrapped(memberInfo as FieldInfo);
			}
			else if (memberInfo is MethodInfo)
			{
				result = EnsureMethodWrapped(memberInfo as MethodInfo);
			}
			return result;
		}

		private ConstructorInfo EnsureConstructorWrapped(ConstructorInfo realInfo)
		{
			ConstructorInfo constructorInfo = (ConstructorInfo)memberMapping[realInfo];
			if (constructorInfo == null)
			{
				constructorInfo = new RTConstructorInfoWrapper(this, realInfo);
				memberMapping.Add(realInfo, constructorInfo);
			}
			return constructorInfo;
		}

		private EventInfo EnsureEventWrapped(EventInfo realInfo)
		{
			EventInfo eventInfo = (EventInfo)memberMapping[realInfo];
			if (eventInfo == null)
			{
				eventInfo = new RTEventInfoWrapper(this, realInfo);
				memberMapping.Add(realInfo, eventInfo);
			}
			return eventInfo;
		}

		private FieldInfo EnsureFieldWrapped(FieldInfo realInfo)
		{
			FieldInfo fieldInfo = (FieldInfo)memberMapping[realInfo];
			if (fieldInfo == null)
			{
				fieldInfo = new RTFieldInfoWrapper(this, realInfo);
				memberMapping.Add(realInfo, fieldInfo);
			}
			return fieldInfo;
		}

		public override Type[] GetGenericArguments()
		{
			return typeArgs;
		}

		public override Type GetGenericTypeDefinition()
		{
			if (IsGenericType)
			{
				return runtimeType;
			}
			return this;
		}

		public override Type MakeGenericType(params Type[] typeArgs)
		{
			if (typeArgs == null)
			{
				throw new ArgumentNullException("typeArgs");
			}
			Type[] array = new Type[typeArgs.Length];
			if (!IsGenericTypeDefinition)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "typeArgs");
			}
			for (int i = 0; i < typeArgs.Length; i++)
			{
				array[i] = typeArgs[i];
				if (array[i] == null)
				{
					throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "typeArgs");
				}
			}
			Type type = boundedTypes[typeArgs] as Type;
			if (type == null)
			{
				type = ((typeArgs.Length != 1 || !(runtimeType == typeof(Nullable<>)) || typeArgs[0].IsEnum) ? new RTTypeWrapper(typeProvider, runtimeType, typeArgs) : (Type.GetTypeCode(typeArgs[0]) switch
				{
					TypeCode.Boolean => typeof(bool?), 
					TypeCode.Byte => typeof(byte?), 
					TypeCode.Char => typeof(char?), 
					TypeCode.DateTime => typeof(DateTime?), 
					TypeCode.Decimal => typeof(decimal?), 
					TypeCode.Double => typeof(double?), 
					TypeCode.Int16 => typeof(short?), 
					TypeCode.Int32 => typeof(int?), 
					TypeCode.Int64 => typeof(long?), 
					TypeCode.SByte => typeof(sbyte?), 
					TypeCode.Single => typeof(float?), 
					TypeCode.UInt16 => typeof(ushort?), 
					TypeCode.UInt32 => typeof(uint?), 
					TypeCode.UInt64 => typeof(ulong?), 
					_ => new RTTypeWrapper(typeProvider, runtimeType, typeArgs), 
				}));
				boundedTypes[typeArgs] = type;
			}
			return type;
		}

		public override Type MakeByRefType()
		{
			return typeProvider.GetType(FullName + "&");
		}

		public override Type MakePointerType()
		{
			return typeProvider.GetType(FullName + "*");
		}

		internal void OnAssemblyRemoved(Assembly removedAssembly)
		{
			ArrayList arrayList = new ArrayList(boundedTypes.Keys);
			foreach (Type[] item in arrayList)
			{
				Type[] array2 = item;
				foreach (Type type in array2)
				{
					if (type.Assembly == removedAssembly)
					{
						boundedTypes.Remove(item);
						break;
					}
				}
			}
		}

		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
		{
			ConstructorInfo[] constructors = runtimeType.GetConstructors(bindingAttr);
			foreach (ConstructorInfo constructorInfo in constructors)
			{
				bool flag = false;
				if (types != null)
				{
					ParameterInfo[] parameters = constructorInfo.GetParameters();
					if (parameters.GetLength(0) == types.Length)
					{
						int num = 0;
						while (!flag && num < parameters.Length)
						{
							flag = !IsAssignable(parameters[num].ParameterType, types[num]);
							num++;
						}
					}
					else
					{
						flag = true;
					}
				}
				if (!flag)
				{
					return EnsureConstructorWrapped(constructorInfo);
				}
			}
			return null;
		}

		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
		{
			MethodInfo[] methods = runtimeType.GetMethods(bindingAttr);
			foreach (MethodInfo methodInfo in methods)
			{
				if (!(((bindingAttr & BindingFlags.IgnoreCase) == BindingFlags.IgnoreCase) ? (string.Compare(methodInfo.Name, name, StringComparison.OrdinalIgnoreCase) == 0) : (string.Compare(methodInfo.Name, name, StringComparison.Ordinal) == 0)))
				{
					continue;
				}
				bool flag = false;
				if (types != null)
				{
					ParameterInfo[] parameters = methodInfo.GetParameters();
					if (parameters.GetLength(0) == types.Length)
					{
						int num = 0;
						while (!flag && num < parameters.Length)
						{
							flag = !IsAssignable(parameters[num].ParameterType, types[num]);
							num++;
						}
					}
					else
					{
						flag = true;
					}
				}
				if (!flag)
				{
					return EnsureMethodWrapped(methodInfo);
				}
			}
			return null;
		}

		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)
		{
			PropertyInfo[] properties = runtimeType.GetProperties(bindingAttr);
			foreach (PropertyInfo propertyInfo in properties)
			{
				if (!(((bindingAttr & BindingFlags.IgnoreCase) == BindingFlags.IgnoreCase) ? (string.Compare(propertyInfo.Name, name, StringComparison.OrdinalIgnoreCase) == 0) : (string.Compare(propertyInfo.Name, name, StringComparison.Ordinal) == 0)) || (!(returnType == null) && !returnType.Equals(propertyInfo.PropertyType)))
				{
					continue;
				}
				bool flag = false;
				if (types != null)
				{
					ParameterInfo[] indexParameters = propertyInfo.GetIndexParameters();
					if (indexParameters.GetLength(0) == types.Length)
					{
						int num = 0;
						while (!flag && num < indexParameters.Length)
						{
							flag = !IsAssignable(indexParameters[num].ParameterType, types[num]);
							num++;
						}
					}
					else
					{
						flag = true;
					}
				}
				if (!flag)
				{
					return EnsurePropertyWrapped(propertyInfo);
				}
			}
			return null;
		}

		protected override TypeAttributes GetAttributeFlagsImpl()
		{
			return runtimeType.Attributes;
		}

		protected override bool HasElementTypeImpl()
		{
			return runtimeType.HasElementType;
		}

		public override int GetArrayRank()
		{
			return runtimeType.GetArrayRank();
		}

		protected override bool IsArrayImpl()
		{
			return runtimeType.IsArray;
		}

		protected override bool IsByRefImpl()
		{
			return runtimeType.IsByRef;
		}

		protected override bool IsCOMObjectImpl()
		{
			return runtimeType.IsCOMObject;
		}

		protected override bool IsContextfulImpl()
		{
			return runtimeType.IsContextful;
		}

		protected override bool IsMarshalByRefImpl()
		{
			return runtimeType.IsMarshalByRef;
		}

		protected override bool IsPointerImpl()
		{
			return runtimeType.IsPointer;
		}

		protected override bool IsPrimitiveImpl()
		{
			return runtimeType.IsPrimitive;
		}

		public object Clone()
		{
			return this;
		}
	}
	internal static class ValidationHelpers
	{
		internal static void ValidateIdentifier(IServiceProvider serviceProvider, string identifier)
		{
			if (serviceProvider == null)
			{
				throw new ArgumentNullException("serviceProvider");
			}
			SupportedLanguages supportedLanguage = CompilerHelpers.GetSupportedLanguage(serviceProvider);
			CodeDomProvider codeDomProvider = CompilerHelpers.GetCodeDomProvider(supportedLanguage);
			if ((supportedLanguage == SupportedLanguages.CSharp && identifier.StartsWith("@", StringComparison.Ordinal)) || (supportedLanguage == SupportedLanguages.VB && identifier.StartsWith("[", StringComparison.Ordinal) && identifier.EndsWith("]", StringComparison.Ordinal)) || !codeDomProvider.IsValidIdentifier(identifier))
			{
				throw new Exception(SR.GetString("Error_InvalidLanguageIdentifier", identifier));
			}
		}

		internal static ValidationError ValidateIdentifier(string propName, IServiceProvider context, string identifier)
		{
			if (context == null)
			{
				throw new ArgumentNullException("context");
			}
			ValidationError validationError = null;
			if (identifier == null || identifier.Length == 0)
			{
				validationError = new ValidationError(SR.GetString("Error_PropertyNotSet", propName), 278);
			}
			else
			{
				try
				{
					ValidateIdentifier(context, identifier);
				}
				catch (Exception ex)
				{
					validationError = new ValidationError(SR.GetString("Error_InvalidIdentifier", propName, ex.Message), 281);
				}
			}
			if (validationError != null)
			{
				validationError.PropertyName = propName;
			}
			return validationError;
		}

		internal static ValidationError ValidateNameProperty(string propName, IServiceProvider context, string identifier)
		{
			if (context == null)
			{
				throw new ArgumentNullException("context");
			}
			ValidationError validationError = null;
			if (identifier == null || identifier.Length == 0)
			{
				validationError = new ValidationError(SR.GetString("Error_PropertyNotSet", propName), 278);
			}
			else
			{
				SupportedLanguages supportedLanguage = CompilerHelpers.GetSupportedLanguage(context);
				CodeDomProvider codeDomProvider = CompilerHelpers.GetCodeDomProvider(supportedLanguage);
				if ((supportedLanguage == SupportedLanguages.CSharp && identifier.StartsWith("@", StringComparison.Ordinal)) || (supportedLanguage == SupportedLanguages.VB && identifier.StartsWith("[", StringComparison.Ordinal) && identifier.EndsWith("]", StringComparison.Ordinal)) || !codeDomProvider.IsValidIdentifier(codeDomProvider.CreateEscapedIdentifier(identifier)))
				{
					validationError = new ValidationError(SR.GetString("Error_InvalidIdentifier", propName, SR.GetString("Error_InvalidLanguageIdentifier", identifier)), 281);
				}
			}
			if (validationError != null)
			{
				validationError.PropertyName = propName;
			}
			return validationError;
		}

		internal static ValidationErrorCollection ValidateUniqueIdentifiers(Activity rootActivity)
		{
			if (rootActivity == null)
			{
				throw new ArgumentNullException("rootActivity");
			}
			Hashtable hashtable = new Hashtable();
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			Queue queue = new Queue();
			queue.Enqueue(rootActivity);
			while (queue.Count > 0)
			{
				Activity activity = (Activity)queue.Dequeue();
				if (!activity.Enabled)
				{
					continue;
				}
				if (hashtable.ContainsKey(activity.QualifiedName))
				{
					ValidationError validationError = new ValidationError(SR.GetString("Error_DuplicatedActivityID", activity.QualifiedName), 1538);
					validationError.PropertyName = "Name";
					validationError.UserData[typeof(Activity)] = activity;
					validationErrorCollection.Add(validationError);
				}
				else
				{
					hashtable.Add(activity.QualifiedName, activity);
				}
				if (!(activity is CompositeActivity) || (activity.Parent != null && Helpers.IsCustomActivity(activity as CompositeActivity)))
				{
					continue;
				}
				foreach (Activity allEnabledActivity in Helpers.GetAllEnabledActivities((CompositeActivity)activity))
				{
					queue.Enqueue(allEnabledActivity);
				}
			}
			return validationErrorCollection;
		}

		internal static bool IsActivitySourceInOrder(Activity request, Activity response)
		{
			if (request.Parent == null)
			{
				return true;
			}
			List<Activity> list = new List<Activity>();
			list.Add(response);
			for (Activity activity = ((response is CompositeActivity) ? ((CompositeActivity)response) : response.Parent); activity != null; activity = activity.Parent)
			{
				list.Add(activity);
			}
			Activity activity2 = request;
			CompositeActivity compositeActivity = ((request is CompositeActivity) ? ((CompositeActivity)request) : request.Parent);
			while (compositeActivity != null && !list.Contains(compositeActivity))
			{
				activity2 = compositeActivity;
				compositeActivity = compositeActivity.Parent;
			}
			if (compositeActivity == activity2)
			{
				return true;
			}
			bool flag = false;
			int num = list.IndexOf(compositeActivity) - 1;
			num = ((num >= 0) ? num : 0);
			Activity activity3 = list[num];
			if (compositeActivity == null || Helpers.IsAlternateFlowActivity(activity2) || Helpers.IsAlternateFlowActivity(activity3))
			{
				flag = true;
			}
			else
			{
				for (int i = 0; i < compositeActivity.EnabledActivities.Count && compositeActivity.EnabledActivities[i] != activity2; i++)
				{
					if (compositeActivity.EnabledActivities[i] == activity3)
					{
						flag = true;
						break;
					}
				}
			}
			return !flag;
		}

		internal static ValidationErrorCollection ValidateObject(ValidationManager manager, object obj)
		{
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			if (obj == null)
			{
				return validationErrorCollection;
			}
			Type type = obj.GetType();
			if (!type.IsPrimitive && type != typeof(string))
			{
				bool flag = false;
				Dictionary<int, object> dictionary = manager.Context[typeof(Dictionary<int, object>)] as Dictionary<int, object>;
				if (dictionary == null)
				{
					dictionary = new Dictionary<int, object>();
					manager.Context.Push(dictionary);
					flag = true;
				}
				try
				{
					if (!dictionary.ContainsKey(obj.GetHashCode()))
					{
						dictionary.Add(obj.GetHashCode(), obj);
						try
						{
							Validator[] validators = manager.GetValidators(type);
							Validator[] array = validators;
							foreach (Validator validator in array)
							{
								validationErrorCollection.AddRange(validator.Validate(manager, obj));
							}
						}
						finally
						{
							dictionary.Remove(obj.GetHashCode());
						}
					}
				}
				finally
				{
					if (flag)
					{
						manager.Context.Pop();
					}
				}
			}
			return validationErrorCollection;
		}

		internal static ValidationErrorCollection ValidateActivity(ValidationManager manager, Activity activity)
		{
			ValidationErrorCollection validationErrorCollection = ValidateObject(manager, activity);
			foreach (ValidationError item in validationErrorCollection)
			{
				if (!item.UserData.Contains(typeof(Activity)))
				{
					item.UserData[typeof(Activity)] = activity;
				}
			}
			return validationErrorCollection;
		}

		internal static ValidationErrorCollection ValidateProperty(ValidationManager manager, Activity activity, object obj, PropertyValidationContext propertyValidationContext)
		{
			return ValidateProperty(manager, activity, obj, propertyValidationContext, null);
		}

		internal static ValidationErrorCollection ValidateProperty(ValidationManager manager, Activity activity, object obj, PropertyValidationContext propertyValidationContext, object extendedPropertyContext)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (propertyValidationContext == null)
			{
				throw new ArgumentNullException("propertyValidationContext");
			}
			ValidationErrorCollection validationErrorCollection = new ValidationErrorCollection();
			manager.Context.Push(activity);
			manager.Context.Push(propertyValidationContext);
			if (extendedPropertyContext != null)
			{
				manager.Context.Push(extendedPropertyContext);
			}
			try
			{
				validationErrorCollection.AddRange(ValidateObject(manager, obj));
				return validationErrorCollection;
			}
			finally
			{
				manager.Context.Pop();
				manager.Context.Pop();
				if (extendedPropertyContext != null)
				{
					manager.Context.Pop();
				}
			}
		}
	}
	internal enum SupportedLanguages
	{
		VB,
		CSharp
	}
	internal static class CompilerHelpers
	{
		private const string CompilerVersionKeyword = "CompilerVersion";

		private static Dictionary<Type, Dictionary<string, CodeDomProvider>> providers = null;

		private static object providersLock = new object();

		internal static CodeDomProvider CreateCodeProviderInstance(Type type)
		{
			return CreateCodeProviderInstance(type, string.Empty);
		}

		internal static CodeDomProvider CreateCodeProviderInstance(Type type, string compilerVersion)
		{
			CodeDomProvider codeDomProvider = null;
			if (string.IsNullOrEmpty(compilerVersion))
			{
				if (type == typeof(CSharpCodeProvider))
				{
					return new CSharpCodeProvider();
				}
				if (type == typeof(VBCodeProvider))
				{
					return new VBCodeProvider();
				}
				return (CodeDomProvider)Activator.CreateInstance(type);
			}
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			dictionary.Add("CompilerVersion", compilerVersion);
			return (CodeDomProvider)Activator.CreateInstance(type, dictionary);
		}

		private static CodeDomProvider GetCodeProviderInstance(Type type, string compilerVersion)
		{
			CodeDomProvider value2;
			lock (providersLock)
			{
				if (providers == null)
				{
					providers = new Dictionary<Type, Dictionary<string, CodeDomProvider>>();
				}
				if (!providers.TryGetValue(type, out var value))
				{
					value = new Dictionary<string, CodeDomProvider>();
					providers.Add(type, value);
				}
				if (!value.TryGetValue(compilerVersion, out value2))
				{
					value2 = CreateCodeProviderInstance(type, compilerVersion);
					value.Add(compilerVersion, value2);
				}
			}
			return value2;
		}

		internal static CodeDomProvider GetCodeDomProvider(SupportedLanguages language)
		{
			return GetCodeDomProvider(language, string.Empty);
		}

		internal static CodeDomProvider GetCodeDomProvider(SupportedLanguages language, string compilerVersion)
		{
			if (language == SupportedLanguages.CSharp)
			{
				return GetCodeProviderInstance(typeof(CSharpCodeProvider), compilerVersion);
			}
			return GetCodeProviderInstance(typeof(VBCodeProvider), compilerVersion);
		}

		internal static SupportedLanguages GetSupportedLanguage(IServiceProvider serviceProvider)
		{
			SupportedLanguages result = SupportedLanguages.CSharp;
			if (serviceProvider.GetService(typeof(IWorkflowCompilerOptionsService)) is IWorkflowCompilerOptionsService workflowCompilerOptionsService)
			{
				result = GetSupportedLanguage(workflowCompilerOptionsService.Language);
			}
			return result;
		}

		internal static SupportedLanguages GetSupportedLanguage(string language)
		{
			SupportedLanguages result = SupportedLanguages.CSharp;
			if (!string.IsNullOrEmpty(language) && (string.Compare(language, "VB", StringComparison.OrdinalIgnoreCase) == 0 || string.Compare(language, "VisualBasic", StringComparison.OrdinalIgnoreCase) == 0))
			{
				result = SupportedLanguages.VB;
			}
			return result;
		}
	}
	internal static class ParseHelpers
	{
		internal enum ParseTypeNameLanguage
		{
			VB,
			CSharp,
			NetFramework
		}

		private static readonly Version emptyVersion = new Version(0, 0, 0, 0);

		private const string VersionTag = "version";

		private const string CultureTag = "culture";

		private const string PublicKeyTokenTag = "publickeytoken";

		private static readonly ArrayList VBKeywords = new ArrayList(new string[19]
		{
			"Integer", "String", "Boolean", "Object", "Void", "Single", "Double", "Char", "DateTime", "Long",
			"Byte", "Short", "Single", "Double", "Decimal", "UInteger", "ULong", "SByte", "UShort"
		});

		private static readonly ArrayList CSKeywords = new ArrayList(new string[19]
		{
			"int", "string", "bool", "object", "void", "float", "double", "char", "Date", "long",
			"byte", "short", "Single", "double", "decimal", "uint", "ulong", "sbyte", "ushort"
		});

		private static readonly string[] DotNetKeywords = new string[19]
		{
			"System.Int32", "System.String", "System.Boolean", "System.Object", "System.Void", "System.Single", "System.Double", "System.Char", "System.DateTime", "System.Int64",
			"System.Byte", "System.Int16", "System.Single", "System.Double", "System.Decimal", "System.UInt32", "System.UInt64", "System.SByte", "System.UInt16"
		};

		internal static bool ParseTypeName(string inputTypeName, ParseTypeNameLanguage parseTypeNameLanguage, out string typeName, out string[] parameters, out string elemantDecorator)
		{
			typeName = string.Empty;
			parameters = null;
			elemantDecorator = string.Empty;
			switch (parseTypeNameLanguage)
			{
			case ParseTypeNameLanguage.VB:
				inputTypeName = inputTypeName.Replace('(', '[').Replace(')', ']');
				break;
			case ParseTypeNameLanguage.CSharp:
				inputTypeName = inputTypeName.Replace('<', '[').Replace('>', ']');
				break;
			}
			int num = inputTypeName.LastIndexOfAny(new char[3] { ']', '&', '*' });
			if (num == -1)
			{
				typeName = inputTypeName;
			}
			else if (inputTypeName[num] == ']')
			{
				int num2 = num;
				int num3 = 1;
				while (num2 > 0 && num3 > 0)
				{
					num2--;
					if (inputTypeName[num2] == ']')
					{
						num3++;
					}
					else if (inputTypeName[num2] == '[')
					{
						num3--;
					}
				}
				if (num3 != 0)
				{
					return false;
				}
				typeName = inputTypeName.Substring(0, num2) + inputTypeName.Substring(num + 1);
				string text = inputTypeName.Substring(num2 + 1, num - num2 - 1).Trim();
				if (text == string.Empty || text.TrimStart()[0] == ',')
				{
					elemantDecorator = "[" + text + "]";
				}
				else
				{
					int num4 = 0;
					char[] array = text.ToCharArray();
					for (int i = 0; i < array.Length; i++)
					{
						if (array[i] == '[')
						{
							num4++;
						}
						else if (array[i] == ']')
						{
							num4--;
						}
						else if (array[i] == ',' && num4 == 0)
						{
							array[i] = '$';
						}
					}
					parameters = new string(array).Split('$');
					for (int j = 0; j < parameters.Length; j++)
					{
						parameters[j] = parameters[j].Trim();
						if (parameters[j][0] == '[')
						{
							parameters[j] = parameters[j].Substring(1, parameters[j].Length - 2);
						}
						if (parseTypeNameLanguage == ParseTypeNameLanguage.VB && parameters[j].StartsWith("Of ", StringComparison.OrdinalIgnoreCase))
						{
							parameters[j] = parameters[j].Substring(3).TrimStart();
						}
					}
				}
			}
			else
			{
				typeName = inputTypeName.Substring(0, num) + inputTypeName.Substring(num + 1);
				elemantDecorator = inputTypeName.Substring(num, 1);
			}
			if (parseTypeNameLanguage == ParseTypeNameLanguage.CSharp && CSKeywords.Contains(typeName))
			{
				typeName = DotNetKeywords[CSKeywords.IndexOf(typeName)];
			}
			else if (parseTypeNameLanguage == ParseTypeNameLanguage.VB && VBKeywords.Contains(typeName))
			{
				typeName = DotNetKeywords[VBKeywords.IndexOf(typeName)];
			}
			return true;
		}

		internal static bool AssemblyNameEquals(AssemblyName thisName, AssemblyName thatName)
		{
			if (thisName.Name == null || thatName.Name == null)
			{
				return false;
			}
			if (!thatName.Name.Equals(thisName.Name))
			{
				return false;
			}
			Version version = thatName.Version;
			if (version != null && version != emptyVersion && version != thisName.Version)
			{
				return false;
			}
			CultureInfo cultureInfo = thatName.CultureInfo;
			if (cultureInfo != null && !cultureInfo.Equals(CultureInfo.InvariantCulture))
			{
				CultureInfo cultureInfo2 = thisName.CultureInfo;
				if (cultureInfo2 == null)
				{
					return false;
				}
				while (!cultureInfo.Equals(cultureInfo2))
				{
					cultureInfo2 = cultureInfo2.Parent;
					if (cultureInfo2.Equals(CultureInfo.InvariantCulture))
					{
						return false;
					}
				}
			}
			byte[] publicKeyToken = thatName.GetPublicKeyToken();
			if (publicKeyToken != null && publicKeyToken.Length != 0)
			{
				byte[] publicKeyToken2 = thisName.GetPublicKeyToken();
				if (publicKeyToken2 == null)
				{
					return false;
				}
				if (publicKeyToken.Length != publicKeyToken2.Length)
				{
					return false;
				}
				for (int i = 0; i < publicKeyToken.Length; i++)
				{
					if (publicKeyToken[i] != publicKeyToken2[i])
					{
						return false;
					}
				}
			}
			return true;
		}

		internal static bool AssemblyNameEquals(AssemblyName thisName, string thatName)
		{
			if (thisName == null || string.IsNullOrEmpty(thisName.Name))
			{
				return false;
			}
			if (string.IsNullOrEmpty(thatName))
			{
				return false;
			}
			string[] array = thatName.Split(',');
			if (array.Length == 0)
			{
				return false;
			}
			string text = array[0].Trim();
			if (!text.Equals(thisName.Name))
			{
				return false;
			}
			if (array.Length == 1)
			{
				return true;
			}
			Version version = null;
			CultureInfo cultureInfo = null;
			byte[] array2 = null;
			for (int i = 1; i < array.Length; i++)
			{
				int num = array[i].IndexOf('=');
				if (num == -1)
				{
					continue;
				}
				string text2 = array[i].Substring(0, num).Trim().ToLowerInvariant();
				string text3 = array[i].Substring(num + 1).Trim().ToLowerInvariant();
				if (string.IsNullOrEmpty(text3))
				{
					continue;
				}
				switch (text2)
				{
				case "version":
					version = new Version(text3);
					break;
				case "culture":
					if (!string.Equals(text3, "neutral", StringComparison.OrdinalIgnoreCase))
					{
						cultureInfo = new CultureInfo(text3);
					}
					break;
				case "publickeytoken":
					if (!string.Equals(text3, "null", StringComparison.OrdinalIgnoreCase))
					{
						array2 = new byte[text3.Length / 2];
						for (int j = 0; j < array2.Length; j++)
						{
							array2[j] = byte.Parse(text3.Substring(j * 2, 2), NumberStyles.HexNumber, CultureInfo.InvariantCulture);
						}
					}
					break;
				}
			}
			if (version != null && version != emptyVersion && version != thisName.Version)
			{
				return false;
			}
			if (cultureInfo != null && !cultureInfo.Equals(CultureInfo.InvariantCulture))
			{
				CultureInfo cultureInfo2 = thisName.CultureInfo;
				if (cultureInfo2 == null)
				{
					return false;
				}
				while (!cultureInfo.Equals(cultureInfo2))
				{
					cultureInfo2 = cultureInfo2.Parent;
					if (cultureInfo2.Equals(CultureInfo.InvariantCulture))
					{
						return false;
					}
				}
			}
			if (array2 != null && array2.Length != 0)
			{
				byte[] publicKeyToken = thisName.GetPublicKeyToken();
				if (publicKeyToken == null)
				{
					return false;
				}
				if (array2.Length != publicKeyToken.Length)
				{
					return false;
				}
				for (int k = 0; k < array2.Length; k++)
				{
					if (array2[k] != publicKeyToken[k])
					{
						return false;
					}
				}
			}
			return true;
		}

		internal static string FormatType(Type type, SupportedLanguages language)
		{
			string empty = string.Empty;
			if (type.IsArray)
			{
				empty = FormatType(type.GetElementType(), language);
				empty = ((language != SupportedLanguages.CSharp) ? (empty + "(") : (empty + "["));
				empty += new string(',', type.GetArrayRank() - 1);
				empty = ((language != SupportedLanguages.CSharp) ? (empty + ")") : (empty + "]"));
			}
			else
			{
				empty = type.FullName;
				int num = empty.IndexOf('`');
				if (num != -1)
				{
					empty = empty.Substring(0, num);
				}
				empty = empty.Replace('+', '.');
				if (type.ContainsGenericParameters || type.IsGenericType)
				{
					Type[] genericArguments = type.GetGenericArguments();
					empty = ((language != SupportedLanguages.CSharp) ? (empty + "(") : (empty + "<"));
					bool flag = true;
					Type[] array = genericArguments;
					foreach (Type type2 in array)
					{
						if (!flag)
						{
							empty += ", ";
						}
						else
						{
							if (language == SupportedLanguages.VB)
							{
								empty += "Of ";
							}
							flag = false;
						}
						empty += FormatType(type2, language);
					}
					empty = ((language != SupportedLanguages.CSharp) ? (empty + ")") : (empty + ">"));
				}
			}
			return empty;
		}

		internal static string FormatType(string type, SupportedLanguages language)
		{
			string text = string.Empty;
			string[] parameters = null;
			string typeName = string.Empty;
			string elemantDecorator = string.Empty;
			if (ParseTypeName(type, ParseTypeNameLanguage.NetFramework, out typeName, out parameters, out elemantDecorator))
			{
				if (elemantDecorator.Length > 0)
				{
					if (language == SupportedLanguages.VB)
					{
						elemantDecorator = elemantDecorator.Replace('[', '(').Replace(']', ')');
					}
					text = FormatType(typeName, language) + elemantDecorator;
				}
				else if (parameters != null && parameters.Length != 0)
				{
					text = FormatType(typeName, language);
					text = ((language != SupportedLanguages.CSharp) ? (text + "(") : (text + "<"));
					bool flag = true;
					string[] array = parameters;
					foreach (string type2 in array)
					{
						if (!flag)
						{
							text += ", ";
						}
						else
						{
							if (language == SupportedLanguages.VB)
							{
								text += "Of ";
							}
							flag = false;
						}
						text += FormatType(type2, language);
					}
					text = ((language != SupportedLanguages.CSharp) ? (text + ")") : (text + ">"));
				}
				else
				{
					text = typeName.Replace('+', '.');
					int num = text.IndexOf('`');
					if (num != -1)
					{
						text = text.Substring(0, num);
					}
					num = text.IndexOf(',');
					if (num != -1)
					{
						text = text.Substring(0, num);
					}
				}
			}
			return text;
		}

		internal static Type ParseTypeName(ITypeProvider typeProvider, SupportedLanguages language, string typeName)
		{
			Type type = null;
			type = typeProvider.GetType(typeName, throwOnError: false);
			if (type == null)
			{
				string typeName2 = string.Empty;
				string elemantDecorator = string.Empty;
				string[] parameters = null;
				if (ParseTypeName(typeName, (language == SupportedLanguages.CSharp) ? ParseTypeNameLanguage.CSharp : ParseTypeNameLanguage.VB, out typeName2, out parameters, out elemantDecorator))
				{
					type = typeProvider.GetType(typeName2 + elemantDecorator, throwOnError: false);
				}
			}
			return type;
		}
	}
}
namespace System.Workflow.ComponentModel.Serialization
{
	internal sealed class ActivityExecutorSurrogate : ISerializationSurrogate
	{
		[Serializable]
		private sealed class ActivityExecutorRef : IObjectReference
		{
			private Type executorType;

			object IObjectReference.GetRealObject(StreamingContext context)
			{
				return ActivityExecutors.GetActivityExecutorFromType(executorType);
			}
		}

		public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
		{
			info.AddValue("executorType", obj.GetType());
			info.SetType(typeof(ActivityExecutorRef));
		}

		public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
		{
			return null;
		}
	}
	internal sealed class ActivityMarkupSerializationProvider : WorkflowMarkupSerializationProvider
	{
		public override object GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType)
		{
			if (serializerType != typeof(WorkflowMarkupSerializer) || currentSerializer != null)
			{
				return null;
			}
			if (typeof(CompositeActivity).IsAssignableFrom(objectType))
			{
				return new CompositeActivityMarkupSerializer();
			}
			if (typeof(ItemList<>).IsAssignableFrom(objectType))
			{
				return new CollectionMarkupSerializer();
			}
			IDesignerSerializationProvider designerSerializationProvider = new WorkflowMarkupSerializationProvider();
			object serializer = designerSerializationProvider.GetSerializer(manager, currentSerializer, objectType, serializerType);
			if (serializer.GetType() != typeof(WorkflowMarkupSerializer))
			{
				return serializer;
			}
			return new ActivityMarkupSerializer();
		}
	}
	[DefaultSerializationProvider(typeof(ActivityMarkupSerializationProvider))]
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityMarkupSerializer : WorkflowMarkupSerializer
	{
		private const int minusOne = -1;

		public static readonly DependencyProperty StartLineProperty = DependencyProperty.RegisterAttached("StartLine", typeof(int), typeof(ActivityMarkupSerializer), new PropertyMetadata(-1, new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));

		public static readonly DependencyProperty StartColumnProperty = DependencyProperty.RegisterAttached("StartColumn", typeof(int), typeof(ActivityMarkupSerializer), new PropertyMetadata(-1, new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));

		public static readonly DependencyProperty EndLineProperty = DependencyProperty.RegisterAttached("EndLine", typeof(int), typeof(ActivityMarkupSerializer), new PropertyMetadata(-1, new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));

		public static readonly DependencyProperty EndColumnProperty = DependencyProperty.RegisterAttached("EndColumn", typeof(int), typeof(ActivityMarkupSerializer), new PropertyMetadata(-1, new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));

		protected override void OnBeforeSerialize(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (!(obj is Activity activity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(Activity).FullName), "obj");
			}
			if (!(serializationManager.WorkflowMarkupStack[typeof(XmlWriter)] is XmlWriter xmlWriter))
			{
				return;
			}
			if (serializationManager.WorkflowMarkupStack[typeof(StringWriter)] is StringWriter stringWriter)
			{
				xmlWriter.Flush();
				string text = stringWriter.ToString();
				int num = 0;
				int num2 = 0;
				string newLine = stringWriter.NewLine;
				int length = newLine.Length;
				while (true)
				{
					int num3 = text.IndexOf(newLine, num2, StringComparison.Ordinal);
					if (num3 == -1)
					{
						break;
					}
					num2 = num3 + length;
					num++;
				}
				activity.SetValue(StartLineProperty, num);
				activity.SetValue(EndLineProperty, num);
				activity.SetValue(EndColumnProperty, num2);
				activity.SetValue(StartColumnProperty, text.IndexOf('<', num2) - num2 + 1);
			}
			if (activity.GetValue(WorkflowMarkupSerializer.XClassProperty) is string value)
			{
				xmlWriter.WriteAttributeString("x", "Class", "http://schemas.microsoft.com/winfx/2006/xaml", value);
			}
		}

		protected override object CreateInstance(WorkflowMarkupSerializationManager serializationManager, Type type)
		{
			if (!(serializationManager.WorkflowMarkupStack[typeof(XmlReader)] is XmlReader xmlReader))
			{
				return null;
			}
			object obj = base.CreateInstance(serializationManager, type);
			if (obj is Activity && serializationManager.Context[typeof(Activity)] == null && serializationManager.Context[typeof(WorkflowCompilerParameters)] != null)
			{
				(obj as Activity).UserData[UserDataKeys.CustomActivity] = false;
			}
			WorkflowMarkupSourceAttribute[] array = (WorkflowMarkupSourceAttribute[])type.GetCustomAttributes(typeof(WorkflowMarkupSourceAttribute), inherit: false);
			if (obj is CompositeActivity && array.Length != 0 && type.Assembly == serializationManager.LocalAssembly)
			{
				object obj2 = null;
				using (XmlReader reader = XmlReader.Create(array[0].FileName))
				{
					obj2 = Deserialize(serializationManager, reader);
				}
				ReplaceChildActivities(obj as CompositeActivity, obj2 as CompositeActivity);
			}
			if (obj is Activity)
			{
				int num = ((!(xmlReader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)xmlReader).LineNumber);
				int num2 = ((!(xmlReader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)xmlReader).LinePosition);
				int num3 = num - 1;
				int num4 = num2 - 1;
				bool flag = false;
				while (xmlReader.MoveToNextAttribute())
				{
					flag = true;
				}
				int num5 = num - 1;
				int num6;
				if (flag)
				{
					xmlReader.ReadAttributeValue();
					num6 = num2 + xmlReader.Value.Length;
				}
				else
				{
					num6 = num2 + xmlReader.Name.Length - 1;
				}
				xmlReader.MoveToElement();
				Activity activity = (Activity)obj;
				activity.SetValue(StartLineProperty, num3);
				activity.SetValue(StartColumnProperty, num4);
				activity.SetValue(EndLineProperty, num5);
				activity.SetValue(EndColumnProperty, num6);
			}
			return obj;
		}

		protected override void OnAfterSerialize(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (!(obj is Activity activity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(Activity).FullName), "obj");
			}
			if (!(serializationManager.WorkflowMarkupStack[typeof(XmlWriter)] is XmlWriter xmlWriter))
			{
				return;
			}
			if (serializationManager.WorkflowMarkupStack[typeof(StringWriter)] is StringWriter stringWriter)
			{
				string text = stringWriter.ToString();
				int num = (int)activity.GetValue(EndColumnProperty);
				int num2 = text.IndexOf(stringWriter.NewLine, num, StringComparison.Ordinal);
				if (num2 == -1)
				{
					activity.SetValue(EndColumnProperty, text.Length - num - 1);
				}
				else
				{
					activity.SetValue(EndColumnProperty, num2 - num);
				}
			}
			if (!(activity.GetValue(WorkflowMarkupSerializer.XCodeProperty) is CodeTypeMemberCollection codeTypeMemberCollection))
			{
				return;
			}
			foreach (CodeSnippetTypeMember item in codeTypeMemberCollection)
			{
				if (item.Text == null)
				{
					continue;
				}
				xmlWriter.WriteStartElement("x", "Code", "http://schemas.microsoft.com/winfx/2006/xaml");
				int writerDepth = serializationManager.WriterDepth;
				StringBuilder stringBuilder = new StringBuilder();
				if (item.UserData.Contains(UserDataKeys.CodeSegment_New))
				{
					stringBuilder.AppendLine();
					string[] array = item.Text.Trim().Split(new string[1] { "\r\n" }, StringSplitOptions.None);
					string[] array2 = array;
					foreach (string value in array2)
					{
						stringBuilder.Append(xmlWriter.Settings.IndentChars);
						stringBuilder.Append(value);
						stringBuilder.AppendLine();
					}
					stringBuilder.Append(xmlWriter.Settings.IndentChars);
				}
				else
				{
					stringBuilder.Append(item.Text);
				}
				xmlWriter.WriteCData(stringBuilder.ToString());
				xmlWriter.WriteEndElement();
			}
		}

		internal static void ReplaceChildActivities(CompositeActivity instanceActivity, CompositeActivity xomlActivity)
		{
			ArrayList arrayList = new ArrayList();
			foreach (Activity activity in xomlActivity.Activities)
			{
				arrayList.Add(activity);
			}
			try
			{
				instanceActivity.CanModifyActivities = true;
				xomlActivity.CanModifyActivities = true;
				instanceActivity.Activities.Clear();
				xomlActivity.Activities.Clear();
				foreach (Activity item in arrayList)
				{
					instanceActivity.Activities.Add(item);
				}
			}
			finally
			{
				instanceActivity.CanModifyActivities = false;
				xomlActivity.CanModifyActivities = false;
			}
			if (!instanceActivity.UserData.Contains(UserDataKeys.CustomActivity))
			{
				instanceActivity.UserData[UserDataKeys.CustomActivity] = instanceActivity.Activities.Count > 0;
			}
		}
	}
	internal sealed class ActivitySurrogate : ISerializationSurrogate
	{
		[Serializable]
		private sealed class ActivityRef : IObjectReference
		{
			[OptionalField]
			private int cid;

			private string id = string.Empty;

			object IObjectReference.GetRealObject(StreamingContext context)
			{
				if (Activity.ContextIdToActivityMap == null)
				{
					throw new InvalidOperationException(SR.GetString("Error_ActivitySaveLoadNotCalled"));
				}
				Activity activity = (Activity)Activity.ContextIdToActivityMap[cid];
				return activity.TraverseDottedPathFromRoot(id);
			}
		}

		[Serializable]
		private sealed class ActivitySerializedRef : IObjectReference, IDeserializationCallback
		{
			private string id = string.Empty;

			[OptionalField]
			private object memberData;

			[OptionalField]
			private object[] memberDatas;

			[OptionalField]
			private string[] memberNames;

			[OptionalField]
			private Type type;

			[OptionalField]
			private string workflowMarkup;

			[OptionalField]
			private string rulesMarkup;

			[OptionalField]
			private string workflowChanges;

			[OptionalField]
			private Guid workflowChangeVersion = Guid.Empty;

			[OptionalField]
			private EventHandler disposed;

			[NonSerialized]
			private Activity cachedDefinitionActivity;

			[NonSerialized]
			private Activity cachedActivity;

			[NonSerialized]
			private int lastPosition;

			object IObjectReference.GetRealObject(StreamingContext context)
			{
				if (Activity.DefinitionActivity == null)
				{
					if (type == null && string.IsNullOrEmpty(workflowMarkup))
					{
						return null;
					}
					Activity activity = null;
					bool flag = workflowChanges != null;
					activity = Activity.OnResolveActivityDefinition(type, workflowMarkup, rulesMarkup, flag, !flag, null);
					if (activity == null)
					{
						throw new NullReferenceException(SR.GetString("Error_InvalidRootForWorkflowChanges"));
					}
					if (flag)
					{
						ArrayList arrayList = Activity.OnResolveWorkflowChangeActions(workflowChanges, activity);
						foreach (WorkflowChangeAction item in arrayList)
						{
							bool flag2 = item.ApplyTo(activity);
						}
						activity.SetValue(WorkflowChanges.WorkflowChangeActionsProperty, arrayList);
						activity.SetValue(WorkflowChanges.WorkflowChangeVersionProperty, workflowChangeVersion);
						((IDependencyObjectAccessor)activity).InitializeDefinitionForRuntime((DependencyObject)null);
					}
					Activity.DefinitionActivity = activity;
				}
				if (cachedActivity == null)
				{
					cachedDefinitionActivity = Activity.DefinitionActivity.TraverseDottedPathFromRoot(id);
					cachedActivity = (Activity)FormatterServices.GetUninitializedObject(cachedDefinitionActivity.GetType());
				}
				return cachedActivity;
			}

			void IDeserializationCallback.OnDeserialization(object sender)
			{
				if (cachedActivity == null)
				{
					return;
				}
				bool flag = false;
				string[] names = null;
				MemberInfo[] serializableMembers = FormatterServicesNoSerializableCheck.GetSerializableMembers(cachedActivity.GetType(), out names);
				if (serializableMembers.Length == 2)
				{
					if (memberData != null && disposed != null)
					{
						FormatterServices.PopulateObjectMembers(cachedActivity, serializableMembers, new object[2] { memberData, disposed });
						flag = true;
					}
					else if (memberData != null)
					{
						FormatterServices.PopulateObjectMembers(cachedActivity, new MemberInfo[1] { serializableMembers[0] }, new object[1] { memberData });
						flag = true;
					}
					else if (disposed != null)
					{
						FormatterServices.PopulateObjectMembers(cachedActivity, new MemberInfo[1] { serializableMembers[1] }, new object[1] { disposed });
						flag = true;
					}
				}
				if (!flag && memberDatas != null)
				{
					object[] array = new object[serializableMembers.Length];
					for (int i = 0; i < names.Length; i++)
					{
						array[i] = memberDatas[Position(names[i])];
					}
					FormatterServices.PopulateObjectMembers(cachedActivity, serializableMembers, array);
				}
				cachedActivity.FixUpMetaProperties(cachedDefinitionActivity);
				cachedActivity = null;
			}

			private int Position(string name)
			{
				if (memberNames.Length != 0 && memberNames[lastPosition].Equals(name))
				{
					return lastPosition;
				}
				if (++lastPosition < memberNames.Length && memberNames[lastPosition].Equals(name))
				{
					return lastPosition;
				}
				for (int i = 0; i < memberNames.Length; i++)
				{
					if (memberNames[i].Equals(name))
					{
						lastPosition = i;
						return lastPosition;
					}
				}
				lastPosition = 0;
				return -1;
			}
		}

		[Serializable]
		private class DanglingActivityRef : IObjectReference
		{
			private string id = string.Empty;

			private Type type;

			[NonSerialized]
			private Activity activity;

			object IObjectReference.GetRealObject(StreamingContext context)
			{
				if (activity == null)
				{
					if (!typeof(Activity).IsAssignableFrom(type))
					{
						throw new InvalidCastException();
					}
					activity = (Activity)Activator.CreateInstance(type);
					activity.Name = id;
				}
				return activity;
			}
		}

		public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
		{
			if (Activity.ContextIdToActivityMap == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_ActivitySaveLoadNotCalled"));
			}
			Activity activity = (Activity)obj;
			bool isSurrounding = false;
			bool flag = IsDanglingActivity(activity, out isSurrounding);
			if (isSurrounding)
			{
				if (activity.ContextActivity != null)
				{
					info.AddValue("cid", activity.ContextId);
				}
				info.AddValue("id", activity.DottedPath);
				info.SetType(typeof(ActivityRef));
			}
			else if (!flag)
			{
				info.AddValue("id", activity.DottedPath);
				string[] names = null;
				MemberInfo[] serializableMembers = FormatterServicesNoSerializableCheck.GetSerializableMembers(obj.GetType(), out names);
				object[] objectData = FormatterServices.GetObjectData(obj, serializableMembers);
				if (objectData != null && objectData.Length == 2)
				{
					IDictionary<DependencyProperty, object> dictionary = (IDictionary<DependencyProperty, object>)objectData[0];
					if (dictionary != null && dictionary.Count > 0)
					{
						foreach (KeyValuePair<DependencyProperty, object> item in dictionary)
						{
							if (item.Key != null && !item.Key.DefaultMetadata.IsNonSerialized)
							{
								info.AddValue("memberData", objectData[0]);
								break;
							}
						}
					}
					if (objectData[1] != null)
					{
						info.AddValue("disposed", objectData[1]);
					}
				}
				else
				{
					info.AddValue("memberNames", names);
					info.AddValue("memberDatas", objectData);
				}
				if (obj is Activity && ((Activity)obj).Parent == null)
				{
					string value = activity.GetValue(Activity.WorkflowXamlMarkupProperty) as string;
					if (!string.IsNullOrEmpty(value))
					{
						info.AddValue("workflowMarkup", value);
						string value2 = activity.GetValue(Activity.WorkflowRulesMarkupProperty) as string;
						if (!string.IsNullOrEmpty(value2))
						{
							info.AddValue("rulesMarkup", value2);
						}
					}
					else
					{
						info.AddValue("type", activity.GetType());
					}
					Activity activity2 = (Activity)activity.GetValue(Activity.WorkflowDefinitionProperty);
					if (activity2 != null)
					{
						ArrayList arrayList = (ArrayList)activity2.GetValue(WorkflowChanges.WorkflowChangeActionsProperty);
						if (arrayList != null)
						{
							Guid guid = (Guid)activity2.GetValue(WorkflowChanges.WorkflowChangeVersionProperty);
							info.AddValue("workflowChangeVersion", guid);
							using StringWriter stringWriter = new StringWriter(CultureInfo.InvariantCulture);
							using XmlWriter writer = Helpers.CreateXmlWriter(stringWriter);
							new WorkflowMarkupSerializer().Serialize(writer, arrayList);
							info.AddValue("workflowChanges", stringWriter.ToString());
						}
					}
				}
				info.SetType(typeof(ActivitySerializedRef));
			}
			else
			{
				info.AddValue("id", activity.Name);
				info.AddValue("type", activity.GetType());
				info.SetType(typeof(DanglingActivityRef));
			}
		}

		public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
		{
			return null;
		}

		private bool IsDanglingActivity(Activity activity, out bool isSurrounding)
		{
			isSurrounding = false;
			bool flag = false;
			do
			{
				if (Activity.ActivityRoots.Contains(activity))
				{
					flag = false;
					break;
				}
				if (activity.Parent == null)
				{
					flag = ((Activity)Activity.ActivityRoots[0]).RootActivity != activity;
					break;
				}
				if (!activity.Parent.Activities.Contains(activity))
				{
					IList<Activity> list = null;
					if (activity.Parent.ContextActivity != null)
					{
						list = (IList<Activity>)activity.Parent.ContextActivity.GetValue(Activity.ActiveExecutionContextsProperty);
					}
					if (list == null || !list.Contains(activity))
					{
						flag = true;
						break;
					}
				}
				activity = activity.Parent;
			}
			while (activity != null);
			isSurrounding = !flag && !Activity.ActivityRoots.Contains(activity);
			return flag;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public sealed class ActivitySurrogateSelector : SurrogateSelector
	{
		private sealed class ObjectSurrogate : ISerializationSurrogate
		{
			[Serializable]
			private sealed class ObjectSerializedRef : IObjectReference, IDeserializationCallback
			{
				private Type type;

				private object[] memberDatas;

				[NonSerialized]
				private object returnedObject;

				object IObjectReference.GetRealObject(StreamingContext context)
				{
					if (!AppSettings.DisableActivitySurrogateSelectorTypeCheck && !typeof(ActivityBind).IsAssignableFrom(type) && !typeof(DependencyObject).IsAssignableFrom(type))
					{
						throw new ArgumentException("context");
					}
					if (returnedObject == null)
					{
						returnedObject = FormatterServices.GetUninitializedObject(type);
					}
					return returnedObject;
				}

				void IDeserializationCallback.OnDeserialization(object sender)
				{
					if (returnedObject != null)
					{
						if (!AppSettings.DisableActivitySurrogateSelectorTypeCheck && !typeof(ActivityBind).IsAssignableFrom(type) && !typeof(DependencyObject).IsAssignableFrom(type) && !(returnedObject is ActivityBind) && !(returnedObject is DependencyObject))
						{
							throw new ArgumentException("context");
						}
						string[] names = null;
						MemberInfo[] serializableMembers = FormatterServicesNoSerializableCheck.GetSerializableMembers(type, out names);
						FormatterServices.PopulateObjectMembers(returnedObject, serializableMembers, memberDatas);
						returnedObject = null;
					}
				}
			}

			public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
			{
				if (!AppSettings.DisableActivitySurrogateSelectorTypeCheck && !(obj is ActivityBind) && !(obj is DependencyObject))
				{
					throw new ArgumentException("obj");
				}
				info.AddValue("type", obj.GetType());
				string[] names = null;
				MemberInfo[] serializableMembers = FormatterServicesNoSerializableCheck.GetSerializableMembers(obj.GetType(), out names);
				object[] objectData = FormatterServices.GetObjectData(obj, serializableMembers);
				info.AddValue("memberDatas", objectData);
				info.SetType(typeof(ObjectSerializedRef));
			}

			public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
			{
				return null;
			}
		}

		private ActivitySurrogate activitySurrogate = new ActivitySurrogate();

		private ActivityExecutorSurrogate activityExecutorSurrogate = new ActivityExecutorSurrogate();

		private ObjectSurrogate objectSurrogate = new ObjectSurrogate();

		private DependencyStoreSurrogate dependencyStoreSurrogate = new DependencyStoreSurrogate();

		private XmlDocumentSurrogate domDocSurrogate = new XmlDocumentSurrogate();

		private DictionarySurrogate dictionarySurrogate = new DictionarySurrogate();

		private GenericQueueSurrogate genericqueueSurrogate = new GenericQueueSurrogate();

		private QueueSurrogate queueSurrogate = new QueueSurrogate();

		private ListSurrogate listSurrogate = new ListSurrogate();

		private SimpleTypesSurrogate simpleTypesSurrogate = new SimpleTypesSurrogate();

		private static ActivitySurrogateSelector defaultActivitySurrogateSelector = new ActivitySurrogateSelector();

		private static Dictionary<Type, ISerializationSurrogate> surrogateCache = new Dictionary<Type, ISerializationSurrogate>();

		public static ActivitySurrogateSelector Default => defaultActivitySurrogateSelector;

		public override ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector)
		{
			if (type == null)
			{
				throw new ArgumentNullException("type");
			}
			selector = this;
			ISerializationSurrogate value = null;
			bool flag;
			lock (surrogateCache)
			{
				flag = surrogateCache.TryGetValue(type, out value);
			}
			if (flag)
			{
				if (value != null)
				{
					return value;
				}
				return base.GetSurrogate(type, context, out selector);
			}
			if (typeof(Activity).IsAssignableFrom(type))
			{
				value = activitySurrogate;
			}
			else if (typeof(ActivityExecutor).IsAssignableFrom(type))
			{
				value = activityExecutorSurrogate;
			}
			else if (typeof(IDictionary<DependencyProperty, object>).IsAssignableFrom(type))
			{
				value = dependencyStoreSurrogate;
			}
			else if (typeof(XmlDocument).IsAssignableFrom(type))
			{
				value = domDocSurrogate;
			}
			else if (typeof(Queue) == type)
			{
				value = queueSurrogate;
			}
			else if (typeof(Guid) == type)
			{
				value = simpleTypesSurrogate;
			}
			else if (typeof(ActivityBind).IsAssignableFrom(type))
			{
				value = objectSurrogate;
			}
			else if (typeof(DependencyObject).IsAssignableFrom(type))
			{
				value = objectSurrogate;
			}
			lock (surrogateCache)
			{
				surrogateCache[type] = value;
			}
			if (value != null)
			{
				return value;
			}
			return base.GetSurrogate(type, context, out selector);
		}
	}
	internal class MarkupExtensionSerializer : WorkflowMarkupSerializer
	{
		private const string CompactFormatPropertySeperator = ",";

		private const string CompactFormatTypeSeperator = " ";

		private const string CompactFormatNameValueSeperator = "=";

		private const string CompactFormatStart = "{";

		private const string CompactFormatEnd = "}";

		private const string CompactFormatCharacters = "=,\"'{}\\";

		protected internal sealed override bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			return true;
		}

		protected internal sealed override string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (!(serializationManager.WorkflowMarkupStack[typeof(XmlWriter)] is XmlWriter xmlWriter))
			{
				throw new ArgumentNullException("writer");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			xmlWriter.WriteString("{");
			string prefix = string.Empty;
			XmlQualifiedName xmlQualifiedName = serializationManager.GetXmlQualifiedName(value.GetType(), out prefix);
			xmlWriter.WriteQualifiedName(xmlQualifiedName.Name, xmlQualifiedName.Namespace);
			int num = 0;
			Dictionary<string, string> dictionary = null;
			InstanceDescriptor instanceDescriptor = GetInstanceDescriptor(serializationManager, value);
			if (instanceDescriptor != null)
			{
				ConstructorInfo constructorInfo = instanceDescriptor.MemberInfo as ConstructorInfo;
				if (constructorInfo != null)
				{
					ParameterInfo[] parameters = constructorInfo.GetParameters();
					if (parameters != null && parameters.Length == instanceDescriptor.Arguments.Count)
					{
						int num2 = 0;
						foreach (object argument in instanceDescriptor.Arguments)
						{
							if (dictionary == null)
							{
								dictionary = new Dictionary<string, string>();
							}
							if (argument == null)
							{
								continue;
							}
							dictionary.Add(parameters[num2].Name, parameters[num2++].Name);
							if (num++ > 0)
							{
								xmlWriter.WriteString(",");
							}
							else
							{
								xmlWriter.WriteString(" ");
							}
							if (argument.GetType() == typeof(string))
							{
								xmlWriter.WriteString(CreateEscapedValue(argument as string));
							}
							else if (argument is Type)
							{
								Type type = argument as Type;
								if (type.Assembly != null)
								{
									string prefix2 = string.Empty;
									XmlQualifiedName xmlQualifiedName2 = serializationManager.GetXmlQualifiedName(type, out prefix2);
									xmlWriter.WriteQualifiedName(XmlConvert.EncodeName(xmlQualifiedName2.Name), xmlQualifiedName2.Namespace);
								}
								else
								{
									xmlWriter.WriteString(type.FullName);
								}
							}
							else
							{
								string text = base.SerializeToString(serializationManager, argument);
								if (text != null)
								{
									xmlWriter.WriteString(text);
								}
							}
						}
					}
				}
			}
			List<PropertyInfo> list = new List<PropertyInfo>();
			list.AddRange(GetProperties(serializationManager, value));
			list.AddRange(serializationManager.GetExtendedProperties(value));
			foreach (PropertyInfo item in list)
			{
				if (Helpers.GetSerializationVisibility(item) == DesignerSerializationVisibility.Hidden || !item.CanRead || item.GetValue(value, null) == null)
				{
					continue;
				}
				if (!(serializationManager.GetSerializer(item.PropertyType, typeof(WorkflowMarkupSerializer)) is WorkflowMarkupSerializer workflowMarkupSerializer))
				{
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerNotAvailable", item.PropertyType.FullName)));
					continue;
				}
				if (dictionary != null)
				{
					object[] customAttributes = item.GetCustomAttributes(typeof(ConstructorArgumentAttribute), inherit: false);
					if (customAttributes.Length != 0 && dictionary.ContainsKey((customAttributes[0] as ConstructorArgumentAttribute).ArgumentName))
					{
						continue;
					}
				}
				serializationManager.Context.Push(item);
				try
				{
					object value2 = item.GetValue(value, null);
					if (!workflowMarkupSerializer.ShouldSerializeValue(serializationManager, value2))
					{
						continue;
					}
					if (workflowMarkupSerializer.CanSerializeToString(serializationManager, value2))
					{
						if (num++ > 0)
						{
							xmlWriter.WriteString(",");
						}
						else
						{
							xmlWriter.WriteString(" ");
						}
						xmlWriter.WriteString(item.Name);
						xmlWriter.WriteString("=");
						if (value2.GetType() == typeof(string))
						{
							xmlWriter.WriteString(CreateEscapedValue(value2 as string));
							continue;
						}
						string text2 = workflowMarkupSerializer.SerializeToString(serializationManager, value2);
						if (text2 != null)
						{
							xmlWriter.WriteString(text2);
						}
					}
					else
					{
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerNoSerializeLogic", item.Name, value.GetType().FullName)));
					}
				}
				catch
				{
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerNoSerializeLogic", item.Name, value.GetType().FullName)));
				}
				finally
				{
					serializationManager.Context.Pop();
				}
			}
			xmlWriter.WriteString("}");
			return string.Empty;
		}

		protected virtual InstanceDescriptor GetInstanceDescriptor(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (!(value is MarkupExtension markupExtension))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(MarkupExtension).FullName), "value");
			}
			return new InstanceDescriptor(markupExtension.GetType().GetConstructor(new Type[0]), null);
		}

		private string CreateEscapedValue(string value)
		{
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			StringBuilder stringBuilder = new StringBuilder(64);
			int length = value.Length;
			for (int i = 0; i < length; i++)
			{
				if ("=,\"'{}\\".IndexOf(value[i]) != -1)
				{
					stringBuilder.Append("\\");
				}
				stringBuilder.Append(value[i]);
			}
			return stringBuilder.ToString();
		}
	}
	internal class BindMarkupExtensionSerializer : MarkupExtensionSerializer
	{
		protected override InstanceDescriptor GetInstanceDescriptor(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (!(value is ActivityBind activityBind))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(ActivityBind).FullName), "value");
			}
			return new InstanceDescriptor(typeof(ActivityBind).GetConstructor(new Type[1] { typeof(string) }), new object[1] { activityBind.Name });
		}
	}
	internal class TypeExtensionSerializer : MarkupExtensionSerializer
	{
		protected override InstanceDescriptor GetInstanceDescriptor(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (!(value is TypeExtension typeExtension))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(TypeExtension).FullName), "value");
			}
			if (typeExtension.Type != null)
			{
				return new InstanceDescriptor(typeof(TypeExtension).GetConstructor(new Type[1] { typeof(Type) }), new object[1] { typeExtension.Type });
			}
			return new InstanceDescriptor(typeof(TypeExtension).GetConstructor(new Type[1] { typeof(string) }), new object[1] { typeExtension.TypeName });
		}
	}
	internal sealed class ActivityCodeDomReferenceService : IReferenceService
	{
		private IReferenceService refService;

		public ActivityCodeDomReferenceService(IReferenceService referenceService)
		{
			refService = referenceService;
		}

		public object[] GetReferences(Type baseType)
		{
			if (refService != null)
			{
				return refService.GetReferences(baseType);
			}
			return null;
		}

		public object[] GetReferences()
		{
			if (refService != null)
			{
				return refService.GetReferences();
			}
			return null;
		}

		public IComponent GetComponent(object reference)
		{
			if (refService != null)
			{
				return refService.GetComponent(reference);
			}
			return null;
		}

		public object GetReference(string name)
		{
			if (refService != null)
			{
				return refService.GetReference(name);
			}
			return null;
		}

		public string GetName(object reference)
		{
			if (reference is Activity activity)
			{
				return activity.QualifiedName.Replace('.', '_');
			}
			if (refService != null)
			{
				return refService.GetName(reference);
			}
			return null;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityCodeDomSerializationManager : IDesignerSerializationManager, IServiceProvider
	{
		private ServiceContainer serviceContainer;

		private IDesignerSerializationManager serializationManager;

		private ResolveNameEventHandler resolveNameEventHandler;

		private EventHandler serializationCompleteEventHandler;

		public ContextStack Context => serializationManager.Context;

		public PropertyDescriptorCollection Properties => serializationManager.Properties;

		protected IDesignerSerializationManager SerializationManager
		{
			get
			{
				return serializationManager;
			}
			set
			{
				serializationManager = value;
			}
		}

		public event EventHandler SerializationComplete
		{
			add
			{
				serializationCompleteEventHandler = (EventHandler)Delegate.Combine(serializationCompleteEventHandler, value);
			}
			remove
			{
				serializationCompleteEventHandler = (EventHandler)Delegate.Remove(serializationCompleteEventHandler, value);
			}
		}

		public event ResolveNameEventHandler ResolveName
		{
			add
			{
				resolveNameEventHandler = (ResolveNameEventHandler)Delegate.Combine(resolveNameEventHandler, value);
			}
			remove
			{
				resolveNameEventHandler = (ResolveNameEventHandler)Delegate.Remove(resolveNameEventHandler, value);
			}
		}

		public ActivityCodeDomSerializationManager(IDesignerSerializationManager manager)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			serializationManager = manager;
			serviceContainer = new ServiceContainer();
			serializationManager.ResolveName += OnResolveName;
			serializationManager.SerializationComplete += OnSerializationComplete;
			if (serializationManager is DesignerSerializationManager)
			{
				((DesignerSerializationManager)serializationManager).SessionDisposed += OnSessionDisposed;
			}
		}

		private void OnResolveName(object sender, ResolveNameEventArgs e)
		{
			if (resolveNameEventHandler != null)
			{
				resolveNameEventHandler(this, e);
			}
		}

		private void OnSerializationComplete(object sender, EventArgs e)
		{
			if (serializationCompleteEventHandler != null)
			{
				serializationCompleteEventHandler(this, e);
			}
		}

		private void OnSessionDisposed(object sender, EventArgs e)
		{
			try
			{
				if (serializationCompleteEventHandler != null)
				{
					serializationCompleteEventHandler(this, EventArgs.Empty);
				}
			}
			finally
			{
				resolveNameEventHandler = null;
				serializationCompleteEventHandler = null;
			}
		}

		public void SetName(object instance, string name)
		{
			if (GetInstance(name) != instance)
			{
				serializationManager.SetName(instance, name);
			}
		}

		public string GetName(object value)
		{
			string text = null;
			if (value is Activity activity)
			{
				if (activity.Parent == null)
				{
					text = activity.GetValue(WorkflowMarkupSerializer.XClassProperty) as string;
					if (text != null && text.LastIndexOf(".") > 0)
					{
						text = text.Substring(text.LastIndexOf('.') + 1);
					}
				}
				else
				{
					text = activity.QualifiedName.Replace('.', '_');
				}
			}
			if (text == null)
			{
				text = serializationManager.GetName(value);
			}
			return text;
		}

		public object CreateInstance(Type type, ICollection arguments, string name, bool addToContainer)
		{
			return serializationManager.CreateInstance(type, arguments, name, addToContainer: false);
		}

		public object GetService(Type serviceType)
		{
			object obj = null;
			if (serviceType == typeof(IReferenceService))
			{
				obj = new ActivityCodeDomReferenceService(serializationManager.GetService(serviceType) as IReferenceService);
			}
			if (serviceType == typeof(IServiceContainer))
			{
				obj = serializationManager.GetService(serviceType);
				if (obj == null)
				{
					obj = serviceContainer;
				}
			}
			if (obj == null)
			{
				obj = serializationManager.GetService(serviceType);
			}
			if (obj == null)
			{
				obj = serviceContainer.GetService(serviceType);
			}
			return obj;
		}

		public object GetSerializer(Type objectType, Type serializerType)
		{
			if (objectType == typeof(string))
			{
				return PrimitiveCodeDomSerializer.Default;
			}
			if (objectType != null && TypeProvider.IsAssignable(typeof(ICollection<string>), objectType) && !objectType.IsArray && serializerType == typeof(CodeDomSerializer))
			{
				if (Context[typeof(PropertyDescriptor)] is PropertyDescriptor propertyDescriptor)
				{
					if (string.Equals(propertyDescriptor.Name, "SynchronizationHandles", StringComparison.Ordinal) && TypeProvider.IsAssignable(typeof(Activity), propertyDescriptor.ComponentType))
					{
						return new SynchronizationHandlesCodeDomSerializer();
					}
				}
				else if (Context[typeof(ExpressionContext)] is ExpressionContext expressionContext && expressionContext.Expression is CodePropertyReferenceExpression && string.Equals(((CodePropertyReferenceExpression)expressionContext.Expression).PropertyName, "SynchronizationHandles", StringComparison.Ordinal))
				{
					return new SynchronizationHandlesCodeDomSerializer();
				}
			}
			object obj = serializationManager.GetSerializer(objectType, serializerType);
			if (!UseUserDefinedSerializer(objectType, serializerType))
			{
				obj = new SerializableTypeCodeDomSerializer(obj as CodeDomSerializer);
			}
			return obj;
		}

		private bool UseUserDefinedSerializer(Type objectType, Type serializerType)
		{
			if (objectType == null || serializerType == null)
			{
				return true;
			}
			if (!objectType.IsSerializable || serializerType != typeof(CodeDomSerializer))
			{
				return true;
			}
			if (objectType.IsPrimitive || objectType.IsEnum || objectType == typeof(string) || typeof(Activity).IsAssignableFrom(objectType))
			{
				return true;
			}
			TypeConverter converter = TypeDescriptor.GetConverter(objectType);
			if (converter != null && converter.CanConvertTo(typeof(InstanceDescriptor)))
			{
				return true;
			}
			object serializer = serializationManager.GetSerializer(objectType, serializerType);
			if (serializer.GetType().Assembly != typeof(CodeDomSerializer).Assembly && serializer.GetType().Assembly != Assembly.GetExecutingAssembly() && serializer.GetType().Assembly != Assembly.Load("System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"))
			{
				return true;
			}
			if (serializationManager.Context[typeof(Activity)] is Activity { Site: not null } activity && activity.Site.Container != null && objectType.Namespace != null && objectType.Namespace.Equals(typeof(Image).Namespace))
			{
				return true;
			}
			return false;
		}

		public object GetInstance(string name)
		{
			return serializationManager.GetInstance(name);
		}

		public void AddSerializationProvider(IDesignerSerializationProvider provider)
		{
			serializationManager.AddSerializationProvider(provider);
		}

		public void RemoveSerializationProvider(IDesignerSerializationProvider provider)
		{
			serializationManager.RemoveSerializationProvider(provider);
		}

		public void ReportError(object errorInformation)
		{
			serializationManager.ReportError(errorInformation);
		}

		public Type GetType(string typeName)
		{
			Type type = serializationManager.GetType(typeName);
			if (type == null && GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider)
			{
				type = typeProvider.GetType(typeName);
			}
			return type;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityCodeDomSerializer : DependencyObjectCodeDomSerializer
	{
		public static readonly DependencyProperty MarkupFileNameProperty = DependencyProperty.RegisterAttached("MarkupFileName", typeof(string), typeof(ActivityCodeDomSerializer), new PropertyMetadata(null, new Attribute[1]
		{
			new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)
		}));

		public override object Serialize(IDesignerSerializationManager manager, object obj)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (!(obj is Activity activity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(Activity).FullName), "obj");
			}
			if (Helpers.IsActivityLocked(activity))
			{
				return null;
			}
			CodeStatementCollection codeStatementCollection = base.Serialize(manager, (object)activity) as CodeStatementCollection;
			if (codeStatementCollection != null)
			{
				Activity rootActivity = Helpers.GetRootActivity(activity);
				if (rootActivity != null && rootActivity.GetValue(MarkupFileNameProperty) != null && (int)activity.GetValue(ActivityMarkupSerializer.StartLineProperty) != -1)
				{
					foreach (CodeStatement item in codeStatementCollection)
					{
						if (!(item is CodeCommentStatement))
						{
							item.LinePragma = new CodeLinePragma((string)rootActivity.GetValue(MarkupFileNameProperty), Math.Max((int)activity.GetValue(ActivityMarkupSerializer.StartLineProperty), 1));
						}
					}
				}
			}
			return codeStatementCollection;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class DependencyObjectCodeDomSerializer : CodeDomSerializer
	{
		public override object Serialize(IDesignerSerializationManager manager, object obj)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (manager.Context == null)
			{
				throw new ArgumentException("manager", SR.GetString("Error_MissingContextProperty"));
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (!(obj is DependencyObject dependencyObject))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(DependencyObject).FullName), "obj");
			}
			Activity activity = obj as Activity;
			if (activity != null)
			{
				manager.Context.Push(activity);
			}
			CodeStatementCollection codeStatementCollection = null;
			try
			{
				if (activity != null)
				{
					if (!(manager.GetSerializer(typeof(Component), typeof(CodeDomSerializer)) is CodeDomSerializer codeDomSerializer))
					{
						throw new InvalidOperationException(SR.GetString("General_MissingService", typeof(CodeDomSerializer).FullName));
					}
					codeStatementCollection = codeDomSerializer.Serialize(manager, activity) as CodeStatementCollection;
				}
				else
				{
					codeStatementCollection = base.Serialize(manager, obj) as CodeStatementCollection;
				}
				if (codeStatementCollection != null)
				{
					CodeStatementCollection codeStatementCollection2 = new CodeStatementCollection(codeStatementCollection);
					CodeExpression codeExpression = SerializeToExpression(manager, obj);
					if (codeExpression != null)
					{
						ArrayList arrayList = new ArrayList();
						List<DependencyProperty> list = new List<DependencyProperty>(dependencyObject.MetaDependencyProperties);
						foreach (DependencyProperty key in dependencyObject.DependencyPropertyValues.Keys)
						{
							if (key.IsAttached && ((key.IsEvent && key.OwnerType.GetField(key.Name + "Event", BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public) != null) || (!key.IsEvent && key.OwnerType.GetField(key.Name + "Property", BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public) != null)))
							{
								list.Add(key);
							}
						}
						foreach (DependencyProperty item in list)
						{
							object obj2 = null;
							obj2 = (dependencyObject.IsBindingSet(item) ? dependencyObject.GetBinding(item) : (item.IsEvent ? dependencyObject.GetHandler(item) : dependencyObject.GetValue(item)));
							if (obj2 == null || (!item.IsAttached && (item.DefaultMetadata.IsMetaProperty || !(obj2 is ActivityBind))))
							{
								continue;
							}
							object[] attributes = item.DefaultMetadata.GetAttributes(typeof(DesignerSerializationVisibilityAttribute));
							object[] array = attributes;
							if (array.Length != 0)
							{
								DesignerSerializationVisibilityAttribute designerSerializationVisibilityAttribute = array[0] as DesignerSerializationVisibilityAttribute;
								if (designerSerializationVisibilityAttribute.Visibility == DesignerSerializationVisibility.Hidden)
								{
									continue;
								}
							}
							CodeExpression codeExpression2 = null;
							string text = item.Name + (item.IsEvent ? "Event" : "Property");
							FieldInfo field = item.OwnerType.GetField(text, BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
							codeExpression2 = ((!(field != null) || field.IsPublic) ? ((CodeExpression)new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(item.OwnerType), text)) : ((CodeExpression)new CodeMethodInvokeExpression(new CodeTypeReferenceExpression(typeof(DependencyProperty)), "FromName", new CodePrimitiveExpression(item.Name), new CodeTypeOfExpression(item.OwnerType))));
							CodeExpression codeExpression3 = SerializeToExpression(manager, obj2);
							if (codeExpression2 != null && codeExpression3 != null)
							{
								CodeMethodInvokeExpression codeMethodInvokeExpression = null;
								codeMethodInvokeExpression = ((!(obj2 is ActivityBind)) ? new CodeMethodInvokeExpression(codeExpression, item.IsEvent ? "AddHandler" : "SetValue", codeExpression2, codeExpression3) : new CodeMethodInvokeExpression(codeExpression, "SetBinding", codeExpression2, new CodeCastExpression(new CodeTypeReference(typeof(ActivityBind)), codeExpression3)));
								codeStatementCollection.Add(codeMethodInvokeExpression);
								foreach (CodeStatement item2 in codeStatementCollection2)
								{
									if (item2 is CodeAssignStatement && ((CodeAssignStatement)item2).Left is CodePropertyReferenceExpression)
									{
										CodePropertyReferenceExpression codePropertyReferenceExpression = ((CodeAssignStatement)item2).Left as CodePropertyReferenceExpression;
										if (codePropertyReferenceExpression.PropertyName == item.Name && codePropertyReferenceExpression.TargetObject.Equals(codeExpression))
										{
											codeStatementCollection.Remove(item2);
										}
									}
								}
							}
							arrayList.Add(item);
						}
						IEventBindingService eventBindingService = manager.GetService(typeof(IEventBindingService)) as IEventBindingService;
						if (eventBindingService == null)
						{
							foreach (EventDescriptor @event in TypeDescriptor.GetEvents(dependencyObject))
							{
								string eventHandlerName = WorkflowMarkupSerializationHelpers.GetEventHandlerName(dependencyObject, @event.Name);
								if (!string.IsNullOrEmpty(eventHandlerName))
								{
									CodeEventReferenceExpression eventRef = new CodeEventReferenceExpression(codeExpression, @event.Name);
									CodeDelegateCreateExpression listener = new CodeDelegateCreateExpression(new CodeTypeReference(@event.EventType), new CodeThisReferenceExpression(), eventHandlerName);
									codeStatementCollection.Add(new CodeAttachEventStatement(eventRef, listener));
								}
							}
						}
						if (dependencyObject.UserData.Contains(UserDataKeys.DesignTimeTypeNames))
						{
							Hashtable hashtable = dependencyObject.UserData[UserDataKeys.DesignTimeTypeNames] as Hashtable;
							foreach (object key2 in hashtable.Keys)
							{
								string text2 = null;
								string text3 = null;
								string text4 = hashtable[key2] as string;
								if (key2 is DependencyProperty dependencyProperty)
								{
									if (arrayList.Contains(dependencyProperty))
									{
										continue;
									}
									object[] attributes = dependencyProperty.DefaultMetadata.GetAttributes(typeof(DesignerSerializationVisibilityAttribute));
									object[] array2 = attributes;
									if (array2.Length != 0)
									{
										DesignerSerializationVisibilityAttribute designerSerializationVisibilityAttribute2 = array2[0] as DesignerSerializationVisibilityAttribute;
										if (designerSerializationVisibilityAttribute2.Visibility == DesignerSerializationVisibility.Hidden)
										{
											continue;
										}
									}
									text2 = dependencyProperty.Name;
									text3 = dependencyProperty.OwnerType.FullName;
								}
								else if (key2 is string)
								{
									int num = ((string)key2).LastIndexOf('.');
									if (num != -1)
									{
										text3 = ((string)key2).Substring(0, num);
										text2 = ((string)key2).Substring(num + 1);
									}
								}
								if (!string.IsNullOrEmpty(text4) && !string.IsNullOrEmpty(text2) && !string.IsNullOrEmpty(text3))
								{
									if (text3 == obj.GetType().FullName)
									{
										CodePropertyReferenceExpression left = new CodePropertyReferenceExpression(codeExpression, text2);
										codeStatementCollection.Add(new CodeAssignStatement(left, new CodeTypeOfExpression(text4)));
										continue;
									}
									CodeExpression codeExpression4 = new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(text3), text2 + "Property");
									CodeExpression codeExpression5 = new CodeTypeOfExpression(text4);
									codeStatementCollection.Add(new CodeMethodInvokeExpression(codeExpression, "SetValue", codeExpression4, codeExpression5));
								}
							}
						}
					}
				}
			}
			finally
			{
				if (activity != null)
				{
					object obj3 = manager.Context.Pop();
				}
			}
			return codeStatementCollection;
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class ActivityTypeCodeDomSerializer : TypeCodeDomSerializer
	{
		private static object _initMethodKey = new object();

		private const string _initMethodName = "InitializeComponent";

		protected override CodeMemberMethod GetInitializeMethod(IDesignerSerializationManager manager, CodeTypeDeclaration typeDecl, object value)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (typeDecl == null)
			{
				throw new ArgumentNullException("typeDecl");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			CodeMemberMethod codeMemberMethod = typeDecl.UserData[_initMethodKey] as CodeMemberMethod;
			if (codeMemberMethod == null)
			{
				codeMemberMethod = new CodeMemberMethod();
				codeMemberMethod.Name = "InitializeComponent";
				codeMemberMethod.Attributes = MemberAttributes.Private;
				typeDecl.UserData[_initMethodKey] = codeMemberMethod;
				CodeConstructor codeConstructor = new CodeConstructor();
				codeConstructor.Attributes = MemberAttributes.Public;
				codeConstructor.Statements.Add(new CodeMethodInvokeExpression(new CodeThisReferenceExpression(), "InitializeComponent"));
				typeDecl.Members.Add(codeConstructor);
			}
			return codeMemberMethod;
		}

		protected override CodeMemberMethod[] GetInitializeMethods(IDesignerSerializationManager manager, CodeTypeDeclaration typeDecl)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (typeDecl == null)
			{
				throw new ArgumentNullException("typeDecl");
			}
			foreach (CodeTypeMember member in typeDecl.Members)
			{
				if (member is CodeMemberMethod codeMemberMethod && codeMemberMethod.Name.Equals("InitializeComponent") && codeMemberMethod.Parameters.Count == 0)
				{
					return new CodeMemberMethod[1] { codeMemberMethod };
				}
			}
			return new CodeMemberMethod[0];
		}

		public override CodeTypeDeclaration Serialize(IDesignerSerializationManager manager, object root, ICollection members)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (root == null)
			{
				throw new ArgumentNullException("root");
			}
			if (!(root is Activity activity))
			{
				throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(Activity).FullName), "root");
			}
			CodeTypeDeclaration codeTypeDeclaration = base.Serialize(manager, root, members);
			if (codeTypeDeclaration.UserData[_initMethodKey] is CodeMemberMethod codeMemberMethod && activity is CompositeActivity)
			{
				CodeStatement[] array = new CodeStatement[codeMemberMethod.Statements.Count];
				codeMemberMethod.Statements.CopyTo(array, 0);
				codeMemberMethod.Statements.Clear();
				CodeAssignStatement codeAssignStatement = new CodeAssignStatement();
				codeAssignStatement.Left = new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "CanModifyActivities");
				codeAssignStatement.Right = new CodePrimitiveExpression(true);
				codeMemberMethod.Statements.Add(codeAssignStatement);
				CodeStatement[] array2 = array;
				foreach (CodeStatement value in array2)
				{
					codeMemberMethod.Statements.Add(value);
				}
				CodeAssignStatement codeAssignStatement2 = new CodeAssignStatement();
				codeAssignStatement2.Left = new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "CanModifyActivities");
				codeAssignStatement2.Right = new CodePrimitiveExpression(false);
				codeMemberMethod.Statements.Add(codeAssignStatement2);
			}
			foreach (CodeTypeMember member in codeTypeDeclaration.Members)
			{
				if (!(member is CodeMemberField codeMemberField))
				{
					continue;
				}
				foreach (object member2 in members)
				{
					if (!(member2 is Activity))
					{
						throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(Activity).FullName), "members");
					}
					Activity activity2 = member2 as Activity;
					if (codeMemberField.Name == manager.GetName(activity2) && (int)activity2.GetValue(ActivityMarkupSerializer.StartLineProperty) != -1 && activity.GetValue(ActivityCodeDomSerializer.MarkupFileNameProperty) != null)
					{
						codeMemberField.LinePragma = new CodeLinePragma((string)activity.GetValue(ActivityCodeDomSerializer.MarkupFileNameProperty), Math.Max((int)activity2.GetValue(ActivityMarkupSerializer.StartLineProperty), 1));
					}
				}
			}
			return codeTypeDeclaration;
		}

		public override object Deserialize(IDesignerSerializationManager manager, CodeTypeDeclaration declaration)
		{
			return base.Deserialize(manager, declaration);
		}
	}
	internal class PrimitiveCodeDomSerializer : CodeDomSerializer
	{
		private static readonly string JSharpFileExtension = ".jsl";

		private static PrimitiveCodeDomSerializer defaultSerializer;

		internal static PrimitiveCodeDomSerializer Default
		{
			get
			{
				if (defaultSerializer == null)
				{
					defaultSerializer = new PrimitiveCodeDomSerializer();
				}
				return defaultSerializer;
			}
		}

		public override object Serialize(IDesignerSerializationManager manager, object value)
		{
			CodeExpression codeExpression = new CodePrimitiveExpression(value);
			if (value == null || value is bool || value is char || value is int || value is float || value is double)
			{
				if (manager.GetService(typeof(CodeDomProvider)) is CodeDomProvider codeDomProvider && string.Equals(codeDomProvider.FileExtension, JSharpFileExtension) && manager.Context[typeof(ExpressionContext)] is ExpressionContext expressionContext && expressionContext.ExpressionType == typeof(object))
				{
					codeExpression = new CodeCastExpression(value.GetType(), codeExpression);
					codeExpression.UserData.Add("CastIsBoxing", true);
				}
				return codeExpression;
			}
			if (value is string)
			{
				return codeExpression;
			}
			return new CodeCastExpression(new CodeTypeReference(value.GetType()), codeExpression);
		}
	}
	internal class CompositeActivityTypeDescriptorProvider : TypeDescriptionProvider
	{
		public CompositeActivityTypeDescriptorProvider()
			: base(TypeDescriptor.GetProvider(typeof(CompositeActivity)))
		{
		}

		public override ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance)
		{
			ICustomTypeDescriptor typeDescriptor = base.GetTypeDescriptor(objectType, instance);
			return new CompositeActivityTypeDescriptor(typeDescriptor);
		}
	}
	internal class CompositeActivityTypeDescriptor : CustomTypeDescriptor
	{
		private ICustomTypeDescriptor realTypeDescriptor;

		public CompositeActivityTypeDescriptor(ICustomTypeDescriptor realTypeDescriptor)
			: base(realTypeDescriptor)
		{
			this.realTypeDescriptor = realTypeDescriptor;
		}

		public override PropertyDescriptorCollection GetProperties(Attribute[] attributes)
		{
			PropertyDescriptorCollection properties = base.GetProperties(attributes);
			if (attributes != null && attributes.Length == 1 && attributes[0] is DesignOnlyAttribute && !(attributes[0] as DesignOnlyAttribute).IsDesignOnly)
			{
				ArrayList arrayList = new ArrayList();
				foreach (PropertyDescriptor item in properties)
				{
					arrayList.Add(item);
				}
				PropertyInfo property = typeof(CompositeActivity).GetProperty("CanModifyActivities", BindingFlags.Instance | BindingFlags.NonPublic);
				arrayList.Add(new ModifyActivitiesPropertyDescriptor(property));
				return new PropertyDescriptorCollection((PropertyDescriptor[])arrayList.ToArray(typeof(PropertyDescriptor)));
			}
			return properties;
		}
	}
	internal class ModifyActivitiesPropertyDescriptor : PropertyDescriptor
	{
		private PropertyInfo propInfo;

		public override Type ComponentType => typeof(CompositeActivity);

		public override bool IsReadOnly => false;

		public override Type PropertyType => typeof(bool);

		public ModifyActivitiesPropertyDescriptor(PropertyInfo propInfo)
			: base("CanModifyActivities", new Attribute[0])
		{
			this.propInfo = propInfo;
		}

		public override bool CanResetValue(object component)
		{
			throw new NotImplementedException();
		}

		public override object GetValue(object component)
		{
			return propInfo.GetValue(component, null);
		}

		public override void ResetValue(object component)
		{
			throw new NotImplementedException();
		}

		public override void SetValue(object component, object value)
		{
			propInfo.SetValue(component, true, null);
			if (component is CompositeActivity)
			{
				(component as CompositeActivity).SetValue(Activity.CustomActivityProperty, false);
			}
		}

		public override bool ShouldSerializeValue(object component)
		{
			return false;
		}
	}
	internal sealed class SerializableTypeCodeDomSerializer : CodeDomSerializer
	{
		private CodeDomSerializer originalSerializer;

		public SerializableTypeCodeDomSerializer(CodeDomSerializer originalSerializer)
		{
			if (originalSerializer == null)
			{
				throw new ArgumentNullException("originalSerializer");
			}
			this.originalSerializer = originalSerializer;
		}

		public override object Serialize(IDesignerSerializationManager manager, object value)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			object obj = null;
			if (value == null)
			{
				return obj;
			}
			CodeStatementCollection codeStatementCollection = null;
			ExpressionContext expressionContext = manager.Context[typeof(ExpressionContext)] as ExpressionContext;
			if (value.GetType().GetConstructor(new Type[0]) != null)
			{
				if (value is ICollection)
				{
					ExpressionContext expressionContext2 = null;
					if (expressionContext != null)
					{
						if (expressionContext.PresetValue != value)
						{
							try
							{
								codeStatementCollection = new CodeStatementCollection();
								CodeVariableReferenceExpression codeVariableReferenceExpression = AddVariableExpression(manager, codeStatementCollection, value);
								expressionContext2 = new ExpressionContext(codeVariableReferenceExpression, value.GetType(), expressionContext.Owner, value);
								manager.Context.Push(expressionContext2);
								obj = originalSerializer.Serialize(manager, value);
								if (obj is CodeStatementCollection)
								{
									codeStatementCollection.AddRange(obj as CodeStatementCollection);
								}
								else if (obj is CodeStatement)
								{
									codeStatementCollection.Add(obj as CodeStatement);
								}
								else if (obj is CodeExpression)
								{
									codeStatementCollection.Add(new CodeAssignStatement(codeVariableReferenceExpression, obj as CodeExpression));
								}
								obj = codeStatementCollection;
							}
							finally
							{
								if (expressionContext2 != null)
								{
									manager.Context.Pop();
								}
							}
						}
						else
						{
							obj = originalSerializer.Serialize(manager, value);
						}
					}
				}
				else
				{
					codeStatementCollection = new CodeStatementCollection();
					CodeVariableReferenceExpression codeVariableReferenceExpression2 = AddVariableExpression(manager, codeStatementCollection, value);
					SerializeProperties(manager, codeStatementCollection, value, new Attribute[1] { DesignOnlyAttribute.No });
					SerializeEvents(manager, codeStatementCollection, value, DesignOnlyAttribute.No);
					obj = codeStatementCollection;
				}
			}
			else if (expressionContext != null)
			{
				obj = originalSerializer.Serialize(manager, value);
			}
			return obj;
		}

		private CodeVariableReferenceExpression AddVariableExpression(IDesignerSerializationManager manager, CodeStatementCollection statements, object value)
		{
			string text = GetUniqueName(manager, value).Replace('`', '_');
			CodeVariableDeclarationStatement codeVariableDeclarationStatement = new CodeVariableDeclarationStatement(TypeDescriptor.GetClassName(value), text);
			codeVariableDeclarationStatement.InitExpression = new CodeObjectCreateExpression(TypeDescriptor.GetClassName(value));
			statements.Add(codeVariableDeclarationStatement);
			CodeVariableReferenceExpression codeVariableReferenceExpression = new CodeVariableReferenceExpression(text);
			SetExpression(manager, value, codeVariableReferenceExpression);
			return codeVariableReferenceExpression;
		}
	}
	internal sealed class DictionarySurrogate : ISerializationSurrogate
	{
		[Serializable]
		private sealed class DictionaryRef : IObjectReference, IDeserializationCallback
		{
			[OptionalField]
			private IList keys;

			[OptionalField]
			private IList values;

			[OptionalField]
			private object key;

			[OptionalField]
			private object value;

			private Type keyType;

			private Type valueType;

			[NonSerialized]
			private object dictionary;

			object IObjectReference.GetRealObject(StreamingContext context)
			{
				if (dictionary == null)
				{
					Type type = typeof(Dictionary<int, int>).GetGenericTypeDefinition().MakeGenericType(keyType, valueType);
					dictionary = type.GetConstructor(Type.EmptyTypes).Invoke(null);
				}
				return dictionary;
			}

			void IDeserializationCallback.OnDeserialization(object sender)
			{
				if (dictionary != null)
				{
					MethodInfo method = dictionary.GetType().GetMethod("Add");
					if (method == null)
					{
						throw new NullReferenceException("addMethod");
					}
					object[] array = new object[2];
					if (keys != null)
					{
						for (int i = 0; i < keys.Count; i++)
						{
							array[0] = keys[i];
							array[1] = values[i];
							method.Invoke(dictionary, array);
						}
					}
					else if (key != null)
					{
						array[0] = key;
						array[1] = value;
						method.Invoke(dictionary, array);
					}
				}
				dictionary = null;
			}
		}

		void ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context)
		{
			if (!obj.GetType().IsGenericType || obj.GetType().GetGenericTypeDefinition() != typeof(Dictionary<, >))
			{
				throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "obj");
			}
			Type[] genericArguments = obj.GetType().GetGenericArguments();
			if (genericArguments.Length != 2)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "obj");
			}
			PropertyInfo property = obj.GetType().GetProperty("Keys");
			if (property == null)
			{
				throw new NullReferenceException("keysProperty");
			}
			ArrayList arrayList = new ArrayList(property.GetValue(obj, null) as ICollection);
			PropertyInfo property2 = obj.GetType().GetProperty("Values");
			if (property2 == null)
			{
				throw new NullReferenceException("valuesProperty");
			}
			ArrayList arrayList2 = new ArrayList(property2.GetValue(obj, null) as ICollection);
			if (arrayList.Count == 1)
			{
				info.AddValue("key", arrayList[0]);
				info.AddValue("value", arrayList2[0]);
			}
			else if (arrayList.Count > 1)
			{
				info.AddValue("keys", arrayList.ToArray());
				info.AddValue("values", arrayList2.ToArray());
			}
			info.AddValue("keyType", genericArguments[0]);
			info.AddValue("valueType", genericArguments[1]);
			info.SetType(typeof(DictionaryRef));
		}

		object ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
		{
			return null;
		}
	}
	internal sealed class GenericQueueSurrogate : ISerializationSurrogate
	{
		[Serializable]
		private sealed class GenericQRef : IObjectReference, IDeserializationCallback
		{
			[OptionalField]
			private IList items;

			[OptionalField]
			private object item;

			private Type itemType;

			[NonSerialized]
			private object queue;

			object IObjectReference.GetRealObject(StreamingContext context)
			{
				if (queue == null)
				{
					Type type = typeof(Queue<int>).GetGenericTypeDefinition().MakeGenericType(itemType);
					queue = type.GetConstructor(Type.EmptyTypes).Invoke(null);
				}
				return queue;
			}

			void IDeserializationCallback.OnDeserialization(object sender)
			{
				if (queue == null)
				{
					return;
				}
				MethodInfo method = queue.GetType().GetMethod("Enqueue");
				if (method == null)
				{
					throw new NullReferenceException("enqueueMethod");
				}
				if (items != null)
				{
					for (int i = 0; i < items.Count; i++)
					{
						method.Invoke(queue, new object[1] { items[i] });
					}
				}
				else
				{
					method.Invoke(queue, new object[1] { item });
				}
				queue = null;
			}
		}

		internal GenericQueueSurrogate()
		{
		}

		void ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context)
		{
			if (!obj.GetType().IsGenericType || obj.GetType().GetGenericTypeDefinition() != typeof(Queue<>))
			{
				throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "obj");
			}
			Type[] genericArguments = obj.GetType().GetGenericArguments();
			if (genericArguments.Length != 1)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "obj");
			}
			ArrayList arrayList = new ArrayList(obj as ICollection);
			if (arrayList.Count == 1)
			{
				info.AddValue("item", arrayList[0]);
			}
			else
			{
				info.AddValue("items", arrayList.ToArray());
			}
			info.AddValue("itemType", genericArguments[0]);
			info.SetType(typeof(GenericQRef));
		}

		object ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
		{
			return null;
		}
	}
	internal sealed class ListSurrogate : ISerializationSurrogate
	{
		[Serializable]
		private sealed class ListRef : IObjectReference, IDeserializationCallback
		{
			[OptionalField]
			private IList items;

			[OptionalField]
			private object item;

			private Type itemType;

			[NonSerialized]
			private object list;

			object IObjectReference.GetRealObject(StreamingContext context)
			{
				if (list == null)
				{
					Type type = typeof(List<int>).GetGenericTypeDefinition().MakeGenericType(itemType);
					list = type.GetConstructor(Type.EmptyTypes).Invoke(null);
				}
				return list;
			}

			void IDeserializationCallback.OnDeserialization(object sender)
			{
				if (list == null)
				{
					return;
				}
				MethodInfo method = list.GetType().GetMethod("Add");
				if (method == null)
				{
					throw new NullReferenceException("addMethod");
				}
				if (items != null)
				{
					for (int i = 0; i < items.Count; i++)
					{
						method.Invoke(list, new object[1] { items[i] });
					}
				}
				else
				{
					method.Invoke(list, new object[1] { item });
				}
				list = null;
			}
		}

		internal ListSurrogate()
		{
		}

		void ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context)
		{
			if (!obj.GetType().IsGenericType || obj.GetType().GetGenericTypeDefinition() != typeof(List<>))
			{
				throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "obj");
			}
			Type[] genericArguments = obj.GetType().GetGenericArguments();
			if (genericArguments.Length != 1)
			{
				throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "obj");
			}
			ArrayList arrayList = new ArrayList(obj as IList);
			if (arrayList.Count == 1)
			{
				info.AddValue("item", arrayList[0]);
			}
			else
			{
				info.AddValue("items", arrayList.ToArray());
			}
			info.AddValue("itemType", genericArguments[0]);
			info.SetType(typeof(ListRef));
		}

		object ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
		{
			return null;
		}
	}
	internal sealed class QueueSurrogate : ISerializationSurrogate
	{
		[Serializable]
		private sealed class QRef : IObjectReference, IDeserializationCallback
		{
			[OptionalField]
			private IList items;

			[OptionalField]
			private object item;

			[NonSerialized]
			private Queue queue;

			object IObjectReference.GetRealObject(StreamingContext context)
			{
				if (queue == null)
				{
					queue = new Queue();
				}
				return queue;
			}

			void IDeserializationCallback.OnDeserialization(object sender)
			{
				if (queue == null)
				{
					return;
				}
				if (items != null)
				{
					for (int i = 0; i < items.Count; i++)
					{
						queue.Enqueue(items[i]);
					}
				}
				else
				{
					queue.Enqueue(item);
				}
				queue = null;
			}
		}

		internal QueueSurrogate()
		{
		}

		void ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context)
		{
			object[] array = ((Queue)obj).ToArray();
			if (array.Length == 1)
			{
				info.AddValue("item", array[0]);
			}
			else
			{
				info.AddValue("items", array);
			}
			info.SetType(typeof(QRef));
		}

		object ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
		{
			return null;
		}
	}
	internal sealed class SimpleTypesSurrogate : ISerializationSurrogate
	{
		private enum TypeID : byte
		{
			Guid = 1,
			Null
		}

		void ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context)
		{
			if (obj.GetType() == typeof(Guid))
			{
				Guid guid = (Guid)obj;
				info.AddValue("typeID", TypeID.Guid);
				info.AddValue("bits", guid.ToByteArray());
			}
		}

		object ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
		{
			TypeID typeID = (TypeID)info.GetValue("typeID", typeof(TypeID));
			if (typeID == TypeID.Guid)
			{
				return new Guid(info.GetValue("bits", typeof(byte[])) as byte[]);
			}
			return null;
		}
	}
	[AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)]
	public sealed class XmlnsDefinitionAttribute : Attribute
	{
		private string xmlNamespace;

		private string clrNamespace;

		private string assemblyName;

		public string XmlNamespace => xmlNamespace;

		public string ClrNamespace => clrNamespace;

		public string AssemblyName
		{
			get
			{
				return assemblyName;
			}
			set
			{
				assemblyName = value;
			}
		}

		public XmlnsDefinitionAttribute(string xmlNamespace, string clrNamespace)
		{
			if (xmlNamespace == null)
			{
				throw new ArgumentNullException("xmlNamespace");
			}
			if (clrNamespace == null)
			{
				throw new ArgumentNullException("clrNamespace");
			}
			this.xmlNamespace = xmlNamespace;
			this.clrNamespace = clrNamespace;
		}
	}
	[AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)]
	public sealed class XmlnsPrefixAttribute : Attribute
	{
		private string xmlNamespace;

		private string prefix;

		public string XmlNamespace => xmlNamespace;

		public string Prefix => prefix;

		public XmlnsPrefixAttribute(string xmlNamespace, string prefix)
		{
			if (xmlNamespace == null)
			{
				throw new ArgumentNullException("xmlNamespace");
			}
			if (prefix == null)
			{
				throw new ArgumentNullException("prefix");
			}
			this.xmlNamespace = xmlNamespace;
			this.prefix = prefix;
		}
	}
	[AttributeUsage(AttributeTargets.Class)]
	public sealed class RuntimeNamePropertyAttribute : Attribute
	{
		private string name;

		public string Name => name;

		public RuntimeNamePropertyAttribute(string name)
		{
			this.name = name;
		}
	}
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
	public sealed class ContentPropertyAttribute : Attribute
	{
		private string name;

		public string Name => name;

		public ContentPropertyAttribute()
		{
		}

		public ContentPropertyAttribute(string name)
		{
			this.name = name;
		}
	}
	[AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = false)]
	public sealed class ConstructorArgumentAttribute : Attribute
	{
		private string argumentName;

		public string ArgumentName => argumentName;

		public ConstructorArgumentAttribute(string argumentName)
		{
			this.argumentName = argumentName;
		}
	}
	public abstract class MarkupExtension
	{
		public abstract object ProvideValue(IServiceProvider provider);
	}
	[DesignerSerializer(typeof(MarkupExtensionSerializer), typeof(WorkflowMarkupSerializer))]
	internal sealed class NullExtension : MarkupExtension
	{
		public override object ProvideValue(IServiceProvider serviceProvider)
		{
			return null;
		}
	}
	[DesignerSerializer(typeof(TypeExtensionSerializer), typeof(WorkflowMarkupSerializer))]
	internal sealed class TypeExtension : MarkupExtension
	{
		private string typeName;

		private Type type;

		[DefaultValue(null)]
		[ConstructorArgument("type")]
		public string TypeName
		{
			get
			{
				if (type != null)
				{
					return type.FullName;
				}
				return typeName;
			}
			set
			{
				if (value == null)
				{
					throw new ArgumentNullException("value");
				}
				typeName = value;
			}
		}

		internal Type Type => type;

		public TypeExtension()
		{
		}

		public TypeExtension(string type)
		{
			if (type == null)
			{
				throw new ArgumentNullException("typeName");
			}
			typeName = type;
		}

		public TypeExtension(Type type)
		{
			if (type == null)
			{
				throw new ArgumentNullException("type");
			}
			this.type = type;
		}

		public override object ProvideValue(IServiceProvider provider)
		{
			if (type != null)
			{
				return type;
			}
			if (provider == null)
			{
				throw new ArgumentNullException("provider");
			}
			if (typeName == null)
			{
				throw new InvalidOperationException("typename");
			}
			if (!(provider is WorkflowMarkupSerializationManager workflowMarkupSerializationManager))
			{
				throw new ArgumentNullException("provider");
			}
			if (!(workflowMarkupSerializationManager.WorkflowMarkupStack[typeof(XmlReader)] is XmlReader xmlReader))
			{
				return typeName;
			}
			string text = typeName.Trim();
			string empty = string.Empty;
			int num = text.IndexOf(':');
			if (num >= 0)
			{
				empty = text.Substring(0, num);
				text = text.Substring(num + 1);
				type = workflowMarkupSerializationManager.GetType(new XmlQualifiedName(text, xmlReader.LookupNamespace(empty)));
				if (type != null)
				{
					return type;
				}
				List<WorkflowMarkupSerializerMapping> value = null;
				if (workflowMarkupSerializationManager.XmlNamespaceBasedMappings.TryGetValue(xmlReader.LookupNamespace(empty), out value) && value != null && value.Count > 0)
				{
					return value[0].ClrNamespace + "." + text;
				}
				return text;
			}
			type = workflowMarkupSerializationManager.GetType(new XmlQualifiedName(text, xmlReader.LookupNamespace(string.Empty)));
			if (type == null)
			{
				if (provider.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider)
				{
					type = typeProvider.GetType(text);
				}
				if (type == null && workflowMarkupSerializationManager.GetService(typeof(ITypeResolutionService)) == null)
				{
					type = workflowMarkupSerializationManager.SerializationManager.GetType(text);
				}
			}
			if (type != null)
			{
				return type;
			}
			return typeName;
		}
	}
	[ContentProperty("Items")]
	internal sealed class ArrayExtension : MarkupExtension
	{
		private ArrayList arrayElementList = new ArrayList();

		private Type arrayType;

		public Type Type
		{
			get
			{
				return arrayType;
			}
			set
			{
				arrayType = value;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public IList Items => arrayElementList;

		public ArrayExtension()
		{
		}

		public ArrayExtension(Type arrayType)
		{
			if (arrayType == null)
			{
				throw new ArgumentNullException("arrayType");
			}
			this.arrayType = arrayType;
		}

		public ArrayExtension(Array elements)
		{
			if (elements == null)
			{
				throw new ArgumentNullException("elements");
			}
			arrayElementList.AddRange(elements);
			arrayType = elements.GetType().GetElementType();
		}

		public override object ProvideValue(IServiceProvider provider)
		{
			if (provider == null)
			{
				throw new ArgumentNullException("provider");
			}
			if (arrayType == null)
			{
				throw new InvalidOperationException("ArrayType needs to be set.");
			}
			object obj = null;
			try
			{
				return arrayElementList.ToArray(arrayType);
			}
			catch (InvalidCastException)
			{
				throw new InvalidOperationException();
			}
		}
	}
	[Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
	public class CompositeActivityMarkupSerializer : ActivityMarkupSerializer
	{
		internal override void OnBeforeSerializeContents(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			base.OnBeforeSerializeContents(serializationManager, obj);
			CompositeActivity compositeActivity = obj as CompositeActivity;
			XmlWriter xmlWriter = serializationManager.WorkflowMarkupStack[typeof(XmlWriter)] as XmlWriter;
			if (compositeActivity.Parent != null || xmlWriter == null)
			{
				return;
			}
			Dictionary<string, Activity> dictionary = new Dictionary<string, Activity>();
			string prefix = string.Empty;
			XmlQualifiedName xmlQualifiedName = serializationManager.GetXmlQualifiedName(compositeActivity.GetType(), out prefix);
			dictionary.Add(xmlQualifiedName.Namespace, compositeActivity);
			Activity[] nestedActivities = Helpers.GetNestedActivities(compositeActivity);
			foreach (Activity activity in nestedActivities)
			{
				prefix = string.Empty;
				xmlQualifiedName = serializationManager.GetXmlQualifiedName(activity.GetType(), out prefix);
				if (!dictionary.ContainsKey(xmlQualifiedName.Namespace))
				{
					xmlWriter.WriteAttributeString("xmlns", prefix, null, xmlQualifiedName.Namespace);
					dictionary.Add(xmlQualifiedName.Namespace, activity);
				}
			}
		}
	}
	internal class ActivityCollectionMarkupSerializer : CollectionMarkupSerializer
	{
		protected internal override IList GetChildren(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (!(obj is ActivityCollection activityCollection))
			{
				throw new ArgumentException(SR.GetString("Error_SerializerTypeMismatch", typeof(ActivityCollection).FullName), "obj");
			}
			if (activityCollection.Owner is CompositeActivity compositeActivity && Helpers.IsCustomActivity(compositeActivity))
			{
				return null;
			}
			return base.GetChildren(serializationManager, obj);
		}

		protected internal override void ClearChildren(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
		}

		protected internal override void AddChild(WorkflowMarkupSerializationManager serializationManager, object obj, object childObj)
		{
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (childObj == null)
			{
				throw new ArgumentNullException("childObj");
			}
			if (!(obj is ActivityCollection activityCollection))
			{
				throw new ArgumentException(SR.GetString("Error_SerializerTypeMismatch", typeof(ActivityCollection).FullName), "obj");
			}
			if (!(childObj is Activity))
			{
				throw new InvalidOperationException(SR.GetString("Error_ActivityCollectionSerializer", childObj.GetType().FullName));
			}
			if (activityCollection.Owner is CompositeActivity compositeActivity)
			{
				if (Helpers.IsCustomActivity(compositeActivity))
				{
					throw new InvalidOperationException(SR.GetString("Error_CanNotAddActivityInBlackBoxActivity"));
				}
				base.AddChild(serializationManager, obj, childObj);
			}
		}
	}
	internal sealed class DependencyStoreSurrogate : ISerializationSurrogate
	{
		[Serializable]
		private sealed class DependencyStoreRef : IObjectReference, IDeserializationCallback
		{
			private IList keys;

			private IList values;

			[NonSerialized]
			private IDictionary<DependencyProperty, object> store;

			object IObjectReference.GetRealObject(StreamingContext context)
			{
				if (store == null)
				{
					store = new Dictionary<DependencyProperty, object>();
				}
				return store;
			}

			void IDeserializationCallback.OnDeserialization(object sender)
			{
				if (store != null)
				{
					for (int i = 0; i < keys.Count; i++)
					{
						DependencyProperty dependencyProperty = keys[i] as DependencyProperty;
						if (dependencyProperty == null)
						{
							dependencyProperty = DependencyProperty.FromKnown((byte)keys[i]);
						}
						store.Add(dependencyProperty, values[i]);
					}
				}
				store = null;
			}
		}

		internal DependencyStoreSurrogate()
		{
		}

		void ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context)
		{
			if (!(obj is IDictionary<DependencyProperty, object> dictionary))
			{
				throw new ArgumentException("obj");
			}
			ArrayList arrayList = new ArrayList();
			ArrayList arrayList2 = new ArrayList();
			foreach (KeyValuePair<DependencyProperty, object> item in dictionary)
			{
				if (!item.Key.DefaultMetadata.IsNonSerialized)
				{
					if (item.Key.IsKnown)
					{
						arrayList.Add(item.Key.KnownIndex);
					}
					else
					{
						arrayList.Add(item.Key);
					}
					arrayList2.Add(item.Value);
				}
			}
			info.AddValue("keys", arrayList.ToArray());
			info.AddValue("values", arrayList2.ToArray());
			info.SetType(typeof(DependencyStoreRef));
		}

		object ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
		{
			return null;
		}
	}
	internal sealed class PropertySegmentSerializationProvider : WorkflowMarkupSerializationProvider
	{
		public override object GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType)
		{
			if (serializerType.IsAssignableFrom(typeof(WorkflowMarkupSerializer)))
			{
				if (currentSerializer is PropertySegmentSerializer)
				{
					return currentSerializer;
				}
				if (objectType == typeof(PropertySegment))
				{
					return new PropertySegmentSerializer(null);
				}
				if (currentSerializer is WorkflowMarkupSerializer)
				{
					return new PropertySegmentSerializer(currentSerializer as WorkflowMarkupSerializer);
				}
				return null;
			}
			return base.GetSerializer(manager, currentSerializer, objectType, serializerType);
		}
	}
	internal sealed class PropertySegmentSerializer : WorkflowMarkupSerializer
	{
		private WorkflowMarkupSerializer containedSerializer;

		public PropertySegmentSerializer(WorkflowMarkupSerializer containedSerializer)
		{
			this.containedSerializer = containedSerializer;
		}

		protected internal override PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (containedSerializer != null)
			{
				return containedSerializer.GetProperties(serializationManager, obj);
			}
			if (obj != null && obj.GetType() == typeof(PropertySegment))
			{
				return (obj as PropertySegment).GetProperties(serializationManager);
			}
			return base.GetProperties(serializationManager, obj);
		}

		protected override object CreateInstance(WorkflowMarkupSerializationManager serializationManager, Type type)
		{
			if (typeof(PropertySegment) == type)
			{
				return Activator.CreateInstance(type, serializationManager, serializationManager.Context.Current);
			}
			return base.CreateInstance(serializationManager, type);
		}

		protected internal override bool ShouldSerializeValue(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			return true;
		}

		protected internal override bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			bool flag = false;
			if (value != null)
			{
				ITypeDescriptorContext context = null;
				TypeConverter typeConversionInfoForPropertySegment = GetTypeConversionInfoForPropertySegment(serializationManager, value.GetType(), out context);
				if (typeConversionInfoForPropertySegment != null)
				{
					flag = typeConversionInfoForPropertySegment.CanConvertTo(context, typeof(string));
				}
				if (!flag)
				{
					flag = ((containedSerializer == null) ? base.CanSerializeToString(serializationManager, value) : containedSerializer.CanSerializeToString(serializationManager, value));
				}
			}
			else
			{
				flag = true;
			}
			return flag;
		}

		protected internal override string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			string empty = string.Empty;
			if (value == null)
			{
				return "*null";
			}
			ITypeDescriptorContext context = null;
			TypeConverter typeConversionInfoForPropertySegment = GetTypeConversionInfoForPropertySegment(serializationManager, value.GetType(), out context);
			if (typeConversionInfoForPropertySegment != null && typeConversionInfoForPropertySegment.CanConvertTo(context, typeof(string)))
			{
				return typeConversionInfoForPropertySegment.ConvertToString(context, value);
			}
			if (containedSerializer != null)
			{
				return containedSerializer.SerializeToString(serializationManager, value);
			}
			return base.SerializeToString(serializationManager, value);
		}

		protected internal override object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (propertyType == null)
			{
				throw new ArgumentNullException("propertyType");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			object obj = null;
			if (string.Equals(value, "*null", StringComparison.Ordinal))
			{
				return null;
			}
			ITypeDescriptorContext context = null;
			TypeConverter typeConversionInfoForPropertySegment = GetTypeConversionInfoForPropertySegment(serializationManager, propertyType, out context);
			if (typeConversionInfoForPropertySegment != null && typeConversionInfoForPropertySegment.CanConvertFrom(context, typeof(string)))
			{
				return typeConversionInfoForPropertySegment.ConvertFromString(context, value);
			}
			if (containedSerializer != null)
			{
				return containedSerializer.DeserializeFromString(serializationManager, propertyType, value);
			}
			return base.DeserializeFromString(serializationManager, propertyType, value);
		}

		protected internal override IList GetChildren(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (containedSerializer != null)
			{
				return containedSerializer.GetChildren(serializationManager, obj);
			}
			return null;
		}

		protected internal override void ClearChildren(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (containedSerializer != null)
			{
				containedSerializer.ClearChildren(serializationManager, obj);
			}
		}

		protected internal override void AddChild(WorkflowMarkupSerializationManager serializationManager, object obj, object childObj)
		{
			if (containedSerializer != null)
			{
				containedSerializer.AddChild(serializationManager, obj, childObj);
			}
		}

		private TypeConverter GetTypeConversionInfoForPropertySegment(WorkflowMarkupSerializationManager serializationManager, Type propertyType, out ITypeDescriptorContext context)
		{
			TypeConverter typeConverter = null;
			context = null;
			PropertySegmentPropertyInfo propertySegmentPropertyInfo = serializationManager.Context[typeof(PropertySegmentPropertyInfo)] as PropertySegmentPropertyInfo;
			if (propertySegmentPropertyInfo.PropertySegment != null)
			{
				if (propertySegmentPropertyInfo.PropertySegment.PropertyDescriptor != null)
				{
					context = new TypeDescriptorContext(propertySegmentPropertyInfo.PropertySegment.ServiceProvider, propertySegmentPropertyInfo.PropertySegment.PropertyDescriptor, propertySegmentPropertyInfo.PropertySegment.Object);
					typeConverter = propertySegmentPropertyInfo.PropertySegment.PropertyDescriptor.Converter;
				}
				else if (propertySegmentPropertyInfo.PropertySegment.Object != null)
				{
					PropertyDescriptor propertyDescriptor = TypeDescriptor.GetProperties(propertySegmentPropertyInfo.PropertySegment.Object)[propertySegmentPropertyInfo.Name];
					if (propertyDescriptor != null)
					{
						context = new TypeDescriptorContext(propertySegmentPropertyInfo.PropertySegment.ServiceProvider, propertyDescriptor, propertySegmentPropertyInfo.PropertySegment.Object);
						typeConverter = propertyDescriptor.Converter;
					}
				}
			}
			if (propertyType != null && typeConverter == null)
			{
				typeConverter = TypeDescriptor.GetConverter(propertyType);
			}
			return typeConverter;
		}
	}
	internal sealed class SynchronizationHandlesCodeDomSerializer : CodeDomSerializer
	{
		public override object Serialize(IDesignerSerializationManager manager, object obj)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			CodeExpression result = null;
			if (manager.Context[typeof(CodeStatementCollection)] is CodeStatementCollection codeStatementCollection)
			{
				Activity value = (Activity)manager.Context[typeof(Activity)];
				CodeExpression codeExpression = SerializeToExpression(manager, value);
				if (!(obj is ICollection<string> collection))
				{
					throw new ArgumentException(SR.GetString("Error_UnexpectedArgumentType", typeof(StringCollection).FullName), "obj");
				}
				string uniqueName = GetUniqueName(manager, new StringCollection());
				codeStatementCollection.Add(new CodeVariableDeclarationStatement(obj.GetType(), uniqueName, new CodeObjectCreateExpression(obj.GetType())));
				foreach (string item in collection)
				{
					codeStatementCollection.Add(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression(uniqueName), "Add"), new CodePrimitiveExpression(item)));
				}
				result = new CodeVariableReferenceExpression(uniqueName);
			}
			return result;
		}
	}
	internal sealed class StringCollectionMarkupSerializer : WorkflowMarkupSerializer
	{
		protected internal override PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager manager, object obj)
		{
			return new PropertyInfo[0];
		}

		protected internal override bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			return value is ICollection<string>;
		}

		protected internal override string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			return SynchronizationHandlesTypeConverter.Stringify(value as ICollection<string>);
		}

		protected internal override object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (propertyType == null)
			{
				throw new ArgumentNullException("propertyType");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			if (IsValidCompactAttributeFormat(value))
			{
				return DeserializeFromCompactFormat(serializationManager, serializationManager.WorkflowMarkupStack[typeof(XmlReader)] as XmlReader, value);
			}
			return SynchronizationHandlesTypeConverter.UnStringify(value);
		}
	}
	internal sealed class WorkflowMarkupSerializerMapping
	{
		private static readonly Dictionary<string, Type> wellKnownTypes;

		private static readonly List<WorkflowMarkupSerializerMapping> wellKnownMappings;

		private static readonly WorkflowMarkupSerializerMapping Activities;

		private static readonly WorkflowMarkupSerializerMapping ComponentModel;

		private static readonly WorkflowMarkupSerializerMapping Serialization;

		private static readonly WorkflowMarkupSerializerMapping Rules;

		private static readonly WorkflowMarkupSerializerMapping ComponentModelDesign;

		private string xmlns = string.Empty;

		private string clrns = string.Empty;

		private string targetAssemblyName = string.Empty;

		private string prefix = string.Empty;

		private string unifiedAssemblyName = string.Empty;

		public string ClrNamespace => clrns;

		public string XmlNamespace => xmlns;

		public string AssemblyName => targetAssemblyName;

		public string Prefix => prefix;

		internal static IList<WorkflowMarkupSerializerMapping> WellKnownMappings => wellKnownMappings;

		static WorkflowMarkupSerializerMapping()
		{
			wellKnownTypes = new Dictionary<string, Type>();
			wellKnownTypes.Add(typeof(ThrowActivity).Name, typeof(ThrowActivity));
			wellKnownTypes.Add(typeof(ThrowDesigner).Name, typeof(ThrowDesigner));
			wellKnownTypes.Add(typeof(SuspendActivity).Name, typeof(SuspendActivity));
			wellKnownTypes.Add(typeof(SuspendDesigner).Name, typeof(SuspendDesigner));
			wellKnownTypes.Add(typeof(CancellationHandlerActivity).Name, typeof(CancellationHandlerActivity));
			wellKnownTypes.Add(typeof(CancellationHandlerActivityDesigner).Name, typeof(CancellationHandlerActivityDesigner));
			wellKnownTypes.Add(typeof(CompensateActivity).Name, typeof(CompensateActivity));
			wellKnownTypes.Add(typeof(CompensateDesigner).Name, typeof(CompensateDesigner));
			wellKnownTypes.Add(typeof(CompensationHandlerActivity).Name, typeof(CompensationHandlerActivity));
			wellKnownTypes.Add(typeof(CompensationHandlerActivityDesigner).Name, typeof(CompensationHandlerActivityDesigner));
			wellKnownTypes.Add(typeof(FaultHandlerActivity).Name, typeof(FaultHandlerActivity));
			wellKnownTypes.Add(typeof(FaultHandlerActivityDesigner).Name, typeof(FaultHandlerActivityDesigner));
			wellKnownTypes.Add(typeof(FaultHandlersActivity).Name, typeof(FaultHandlersActivity));
			wellKnownTypes.Add(typeof(FaultHandlersActivityDesigner).Name, typeof(FaultHandlersActivityDesigner));
			wellKnownTypes.Add(typeof(SynchronizationScopeActivity).Name, typeof(SynchronizationScopeActivity));
			wellKnownTypes.Add(typeof(SequenceDesigner).Name, typeof(SequenceDesigner));
			wellKnownTypes.Add(typeof(TransactionScopeActivity).Name, typeof(TransactionScopeActivity));
			wellKnownTypes.Add(typeof(TransactionScopeActivityDesigner).Name, typeof(TransactionScopeActivityDesigner));
			wellKnownTypes.Add(typeof(PropertySegment).Name, typeof(PropertySegment));
			wellKnownTypes.Add(typeof(CompensatableTransactionScopeActivity).Name, typeof(CompensatableTransactionScopeActivity));
			wellKnownTypes.Add(typeof(ActivityDesigner).Name, typeof(ActivityDesigner));
			wellKnownMappings = new List<WorkflowMarkupSerializerMapping>();
			Activities = new WorkflowMarkupSerializerMapping("wf", "http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.Activities", "System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
			wellKnownMappings.Add(Activities);
			ComponentModel = new WorkflowMarkupSerializerMapping("wf", "http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.ComponentModel", Assembly.GetExecutingAssembly().FullName);
			wellKnownMappings.Add(ComponentModel);
			Serialization = new WorkflowMarkupSerializerMapping("x", "http://schemas.microsoft.com/winfx/2006/xaml", "System.Workflow.ComponentModel.Serialization", Assembly.GetExecutingAssembly().FullName);
			wellKnownMappings.Add(Serialization);
			Rules = new WorkflowMarkupSerializerMapping("wf", "http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.Activities.Rules", "System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
			wellKnownMappings.Add(Rules);
			ComponentModelDesign = new WorkflowMarkupSerializerMapping("wf", "http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.ComponentModel.Design", Assembly.GetExecutingAssembly().FullName);
			wellKnownMappings.Add(ComponentModelDesign);
			wellKnownMappings.Add(new WorkflowMarkupSerializerMapping("wf", "http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.Runtime", "System.Workflow.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=MSIL"));
			wellKnownMappings.Add(new WorkflowMarkupSerializerMapping("wf", "http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.ComponentModel.Compiler", Assembly.GetExecutingAssembly().FullName));
			wellKnownMappings.Add(new WorkflowMarkupSerializerMapping("wf", "http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.Activities.Rules.Design", "System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"));
			wellKnownMappings.Add(new WorkflowMarkupSerializerMapping("wf", "http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.Runtime.Configuration", "System.Workflow.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=MSIL"));
			wellKnownMappings.Add(new WorkflowMarkupSerializerMapping("wf", "http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.Runtime.Hosting", "System.Workflow.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=MSIL"));
			wellKnownMappings.Add(new WorkflowMarkupSerializerMapping("wf", "http://schemas.microsoft.com/winfx/2006/xaml/workflow", "System.Workflow.Runtime.Tracking", "System.Workflow.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=MSIL"));
		}

		public WorkflowMarkupSerializerMapping(string prefix, string xmlNamespace, string clrNamespace, string assemblyName)
		{
			if (prefix == null)
			{
				throw new ArgumentNullException("prefix");
			}
			if (xmlNamespace == null)
			{
				throw new ArgumentNullException("xmlNamespace");
			}
			if (clrNamespace == null)
			{
				throw new ArgumentNullException("clrNamespace");
			}
			if (assemblyName == null)
			{
				throw new ArgumentNullException("assemblyName");
			}
			this.prefix = prefix;
			xmlns = xmlNamespace;
			clrns = clrNamespace;
			targetAssemblyName = assemblyName;
			unifiedAssemblyName = assemblyName;
		}

		public WorkflowMarkupSerializerMapping(string prefix, string xmlNamespace, string clrNamespace, string targetAssemblyName, string unifiedAssemblyName)
		{
			if (prefix == null)
			{
				throw new ArgumentNullException("prefix");
			}
			if (xmlNamespace == null)
			{
				throw new ArgumentNullException("xmlNamespace");
			}
			if (clrNamespace == null)
			{
				throw new ArgumentNullException("clrNamespace");
			}
			if (targetAssemblyName == null)
			{
				throw new ArgumentNullException("targetAssemblyName");
			}
			if (unifiedAssemblyName == null)
			{
				throw new ArgumentNullException("unifiedAssemblyName");
			}
			this.prefix = prefix;
			xmlns = xmlNamespace;
			clrns = clrNamespace;
			this.targetAssemblyName = targetAssemblyName;
			this.unifiedAssemblyName = unifiedAssemblyName;
		}

		public override bool Equals(object value)
		{
			if (!(value is WorkflowMarkupSerializerMapping workflowMarkupSerializerMapping))
			{
				return false;
			}
			if (clrns == workflowMarkupSerializerMapping.clrns && targetAssemblyName == workflowMarkupSerializerMapping.targetAssemblyName && unifiedAssemblyName == workflowMarkupSerializerMapping.unifiedAssemblyName)
			{
				return true;
			}
			return false;
		}

		public override int GetHashCode()
		{
			return ClrNamespace.GetHashCode() ^ unifiedAssemblyName.GetHashCode();
		}

		internal static Type ResolveWellKnownTypes(WorkflowMarkupSerializationManager manager, string xmlns, string typeName)
		{
			Type value = null;
			List<WorkflowMarkupSerializerMapping> list = new List<WorkflowMarkupSerializerMapping>();
			if (xmlns.Equals("http://schemas.microsoft.com/winfx/2006/xaml/workflow", StringComparison.Ordinal))
			{
				if (!wellKnownTypes.TryGetValue(typeName, out value))
				{
					if (typeName.EndsWith("Activity", StringComparison.OrdinalIgnoreCase))
					{
						list.Add(Activities);
						list.Add(ComponentModel);
					}
					if (typeName.EndsWith("Designer", StringComparison.OrdinalIgnoreCase))
					{
						list.Add(Activities);
						list.Add(ComponentModel);
						list.Add(ComponentModelDesign);
					}
					else if (typeName.EndsWith("Theme", StringComparison.OrdinalIgnoreCase))
					{
						list.Add(ComponentModelDesign);
						list.Add(Activities);
					}
					else if (typeName.StartsWith("Rule", StringComparison.OrdinalIgnoreCase) || typeName.EndsWith("Action", StringComparison.OrdinalIgnoreCase))
					{
						list.Add(Rules);
					}
				}
			}
			else if (xmlns.Equals("http://schemas.microsoft.com/winfx/2006/xaml", StringComparison.Ordinal))
			{
				list.Add(Serialization);
			}
			if (value == null)
			{
				foreach (WorkflowMarkupSerializerMapping item in list)
				{
					string typeName2 = item.ClrNamespace + "." + typeName + ", " + item.AssemblyName;
					value = manager.GetType(typeName2);
					if (value != null)
					{
						break;
					}
				}
			}
			return value;
		}

		internal static void GetMappingsFromXmlNamespace(WorkflowMarkupSerializationManager serializationManager, string xmlNamespace, out IList<WorkflowMarkupSerializerMapping> matchingMappings, out IList<WorkflowMarkupSerializerMapping> collectedMappings)
		{
			matchingMappings = new List<WorkflowMarkupSerializerMapping>();
			collectedMappings = new List<WorkflowMarkupSerializerMapping>();
			if (!(serializationManager.WorkflowMarkupStack[typeof(XmlReader)] is XmlReader xmlReader))
			{
				return;
			}
			if (xmlNamespace.StartsWith("clr-namespace:", StringComparison.OrdinalIgnoreCase))
			{
				bool flag = false;
				string text = xmlNamespace.Substring("clr-namespace:".Length).Trim();
				string assemblyName = string.Empty;
				int num = text.IndexOf(';');
				if (num != -1)
				{
					assemblyName = ((num + 1 < text.Length) ? text.Substring(num + 1).Trim() : string.Empty);
					text = text.Substring(0, num).Trim();
					if (!assemblyName.StartsWith("Assembly=", StringComparison.OrdinalIgnoreCase))
					{
						flag = true;
					}
					assemblyName = assemblyName.Substring("Assembly=".Length);
				}
				if (!flag)
				{
					if (text.Equals("{Global}", StringComparison.OrdinalIgnoreCase))
					{
						text = string.Empty;
					}
					matchingMappings.Add(new WorkflowMarkupSerializerMapping(xmlReader.Prefix, xmlNamespace, text, assemblyName));
				}
				return;
			}
			List<Assembly> list = new List<Assembly>();
			if (serializationManager.LocalAssembly != null)
			{
				list.Add(serializationManager.LocalAssembly);
			}
			if (serializationManager.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider)
			{
				list.AddRange(typeProvider.ReferencedAssemblies);
			}
			foreach (Assembly item in list)
			{
				object[] customAttributes = item.GetCustomAttributes(typeof(XmlnsDefinitionAttribute), inherit: true);
				if (customAttributes == null)
				{
					continue;
				}
				object[] array = customAttributes;
				for (int i = 0; i < array.Length; i++)
				{
					XmlnsDefinitionAttribute xmlnsDefinitionAttribute = (XmlnsDefinitionAttribute)array[i];
					string assemblyName2 = string.Empty;
					if (serializationManager.LocalAssembly != item)
					{
						assemblyName2 = ((xmlnsDefinitionAttribute.AssemblyName == null || xmlnsDefinitionAttribute.AssemblyName.Trim().Length <= 0) ? item.FullName : xmlnsDefinitionAttribute.AssemblyName);
					}
					if (xmlnsDefinitionAttribute.XmlNamespace.Equals(xmlNamespace, StringComparison.Ordinal))
					{
						matchingMappings.Add(new WorkflowMarkupSerializerMapping(xmlReader.Prefix, xmlNamespace, xmlnsDefinitionAttribute.ClrNamespace, assemblyName2));
					}
					else
					{
						collectedMappings.Add(new WorkflowMarkupSerializerMapping(xmlReader.Prefix, xmlNamespace, xmlnsDefinitionAttribute.ClrNamespace, assemblyName2));
					}
				}
			}
		}

		internal static void GetMappingFromType(WorkflowMarkupSerializationManager manager, Type type, out WorkflowMarkupSerializerMapping matchingMapping, out IList<WorkflowMarkupSerializerMapping> collectedMappings)
		{
			matchingMapping = null;
			collectedMappings = new List<WorkflowMarkupSerializerMapping>();
			string text = ((type.Namespace != null) ? type.Namespace : string.Empty);
			string text2 = string.Empty;
			string empty = string.Empty;
			string value = string.Empty;
			empty = GetAssemblyName(type, manager);
			if (type.Assembly.FullName.Equals("System.Workflow.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=MSIL", StringComparison.Ordinal))
			{
				text2 = "http://schemas.microsoft.com/winfx/2006/xaml/workflow";
				value = "wf";
			}
			if (type.Assembly.FullName.Equals("System.Workflow.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", StringComparison.Ordinal))
			{
				text2 = "http://schemas.microsoft.com/winfx/2006/xaml/workflow";
				value = "wf";
			}
			else if (type.Assembly == Assembly.GetExecutingAssembly())
			{
				text2 = "http://schemas.microsoft.com/winfx/2006/xaml/workflow";
				value = "wf";
			}
			if (text2.Length == 0)
			{
				object[] customAttributes = type.Assembly.GetCustomAttributes(typeof(XmlnsDefinitionAttribute), inherit: true);
				object[] array = customAttributes;
				for (int i = 0; i < array.Length; i++)
				{
					XmlnsDefinitionAttribute xmlnsDefinitionAttribute = (XmlnsDefinitionAttribute)array[i];
					text2 = xmlnsDefinitionAttribute.XmlNamespace;
					empty = xmlnsDefinitionAttribute.AssemblyName;
					if (type.Assembly == manager.LocalAssembly)
					{
						empty = string.Empty;
					}
					else if (string.IsNullOrEmpty(empty))
					{
						empty = GetAssemblyName(type, manager);
					}
					if (string.IsNullOrEmpty(text2))
					{
						text2 = GetFormatedXmlNamespace(text, empty);
					}
					value = GetPrefix(manager, type.Assembly, text2);
					WorkflowMarkupSerializerMapping workflowMarkupSerializerMapping = new WorkflowMarkupSerializerMapping(value, text2, text, empty, type.Assembly.FullName);
					if (xmlnsDefinitionAttribute.ClrNamespace.Equals(text, StringComparison.Ordinal) && matchingMapping == null)
					{
						matchingMapping = workflowMarkupSerializerMapping;
					}
					else
					{
						collectedMappings.Add(workflowMarkupSerializerMapping);
					}
				}
			}
			if (matchingMapping == null)
			{
				if (type.Assembly == manager.LocalAssembly)
				{
					empty = string.Empty;
				}
				else if (string.IsNullOrEmpty(empty))
				{
					empty = GetAssemblyName(type, manager);
				}
				text2 = GetFormatedXmlNamespace(text, empty);
				if (string.IsNullOrEmpty(value))
				{
					value = GetPrefix(manager, type.Assembly, text2);
				}
				matchingMapping = new WorkflowMarkupSerializerMapping(value, text2, text, empty, type.Assembly.FullName);
			}
		}

		private static string GetAssemblyName(Type type, WorkflowMarkupSerializationManager manager)
		{
			if (manager.GetService(typeof(ITypeProvider)) is TypeProvider typeProvider)
			{
				return typeProvider.GetAssemblyName(type);
			}
			if (type.Assembly == null)
			{
				return string.Empty;
			}
			return type.Assembly.FullName;
		}

		private static string GetFormatedXmlNamespace(string clrNamespace, string assemblyName)
		{
			string text = "clr-namespace:";
			text += (string.IsNullOrEmpty(clrNamespace) ? "{Global}" : clrNamespace);
			if (!string.IsNullOrEmpty(assemblyName))
			{
				text = text + ";Assembly=" + assemblyName;
			}
			return text;
		}

		private static string GetPrefix(WorkflowMarkupSerializationManager manager, Assembly assembly, string xmlNamespace)
		{
			string text = string.Empty;
			object[] customAttributes = assembly.GetCustomAttributes(typeof(XmlnsPrefixAttribute), inherit: true);
			if (customAttributes != null)
			{
				object[] array = customAttributes;
				for (int i = 0; i < array.Length; i++)
				{
					XmlnsPrefixAttribute xmlnsPrefixAttribute = (XmlnsPrefixAttribute)array[i];
					if (xmlnsPrefixAttribute.XmlNamespace.Equals(xmlNamespace, StringComparison.Ordinal))
					{
						text = xmlnsPrefixAttribute.Prefix;
						break;
					}
				}
			}
			if (string.IsNullOrEmpty(text) || !IsNamespacePrefixUnique(text, manager.PrefixBasedMappings.Keys))
			{
				string text2 = (string.IsNullOrEmpty(text) ? "ns" : text);
				int num = 0;
				text = text2 + string.Format(CultureInfo.InvariantCulture, "{0}", new object[1] { num++ });
				while (!IsNamespacePrefixUnique(text, manager.PrefixBasedMappings.Keys))
				{
					text = text2 + string.Format(CultureInfo.InvariantCulture, "{0}", new object[1] { num++ });
				}
			}
			return text;
		}

		private static bool IsNamespacePrefixUnique(string prefix, ICollection existingPrefixes)
		{
			bool result = true;
			foreach (string existingPrefix in existingPrefixes)
			{
				if (existingPrefix.Equals(prefix, StringComparison.Ordinal))
				{
					result = false;
					break;
				}
			}
			return result;
		}
	}
	internal sealed class WorkflowMarkupElementEventArgs : EventArgs
	{
		private XmlReader reader;

		public XmlReader XmlReader => reader;

		internal WorkflowMarkupElementEventArgs(XmlReader reader)
		{
			this.reader = reader;
		}
	}
	public class WorkflowMarkupSerializationManager : IDesignerSerializationManager, IServiceProvider
	{
		private sealed class WellKnownTypeSerializationProvider : IDesignerSerializationProvider
		{
			object IDesignerSerializationProvider.GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType)
			{
				if (serializerType == typeof(WorkflowMarkupSerializer) && objectType != null)
				{
					if (TypeProvider.IsAssignable(typeof(ICollection<string>), objectType) && TypeProvider.IsAssignable(objectType, typeof(List<string>)) && !TypeProvider.IsAssignable(typeof(Array), objectType))
					{
						return new StringCollectionMarkupSerializer();
					}
					if (typeof(Color).IsAssignableFrom(objectType))
					{
						return new ColorMarkupSerializer();
					}
					if (typeof(Size).IsAssignableFrom(objectType))
					{
						return new SizeMarkupSerializer();
					}
					if (typeof(Point).IsAssignableFrom(objectType))
					{
						return new PointMarkupSerializer();
					}
					if (objectType == typeof(CodeTypeReference))
					{
						return new CodeTypeReferenceSerializer();
					}
				}
				return null;
			}
		}

		private Assembly localAssembly;

		private int writerDepth;

		private ContextStack workflowMarkupStack = new ContextStack();

		private Stack serializationStack = new Stack();

		private IDesignerSerializationManager serializationManager;

		private bool designMode;

		private Dictionary<int, WorkflowMarkupSerializerMapping> clrNamespaceBasedMappings = new Dictionary<int, WorkflowMarkupSerializerMapping>();

		private Dictionary<string, List<WorkflowMarkupSerializerMapping>> xmlNamespaceBasedMappings = new Dictionary<string, List<WorkflowMarkupSerializerMapping>>();

		private Dictionary<string, List<WorkflowMarkupSerializerMapping>> prefixBasedMappings = new Dictionary<string, List<WorkflowMarkupSerializerMapping>>();

		private List<WorkflowMarkupSerializer> extendedPropertiesProviders;

		private Dictionary<XmlQualifiedName, Type> cachedXmlQualifiedNameTypes = new Dictionary<XmlQualifiedName, Type>();

		private int currentContextStackDepth;

		public ContextStack Context => serializationManager.Context;

		internal Stack SerializationStack => serializationStack;

		protected internal IDesignerSerializationManager SerializationManager
		{
			get
			{
				return serializationManager;
			}
			set
			{
				serializationManager = value;
				serializationManager.AddSerializationProvider(new WellKnownTypeSerializationProvider());
			}
		}

		public Assembly LocalAssembly
		{
			get
			{
				return localAssembly;
			}
			set
			{
				localAssembly = value;
			}
		}

		internal int WriterDepth
		{
			get
			{
				return writerDepth;
			}
			set
			{
				writerDepth = value;
			}
		}

		internal ContextStack WorkflowMarkupStack => workflowMarkupStack;

		internal IDictionary<int, WorkflowMarkupSerializerMapping> ClrNamespaceBasedMappings => clrNamespaceBasedMappings;

		internal IDictionary<string, List<WorkflowMarkupSerializerMapping>> XmlNamespaceBasedMappings => xmlNamespaceBasedMappings;

		internal Dictionary<string, List<WorkflowMarkupSerializerMapping>> PrefixBasedMappings => prefixBasedMappings;

		internal IList<WorkflowMarkupSerializer> ExtendedPropertiesProviders
		{
			get
			{
				if (extendedPropertiesProviders == null)
				{
					extendedPropertiesProviders = new List<WorkflowMarkupSerializer>();
				}
				return extendedPropertiesProviders;
			}
		}

		PropertyDescriptorCollection IDesignerSerializationManager.Properties => serializationManager.Properties;

		internal event EventHandler<WorkflowMarkupElementEventArgs> FoundDefTag;

		event ResolveNameEventHandler IDesignerSerializationManager.ResolveName
		{
			add
			{
			}
			remove
			{
			}
		}

		event EventHandler IDesignerSerializationManager.SerializationComplete
		{
			add
			{
			}
			remove
			{
			}
		}

		public WorkflowMarkupSerializationManager(IDesignerSerializationManager manager)
		{
			if (manager == null)
			{
				throw new ArgumentNullException("manager");
			}
			serializationManager = manager;
			AddSerializationProvider(new WellKnownTypeSerializationProvider());
			AddMappings(WorkflowMarkupSerializerMapping.WellKnownMappings);
			if (manager.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider)
			{
				LocalAssembly = typeProvider.LocalAssembly;
			}
			designMode = manager.GetService(typeof(ITypeResolutionService)) != null;
		}

		internal void ContextPush(object objectToPush)
		{
			if (currentContextStackDepth >= AppSettings.XOMLMaximumNestedObjectDepth)
			{
				throw new WorkflowMarkupSerializationException(SR.GetString("Error_WorkflowLoadDeserializationFailed"));
			}
			Context.Push(objectToPush);
			currentContextStackDepth++;
		}

		internal void ContextPop()
		{
			if (Context.Pop() != null)
			{
				currentContextStackDepth--;
			}
		}

		public void ReportError(object errorInformation)
		{
			if (errorInformation == null)
			{
				throw new ArgumentNullException("errorInformation");
			}
			serializationManager.ReportError(errorInformation);
		}

		public void AddSerializationProvider(IDesignerSerializationProvider provider)
		{
			if (provider == null)
			{
				throw new ArgumentNullException("provider");
			}
			serializationManager.AddSerializationProvider(provider);
		}

		public void RemoveSerializationProvider(IDesignerSerializationProvider provider)
		{
			if (provider == null)
			{
				throw new ArgumentNullException("provider");
			}
			serializationManager.RemoveSerializationProvider(provider);
		}

		public virtual XmlQualifiedName GetXmlQualifiedName(Type type, out string prefix)
		{
			if (type == null)
			{
				throw new ArgumentNullException("type");
			}
			string text = ((type.Namespace != null) ? type.Namespace : string.Empty);
			string text2 = ((type.Assembly != null && type.Assembly != localAssembly) ? type.Assembly.FullName : string.Empty);
			WorkflowMarkupSerializerMapping value = null;
			int key = text.GetHashCode() ^ text2.GetHashCode();
			if (!clrNamespaceBasedMappings.TryGetValue(key, out value))
			{
				IList<WorkflowMarkupSerializerMapping> collectedMappings = null;
				WorkflowMarkupSerializerMapping.GetMappingFromType(this, type, out value, out collectedMappings);
				AddMappings(new List<WorkflowMarkupSerializerMapping>(new WorkflowMarkupSerializerMapping[1] { value }));
				AddMappings(collectedMappings);
			}
			string name = WorkflowMarkupSerializer.EnsureMarkupExtensionTypeName(type);
			prefix = (value.Prefix.Equals("wf", StringComparison.Ordinal) ? string.Empty : value.Prefix);
			return new XmlQualifiedName(name, value.XmlNamespace);
		}

		public virtual Type GetType(XmlQualifiedName xmlQualifiedName)
		{
			if (xmlQualifiedName == null)
			{
				throw new ArgumentNullException("xmlQualifiedName");
			}
			string @namespace = xmlQualifiedName.Namespace;
			string typeName = WorkflowMarkupSerializer.EnsureMarkupExtensionTypeName(xmlQualifiedName);
			Type value = null;
			cachedXmlQualifiedNameTypes.TryGetValue(xmlQualifiedName, out value);
			if (value == null)
			{
				value = WorkflowMarkupSerializerMapping.ResolveWellKnownTypes(this, @namespace, typeName);
			}
			if (value == null)
			{
				List<WorkflowMarkupSerializerMapping> value2 = null;
				if (!xmlNamespaceBasedMappings.TryGetValue(@namespace, out value2))
				{
					IList<WorkflowMarkupSerializerMapping> matchingMappings = null;
					IList<WorkflowMarkupSerializerMapping> collectedMappings = null;
					WorkflowMarkupSerializerMapping.GetMappingsFromXmlNamespace(this, @namespace, out matchingMappings, out collectedMappings);
					AddMappings(matchingMappings);
					AddMappings(collectedMappings);
					value2 = new List<WorkflowMarkupSerializerMapping>(matchingMappings);
				}
				foreach (WorkflowMarkupSerializerMapping item in value2)
				{
					string assemblyName = item.AssemblyName;
					string clrNamespace = item.ClrNamespace;
					string text = xmlQualifiedName.Name;
					if (clrNamespace.Length > 0)
					{
						text = clrNamespace + "." + xmlQualifiedName.Name;
					}
					if (assemblyName.Equals(Assembly.GetExecutingAssembly().FullName, StringComparison.Ordinal))
					{
						value = Assembly.GetExecutingAssembly().GetType(text);
					}
					else if (assemblyName.Length == 0)
					{
						if (localAssembly != null)
						{
							value = localAssembly.GetType(text);
						}
					}
					else
					{
						string text2 = text;
						if (assemblyName.Length > 0)
						{
							text2 = text2 + ", " + assemblyName;
						}
						try
						{
							value = GetType(text2);
						}
						catch
						{
						}
						if (value == null)
						{
							value = GetType(text);
							if (value != null && !value.AssemblyQualifiedName.Equals(text2, StringComparison.Ordinal))
							{
								value = null;
							}
						}
					}
					if (value != null)
					{
						cachedXmlQualifiedNameTypes[xmlQualifiedName] = value;
						break;
					}
				}
			}
			return value;
		}

		public object GetSerializer(Type objectType, Type serializerType)
		{
			return serializationManager.GetSerializer(objectType, serializerType);
		}

		public virtual Type GetType(string typeName)
		{
			if (typeName == null)
			{
				throw new ArgumentNullException("typeName");
			}
			Type type = null;
			if (designMode)
			{
				try
				{
					type = serializationManager.GetType(typeName);
				}
				catch
				{
				}
			}
			if (type == null && GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider)
			{
				type = typeProvider.GetType(typeName, throwOnError: false);
			}
			if (type != null)
			{
				return type;
			}
			string text = string.Empty;
			int num = typeName.IndexOf(",");
			string typeName2 = typeName;
			if (num > 0)
			{
				text = typeName.Substring(num + 1);
				typeName = typeName.Substring(0, num);
			}
			Assembly assembly = null;
			text = text.Trim();
			if (text.Length > 0)
			{
				if (text.IndexOf(',') >= 0)
				{
					try
					{
						assembly = Assembly.Load(text);
					}
					catch
					{
					}
				}
				typeName = typeName.Trim();
				type = ((!(assembly != null)) ? Type.GetType(typeName2, throwOnError: false) : assembly.GetType(typeName, throwOnError: false));
			}
			return type;
		}

		internal void FireFoundDefTag(WorkflowMarkupElementEventArgs args)
		{
			if (this.FoundDefTag != null)
			{
				this.FoundDefTag(this, args);
			}
		}

		internal void AddMappings(IList<WorkflowMarkupSerializerMapping> mappingsToAdd)
		{
			foreach (WorkflowMarkupSerializerMapping item in mappingsToAdd)
			{
				if (!clrNamespaceBasedMappings.ContainsKey(item.GetHashCode()))
				{
					clrNamespaceBasedMappings.Add(item.GetHashCode(), item);
				}
				List<WorkflowMarkupSerializerMapping> value = null;
				if (!xmlNamespaceBasedMappings.TryGetValue(item.XmlNamespace, out value))
				{
					value = new List<WorkflowMarkupSerializerMapping>();
					xmlNamespaceBasedMappings.Add(item.XmlNamespace, value);
				}
				value.Add(item);
				List<WorkflowMarkupSerializerMapping> value2 = null;
				if (!prefixBasedMappings.TryGetValue(item.Prefix, out value2))
				{
					value2 = new List<WorkflowMarkupSerializerMapping>();
					prefixBasedMappings.Add(item.Prefix, value2);
				}
				value2.Add(item);
			}
		}

		internal ExtendedPropertyInfo[] GetExtendedProperties(object extendee)
		{
			List<ExtendedPropertyInfo> list = new List<ExtendedPropertyInfo>();
			foreach (WorkflowMarkupSerializer extendedPropertiesProvider in ExtendedPropertiesProviders)
			{
				list.AddRange(extendedPropertiesProvider.GetExtendedProperties(this, extendee));
			}
			return list.ToArray();
		}

		object IDesignerSerializationManager.CreateInstance(Type type, ICollection arguments, string name, bool addToContainer)
		{
			return serializationManager.CreateInstance(type, arguments, name, addToContainer);
		}

		object IDesignerSerializationManager.GetInstance(string name)
		{
			return serializationManager.GetInstance(name);
		}

		string IDesignerSerializationManager.GetName(object value)
		{
			return serializationManager.GetName(value);
		}

		void IDesignerSerializationManager.SetName(object instance, string name)
		{
			serializationManager.SetName(instance, name);
		}

		public object GetService(Type serviceType)
		{
			if (serviceType == null)
			{
				throw new ArgumentNullException("serviceType");
			}
			return serializationManager.GetService(serviceType);
		}
	}
	[Serializable]
	public class WorkflowMarkupSerializationException : Exception
	{
		private int lineNumber = -1;

		private int columnNumber = -1;

		public int LineNumber => lineNumber;

		public int LinePosition => columnNumber;

		public WorkflowMarkupSerializationException(string message, int lineNumber, int columnNumber)
			: base(message)
		{
			this.lineNumber = lineNumber;
			this.columnNumber = columnNumber;
		}

		public WorkflowMarkupSerializationException(string message, Exception innerException, int lineNumber, int columnNumber)
			: base(message, innerException)
		{
			this.lineNumber = lineNumber;
			this.columnNumber = columnNumber;
		}

		public WorkflowMarkupSerializationException(string message, Exception innerException)
			: base(message, innerException)
		{
		}

		public WorkflowMarkupSerializationException(string message)
			: base(message)
		{
		}

		public WorkflowMarkupSerializationException()
		{
		}

		protected WorkflowMarkupSerializationException(SerializationInfo info, StreamingContext context)
			: base(info, context)
		{
			if (info == null)
			{
				throw new ArgumentNullException("info");
			}
			lineNumber = info.GetInt32("lineNumber");
			columnNumber = info.GetInt32("columnNumber");
		}

		public override void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			if (info == null)
			{
				throw new ArgumentNullException("info");
			}
			base.GetObjectData(info, context);
			info.AddValue("lineNumber", lineNumber, typeof(int));
			info.AddValue("columnNumber", columnNumber, typeof(int));
		}
	}
	[DefaultSerializationProvider(typeof(WorkflowMarkupSerializationProvider))]
	public class WorkflowMarkupSerializer
	{
		private sealed class SerializerTypeAuthorizerClass : ITypeAuthorizer
		{
			private IList<AuthorizedType> authorizedTypes;

			public SerializerTypeAuthorizerClass(IList<AuthorizedType> authorizedTypes)
			{
				this.authorizedTypes = authorizedTypes;
			}

			public bool IsTypeAuthorized(Type typeToAuthorize)
			{
				if (typeToAuthorize == null)
				{
					throw new ArgumentNullException("typeToAuthorize");
				}
				bool flag = true;
				if (authorizedTypes != null)
				{
					foreach (AuthorizedType authorizedType in authorizedTypes)
					{
						if (authorizedType.RegularExpression.IsMatch(typeToAuthorize.AssemblyQualifiedName))
						{
							flag = string.Compare(bool.TrueString, authorizedType.Authorized, StringComparison.OrdinalIgnoreCase) == 0;
							if (!flag)
							{
								break;
							}
						}
					}
				}
				return flag;
			}
		}

		private sealed class SafeXmlNodeWriter : IDisposable
		{
			private XmlNodeType xmlNodeType;

			private WorkflowMarkupSerializationManager serializationManager;

			public SafeXmlNodeWriter(WorkflowMarkupSerializationManager serializationManager, object owner, object property, XmlNodeType xmlNodeType)
			{
				this.serializationManager = serializationManager;
				this.xmlNodeType = xmlNodeType;
				if (!(serializationManager.WorkflowMarkupStack[typeof(XmlWriter)] is XmlWriter xmlWriter))
				{
					throw new InvalidOperationException(SR.GetString("Error_InternalSerializerError"));
				}
				string prefix = string.Empty;
				string empty = string.Empty;
				string empty2 = string.Empty;
				if (property is DependencyProperty dependencyProperty)
				{
					if (!dependencyProperty.IsAttached && xmlNodeType == XmlNodeType.Attribute)
					{
						empty = dependencyProperty.Name;
						empty2 = string.Empty;
					}
					else
					{
						XmlQualifiedName xmlQualifiedName = this.serializationManager.GetXmlQualifiedName(dependencyProperty.OwnerType, out prefix);
						empty = xmlQualifiedName.Name + "." + dependencyProperty.Name;
						empty2 = xmlQualifiedName.Namespace;
					}
				}
				else if (property is MemberInfo)
				{
					ExtendedPropertyInfo extendedPropertyInfo = property as ExtendedPropertyInfo;
					if (extendedPropertyInfo != null)
					{
						XmlQualifiedName xmlQualifiedName2 = extendedPropertyInfo.GetXmlQualifiedName(this.serializationManager, out prefix);
						empty = xmlQualifiedName2.Name;
						empty2 = xmlQualifiedName2.Namespace;
					}
					else if (this.xmlNodeType == XmlNodeType.Element)
					{
						XmlQualifiedName xmlQualifiedName3 = this.serializationManager.GetXmlQualifiedName(owner.GetType(), out prefix);
						empty = xmlQualifiedName3.Name + "." + ((MemberInfo)property).Name;
						empty2 = xmlQualifiedName3.Namespace;
					}
					else
					{
						empty = ((MemberInfo)property).Name;
						empty2 = string.Empty;
					}
				}
				else
				{
					XmlQualifiedName xmlQualifiedName4 = this.serializationManager.GetXmlQualifiedName(owner.GetType(), out prefix);
					empty = xmlQualifiedName4.Name;
					empty2 = xmlQualifiedName4.Namespace;
				}
				empty = XmlConvert.EncodeName(empty);
				if (this.xmlNodeType == XmlNodeType.Element)
				{
					xmlWriter.WriteStartElement(prefix, empty, empty2);
					this.serializationManager.WriterDepth++;
				}
				else if (this.xmlNodeType == XmlNodeType.Attribute)
				{
					xmlWriter.WriteStartAttribute(prefix, empty, empty2);
				}
			}

			void IDisposable.Dispose()
			{
				if (serializationManager.WorkflowMarkupStack[typeof(XmlWriter)] is XmlWriter { WriteState: not WriteState.Error } xmlWriter)
				{
					if (xmlNodeType == XmlNodeType.Element)
					{
						xmlWriter.WriteEndElement();
						serializationManager.WriterDepth--;
					}
					else if (xmlWriter.WriteState == WriteState.Attribute)
					{
						xmlWriter.WriteEndAttribute();
					}
				}
			}
		}

		private class ContentProperty : IDisposable
		{
			private WorkflowMarkupSerializationManager serializationManager;

			private WorkflowMarkupSerializer parentObjectSerializer;

			private object parentObject;

			private PropertyInfo contentProperty;

			private WorkflowMarkupSerializer contentPropertySerializer;

			internal PropertyInfo Property => contentProperty;

			public ContentProperty(WorkflowMarkupSerializationManager serializationManager, WorkflowMarkupSerializer parentObjectSerializer, object parentObject)
			{
				this.serializationManager = serializationManager;
				this.parentObjectSerializer = parentObjectSerializer;
				this.parentObject = parentObject;
				contentProperty = GetContentProperty(this.serializationManager, this.parentObject);
				if (!(contentProperty != null))
				{
					return;
				}
				contentPropertySerializer = this.serializationManager.GetSerializer(contentProperty.PropertyType, typeof(WorkflowMarkupSerializer)) as WorkflowMarkupSerializer;
				if (contentPropertySerializer != null)
				{
					try
					{
						XmlReader xmlReader = this.serializationManager.WorkflowMarkupStack[typeof(XmlReader)] as XmlReader;
						object obj = null;
						if (xmlReader == null)
						{
							obj = contentProperty.GetValue(this.parentObject, null);
						}
						else if (!contentProperty.PropertyType.IsValueType && !contentProperty.PropertyType.IsPrimitive && contentProperty.PropertyType != typeof(string) && !IsMarkupExtension(contentProperty.PropertyType) && contentProperty.CanWrite)
						{
							if (!(serializationManager.GetSerializer(contentProperty.PropertyType, typeof(WorkflowMarkupSerializer)) is WorkflowMarkupSerializer workflowMarkupSerializer))
							{
								serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerNotAvailable", contentProperty.PropertyType.FullName), xmlReader));
								return;
							}
							try
							{
								obj = workflowMarkupSerializer.CreateInstance(serializationManager, contentProperty.PropertyType);
							}
							catch (Exception ex)
							{
								serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerCreateInstanceFailed", contentProperty.PropertyType.FullName, ex.Message), xmlReader));
								return;
							}
							contentProperty.SetValue(this.parentObject, obj, null);
						}
						if (obj != null && xmlReader != null)
						{
							contentPropertySerializer.OnBeforeDeserialize(this.serializationManager, obj);
							contentPropertySerializer.OnBeforeDeserializeContents(this.serializationManager, obj);
						}
						return;
					}
					catch (Exception ex2)
					{
						this.serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", this.parentObject.GetType(), ex2.Message), ex2));
						return;
					}
				}
				this.serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerNotAvailableForSerialize", contentProperty.PropertyType.FullName)));
			}

			void IDisposable.Dispose()
			{
				if (!(serializationManager.WorkflowMarkupStack[typeof(XmlReader)] is XmlReader) || !(contentProperty != null) || contentPropertySerializer == null)
				{
					return;
				}
				try
				{
					object value = contentProperty.GetValue(parentObject, null);
					if (value != null)
					{
						contentPropertySerializer.OnAfterDeserialize(serializationManager, value);
					}
				}
				catch (Exception ex)
				{
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", parentObject.GetType(), ex.Message), ex));
				}
			}

			internal object GetContents()
			{
				object obj = null;
				if (contentProperty != null)
				{
					return contentProperty.GetValue(parentObject, null);
				}
				return parentObjectSerializer.GetChildren(serializationManager, parentObject);
			}

			internal void SetContents(IList<ContentInfo> contents)
			{
				if (contents.Count == 0)
				{
					return;
				}
				if (contentProperty == null)
				{
					int num = 0;
					try
					{
						foreach (ContentInfo content in contents)
						{
							parentObjectSerializer.AddChild(serializationManager, parentObject, content.Content);
							num++;
						}
						return;
					}
					catch (Exception ex)
					{
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", parentObject.GetType(), ex.Message), ex, contents[num].LineNumber, contents[num].LinePosition));
						return;
					}
				}
				if (contentPropertySerializer == null)
				{
					return;
				}
				object value = contentProperty.GetValue(parentObject, null);
				if (CollectionMarkupSerializer.IsValidCollectionType(contentProperty.PropertyType))
				{
					if (value == null)
					{
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_ContentPropertyCanNotBeNull", contentProperty.Name, parentObject.GetType().FullName)));
						return;
					}
					int num2 = 0;
					try
					{
						foreach (ContentInfo content2 in contents)
						{
							contentPropertySerializer.AddChild(serializationManager, value, content2.Content);
							num2++;
						}
						return;
					}
					catch (Exception ex2)
					{
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", parentObject.GetType(), ex2.Message), ex2, contents[num2].LineNumber, contents[num2].LinePosition));
						return;
					}
				}
				if (!contentProperty.CanWrite)
				{
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_ContentPropertyNoSetter", contentProperty.Name, parentObject.GetType()), contents[0].LineNumber, contents[0].LinePosition));
					return;
				}
				if (contents.Count > 1)
				{
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_ContentPropertyNoMultipleContents", contentProperty.Name, parentObject.GetType()), contents[1].LineNumber, contents[1].LinePosition));
				}
				object obj = contents[0].Content;
				if (!contentProperty.PropertyType.IsAssignableFrom(obj.GetType()) && typeof(string).IsAssignableFrom(obj.GetType()))
				{
					try
					{
						obj = contentPropertySerializer.DeserializeFromString(serializationManager, contentProperty.PropertyType, obj as string);
						obj = GetValueFromMarkupExtension(serializationManager, obj);
					}
					catch (Exception ex3)
					{
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", parentObject.GetType(), ex3.Message), ex3, contents[0].LineNumber, contents[0].LinePosition));
						return;
					}
				}
				if (obj == null)
				{
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_ContentCanNotBeConverted", obj as string, contentProperty.Name, parentObject.GetType().FullName, contentProperty.PropertyType.FullName), contents[0].LineNumber, contents[0].LinePosition));
					return;
				}
				if (!contentProperty.PropertyType.IsAssignableFrom(obj.GetType()))
				{
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_ContentPropertyValueInvalid", obj.GetType(), contentProperty.Name, contentProperty.PropertyType.FullName), contents[0].LineNumber, contents[0].LinePosition));
					return;
				}
				try
				{
					if (contentProperty.PropertyType == typeof(string))
					{
						obj = new WorkflowMarkupSerializer().DeserializeFromString(serializationManager, contentProperty.PropertyType, obj as string);
						obj = GetValueFromMarkupExtension(serializationManager, obj);
					}
					contentProperty.SetValue(parentObject, obj, null);
				}
				catch (Exception ex4)
				{
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", parentObject.GetType(), ex4.Message), ex4, contents[0].LineNumber, contents[0].LinePosition));
				}
			}

			private PropertyInfo GetContentProperty(WorkflowMarkupSerializationManager serializationManager, object parentObject)
			{
				PropertyInfo propertyInfo = null;
				string text = string.Empty;
				object[] customAttributes = parentObject.GetType().GetCustomAttributes(typeof(ContentPropertyAttribute), inherit: true);
				if (customAttributes != null && customAttributes.Length != 0)
				{
					text = ((ContentPropertyAttribute)customAttributes[0]).Name;
				}
				if (!string.IsNullOrEmpty(text))
				{
					propertyInfo = parentObject.GetType().GetProperty(text, BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy);
					if (propertyInfo == null)
					{
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_ContentPropertyCouldNotBeFound", text, parentObject.GetType().FullName)));
					}
				}
				return propertyInfo;
			}
		}

		private struct ContentInfo
		{
			public int LineNumber;

			public int LinePosition;

			public object Content;

			public ContentInfo(object content, int lineNumber, int linePosition)
			{
				Content = content;
				LineNumber = lineNumber;
				LinePosition = linePosition;
			}
		}

		public static readonly DependencyProperty XClassProperty = DependencyProperty.RegisterAttached("XClass", typeof(string), typeof(WorkflowMarkupSerializer), new PropertyMetadata(DependencyPropertyOptions.Metadata, new BrowsableAttribute(browsable: false), new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));

		public static readonly DependencyProperty XCodeProperty = DependencyProperty.RegisterAttached("XCode", typeof(CodeTypeMemberCollection), typeof(WorkflowMarkupSerializer), new PropertyMetadata(DependencyPropertyOptions.Metadata, new BrowsableAttribute(browsable: false), new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)));

		public static readonly DependencyProperty EventsProperty = DependencyProperty.RegisterAttached("Events", typeof(Hashtable), typeof(WorkflowMarkupSerializer), new PropertyMetadata(null, new Attribute[1]
		{
			new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)
		}));

		public static readonly DependencyProperty ClrNamespacesProperty = DependencyProperty.RegisterAttached("ClrNamespaces", typeof(List<string>), typeof(WorkflowMarkupSerializer), new PropertyMetadata(null, new Attribute[1]
		{
			new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)
		}));

		private static volatile ReadOnlyCollection<AuthorizedType> StaticAuthorizedTypes;

		private static object StaticAuthTypesLockObject = new object();

		public object Deserialize(XmlReader reader)
		{
			if (reader == null)
			{
				throw new ArgumentNullException("reader");
			}
			DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager();
			using (designerSerializationManager.CreateSession())
			{
				return Deserialize(designerSerializationManager, reader);
			}
		}

		public object Deserialize(IDesignerSerializationManager serializationManager, XmlReader reader)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (reader == null)
			{
				throw new ArgumentNullException("reader");
			}
			if (!AppSettings.DisableXOMLSerializerTypeChecking)
			{
				GetAuthorizedTypes();
				SerializerTypeAuthorizerClass serializationTypeAuthorizer = new SerializerTypeAuthorizerClass(StaticAuthorizedTypes);
				WorkflowMarkupSerializationHelpers.SerializationTypeAuthorizer = serializationTypeAuthorizer;
			}
			WorkflowMarkupSerializationManager markupSerializationManager = serializationManager as WorkflowMarkupSerializationManager;
			if (markupSerializationManager == null)
			{
				markupSerializationManager = new WorkflowMarkupSerializationManager(serializationManager);
			}
			string fileName = markupSerializationManager.Context[typeof(string)] as string;
			if (fileName == null)
			{
				fileName = string.Empty;
			}
			markupSerializationManager.FoundDefTag += delegate(object sender, WorkflowMarkupElementEventArgs eventArgs)
			{
				if (eventArgs.XmlReader.LookupNamespace(eventArgs.XmlReader.Prefix) == "http://schemas.microsoft.com/winfx/2006/xaml")
				{
					WorkflowMarkupSerializationHelpers.ProcessDefTag(markupSerializationManager, eventArgs.XmlReader, markupSerializationManager.Context.Current as Activity, newSegment: false, fileName);
				}
			};
			object obj = DeserializeXoml(markupSerializationManager, reader);
			if (obj is Activity activity)
			{
				List<string> list = activity.GetValue(ClrNamespacesProperty) as List<string>;
				if (list == null)
				{
					list = new List<string>();
					activity.SetValue(ClrNamespacesProperty, list);
				}
				foreach (WorkflowMarkupSerializerMapping value in markupSerializationManager.ClrNamespaceBasedMappings.Values)
				{
					list.Add(value.ClrNamespace);
				}
				activity.SetValue(ActivityCodeDomSerializer.MarkupFileNameProperty, fileName);
				if ((string.IsNullOrEmpty(activity.Name) || activity.Name == activity.GetType().Name) && !string.IsNullOrEmpty(activity.GetValue(XClassProperty) as string))
				{
					string text = activity.GetValue(XClassProperty) as string;
					if (text.Contains("."))
					{
						activity.Name = text.Substring(text.LastIndexOf('.') + 1);
					}
					else
					{
						activity.Name = text;
					}
				}
			}
			return obj;
		}

		private object DeserializeXoml(WorkflowMarkupSerializationManager serializationManager, XmlReader xmlReader)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (xmlReader == null)
			{
				throw new ArgumentNullException("xmlReader");
			}
			object result = null;
			serializationManager.WorkflowMarkupStack.Push(xmlReader);
			try
			{
				while (xmlReader.Read() && xmlReader.NodeType != XmlNodeType.Element && xmlReader.NodeType != XmlNodeType.ProcessingInstruction)
				{
				}
				if (xmlReader.EOF)
				{
					return null;
				}
				result = DeserializeObject(serializationManager, xmlReader);
				while (xmlReader.Read() && !xmlReader.EOF)
				{
				}
			}
			catch (XmlException ex)
			{
				throw new WorkflowMarkupSerializationException(ex.Message, ex, ex.LineNumber, ex.LinePosition);
			}
			catch (Exception e)
			{
				throw CreateSerializationError(e, xmlReader);
			}
			finally
			{
				serializationManager.WorkflowMarkupStack.Pop();
			}
			return result;
		}

		public void Serialize(XmlWriter writer, object obj)
		{
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (writer == null)
			{
				throw new ArgumentNullException("writer");
			}
			DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager();
			using (designerSerializationManager.CreateSession())
			{
				Serialize(designerSerializationManager, writer, obj);
			}
		}

		public void Serialize(IDesignerSerializationManager serializationManager, XmlWriter writer, object obj)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (writer == null)
			{
				throw new ArgumentNullException("writer");
			}
			WorkflowMarkupSerializationManager workflowMarkupSerializationManager = serializationManager as WorkflowMarkupSerializationManager;
			if (workflowMarkupSerializationManager == null)
			{
				workflowMarkupSerializationManager = new WorkflowMarkupSerializationManager(serializationManager);
			}
			StringWriter stringWriter = new StringWriter(CultureInfo.InvariantCulture);
			XmlWriter xmlWriter = Helpers.CreateXmlWriter(stringWriter);
			workflowMarkupSerializationManager.WorkflowMarkupStack.Push(xmlWriter);
			workflowMarkupSerializationManager.WorkflowMarkupStack.Push(stringWriter);
			try
			{
				SerializeObject(workflowMarkupSerializationManager, obj, xmlWriter);
			}
			finally
			{
				xmlWriter.Close();
				writer.WriteRaw(stringWriter.ToString());
				writer.Flush();
				workflowMarkupSerializationManager.WorkflowMarkupStack.Pop();
				workflowMarkupSerializationManager.WorkflowMarkupStack.Pop();
			}
		}

		internal object DeserializeObject(WorkflowMarkupSerializationManager serializationManager, XmlReader reader)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (reader == null)
			{
				throw new ArgumentNullException("reader");
			}
			object obj = null;
			try
			{
				serializationManager.WorkflowMarkupStack.Push(reader);
				AdvanceReader(reader);
				if (reader.NodeType != XmlNodeType.Element)
				{
					serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_InvalidDataFound"), reader));
				}
				else
				{
					string name = XmlConvert.DecodeName(reader.LocalName);
					XmlQualifiedName xmlQualifiedName = new XmlQualifiedName(name, reader.LookupNamespace(reader.Prefix));
					if (xmlQualifiedName.Namespace.Equals("http://schemas.microsoft.com/winfx/2006/xaml", StringComparison.Ordinal) && !IsMarkupExtension(xmlQualifiedName) && !ExtendedPropertyInfo.IsExtendedProperty(serializationManager, xmlQualifiedName))
					{
						int depth = reader.Depth;
						serializationManager.FireFoundDefTag(new WorkflowMarkupElementEventArgs(reader));
						if (depth + 1 < reader.Depth)
						{
							while (reader.Read() && depth + 1 < reader.Depth)
							{
							}
						}
					}
					else
					{
						obj = CreateInstance(serializationManager, xmlQualifiedName, reader);
						reader.MoveToElement();
						if (obj != null)
						{
							serializationManager.ContextPush(obj);
							try
							{
								DeserializeContents(serializationManager, obj, reader);
							}
							finally
							{
								serializationManager.ContextPop();
							}
						}
					}
				}
			}
			finally
			{
				serializationManager.WorkflowMarkupStack.Pop();
			}
			return obj;
		}

		private void DeserializeContents(WorkflowMarkupSerializationManager serializationManager, object obj, XmlReader reader)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (reader == null)
			{
				throw new ArgumentNullException("reader");
			}
			if (reader.NodeType != XmlNodeType.Element)
			{
				return;
			}
			if (!(serializationManager.GetSerializer(obj.GetType(), typeof(WorkflowMarkupSerializer)) is WorkflowMarkupSerializer workflowMarkupSerializer))
			{
				serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerNotAvailable", obj.GetType().FullName), reader));
				return;
			}
			try
			{
				workflowMarkupSerializer.OnBeforeDeserialize(serializationManager, obj);
			}
			catch (Exception ex)
			{
				serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", obj.GetType().FullName, ex.Message), ex));
				return;
			}
			bool isEmptyElement = reader.IsEmptyElement;
			string namespaceURI = reader.NamespaceURI;
			List<PropertyInfo> list = new List<PropertyInfo>();
			List<EventInfo> list2 = new List<EventInfo>();
			if (obj.GetType().IsPrimitive || obj.GetType() == typeof(string) || obj.GetType() == typeof(decimal) || obj.GetType().IsEnum || obj.GetType() == typeof(DateTime) || obj.GetType() == typeof(TimeSpan) || obj.GetType() == typeof(Guid))
			{
				list.AddRange(serializationManager.GetExtendedProperties(obj));
			}
			else
			{
				try
				{
					list.AddRange(workflowMarkupSerializer.GetProperties(serializationManager, obj));
					list.AddRange(serializationManager.GetExtendedProperties(obj));
					list2.AddRange(workflowMarkupSerializer.GetEvents(serializationManager, obj));
				}
				catch (Exception ex2)
				{
					serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerThrewException", obj.GetType(), ex2.Message), ex2, reader));
					return;
				}
			}
			if (reader.HasAttributes)
			{
				while (reader.MoveToNextAttribute())
				{
					if (reader.LocalName.Equals("xmlns", StringComparison.Ordinal) || reader.Prefix.Equals("xmlns", StringComparison.Ordinal))
					{
						continue;
					}
					XmlQualifiedName xmlQualifiedName = new XmlQualifiedName(reader.LocalName, reader.LookupNamespace(reader.Prefix));
					if (xmlQualifiedName.Namespace.Equals("http://schemas.microsoft.com/winfx/2006/xaml", StringComparison.Ordinal) && !IsMarkupExtension(xmlQualifiedName) && !ExtendedPropertyInfo.IsExtendedProperty(serializationManager, list, xmlQualifiedName) && !ExtendedPropertyInfo.IsExtendedProperty(serializationManager, xmlQualifiedName))
					{
						serializationManager.FireFoundDefTag(new WorkflowMarkupElementEventArgs(reader));
						continue;
					}
					string text = XmlConvert.DecodeName(reader.LocalName);
					string value = reader.Value;
					DependencyProperty dependencyProperty = ResolveDependencyProperty(serializationManager, reader, obj, text);
					if (dependencyProperty != null)
					{
						serializationManager.ContextPush(dependencyProperty);
						try
						{
							if (dependencyProperty.IsEvent)
							{
								DeserializeEvent(serializationManager, reader, obj, value);
							}
							else
							{
								DeserializeSimpleProperty(serializationManager, reader, obj, value);
							}
						}
						finally
						{
							serializationManager.ContextPop();
						}
						continue;
					}
					PropertyInfo propertyInfo = LookupProperty(list, text);
					if (propertyInfo != null)
					{
						serializationManager.ContextPush(propertyInfo);
						try
						{
							DeserializeSimpleProperty(serializationManager, reader, obj, value);
						}
						finally
						{
							serializationManager.ContextPop();
						}
						continue;
					}
					EventInfo eventInfo = LookupEvent(list2, text);
					if (list2 != null && eventInfo != null)
					{
						serializationManager.ContextPush(eventInfo);
						try
						{
							DeserializeEvent(serializationManager, reader, obj, value);
						}
						finally
						{
							serializationManager.ContextPop();
						}
					}
					else
					{
						serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerNoMemberFound", text, obj.GetType().FullName), reader));
					}
				}
			}
			try
			{
				workflowMarkupSerializer.OnBeforeDeserializeContents(serializationManager, obj);
			}
			catch (Exception ex3)
			{
				serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", obj.GetType().FullName, ex3.Message), ex3));
				return;
			}
			try
			{
				workflowMarkupSerializer.ClearChildren(serializationManager, obj);
			}
			catch (Exception ex4)
			{
				serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerThrewException", obj.GetType(), ex4.Message), ex4, reader));
				return;
			}
			using (ContentProperty contentProperty = new ContentProperty(serializationManager, workflowMarkupSerializer, obj))
			{
				List<ContentInfo> list3 = new List<ContentInfo>();
				if (!isEmptyElement)
				{
					reader.MoveToElement();
					int depth = reader.Depth;
					XmlQualifiedName xmlQualifiedName2 = new XmlQualifiedName(reader.LocalName, reader.LookupNamespace(reader.Prefix));
					do
					{
						if (xmlQualifiedName2 != null && !ExtendedPropertyInfo.IsExtendedProperty(serializationManager, xmlQualifiedName2))
						{
							xmlQualifiedName2 = null;
							continue;
						}
						if (depth + 1 < reader.Depth)
						{
							bool flag = false;
							while (reader.Read() && depth + 1 < reader.Depth)
							{
								if (reader.NodeType != XmlNodeType.Comment && reader.NodeType != XmlNodeType.Whitespace && !flag)
								{
									serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_InvalidDataFoundForType", obj.GetType().FullName), reader));
									flag = true;
								}
							}
						}
						AdvanceReader(reader);
						if (reader.NodeType == XmlNodeType.Element)
						{
							XmlQualifiedName xmlQualifiedName3 = new XmlQualifiedName(reader.LocalName, reader.LookupNamespace(reader.Prefix));
							int num = reader.LocalName.IndexOf('.');
							if (num > 0 || ExtendedPropertyInfo.IsExtendedProperty(serializationManager, xmlQualifiedName3))
							{
								string propertyName = reader.LocalName.Substring(reader.LocalName.IndexOf('.') + 1);
								PropertyInfo propertyInfo2 = LookupProperty(list, propertyName);
								DependencyProperty dependencyProperty2 = ResolveDependencyProperty(serializationManager, reader, obj, reader.LocalName);
								if (dependencyProperty2 == null && propertyInfo2 == null)
								{
									serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_InvalidElementFoundForType", reader.LocalName, obj.GetType().FullName), reader));
								}
								else if (dependencyProperty2 != null)
								{
									PropertyInfo propertyInfo3 = LookupProperty(list, dependencyProperty2.Name);
									serializationManager.ContextPush(dependencyProperty2);
									try
									{
										DeserializeCompoundProperty(serializationManager, reader, obj);
									}
									finally
									{
										serializationManager.ContextPop();
									}
								}
								else if (propertyInfo2 != null)
								{
									serializationManager.ContextPush(propertyInfo2);
									try
									{
										DeserializeCompoundProperty(serializationManager, reader, obj);
									}
									finally
									{
										serializationManager.ContextPop();
									}
								}
								continue;
							}
							int lineNumber = ((!(reader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)reader).LineNumber);
							int linePosition = ((!(reader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)reader).LinePosition);
							object obj2 = DeserializeObject(serializationManager, reader);
							if (obj2 != null)
							{
								obj2 = GetValueFromMarkupExtension(serializationManager, obj2);
								if (obj2 != null && obj2.GetType() == typeof(string) && ((string)obj2).StartsWith("{}", StringComparison.Ordinal))
								{
									obj2 = ((string)obj2).Substring(2);
								}
								list3.Add(new ContentInfo(obj2, lineNumber, linePosition));
							}
						}
						else if (reader.NodeType == XmlNodeType.Text && contentProperty.Property != null)
						{
							int lineNumber2 = ((!(reader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)reader).LineNumber);
							int linePosition2 = ((!(reader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)reader).LinePosition);
							list3.Add(new ContentInfo(reader.ReadString(), lineNumber2, linePosition2));
							if (depth >= reader.Depth)
							{
								break;
							}
						}
						else if (reader.NodeType == XmlNodeType.Entity || reader.NodeType == XmlNodeType.Text || reader.NodeType == XmlNodeType.CDATA)
						{
							serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_InvalidDataFound", reader.Value.Trim(), obj.GetType().FullName), reader));
						}
					}
					while (reader.Read() && depth < reader.Depth);
				}
				contentProperty.SetContents(list3);
			}
			try
			{
				workflowMarkupSerializer.OnAfterDeserialize(serializationManager, obj);
			}
			catch (Exception ex5)
			{
				serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", obj.GetType().FullName, ex5.Message), ex5));
			}
		}

		internal void SerializeObject(WorkflowMarkupSerializationManager serializationManager, object obj, XmlWriter writer)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (writer == null)
			{
				throw new ArgumentNullException("writer");
			}
			try
			{
				serializationManager.WorkflowMarkupStack.Push(writer);
				using (new SafeXmlNodeWriter(serializationManager, obj, null, XmlNodeType.Element))
				{
					DictionaryEntry? dictionaryEntry = null;
					if (serializationManager.WorkflowMarkupStack[typeof(DictionaryEntry)] != null)
					{
						dictionaryEntry = (DictionaryEntry)serializationManager.WorkflowMarkupStack[typeof(DictionaryEntry)];
					}
					bool flag = dictionaryEntry.HasValue && ((!dictionaryEntry.Value.GetType().IsValueType && dictionaryEntry.Value.Key == dictionaryEntry.Value.Value && dictionaryEntry.Value.Value == obj) || (dictionaryEntry.Value.GetType().IsValueType && dictionaryEntry.Value.Key.Equals(dictionaryEntry.Value.Value) && dictionaryEntry.Value.Value.Equals(obj))) && serializationManager.SerializationStack.Contains(obj);
					if (flag || !serializationManager.SerializationStack.Contains(obj))
					{
						serializationManager.ContextPush(obj);
						serializationManager.SerializationStack.Push(obj);
						try
						{
							SerializeContents(serializationManager, obj, writer, flag);
							return;
						}
						finally
						{
							serializationManager.ContextPop();
							serializationManager.SerializationStack.Pop();
						}
					}
					throw new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerStackOverflow", obj.ToString(), obj.GetType().FullName), 0, 0);
				}
			}
			finally
			{
				serializationManager.WorkflowMarkupStack.Pop();
			}
		}

		internal void SerializeContents(WorkflowMarkupSerializationManager serializationManager, object obj, XmlWriter writer, bool dictionaryKey)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (writer == null)
			{
				throw new ArgumentNullException("writer");
			}
			WorkflowMarkupSerializer workflowMarkupSerializer = null;
			try
			{
				workflowMarkupSerializer = serializationManager.GetSerializer(obj.GetType(), typeof(WorkflowMarkupSerializer)) as WorkflowMarkupSerializer;
			}
			catch (Exception ex)
			{
				serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", obj.GetType().FullName, ex.Message), ex));
				return;
			}
			if (workflowMarkupSerializer == null)
			{
				serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerNotAvailableForSerialize", obj.GetType().FullName)));
				return;
			}
			try
			{
				workflowMarkupSerializer.OnBeforeSerialize(serializationManager, obj);
			}
			catch (Exception ex2)
			{
				serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", obj.GetType().FullName, ex2.Message), ex2));
				return;
			}
			Hashtable hashtable = new Hashtable();
			ArrayList arrayList = new ArrayList();
			IDictionary<DependencyProperty, object> dictionary = null;
			List<PropertyInfo> list = new List<PropertyInfo>();
			List<EventInfo> list2 = new List<EventInfo>();
			Hashtable hashtable2 = null;
			if (obj.GetType().IsPrimitive || obj.GetType() == typeof(string) || obj.GetType() == typeof(decimal) || obj.GetType() == typeof(DateTime) || obj.GetType() == typeof(TimeSpan) || obj.GetType().IsEnum || obj.GetType() == typeof(Guid))
			{
				if (obj.GetType() == typeof(char) || obj.GetType() == typeof(byte) || obj.GetType() == typeof(short) || obj.GetType() == typeof(decimal) || obj.GetType() == typeof(DateTime) || obj.GetType() == typeof(TimeSpan) || obj.GetType().IsEnum || obj.GetType() == typeof(Guid))
				{
					if (obj.GetType() != typeof(char) || (char)obj != 0)
					{
						string empty = string.Empty;
						if (obj.GetType() == typeof(DateTime))
						{
							empty = ((DateTime)obj).ToString("o", CultureInfo.InvariantCulture);
						}
						else
						{
							TypeConverter converter = TypeDescriptor.GetConverter(obj.GetType());
							empty = ((converter == null || !converter.CanConvertTo(typeof(string))) ? Convert.ToString(obj, CultureInfo.InvariantCulture) : (converter.ConvertTo(null, CultureInfo.InvariantCulture, obj, typeof(string)) as string));
						}
						writer.WriteValue(empty);
					}
				}
				else if (obj.GetType() == typeof(string))
				{
					string text = obj as string;
					text = text.Replace('\0', ' ');
					if (!text.StartsWith("{", StringComparison.Ordinal) || !text.EndsWith("}", StringComparison.Ordinal))
					{
						writer.WriteValue(text);
					}
					else
					{
						writer.WriteValue("{}" + text);
					}
				}
				else
				{
					writer.WriteValue(obj);
				}
				if (!dictionaryKey)
				{
					list.AddRange(serializationManager.GetExtendedProperties(obj));
				}
			}
			else
			{
				try
				{
					if (obj is DependencyObject && ((DependencyObject)obj).UserData.Contains(UserDataKeys.DesignTimeTypeNames))
					{
						hashtable2 = ((DependencyObject)obj).UserData[UserDataKeys.DesignTimeTypeNames] as Hashtable;
					}
					dictionary = workflowMarkupSerializer.GetDependencyProperties(serializationManager, obj);
					list.AddRange(workflowMarkupSerializer.GetProperties(serializationManager, obj));
					if (!dictionaryKey)
					{
						list.AddRange(serializationManager.GetExtendedProperties(obj));
					}
					list2.AddRange(workflowMarkupSerializer.GetEvents(serializationManager, obj));
				}
				catch (Exception ex3)
				{
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", obj.GetType().FullName, ex3.Message), ex3));
					return;
				}
			}
			if (dictionary != null)
			{
				if (hashtable2 != null)
				{
					foreach (object key3 in hashtable2.Keys)
					{
						if (key3 is DependencyProperty key && !dictionary.ContainsKey(key))
						{
							dictionary.Add(key, hashtable2[key]);
						}
					}
				}
				foreach (DependencyProperty key4 in dictionary.Keys)
				{
					string empty2 = string.Empty;
					if (key4.IsAttached)
					{
						string prefix = string.Empty;
						XmlQualifiedName xmlQualifiedName = serializationManager.GetXmlQualifiedName(key4.OwnerType, out prefix);
						empty2 = xmlQualifiedName.Name + "." + key4.Name;
					}
					else
					{
						empty2 = key4.Name;
					}
					if (key4.IsAttached || !key4.DefaultMetadata.IsMetaProperty)
					{
						hashtable.Add(empty2, key4);
					}
				}
			}
			if (list != null)
			{
				foreach (PropertyInfo item in list)
				{
					if (item != null && !hashtable.ContainsKey(item.Name))
					{
						hashtable.Add(item.Name, item);
					}
				}
			}
			if (list2 != null)
			{
				foreach (EventInfo item2 in list2)
				{
					if (item2 != null && !hashtable.ContainsKey(item2.Name))
					{
						hashtable.Add(item2.Name, item2);
					}
				}
			}
			using (ContentProperty contentProperty = new ContentProperty(serializationManager, workflowMarkupSerializer, obj))
			{
				foreach (object value in hashtable.Values)
				{
					string text2 = string.Empty;
					object obj2 = null;
					Type type = null;
					try
					{
						if (value is PropertyInfo)
						{
							PropertyInfo propertyInfo = value as PropertyInfo;
							ParameterInfo[] indexParameters = propertyInfo.GetIndexParameters();
							if (indexParameters != null && indexParameters.Length != 0)
							{
								continue;
							}
							text2 = propertyInfo.Name;
							obj2 = null;
							if (propertyInfo.CanRead)
							{
								obj2 = propertyInfo.GetValue(obj, null);
								if (obj2 == null && TypeProvider.IsAssignable(typeof(Type), propertyInfo.PropertyType))
								{
									DependencyProperty dependencyProperty = DependencyProperty.FromName(propertyInfo.Name, propertyInfo.ReflectedType);
									if (dependencyProperty != null)
									{
										obj2 = Helpers.GetDesignTimeTypeName(obj, dependencyProperty);
									}
									if (obj2 == null)
									{
										string key2 = propertyInfo.ReflectedType.FullName + "." + propertyInfo.Name;
										obj2 = Helpers.GetDesignTimeTypeName(obj, key2);
									}
									if (obj2 != null)
									{
										obj2 = new TypeExtension((string)obj2);
									}
								}
							}
							type = propertyInfo.PropertyType;
						}
						else if (value is EventInfo)
						{
							EventInfo eventInfo = value as EventInfo;
							text2 = eventInfo.Name;
							obj2 = WorkflowMarkupSerializationHelpers.GetEventHandlerName(obj, eventInfo.Name);
							if ((obj2 == null || (obj2 is string && string.IsNullOrEmpty((string)obj2))) && obj is DependencyObject)
							{
								DependencyProperty dependencyProperty2 = DependencyProperty.FromName(text2, obj.GetType());
								if (dependencyProperty2 != null)
								{
									Activity activity = serializationManager.Context[typeof(Activity)] as Activity;
									if (((DependencyObject)obj).GetHandler(dependencyProperty2) is Delegate @delegate && activity != null && object.Equals(@delegate.Target.GetType(), Helpers.GetRootActivity(activity).GetType()))
									{
										obj2 = @delegate;
									}
								}
							}
							type = eventInfo.EventHandlerType;
						}
						else if (value is DependencyProperty)
						{
							DependencyProperty dependencyProperty3 = value as DependencyProperty;
							text2 = dependencyProperty3.Name;
							obj2 = dictionary[dependencyProperty3];
							type = dependencyProperty3.PropertyType;
						}
					}
					catch (Exception innerException)
					{
						while (innerException is TargetInvocationException && innerException.InnerException != null)
						{
							innerException = innerException.InnerException;
						}
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerPropertyGetFailed", text2, obj.GetType().FullName, innerException.Message)));
						continue;
					}
					if (value is PropertyInfo && contentProperty.Property == (PropertyInfo)value)
					{
						continue;
					}
					Type type2 = null;
					if (obj2 != null)
					{
						obj2 = GetMarkupExtensionFromValue(obj2);
						type2 = obj2.GetType();
					}
					else if (value is PropertyInfo)
					{
						obj2 = new NullExtension();
						type2 = obj2.GetType();
						Attribute[] customAttributes = Attribute.GetCustomAttributes(value as PropertyInfo, typeof(DefaultValueAttribute), inherit: true);
						if (customAttributes.Length != 0)
						{
							DefaultValueAttribute defaultValueAttribute = customAttributes[0] as DefaultValueAttribute;
							if (defaultValueAttribute.Value == null)
							{
								obj2 = null;
							}
						}
					}
					if (obj2 != null)
					{
						type2 = obj2.GetType();
					}
					serializationManager.ContextPush(value);
					WorkflowMarkupSerializer workflowMarkupSerializer2 = null;
					try
					{
						workflowMarkupSerializer2 = serializationManager.GetSerializer(type2, typeof(WorkflowMarkupSerializer)) as WorkflowMarkupSerializer;
					}
					catch (Exception ex4)
					{
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", obj.GetType().FullName, ex4.Message), ex4));
						serializationManager.ContextPop();
						continue;
					}
					if (workflowMarkupSerializer2 == null)
					{
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerNotAvailableForSerialize", type2.FullName)));
						serializationManager.ContextPop();
						continue;
					}
					try
					{
						if (!workflowMarkupSerializer2.ShouldSerializeValue(serializationManager, obj2))
						{
							continue;
						}
						if (workflowMarkupSerializer2.CanSerializeToString(serializationManager, obj2) && type != typeof(object))
						{
							using (new SafeXmlNodeWriter(serializationManager, obj, value, XmlNodeType.Attribute))
							{
								if (workflowMarkupSerializer2 is MarkupExtensionSerializer)
								{
									workflowMarkupSerializer2.SerializeToString(serializationManager, obj2);
									continue;
								}
								string text3 = workflowMarkupSerializer2.SerializeToString(serializationManager, obj2);
								if (!string.IsNullOrEmpty(text3))
								{
									text3 = text3.Replace('\0', ' ');
									if (obj2 is MarkupExtension || !text3.StartsWith("{", StringComparison.Ordinal) || !text3.EndsWith("}", StringComparison.Ordinal))
									{
										writer.WriteString(text3);
									}
									else
									{
										writer.WriteString("{}" + text3);
									}
								}
							}
						}
						else
						{
							arrayList.Add(value);
						}
					}
					catch (Exception innerException2)
					{
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerNoSerializeLogic", text2, obj.GetType().FullName), innerException2));
					}
					finally
					{
						serializationManager.ContextPop();
					}
				}
				try
				{
					workflowMarkupSerializer.OnBeforeSerializeContents(serializationManager, obj);
				}
				catch (Exception ex5)
				{
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", obj.GetType().FullName, ex5.Message), ex5));
					return;
				}
				foreach (object item3 in arrayList)
				{
					string text4 = string.Empty;
					object obj3 = null;
					Type type3 = null;
					bool flag = false;
					try
					{
						if (item3 is PropertyInfo)
						{
							PropertyInfo propertyInfo2 = item3 as PropertyInfo;
							text4 = propertyInfo2.Name;
							obj3 = (propertyInfo2.CanRead ? propertyInfo2.GetValue(obj, null) : null);
							type3 = obj.GetType();
							flag = !propertyInfo2.CanWrite;
						}
						else if (item3 is DependencyProperty)
						{
							DependencyProperty dependencyProperty4 = item3 as DependencyProperty;
							text4 = dependencyProperty4.Name;
							obj3 = dictionary[dependencyProperty4];
							type3 = dependencyProperty4.OwnerType;
							flag = (dependencyProperty4.DefaultMetadata.Options & DependencyPropertyOptions.ReadOnly) == DependencyPropertyOptions.ReadOnly;
						}
					}
					catch (Exception innerException3)
					{
						while (innerException3 is TargetInvocationException && innerException3.InnerException != null)
						{
							innerException3 = innerException3.InnerException;
						}
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerPropertyGetFailed", text4, type3.FullName, innerException3.Message)));
						continue;
					}
					if ((item3 is PropertyInfo && (PropertyInfo)item3 == contentProperty.Property) || obj3 == null)
					{
						continue;
					}
					obj3 = GetMarkupExtensionFromValue(obj3);
					if (serializationManager.GetSerializer(obj3.GetType(), typeof(WorkflowMarkupSerializer)) is WorkflowMarkupSerializer workflowMarkupSerializer3)
					{
						using (new SafeXmlNodeWriter(serializationManager, obj, item3, XmlNodeType.Element))
						{
							if (flag)
							{
								workflowMarkupSerializer3.SerializeContents(serializationManager, obj3, writer, dictionaryKey: false);
							}
							else
							{
								workflowMarkupSerializer3.SerializeObject(serializationManager, obj3, writer);
							}
						}
					}
					else
					{
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerNotAvailableForSerialize", obj3.GetType().FullName)));
					}
				}
				try
				{
					object contents = contentProperty.GetContents();
					if (contents != null)
					{
						contents = GetMarkupExtensionFromValue(contents);
						if (!(serializationManager.GetSerializer(contents.GetType(), typeof(WorkflowMarkupSerializer)) is WorkflowMarkupSerializer workflowMarkupSerializer4))
						{
							serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerNotAvailableForSerialize", contents.GetType())));
						}
						else if (workflowMarkupSerializer4.CanSerializeToString(serializationManager, contents) && (contentProperty.Property == null || contentProperty.Property.PropertyType != typeof(object)))
						{
							string text5 = workflowMarkupSerializer4.SerializeToString(serializationManager, contents);
							if (!string.IsNullOrEmpty(text5))
							{
								text5 = text5.Replace('\0', ' ');
								if (contents is MarkupExtension || !text5.StartsWith("{", StringComparison.Ordinal) || !text5.EndsWith("}", StringComparison.Ordinal))
								{
									writer.WriteString(text5);
								}
								else
								{
									writer.WriteString("{}" + text5);
								}
							}
						}
						else if (CollectionMarkupSerializer.IsValidCollectionType(contents.GetType()))
						{
							if (contentProperty.Property == null)
							{
								IEnumerable enumerable = contents as IEnumerable;
								foreach (object item4 in enumerable)
								{
									if (item4 == null)
									{
										SerializeObject(serializationManager, new NullExtension(), writer);
										continue;
									}
									object obj4 = item4;
									bool flag2 = obj4 is DictionaryEntry;
									try
									{
										if (flag2)
										{
											serializationManager.WorkflowMarkupStack.Push(item4);
											obj4 = ((DictionaryEntry)obj4).Value;
										}
										obj4 = GetMarkupExtensionFromValue(obj4);
										if (serializationManager.GetSerializer(obj4.GetType(), typeof(WorkflowMarkupSerializer)) is WorkflowMarkupSerializer workflowMarkupSerializer5)
										{
											workflowMarkupSerializer5.SerializeObject(serializationManager, obj4, writer);
											continue;
										}
										serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerNotAvailableForSerialize", obj4.GetType())));
									}
									finally
									{
										if (flag2)
										{
											serializationManager.WorkflowMarkupStack.Pop();
										}
									}
								}
							}
							else
							{
								workflowMarkupSerializer4.SerializeContents(serializationManager, contents, writer, dictionaryKey: false);
							}
						}
						else
						{
							workflowMarkupSerializer4.SerializeObject(serializationManager, contents, writer);
						}
					}
				}
				catch (Exception ex6)
				{
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", obj.GetType().FullName, ex6.Message), ex6));
					return;
				}
			}
			try
			{
				workflowMarkupSerializer.OnAfterSerialize(serializationManager, obj);
			}
			catch (Exception ex7)
			{
				serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerThrewException", obj.GetType().FullName, ex7.Message), ex7));
			}
		}

		protected virtual void OnBeforeSerialize(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
		}

		internal virtual void OnBeforeSerializeContents(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
		}

		protected virtual void OnAfterSerialize(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
		}

		protected virtual void OnBeforeDeserialize(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
		}

		internal virtual void OnBeforeDeserializeContents(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
		}

		protected virtual void OnAfterDeserialize(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
		}

		protected internal virtual bool ShouldSerializeValue(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (value == null)
			{
				return false;
			}
			try
			{
				PropertyInfo propertyInfo = serializationManager.Context.Current as PropertyInfo;
				if (propertyInfo != null)
				{
					Attribute[] customAttributes = Attribute.GetCustomAttributes(propertyInfo, typeof(DefaultValueAttribute), inherit: true);
					if (customAttributes.Length != 0)
					{
						DefaultValueAttribute defaultValueAttribute = customAttributes[0] as DefaultValueAttribute;
						if (defaultValueAttribute.Value is IConvertible && value is IConvertible && object.Equals(Convert.ChangeType(defaultValueAttribute.Value, propertyInfo.PropertyType, CultureInfo.InvariantCulture), Convert.ChangeType(value, propertyInfo.PropertyType, CultureInfo.InvariantCulture)))
						{
							return false;
						}
					}
				}
			}
			catch
			{
			}
			return true;
		}

		protected internal virtual bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			Type type = value.GetType();
			if (type.IsPrimitive || type == typeof(string) || type.IsEnum || typeof(Delegate).IsAssignableFrom(type) || typeof(IConvertible).IsAssignableFrom(type) || type == typeof(TimeSpan) || type == typeof(Guid) || type == typeof(DateTime))
			{
				return true;
			}
			return false;
		}

		protected internal virtual string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			if (typeof(Delegate).IsAssignableFrom(value.GetType()))
			{
				return ((Delegate)value).Method.Name;
			}
			if (typeof(DateTime).IsAssignableFrom(value.GetType()))
			{
				return ((DateTime)value).ToString("o", CultureInfo.InvariantCulture);
			}
			return Convert.ToString(value, CultureInfo.InvariantCulture);
		}

		protected internal virtual object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value)
		{
			return InternalDeserializeFromString(serializationManager, propertyType, value);
		}

		private object InternalDeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (propertyType == null)
			{
				throw new ArgumentNullException("propertyType");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			object obj = null;
			if (!(serializationManager.WorkflowMarkupStack[typeof(XmlReader)] is XmlReader reader))
			{
				return null;
			}
			if (IsValidCompactAttributeFormat(value))
			{
				return DeserializeFromCompactFormat(serializationManager, reader, value);
			}
			if (value.StartsWith("{}", StringComparison.Ordinal))
			{
				value = value.Substring(2);
			}
			if (propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
			{
				Type type = propertyType.GetGenericArguments()[0];
				propertyType = type;
			}
			if (propertyType.IsPrimitive || propertyType == typeof(string))
			{
				return Convert.ChangeType(value, propertyType, CultureInfo.InvariantCulture);
			}
			if (propertyType.IsEnum)
			{
				return Enum.Parse(propertyType, value, ignoreCase: true);
			}
			if (typeof(Delegate).IsAssignableFrom(propertyType))
			{
				return value;
			}
			if (typeof(TimeSpan) == propertyType)
			{
				return TimeSpan.Parse(value, CultureInfo.InvariantCulture);
			}
			if (typeof(DateTime) == propertyType)
			{
				return DateTime.Parse(value, CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind);
			}
			if (typeof(Guid) == propertyType)
			{
				return Utility.CreateGuid(value);
			}
			if (typeof(Type).IsAssignableFrom(propertyType))
			{
				obj = serializationManager.GetType(value);
				if (obj != null)
				{
					Type type2 = obj as Type;
					if (type2.IsPrimitive || type2.IsEnum || type2 == typeof(string))
					{
						return type2;
					}
				}
				if (serializationManager.GetService(typeof(ITypeProvider)) is ITypeProvider typeProvider)
				{
					Type type3 = typeProvider.GetType(value);
					if (type3 != null)
					{
						return type3;
					}
				}
				return value;
			}
			if (typeof(IConvertible).IsAssignableFrom(propertyType))
			{
				return Convert.ChangeType(value, propertyType, CultureInfo.InvariantCulture);
			}
			if (propertyType.IsAssignableFrom(value.GetType()))
			{
				return value;
			}
			throw CreateSerializationError(SR.GetString("Error_SerializerPrimitivePropertyNoLogic", "", value.Trim(), ""), reader);
		}

		protected internal virtual IList GetChildren(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			return null;
		}

		protected internal virtual void ClearChildren(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
		}

		protected internal virtual void AddChild(WorkflowMarkupSerializationManager serializationManager, object parentObject, object childObj)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (parentObject == null)
			{
				throw new ArgumentNullException("parentObject");
			}
			if (childObj == null)
			{
				throw new ArgumentNullException("childObj");
			}
			throw new Exception(SR.GetString("Error_SerializerNoChildNotion", parentObject.GetType().FullName));
		}

		protected virtual object CreateInstance(WorkflowMarkupSerializationManager serializationManager, Type type)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (type == null)
			{
				throw new ArgumentNullException("type");
			}
			ITypeAuthorizer serializationTypeAuthorizer = WorkflowMarkupSerializationHelpers.SerializationTypeAuthorizer;
			if (serializationTypeAuthorizer != null && !serializationTypeAuthorizer.IsTypeAuthorized(type))
			{
				throw new InvalidOperationException(SR.GetString("Error_TypeNotAuthorized", type));
			}
			ITypeAuthorizer typeAuthorizer = WorkflowMarkupSerializationHelpers.TypeAuthorizer;
			if (typeAuthorizer != null && !typeAuthorizer.IsTypeAuthorized(type))
			{
				return null;
			}
			return Activator.CreateInstance(type);
		}

		protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			List<PropertyInfo> list = new List<PropertyInfo>();
			object[] customAttributes = obj.GetType().GetCustomAttributes(typeof(RuntimeNamePropertyAttribute), inherit: true);
			string text = null;
			if (customAttributes.Length != 0)
			{
				text = (customAttributes[0] as RuntimeNamePropertyAttribute).Name;
			}
			PropertyInfo[] properties = obj.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy);
			foreach (PropertyInfo propertyInfo in properties)
			{
				DesignerSerializationVisibility serializationVisibility = Helpers.GetSerializationVisibility(propertyInfo);
				if (serializationVisibility != 0 && (serializationVisibility == DesignerSerializationVisibility.Content || (propertyInfo.CanWrite && !(propertyInfo.GetSetMethod() == null)) || (obj is CodeObject && typeof(ICollection).IsAssignableFrom(propertyInfo.PropertyType))) && (!(serializationManager.GetService(typeof(ITypeProvider)) is TypeProvider typeProvider) || typeProvider.IsSupportedProperty(propertyInfo, obj)))
				{
					if (text == null || !text.Equals(propertyInfo.Name))
					{
						list.Add(propertyInfo);
					}
					else
					{
						list.Add(new ExtendedPropertyInfo(propertyInfo, OnGetRuntimeNameValue, OnSetRuntimeNameValue, OnGetRuntimeQualifiedName));
					}
				}
			}
			return list.ToArray();
		}

		protected internal virtual EventInfo[] GetEvents(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			List<EventInfo> list = new List<EventInfo>();
			EventInfo[] events = obj.GetType().GetEvents(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy);
			foreach (EventInfo eventInfo in events)
			{
				if (Helpers.GetSerializationVisibility(eventInfo) != 0)
				{
					list.Add(eventInfo);
				}
			}
			return list.ToArray();
		}

		internal virtual ExtendedPropertyInfo[] GetExtendedProperties(WorkflowMarkupSerializationManager manager, object extendee)
		{
			return new ExtendedPropertyInfo[0];
		}

		private object OnGetRuntimeNameValue(ExtendedPropertyInfo extendedProperty, object extendee)
		{
			return extendedProperty.RealPropertyInfo.GetValue(extendee, null);
		}

		private void OnSetRuntimeNameValue(ExtendedPropertyInfo extendedProperty, object extendee, object value)
		{
			if (extendee != null && value != null)
			{
				extendedProperty.RealPropertyInfo.SetValue(extendee, value, null);
			}
		}

		private XmlQualifiedName OnGetRuntimeQualifiedName(ExtendedPropertyInfo extendedProperty, WorkflowMarkupSerializationManager manager, out string prefix)
		{
			prefix = "x";
			return new XmlQualifiedName(extendedProperty.Name, "http://schemas.microsoft.com/winfx/2006/xaml");
		}

		private IDictionary<DependencyProperty, object> GetDependencyProperties(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			List<PropertyInfo> list = new List<PropertyInfo>();
			list.AddRange(GetProperties(serializationManager, obj));
			List<EventInfo> list2 = new List<EventInfo>();
			list2.AddRange(GetEvents(serializationManager, obj));
			Dictionary<DependencyProperty, object> dictionary = new Dictionary<DependencyProperty, object>();
			if (obj is DependencyObject dependencyObject)
			{
				foreach (DependencyProperty metaDependencyProperty in dependencyObject.MetaDependencyProperties)
				{
					Attribute[] attributes = metaDependencyProperty.DefaultMetadata.GetAttributes(typeof(DesignerSerializationVisibilityAttribute));
					if (attributes.Length != 0 && ((DesignerSerializationVisibilityAttribute)attributes[0]).Visibility == DesignerSerializationVisibility.Hidden)
					{
						continue;
					}
					if ((metaDependencyProperty.DefaultMetadata.Options & DependencyPropertyOptions.ReadOnly) == DependencyPropertyOptions.ReadOnly)
					{
						object[] attributes2 = metaDependencyProperty.DefaultMetadata.GetAttributes(typeof(DesignerSerializationVisibilityAttribute));
						object[] array = attributes2;
						if (array == null || array.Length == 0 || ((DesignerSerializationVisibilityAttribute)array[0]).Visibility != DesignerSerializationVisibility.Content)
						{
							continue;
						}
					}
					object obj2 = null;
					if (!metaDependencyProperty.IsAttached && !metaDependencyProperty.DefaultMetadata.IsMetaProperty)
					{
						obj2 = ((!metaDependencyProperty.IsEvent) ? ((MemberInfo)LookupProperty(list, metaDependencyProperty.Name)) : ((MemberInfo)LookupEvent(list2, metaDependencyProperty.Name)));
						if (obj2 == null)
						{
							serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_MissingCLRProperty", metaDependencyProperty.Name, obj.GetType().FullName)));
							continue;
						}
					}
					if (dependencyObject.IsBindingSet(metaDependencyProperty))
					{
						dictionary.Add(metaDependencyProperty, dependencyObject.GetBinding(metaDependencyProperty));
					}
					else if (!metaDependencyProperty.IsEvent)
					{
						object obj3 = null;
						obj3 = dependencyObject.GetValue(metaDependencyProperty);
						if (!metaDependencyProperty.IsAttached && !metaDependencyProperty.DefaultMetadata.IsMetaProperty)
						{
							PropertyInfo propertyInfo = obj2 as PropertyInfo;
							if (obj3 != null && propertyInfo.PropertyType.IsAssignableFrom(obj3.GetType()))
							{
								obj3 = (obj2 as PropertyInfo).GetValue(dependencyObject, null);
							}
						}
						dictionary.Add(metaDependencyProperty, obj3);
					}
					else
					{
						dictionary.Add(metaDependencyProperty, dependencyObject.GetHandler(metaDependencyProperty));
					}
				}
				foreach (DependencyProperty key in dependencyObject.DependencyPropertyValues.Keys)
				{
					Attribute[] attributes3 = key.DefaultMetadata.GetAttributes(typeof(DesignerSerializationVisibilityAttribute));
					if ((attributes3.Length == 0 || ((DesignerSerializationVisibilityAttribute)attributes3[0]).Visibility != 0) && !key.DefaultMetadata.IsMetaProperty && key.IsAttached && VerifyAttachedPropertyConditions(key))
					{
						dictionary.Add(key, dependencyObject.GetValue(key));
					}
				}
			}
			return dictionary;
		}

		private static bool VerifyAttachedPropertyConditions(DependencyProperty dependencyProperty)
		{
			if (dependencyProperty.IsEvent)
			{
				if (dependencyProperty.OwnerType.GetField(dependencyProperty.Name + "Event", BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public) == null)
				{
					return false;
				}
				MethodInfo method = dependencyProperty.OwnerType.GetMethod("Add" + dependencyProperty.Name + "Handler", BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public);
				if (method == null)
				{
					return false;
				}
				ParameterInfo[] parameters = method.GetParameters();
				if (parameters != null && parameters.Length == 2 && parameters[0].ParameterType == typeof(object) && parameters[1].ParameterType == typeof(object))
				{
					return true;
				}
			}
			else
			{
				if (dependencyProperty.OwnerType.GetField(dependencyProperty.Name + "Property", BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public) == null)
				{
					return false;
				}
				MethodInfo method2 = dependencyProperty.OwnerType.GetMethod("Set" + dependencyProperty.Name, BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public);
				if (method2 == null)
				{
					return false;
				}
				ParameterInfo[] parameters2 = method2.GetParameters();
				if (parameters2 != null && parameters2.Length == 2 && parameters2[0].ParameterType == typeof(object) && parameters2[1].ParameterType == typeof(object))
				{
					return true;
				}
			}
			return false;
		}

		private void SetDependencyPropertyValue(WorkflowMarkupSerializationManager serializationManager, object obj, DependencyProperty dependencyProperty, object value)
		{
			if (dependencyProperty == null)
			{
				throw new ArgumentNullException("dependencyProperty");
			}
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (!(obj is DependencyObject dependencyObject))
			{
				throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "obj");
			}
			if (dependencyProperty.IsEvent)
			{
				if (value is ActivityBind)
				{
					dependencyObject.SetBinding(dependencyProperty, value as ActivityBind);
				}
				else if (dependencyProperty.IsAttached)
				{
					MethodInfo methodInfo = dependencyProperty.OwnerType.GetMethod("Add" + dependencyProperty.Name + "Handler", BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public);
					if (methodInfo != null)
					{
						ParameterInfo[] parameters = methodInfo.GetParameters();
						if (parameters == null || parameters.Length != 2 || parameters[0].ParameterType != typeof(object) || parameters[1].ParameterType != typeof(object))
						{
							methodInfo = null;
						}
					}
					if (methodInfo != null)
					{
						WorkflowMarkupSerializationHelpers.SetEventHandlerName(dependencyObject, dependencyProperty.Name, value as string);
						return;
					}
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_MissingAddHandler", dependencyProperty.Name, dependencyProperty.OwnerType.FullName)));
				}
				else
				{
					WorkflowMarkupSerializationHelpers.SetEventHandlerName(dependencyObject, dependencyProperty.Name, value as string);
				}
				return;
			}
			if (value is ActivityBind)
			{
				dependencyObject.SetBinding(dependencyProperty, value as ActivityBind);
				return;
			}
			if (value is string && TypeProvider.IsAssignable(typeof(Type), dependencyProperty.PropertyType))
			{
				Helpers.SetDesignTimeTypeName(obj, dependencyProperty, value as string);
				return;
			}
			if (dependencyProperty.IsAttached)
			{
				MethodInfo methodInfo2 = dependencyProperty.OwnerType.GetMethod("Set" + dependencyProperty.Name, BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public);
				if (methodInfo2 != null)
				{
					ParameterInfo[] parameters2 = methodInfo2.GetParameters();
					if (parameters2 == null || parameters2.Length != 2 || parameters2[0].ParameterType != typeof(object) || parameters2[1].ParameterType != typeof(object))
					{
						methodInfo2 = null;
					}
				}
				if (methodInfo2 != null)
				{
					methodInfo2.Invoke(null, new object[2] { dependencyObject, value });
				}
				else
				{
					serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_MissingSetAccessor", dependencyProperty.Name, dependencyProperty.OwnerType.FullName)));
				}
				return;
			}
			List<PropertyInfo> list = new List<PropertyInfo>();
			list.AddRange(GetProperties(serializationManager, obj));
			PropertyInfo propertyInfo = LookupProperty(list, dependencyProperty.Name);
			if (propertyInfo != null && (value == null || propertyInfo.PropertyType.IsAssignableFrom(value.GetType())))
			{
				if (propertyInfo.CanWrite)
				{
					propertyInfo.SetValue(obj, value, null);
				}
				else
				{
					if (!typeof(ICollection<string>).IsAssignableFrom(value.GetType()))
					{
						return;
					}
					ICollection<string> collection = propertyInfo.GetValue(obj, null) as ICollection<string>;
					ICollection<string> collection2 = value as ICollection<string>;
					if (collection == null || collection2 == null)
					{
						return;
					}
					foreach (string item in collection2)
					{
						collection.Add(item);
					}
				}
			}
			else
			{
				dependencyObject.SetValue(dependencyProperty, value);
			}
		}

		private void AdvanceReader(XmlReader reader)
		{
			while (reader.NodeType != XmlNodeType.EndElement && reader.NodeType != XmlNodeType.Element && reader.NodeType != XmlNodeType.Text && reader.Read())
			{
			}
		}

		internal static WorkflowMarkupSerializationException CreateSerializationError(Exception e, XmlReader reader)
		{
			return CreateSerializationError(null, e, reader);
		}

		internal static WorkflowMarkupSerializationException CreateSerializationError(string message, XmlReader reader)
		{
			return CreateSerializationError(message, null, reader);
		}

		internal static WorkflowMarkupSerializationException CreateSerializationError(string message, Exception e, XmlReader reader)
		{
			string text = message;
			if (string.IsNullOrEmpty(text))
			{
				text = e.Message;
			}
			if (reader is IXmlLineInfo xmlLineInfo)
			{
				return new WorkflowMarkupSerializationException(text, xmlLineInfo.LineNumber, xmlLineInfo.LinePosition);
			}
			return new WorkflowMarkupSerializationException(text, 0, 0);
		}

		private static string GetClrFullName(WorkflowMarkupSerializationManager serializationManager, XmlQualifiedName xmlQualifiedName)
		{
			string @namespace = xmlQualifiedName.Namespace;
			string name = xmlQualifiedName.Name;
			List<WorkflowMarkupSerializerMapping> value = null;
			if (!serializationManager.XmlNamespaceBasedMappings.TryGetValue(@namespace, out value) || value.Count == 0)
			{
				return xmlQualifiedName.Namespace + "." + xmlQualifiedName.Name;
			}
			WorkflowMarkupSerializerMapping workflowMarkupSerializerMapping = value[0];
			string assemblyName = workflowMarkupSerializerMapping.AssemblyName;
			string clrNamespace = workflowMarkupSerializerMapping.ClrNamespace;
			string result = xmlQualifiedName.Name;
			if (clrNamespace.Length > 0)
			{
				result = clrNamespace + "." + xmlQualifiedName.Name;
			}
			return result;
		}

		private object CreateInstance(WorkflowMarkupSerializationManager serializationManager, XmlQualifiedName xmlQualifiedName, XmlReader reader)
		{
			object result = null;
			Type type = null;
			try
			{
				type = serializationManager.GetType(xmlQualifiedName);
			}
			catch (Exception ex)
			{
				serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerTypeNotResolvedWithInnerError", GetClrFullName(serializationManager, xmlQualifiedName), ex.Message), ex, reader));
				return null;
			}
			if (type == null && !xmlQualifiedName.Name.EndsWith("Extension", StringComparison.Ordinal))
			{
				string name = xmlQualifiedName.Name + "Extension";
				try
				{
					type = serializationManager.GetType(new XmlQualifiedName(name, xmlQualifiedName.Namespace));
				}
				catch (Exception ex2)
				{
					serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerTypeNotResolvedWithInnerError", GetClrFullName(serializationManager, xmlQualifiedName), ex2.Message), ex2, reader));
					return null;
				}
			}
			if (type == null)
			{
				serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerTypeNotResolved", GetClrFullName(serializationManager, xmlQualifiedName)), reader));
				return null;
			}
			if (type.IsPrimitive || type == typeof(string) || type == typeof(decimal) || type == typeof(DateTime) || type == typeof(TimeSpan) || type.IsEnum || type == typeof(Guid))
			{
				try
				{
					string text = reader.ReadString();
					if (type == typeof(DateTime))
					{
						result = DateTime.Parse(text, CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind);
					}
					else if (type.IsPrimitive || type == typeof(decimal) || type == typeof(TimeSpan) || type.IsEnum || type == typeof(Guid))
					{
						TypeConverter converter = TypeDescriptor.GetConverter(type);
						if (converter != null && converter.CanConvertFrom(typeof(string)))
						{
							result = converter.ConvertFrom(null, CultureInfo.InvariantCulture, text);
						}
						else if (typeof(IConvertible).IsAssignableFrom(type))
						{
							result = Convert.ChangeType(text, type, CultureInfo.InvariantCulture);
						}
					}
					else
					{
						result = text;
					}
				}
				catch (Exception ex3)
				{
					serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerCreateInstanceFailed", ex3.Message), reader));
					return null;
				}
			}
			else
			{
				if (!(serializationManager.GetSerializer(type, typeof(WorkflowMarkupSerializer)) is WorkflowMarkupSerializer workflowMarkupSerializer))
				{
					serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerNotAvailable", type.FullName), reader));
					return null;
				}
				try
				{
					result = workflowMarkupSerializer.CreateInstance(serializationManager, type);
				}
				catch (Exception ex4)
				{
					serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerCreateInstanceFailed", type.FullName, ex4.Message), reader));
					return null;
				}
			}
			return result;
		}

		private void DeserializeCompoundProperty(WorkflowMarkupSerializationManager serializationManager, XmlReader reader, object obj)
		{
			string localName = reader.LocalName;
			bool flag = false;
			DependencyProperty dependencyProperty = serializationManager.Context.Current as DependencyProperty;
			PropertyInfo propertyInfo = serializationManager.Context.Current as PropertyInfo;
			if (dependencyProperty != null)
			{
				flag = (dependencyProperty.DefaultMetadata.Options & DependencyPropertyOptions.ReadOnly) == DependencyPropertyOptions.ReadOnly;
			}
			else
			{
				if (!(propertyInfo != null))
				{
					return;
				}
				flag = !propertyInfo.CanWrite;
			}
			if (flag)
			{
				object obj2 = null;
				if (dependencyProperty != null && obj is DependencyObject)
				{
					obj2 = (((DependencyObject)obj).IsBindingSet(dependencyProperty) ? ((DependencyObject)obj).GetBinding(dependencyProperty) : (dependencyProperty.IsEvent ? ((DependencyObject)obj).GetHandler(dependencyProperty) : ((DependencyObject)obj).GetValue(dependencyProperty)));
				}
				else if (propertyInfo != null)
				{
					obj2 = (propertyInfo.CanRead ? propertyInfo.GetValue(obj, null) : null);
				}
				if (obj2 != null)
				{
					DeserializeContents(serializationManager, obj2, reader);
					return;
				}
				serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerReadOnlyPropertyAndValueIsNull", localName, obj.GetType().FullName), reader));
			}
			else
			{
				if (reader.IsEmptyElement)
				{
					return;
				}
				if (reader.HasAttributes)
				{
					while (reader.MoveToNextAttribute())
					{
						if (!string.Equals(reader.LocalName, "xmlns", StringComparison.Ordinal) && !string.Equals(reader.Prefix, "xmlns", StringComparison.Ordinal))
						{
							serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerAttributesFoundInComplexProperty", localName, obj.GetType().FullName), reader));
						}
					}
				}
				do
				{
					if (!reader.Read())
					{
						return;
					}
				}
				while (reader.NodeType != XmlNodeType.Text && reader.NodeType != XmlNodeType.Element && reader.NodeType != XmlNodeType.ProcessingInstruction && reader.NodeType != XmlNodeType.EndElement);
				if (reader.NodeType == XmlNodeType.Text)
				{
					DeserializeSimpleProperty(serializationManager, reader, obj, reader.Value);
					return;
				}
				AdvanceReader(reader);
				if (reader.NodeType != XmlNodeType.Element)
				{
					return;
				}
				object obj3 = DeserializeObject(serializationManager, reader);
				if (obj3 == null)
				{
					return;
				}
				obj3 = GetValueFromMarkupExtension(serializationManager, obj3);
				if (obj3 != null && obj3.GetType() == typeof(string) && ((string)obj3).StartsWith("{}", StringComparison.Ordinal))
				{
					obj3 = ((string)obj3).Substring(2);
				}
				if (dependencyProperty != null)
				{
					if (serializationManager.GetSerializer(obj.GetType(), typeof(WorkflowMarkupSerializer)) is WorkflowMarkupSerializer workflowMarkupSerializer)
					{
						try
						{
							workflowMarkupSerializer.SetDependencyPropertyValue(serializationManager, obj, dependencyProperty, obj3);
							return;
						}
						catch (Exception ex)
						{
							serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerThrewException", obj.GetType().FullName, ex.Message), ex, reader));
							return;
						}
					}
					serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerNotAvailable", obj.GetType().FullName), reader));
				}
				else if (propertyInfo != null)
				{
					try
					{
						propertyInfo.SetValue(obj, obj3, null);
					}
					catch
					{
						serializationManager.ReportError(new WorkflowMarkupSerializationException(SR.GetString("Error_SerializerComplexPropertySetFailed", localName, localName, obj.GetType().Name)));
					}
				}
			}
		}

		private void DeserializeSimpleProperty(WorkflowMarkupSerializationManager serializationManager, XmlReader reader, object obj, string value)
		{
			Type type = null;
			bool flag = false;
			DependencyProperty dependencyProperty = serializationManager.Context.Current as DependencyProperty;
			PropertyInfo propertyInfo = serializationManager.Context.Current as PropertyInfo;
			if (dependencyProperty != null)
			{
				type = dependencyProperty.PropertyType;
				flag = (dependencyProperty.DefaultMetadata.Options & DependencyPropertyOptions.ReadOnly) == DependencyPropertyOptions.ReadOnly;
			}
			else
			{
				if (!(propertyInfo != null))
				{
					return;
				}
				type = propertyInfo.PropertyType;
				flag = !propertyInfo.CanWrite;
			}
			if (flag && !typeof(ICollection<string>).IsAssignableFrom(type))
			{
				serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerPrimitivePropertyReadOnly", propertyInfo.Name, propertyInfo.Name, obj.GetType().FullName), reader));
			}
			else
			{
				DeserializeSimpleMember(serializationManager, type, reader, obj, value);
			}
		}

		private void DeserializeEvent(WorkflowMarkupSerializationManager serializationManager, XmlReader reader, object obj, string value)
		{
			Type type = null;
			EventInfo eventInfo = serializationManager.Context.Current as EventInfo;
			if (serializationManager.Context.Current is DependencyProperty dependencyProperty)
			{
				type = dependencyProperty.PropertyType;
			}
			else
			{
				if (!(eventInfo != null))
				{
					return;
				}
				type = eventInfo.EventHandlerType;
			}
			DeserializeSimpleMember(serializationManager, type, reader, obj, value);
		}

		private void DeserializeSimpleMember(WorkflowMarkupSerializationManager serializationManager, Type memberType, XmlReader reader, object obj, string value)
		{
			if (!(serializationManager.GetSerializer(memberType, typeof(WorkflowMarkupSerializer)) is WorkflowMarkupSerializer workflowMarkupSerializer))
			{
				serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerNotAvailable", memberType.FullName), reader));
				return;
			}
			object obj2 = null;
			try
			{
				obj2 = workflowMarkupSerializer.DeserializeFromString(serializationManager, memberType, value);
				obj2 = GetValueFromMarkupExtension(serializationManager, obj2);
				if (serializationManager.Context.Current is DependencyProperty dependencyProperty)
				{
					if (!(serializationManager.GetSerializer(obj.GetType(), typeof(WorkflowMarkupSerializer)) is WorkflowMarkupSerializer workflowMarkupSerializer2))
					{
						serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerNotAvailable", obj.GetType().FullName), reader));
					}
					else
					{
						workflowMarkupSerializer2.SetDependencyPropertyValue(serializationManager, obj, dependencyProperty, obj2);
					}
					return;
				}
				EventInfo eventInfo = serializationManager.Context.Current as EventInfo;
				if (eventInfo != null)
				{
					try
					{
						WorkflowMarkupSerializationHelpers.SetEventHandlerName(obj, eventInfo.Name, obj2 as string);
						return;
					}
					catch (Exception innerException)
					{
						while (innerException is TargetInvocationException && innerException.InnerException != null)
						{
							innerException = innerException.InnerException;
						}
						serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerMemberSetFailed", reader.LocalName, reader.Value, reader.LocalName, obj.GetType().FullName, innerException.Message), innerException, reader));
						return;
					}
				}
				PropertyInfo propertyInfo = serializationManager.Context.Current as PropertyInfo;
				if (!(propertyInfo != null))
				{
					return;
				}
				try
				{
					if (obj2 is string && TypeProvider.IsAssignable(typeof(Type), propertyInfo.PropertyType))
					{
						string key = propertyInfo.ReflectedType.FullName + "." + propertyInfo.Name;
						Helpers.SetDesignTimeTypeName(obj, key, obj2 as string);
					}
					else if (propertyInfo.CanWrite)
					{
						propertyInfo.SetValue(obj, obj2, null);
					}
					else
					{
						if (!typeof(ICollection<string>).IsAssignableFrom(obj2.GetType()))
						{
							return;
						}
						ICollection<string> collection = propertyInfo.GetValue(obj, null) as ICollection<string>;
						ICollection<string> collection2 = obj2 as ICollection<string>;
						if (collection == null || collection2 == null)
						{
							return;
						}
						{
							foreach (string item in collection2)
							{
								collection.Add(item);
							}
							return;
						}
					}
				}
				catch (Exception innerException2)
				{
					while (innerException2 is TargetInvocationException && innerException2.InnerException != null)
					{
						innerException2 = innerException2.InnerException;
					}
					serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerMemberSetFailed", reader.LocalName, reader.Value, reader.LocalName, obj.GetType().FullName, innerException2.Message), innerException2, reader));
				}
			}
			catch (Exception innerException3)
			{
				while (innerException3 is TargetInvocationException && innerException3.InnerException != null)
				{
					innerException3 = innerException3.InnerException;
				}
				serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerMemberSetFailed", reader.LocalName, reader.Value, reader.LocalName, obj.GetType().FullName, innerException3.Message), innerException3, reader));
			}
		}

		private DependencyProperty ResolveDependencyProperty(WorkflowMarkupSerializationManager serializationManager, XmlReader reader, object attachedObj, string fullPropertyName)
		{
			Type type = null;
			string empty = string.Empty;
			int num = fullPropertyName.IndexOf(".");
			if (num != -1)
			{
				string text = fullPropertyName.Substring(0, num);
				empty = fullPropertyName.Substring(num + 1);
				if (!string.IsNullOrEmpty(text) && !string.IsNullOrEmpty(empty))
				{
					type = serializationManager.GetType(new XmlQualifiedName(text, reader.LookupNamespace(reader.Prefix)));
				}
			}
			else
			{
				type = attachedObj.GetType();
				empty = fullPropertyName;
			}
			if (type == null)
			{
				return null;
			}
			DependencyProperty dependencyProperty = null;
			FieldInfo field = type.GetField(empty + "Property", BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
			if (field == null)
			{
				field = type.GetField(empty + "Event", BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
			}
			if (field != null)
			{
				dependencyProperty = field.GetValue(attachedObj) as DependencyProperty;
				if (dependencyProperty != null)
				{
					object[] attributes = dependencyProperty.DefaultMetadata.GetAttributes(typeof(DesignerSerializationVisibilityAttribute));
					object[] array = attributes;
					if (array.Length != 0)
					{
						DesignerSerializationVisibilityAttribute designerSerializationVisibilityAttribute = array[0] as DesignerSerializationVisibilityAttribute;
						if (designerSerializationVisibilityAttribute.Visibility == DesignerSerializationVisibility.Hidden)
						{
							dependencyProperty = null;
						}
					}
				}
			}
			return dependencyProperty;
		}

		private static void AddUnauthorizedTypes(IList<AuthorizedType> authorizedTypes)
		{
			AuthorizedType authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.Activities.Presentation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
			authorizedType.Namespace = "System.Activities.Presentation";
			authorizedType.TypeName = "WorkflowDesigner";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.Activities.Presentation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
			authorizedType.Namespace = "System.Activities.Presentation.Internal.PropertyEditing";
			authorizedType.TypeName = "PropertyInspectorFontAndColorDictionary";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
			authorizedType.Namespace = "System.Windows.Data";
			authorizedType.TypeName = "ObjectDataProvider";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
			authorizedType.Namespace = "System.Windows.Data";
			authorizedType.TypeName = "ObjectDataProvider";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
			authorizedType.Namespace = "System.Windows";
			authorizedType.TypeName = "ResourceDictionary";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
			authorizedType.Namespace = "System.Windows";
			authorizedType.TypeName = "ResourceDictionary";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
			authorizedType.Namespace = "System.Configuration.Install";
			authorizedType.TypeName = "AssemblyInstaller";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType.Assembly = "System.Configuration.Install, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
			authorizedType.Namespace = "System.Configuration.Install";
			authorizedType.TypeName = "AssemblyInstaller";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType.Assembly = "System.Configuration.Install, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
			authorizedType.Namespace = "System.Configuration.Install";
			authorizedType.TypeName = "AssemblyInstaller";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
			authorizedType.Namespace = "System.Windows.Forms";
			authorizedType.TypeName = "BindingSource";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
			authorizedType.Namespace = "System.Windows.Forms";
			authorizedType.TypeName = "BindingSource";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
			authorizedType.Namespace = "System.ComponentModel.Composition.Hosting";
			authorizedType.TypeName = "DirectoryCatalog";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
			authorizedType.Namespace = "System.ComponentModel.Composition.Hosting";
			authorizedType.TypeName = "AssemblyCatalog";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.Workflow.ComponentModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
			authorizedType.Namespace = "System.Workflow.ComponentModel.Design";
			authorizedType.TypeName = "WorkflowView";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.Workflow.ComponentModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
			authorizedType.Namespace = "System.Workflow.ComponentModel.Design";
			authorizedType.TypeName = "WorkflowView";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.Speech, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
			authorizedType.Namespace = "System.Speech.Recognition";
			authorizedType.TypeName = "SpeechRecognizer";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.Speech, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
			authorizedType.Namespace = "System.Speech.Recognition";
			authorizedType.TypeName = "SpeechRecognizer";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
			authorizedType.Namespace = "System.ServiceModel.ComIntegration";
			authorizedType.TypeName = "ServiceMoniker";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
			authorizedType.Namespace = "System.ServiceModel.ComIntegration";
			authorizedType.TypeName = "ServiceMoniker";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
			authorizedType = new AuthorizedType();
			authorizedType.Assembly = "System.ServiceModel.ServiceMoniker40, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
			authorizedType.Namespace = "System.ServiceModel.ServiceMoniker40";
			authorizedType.TypeName = "ServiceMoniker40";
			authorizedType.Authorized = "false";
			authorizedTypes.Add(authorizedType);
		}

		private static void GetAuthorizedTypes()
		{
			if (StaticAuthorizedTypes != null)
			{
				return;
			}
			lock (StaticAuthTypesLockObject)
			{
				if (StaticAuthorizedTypes != null)
				{
					return;
				}
				try
				{
					IDictionary<string, IList<AuthorizedType>> dictionary = ConfigurationManager.GetSection("System.Workflow.ComponentModel.WorkflowCompiler/authorizedTypes") as IDictionary<string, IList<AuthorizedType>>;
					Version version = new Version("4.0");
					string key = string.Format(CultureInfo.InvariantCulture, "v{0}.{1}", new object[2] { version.Major, version.Minor });
					if (dictionary == null || !dictionary.TryGetValue(key, out var value))
					{
						value = new List<AuthorizedType>();
					}
					if (!AppSettings.DisableXOMLSerializerDefaultUnauthorizedTypes)
					{
						AddUnauthorizedTypes(value);
					}
					StaticAuthorizedTypes = new ReadOnlyCollection<AuthorizedType>(value);
				}
				catch
				{
				}
			}
		}

		private static PropertyInfo LookupProperty(IList<PropertyInfo> properties, string propertyName)
		{
			if (properties != null && !string.IsNullOrEmpty(propertyName))
			{
				foreach (PropertyInfo property in properties)
				{
					if (property.Name == propertyName)
					{
						return property;
					}
				}
			}
			return null;
		}

		private static EventInfo LookupEvent(IList<EventInfo> events, string eventName)
		{
			if (events != null && !string.IsNullOrEmpty(eventName))
			{
				foreach (EventInfo @event in events)
				{
					if (@event.Name == eventName)
					{
						return @event;
					}
				}
			}
			return null;
		}

		internal bool IsValidCompactAttributeFormat(string attributeValue)
		{
			if (attributeValue.Length > 0 && attributeValue.StartsWith("{", StringComparison.Ordinal) && !attributeValue.StartsWith("{}", StringComparison.Ordinal))
			{
				return attributeValue.EndsWith("}", StringComparison.Ordinal);
			}
			return false;
		}

		internal object DeserializeFromCompactFormat(WorkflowMarkupSerializationManager serializationManager, XmlReader reader, string attrValue)
		{
			if (attrValue.Length == 0 || !attrValue.StartsWith("{", StringComparison.Ordinal) || !attrValue.EndsWith("}", StringComparison.Ordinal))
			{
				serializationManager.ReportError(CreateSerializationError(SR.GetString("IncorrectSyntax", attrValue), reader));
				return null;
			}
			int num = attrValue.IndexOf(" ", StringComparison.Ordinal);
			if (num == -1)
			{
				num = attrValue.IndexOf("}", StringComparison.Ordinal);
			}
			string text = attrValue.Substring(1, num - 1).Trim();
			string args = attrValue.Substring(num + 1, attrValue.Length - (num + 1));
			string prefix = string.Empty;
			int num2 = text.IndexOf(":", StringComparison.Ordinal);
			if (num2 >= 0)
			{
				prefix = text.Substring(0, num2);
				text = text.Substring(num2 + 1);
			}
			Type type = serializationManager.GetType(new XmlQualifiedName(text, reader.LookupNamespace(prefix)));
			if (type == null && !text.EndsWith("Extension", StringComparison.Ordinal))
			{
				text += "Extension";
				type = serializationManager.GetType(new XmlQualifiedName(text, reader.LookupNamespace(prefix)));
			}
			if (type == null)
			{
				serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_MarkupSerializerTypeNotResolved", text), reader));
				return null;
			}
			ITypeAuthorizer serializationTypeAuthorizer = WorkflowMarkupSerializationHelpers.SerializationTypeAuthorizer;
			if (serializationTypeAuthorizer != null && !serializationTypeAuthorizer.IsTypeAuthorized(type))
			{
				throw new InvalidOperationException(SR.GetString("Error_TypeNotAuthorized", type));
			}
			ITypeAuthorizer typeAuthorizer = WorkflowMarkupSerializationHelpers.TypeAuthorizer;
			if (typeAuthorizer != null && !typeAuthorizer.IsTypeAuthorized(type))
			{
				return null;
			}
			object obj = null;
			Dictionary<string, object> dictionary = new Dictionary<string, object>();
			ArrayList arrayList = null;
			try
			{
				arrayList = TokenizeAttributes(serializationManager, args, (!(reader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)reader).LineNumber, (!(reader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)reader).LinePosition);
			}
			catch (Exception ex)
			{
				serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_MarkupExtensionDeserializeFailed", attrValue, ex.Message), reader));
				return null;
			}
			if (arrayList != null)
			{
				ArrayList arrayList2 = new ArrayList();
				bool flag = true;
				for (int i = 0; i < arrayList.Count; i++)
				{
					char c = ((arrayList[i] is char) ? ((char)arrayList[i]) : '\0');
					if (c == '=')
					{
						if (arrayList2.Count > 0 && flag)
						{
							arrayList2.RemoveAt(arrayList2.Count - 1);
						}
						flag = false;
						dictionary.Add(arrayList[i - 1] as string, arrayList[i + 1] as string);
						i++;
					}
					if (c != ',' && dictionary.Count == 0)
					{
						arrayList2.Add(arrayList[i] as string);
					}
				}
				if (arrayList2.Count > 0)
				{
					ConstructorInfo constructorInfo = null;
					ConstructorInfo[] constructors = type.GetConstructors(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public);
					ParameterInfo[] array = null;
					ConstructorInfo[] array2 = constructors;
					foreach (ConstructorInfo constructorInfo2 in array2)
					{
						ParameterInfo[] parameters = constructorInfo2.GetParameters();
						if (parameters.Length == arrayList2.Count)
						{
							constructorInfo = constructorInfo2;
							array = parameters;
							break;
						}
					}
					if (constructorInfo != null)
					{
						for (int k = 0; k < arrayList2.Count; k++)
						{
							arrayList2[k] = XmlConvert.DecodeName((string)arrayList2[k]);
							string value = (string)arrayList2[k];
							RemoveEscapes(ref value);
							arrayList2[k] = InternalDeserializeFromString(serializationManager, array[k].ParameterType, value);
							arrayList2[k] = GetValueFromMarkupExtension(serializationManager, arrayList2[k]);
						}
						obj = Activator.CreateInstance(type, arrayList2.ToArray());
					}
				}
				else
				{
					obj = Activator.CreateInstance(type);
				}
			}
			else
			{
				obj = Activator.CreateInstance(type);
			}
			if (obj == null)
			{
				serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_CantCreateInstanceOfBaseType", type.FullName), reader));
				return null;
			}
			if (dictionary.Count > 0)
			{
				if (!(serializationManager.GetSerializer(obj.GetType(), typeof(WorkflowMarkupSerializer)) is WorkflowMarkupSerializer workflowMarkupSerializer))
				{
					serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerNotAvailable", obj.GetType().FullName), reader));
					return obj;
				}
				List<PropertyInfo> list = new List<PropertyInfo>();
				try
				{
					list.AddRange(workflowMarkupSerializer.GetProperties(serializationManager, obj));
					list.AddRange(serializationManager.GetExtendedProperties(obj));
				}
				catch (Exception ex2)
				{
					serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerThrewException", obj.GetType().FullName, ex2.Message), ex2, reader));
					return obj;
				}
				foreach (string key in dictionary.Keys)
				{
					string value2 = key;
					string value3 = dictionary[key] as string;
					RemoveEscapes(ref value2);
					RemoveEscapes(ref value3);
					PropertyInfo propertyInfo = LookupProperty(list, value2);
					if (propertyInfo != null)
					{
						serializationManager.ContextPush(propertyInfo);
						try
						{
							DeserializeSimpleProperty(serializationManager, reader, obj, value3);
						}
						finally
						{
							serializationManager.ContextPop();
						}
					}
					else
					{
						serializationManager.ReportError(CreateSerializationError(SR.GetString("Error_SerializerPrimitivePropertyNoLogic", value2, value2, obj.GetType().FullName), reader));
					}
				}
			}
			return obj;
		}

		private ArrayList TokenizeAttributes(WorkflowMarkupSerializationManager serializationManager, string args, int lineNumber, int linePosition)
		{
			ArrayList arrayList = null;
			int length = args.Length;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			char c = '\'';
			int num = 0;
			bool flag4 = false;
			StringBuilder stringBuilder = null;
			int i;
			for (i = 0; i < length; i++)
			{
				if (!flag2 && args[i] == '\\')
				{
					flag2 = true;
					continue;
				}
				if (!flag3 && !char.IsWhiteSpace(args[i]))
				{
					flag3 = true;
				}
				if (!(flag || num > 0 || flag3))
				{
					continue;
				}
				if (stringBuilder == null)
				{
					stringBuilder = new StringBuilder(length);
					arrayList = new ArrayList(1);
				}
				if (flag2)
				{
					stringBuilder.Append('\\');
					stringBuilder.Append(args[i]);
					flag2 = false;
					continue;
				}
				if (flag || num > 0)
				{
					if (flag && args[i] == c)
					{
						flag = false;
						arrayList.Add(stringBuilder.ToString());
						stringBuilder.Length = 0;
						flag3 = false;
						continue;
					}
					if (num > 0 && args[i] == '}')
					{
						num--;
					}
					else if (args[i] == '{')
					{
						num++;
					}
					stringBuilder.Append(args[i]);
					continue;
				}
				if (args[i] == '"' || args[i] == '\'')
				{
					if (flag4 && i < args.Length - 1 && args[i + 1] == ']')
					{
						flag4 = false;
						stringBuilder.Append(args[i]);
						continue;
					}
					if (i > 0 && args[i - 1] == '[')
					{
						flag4 = true;
						stringBuilder.Append(args[i]);
						continue;
					}
					if (stringBuilder.Length != 0)
					{
						return null;
					}
					flag = true;
					c = args[i];
					continue;
				}
				if (args[i] == ',' || args[i] == '=')
				{
					if (stringBuilder != null && stringBuilder.Length > 0)
					{
						arrayList.Add(stringBuilder.ToString().Trim());
						stringBuilder.Length = 0;
					}
					else if (arrayList.Count == 0 || arrayList[arrayList.Count - 1] is char)
					{
						return null;
					}
					arrayList.Add(args[i]);
					flag3 = false;
					continue;
				}
				if (args[i] == '}')
				{
					if (stringBuilder == null)
					{
						break;
					}
					if (stringBuilder.Length > 0)
					{
						arrayList.Add(stringBuilder.ToString().Trim());
						stringBuilder.Length = 0;
						break;
					}
					if (arrayList.Count <= 0 || !(arrayList[arrayList.Count - 1] is char))
					{
						break;
					}
					return null;
				}
				if (args[i] == '{')
				{
					num++;
				}
				stringBuilder.Append(args[i]);
			}
			if (stringBuilder != null && stringBuilder.Length > 0)
			{
				throw new Exception(SR.GetString("Error_MarkupExtensionMissingTerminatingCharacter"));
			}
			if (i < length)
			{
				for (i++; i < length; i++)
				{
					if (!char.IsWhiteSpace(args[i]))
					{
						throw new Exception(SR.GetString("Error_ExtraCharacterFoundAtEnd"));
					}
				}
			}
			return arrayList;
		}

		private void RemoveEscapes(ref string value)
		{
			StringBuilder stringBuilder = null;
			bool flag = true;
			for (int i = 0; i < value.Length; i++)
			{
				if (flag && value[i] == '\\')
				{
					if (stringBuilder == null)
					{
						stringBuilder = new StringBuilder(value.Length);
						stringBuilder.Append(value.Substring(0, i));
					}
					flag = false;
				}
				else if (stringBuilder != null)
				{
					stringBuilder.Append(value[i]);
					flag = true;
				}
			}
			if (stringBuilder != null)
			{
				value = stringBuilder.ToString();
			}
		}

		internal static string EnsureMarkupExtensionTypeName(Type type)
		{
			string text = type.Name;
			if (text.EndsWith("Extension", StringComparison.OrdinalIgnoreCase))
			{
				text = text.Substring(0, text.Length - "Extension".Length);
			}
			return text;
		}

		internal static string EnsureMarkupExtensionTypeName(XmlQualifiedName xmlQualifiedName)
		{
			string name = xmlQualifiedName.Name;
			if (xmlQualifiedName.Namespace.Equals("http://schemas.microsoft.com/winfx/2006/xaml", StringComparison.Ordinal) && name.Equals(typeof(Array).Name, StringComparison.Ordinal))
			{
				name = typeof(ArrayExtension).Name;
			}
			return name;
		}

		private static bool IsMarkupExtension(Type type)
		{
			if (!typeof(MarkupExtension).IsAssignableFrom(type) && !typeof(Type).IsAssignableFrom(type))
			{
				return typeof(Array).IsAssignableFrom(type);
			}
			return true;
		}

		private static bool IsMarkupExtension(XmlQualifiedName xmlQualifiedName)
		{
			bool result = false;
			if (xmlQualifiedName.Namespace.Equals("http://schemas.microsoft.com/winfx/2006/xaml", StringComparison.Ordinal) && (xmlQualifiedName.Name.Equals(typeof(Array).Name) || string.Equals(xmlQualifiedName.Name, "Null", StringComparison.Ordinal) || string.Equals(xmlQualifiedName.Name, typeof(NullExtension).Name, StringComparison.Ordinal) || string.Equals(xmlQualifiedName.Name, "Type", StringComparison.Ordinal) || string.Equals(xmlQualifiedName.Name, typeof(TypeExtension).Name, StringComparison.Ordinal)))
			{
				result = true;
			}
			return result;
		}

		private static object GetMarkupExtensionFromValue(object value)
		{
			if (value == null)
			{
				return new NullExtension();
			}
			if (value is Type)
			{
				return new TypeExtension(value as Type);
			}
			if (value is Array)
			{
				return new ArrayExtension(value as Array);
			}
			return value;
		}

		private static object GetValueFromMarkupExtension(WorkflowMarkupSerializationManager manager, object extension)
		{
			object result = extension;
			if (extension is MarkupExtension markupExtension)
			{
				result = markupExtension.ProvideValue(manager);
			}
			return result;
		}
	}
	internal class CollectionMarkupSerializer : WorkflowMarkupSerializer
	{
		protected internal override IList GetChildren(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (!IsValidCollectionType(obj.GetType()))
			{
				throw new Exception(SR.GetString("Error_SerializerTypeRequirement", obj.GetType().FullName, typeof(ICollection).FullName, typeof(ICollection<>).FullName));
			}
			IEnumerable enumerable = obj as IEnumerable;
			ArrayList arrayList = new ArrayList();
			foreach (object item in enumerable)
			{
				arrayList.Add(item);
			}
			return arrayList;
		}

		protected internal override PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			return new PropertyInfo[0];
		}

		protected internal override bool ShouldSerializeValue(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (value == null)
			{
				return false;
			}
			if (!IsValidCollectionType(value.GetType()))
			{
				throw new Exception(SR.GetString("Error_SerializerTypeRequirement", value.GetType().FullName, typeof(ICollection).FullName, typeof(ICollection<>).FullName));
			}
			IEnumerable enumerable = value as IEnumerable;
			IEnumerator enumerator = enumerable.GetEnumerator();
			try
			{
				if (enumerator.MoveNext())
				{
					object current = enumerator.Current;
					return true;
				}
			}
			finally
			{
				IDisposable disposable = enumerator as IDisposable;
				if (disposable != null)
				{
					disposable.Dispose();
				}
			}
			return false;
		}

		protected internal override void ClearChildren(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (obj == null)
			{
				throw new ArgumentNullException("obj");
			}
			if (!IsValidCollectionType(obj.GetType()))
			{
				throw new Exception(SR.GetString("Error_SerializerTypeRequirement", obj.GetType().FullName, typeof(ICollection).FullName, typeof(ICollection<>).FullName));
			}
			ICollection collection = obj as ICollection;
			if (collection == null)
			{
				obj.GetType().InvokeMember("Clear", BindingFlags.Instance | BindingFlags.Public | BindingFlags.InvokeMethod, null, obj, new object[0], CultureInfo.InvariantCulture);
			}
		}

		protected internal override void AddChild(WorkflowMarkupSerializationManager serializationManager, object parentObj, object childObj)
		{
			if (parentObj == null)
			{
				throw new ArgumentNullException("parentObj");
			}
			if (!IsValidCollectionType(parentObj.GetType()))
			{
				throw new Exception(SR.GetString("Error_SerializerTypeRequirement", parentObj.GetType().FullName, typeof(ICollection).FullName, typeof(ICollection<>).FullName));
			}
			parentObj.GetType().InvokeMember("Add", BindingFlags.Instance | BindingFlags.Public | BindingFlags.InvokeMethod, null, parentObj, new object[1] { childObj }, CultureInfo.InvariantCulture);
		}

		internal static bool IsValidCollectionType(Type collectionType)
		{
			if (collectionType == null)
			{
				return false;
			}
			if (typeof(Array).IsAssignableFrom(collectionType))
			{
				return false;
			}
			if (!typeof(ICollection).IsAssignableFrom(collectionType))
			{
				if (collectionType.IsGenericType)
				{
					if (!typeof(ICollection<>).IsAssignableFrom(collectionType.GetGenericTypeDefinition()))
					{
						return typeof(IList<>).IsAssignableFrom(collectionType.GetGenericTypeDefinition());
					}
					return true;
				}
				return false;
			}
			return true;
		}
	}
	internal class DictionaryMarkupSerializer : WorkflowMarkupSerializer
	{
		private bool deserializingDictionary;

		private IDictionary keylookupDictionary;

		protected internal override IList GetChildren(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			if (!(obj is IDictionary dictionary))
			{
				throw new InvalidOperationException(SR.GetString("Error_DictionarySerializerNonDictionaryObject"));
			}
			List<object> list = new List<object>();
			foreach (DictionaryEntry item in dictionary)
			{
				list.Add(item);
			}
			return list;
		}

		protected internal override PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			return new PropertyInfo[0];
		}

		protected internal override bool ShouldSerializeValue(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (value == null)
			{
				return false;
			}
			if (!(value is IDictionary))
			{
				throw new InvalidOperationException(SR.GetString("Error_DictionarySerializerNonDictionaryObject"));
			}
			return ((IDictionary)value).Count > 0;
		}

		protected internal override void ClearChildren(WorkflowMarkupSerializationManager serializationManager, object deserializedObject)
		{
			if (deserializedObject == null)
			{
				throw new ArgumentNullException("deserializedObject");
			}
			if (!(deserializedObject is IDictionary dictionary))
			{
				throw new InvalidOperationException(SR.GetString("Error_DictionarySerializerNonDictionaryObject"));
			}
			dictionary.Clear();
		}

		protected internal override void AddChild(WorkflowMarkupSerializationManager serializationManager, object parentObj, object childObj)
		{
			if (parentObj == null)
			{
				throw new ArgumentNullException("parentObj");
			}
			if (childObj == null)
			{
				throw new ArgumentNullException("childObj");
			}
			if (!(parentObj is IDictionary dictionary))
			{
				throw new InvalidOperationException(SR.GetString("Error_DictionarySerializerNonDictionaryObject"));
			}
			object obj = null;
			foreach (DictionaryEntry item in keylookupDictionary)
			{
				if ((!item.Value.GetType().IsValueType && item.Value == childObj) || (item.Value.GetType().IsValueType && item.Value.Equals(childObj)))
				{
					obj = item.Key;
					break;
				}
			}
			if (obj == null)
			{
				throw new InvalidOperationException(SR.GetString("Error_DictionarySerializerKeyNotFound", childObj.GetType().FullName));
			}
			dictionary.Add(obj, childObj);
			keylookupDictionary.Remove(obj);
		}

		internal override void OnBeforeSerializeContents(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			base.OnBeforeSerializeContents(serializationManager, obj);
			serializationManager.ExtendedPropertiesProviders.Add(this);
			keylookupDictionary = new Hashtable();
		}

		protected override void OnAfterSerialize(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			base.OnAfterSerialize(serializationManager, obj);
			serializationManager.ExtendedPropertiesProviders.Remove(this);
			keylookupDictionary = null;
		}

		internal override void OnBeforeDeserializeContents(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			base.OnBeforeDeserializeContents(serializationManager, obj);
			serializationManager.ExtendedPropertiesProviders.Add(this);
			keylookupDictionary = new Hashtable();
			deserializingDictionary = true;
		}

		protected override void OnAfterDeserialize(WorkflowMarkupSerializationManager serializationManager, object obj)
		{
			base.OnAfterDeserialize(serializationManager, obj);
			serializationManager.ExtendedPropertiesProviders.Remove(this);
			keylookupDictionary = null;
			deserializingDictionary = false;
		}

		internal override ExtendedPropertyInfo[] GetExtendedProperties(WorkflowMarkupSerializationManager manager, object extendee)
		{
			List<ExtendedPropertyInfo> list = new List<ExtendedPropertyInfo>();
			DictionaryEntry? dictionaryEntry = null;
			if (manager.WorkflowMarkupStack[typeof(DictionaryEntry)] != null)
			{
				dictionaryEntry = (DictionaryEntry)manager.WorkflowMarkupStack[typeof(DictionaryEntry)];
			}
			if (deserializingDictionary || (dictionaryEntry.HasValue && dictionaryEntry.Value.Value == extendee))
			{
				ExtendedPropertyInfo item = new ExtendedPropertyInfo(typeof(DictionaryEntry).GetProperty("Key", BindingFlags.Instance | BindingFlags.Public), OnGetKeyValue, OnSetKeyValue, OnGetXmlQualifiedName, manager);
				list.Add(item);
			}
			return list.ToArray();
		}

		private object OnGetKeyValue(ExtendedPropertyInfo extendedProperty, object extendee)
		{
			DictionaryEntry? dictionaryEntry = null;
			if (extendedProperty.SerializationManager.WorkflowMarkupStack[typeof(DictionaryEntry)] != null)
			{
				dictionaryEntry = (DictionaryEntry)extendedProperty.SerializationManager.WorkflowMarkupStack[typeof(DictionaryEntry)];
			}
			if (dictionaryEntry.HasValue && dictionaryEntry.Value.Value == extendee)
			{
				return dictionaryEntry.Value.Key;
			}
			return null;
		}

		private void OnSetKeyValue(ExtendedPropertyInfo extendedProperty, object extendee, object value)
		{
			if (extendee != null && value != null && !keylookupDictionary.Contains(value))
			{
				keylookupDictionary.Add(value, extendee);
			}
		}

		private XmlQualifiedName OnGetXmlQualifiedName(ExtendedPropertyInfo extendedProperty, WorkflowMarkupSerializationManager manager, out string prefix)
		{
			prefix = "x";
			return new XmlQualifiedName(extendedProperty.Name, "http://schemas.microsoft.com/winfx/2006/xaml");
		}
	}
	internal class WorkflowMarkupSerializationProvider : IDesignerSerializationProvider
	{
		public virtual object GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType)
		{
			if (serializerType != typeof(WorkflowMarkupSerializer) || currentSerializer != null)
			{
				return null;
			}
			if (typeof(IDictionary).IsAssignableFrom(objectType))
			{
				return new DictionaryMarkupSerializer();
			}
			if (CollectionMarkupSerializer.IsValidCollectionType(objectType))
			{
				return new CollectionMarkupSerializer();
			}
			return new WorkflowMarkupSerializer();
		}
	}
	internal delegate object GetValueHandler(ExtendedPropertyInfo extendedProperty, object extendee);
	internal delegate void SetValueHandler(ExtendedPropertyInfo extendedProperty, object extendee, object value);
	internal delegate XmlQualifiedName GetQualifiedNameHandler(ExtendedPropertyInfo extendedProperty, WorkflowMarkupSerializationManager manager, out string prefix);
	internal sealed class ExtendedPropertyInfo : PropertyInfo
	{
		private PropertyInfo realPropertyInfo;

		private GetValueHandler OnGetValue;

		private SetValueHandler OnSetValue;

		private GetQualifiedNameHandler OnGetXmlQualifiedName;

		private WorkflowMarkupSerializationManager manager;

		internal PropertyInfo RealPropertyInfo => realPropertyInfo;

		internal WorkflowMarkupSerializationManager SerializationManager => manager;

		public override string Name => realPropertyInfo.Name;

		public override Type DeclaringType => realPropertyInfo.DeclaringType;

		public override Type ReflectedType => realPropertyInfo.ReflectedType;

		public override Type PropertyType => realPropertyInfo.PropertyType;

		public override PropertyAttributes Attributes => realPropertyInfo.Attributes;

		public override bool CanRead => realPropertyInfo.CanRead;

		public override bool CanWrite => realPropertyInfo.CanWrite;

		internal ExtendedPropertyInfo(PropertyInfo propertyInfo, GetValueHandler getValueHandler, SetValueHandler setValueHandler, GetQualifiedNameHandler qualifiedNameHandler)
		{
			realPropertyInfo = propertyInfo;
			OnGetValue = getValueHandler;
			OnSetValue = setValueHandler;
			OnGetXmlQualifiedName = qualifiedNameHandler;
		}

		internal ExtendedPropertyInfo(PropertyInfo propertyInfo, GetValueHandler getValueHandler, SetValueHandler setValueHandler, GetQualifiedNameHandler qualifiedNameHandler, WorkflowMarkupSerializationManager manager)
			: this(propertyInfo, getValueHandler, setValueHandler, qualifiedNameHandler)
		{
			this.manager = manager;
		}

		public override MethodInfo[] GetAccessors(bool nonPublic)
		{
			return realPropertyInfo.GetAccessors(nonPublic);
		}

		public override MethodInfo GetGetMethod(bool nonPublic)
		{
			return realPropertyInfo.GetGetMethod(nonPublic);
		}

		public override MethodInfo GetSetMethod(bool nonPublic)
		{
			return realPropertyInfo.GetSetMethod(nonPublic);
		}

		public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)
		{
			if (OnGetValue != null)
			{
				return OnGetValue(this, obj);
			}
			return null;
		}

		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture)
		{
			if (OnSetValue != null)
			{
				OnSetValue(this, obj, value);
			}
		}

		public XmlQualifiedName GetXmlQualifiedName(WorkflowMarkupSerializationManager manager, out string prefix)
		{
			prefix = string.Empty;
			if (OnGetXmlQualifiedName != null)
			{
				return OnGetXmlQualifiedName(this, manager, out prefix);
			}
			return null;
		}

		public override ParameterInfo[] GetIndexParameters()
		{
			return realPropertyInfo.GetIndexParameters();
		}

		public override object[] GetCustomAttributes(bool inherit)
		{
			return realPropertyInfo.GetCustomAttributes(inherit);
		}

		public override object[] GetCustomAttributes(Type attributeType, bool inherit)
		{
			return realPropertyInfo.GetCustomAttributes(attributeType, inherit);
		}

		public override bool IsDefined(Type attributeType, bool inherit)
		{
			return realPropertyInfo.IsDefined(attributeType, inherit);
		}

		internal static bool IsExtendedProperty(WorkflowMarkupSerializationManager manager, XmlQualifiedName xmlQualifiedName)
		{
			bool result = false;
			object current = manager.Context.Current;
			if (current != null)
			{
				ExtendedPropertyInfo[] extendedProperties = manager.GetExtendedProperties(current);
				foreach (ExtendedPropertyInfo extendedPropertyInfo in extendedProperties)
				{
					string prefix = string.Empty;
					XmlQualifiedName xmlQualifiedName2 = extendedPropertyInfo.GetXmlQualifiedName(manager, out prefix);
					if (xmlQualifiedName2.Name.Equals(xmlQualifiedName.Name, StringComparison.Ordinal) && xmlQualifiedName2.Namespace.Equals(xmlQualifiedName.Namespace, StringComparison.Ordinal))
					{
						result = true;
						break;
					}
				}
			}
			return result;
		}

		internal static bool IsExtendedProperty(WorkflowMarkupSerializationManager manager, IList<PropertyInfo> propInfos, XmlQualifiedName xmlQualifiedName)
		{
			foreach (PropertyInfo propInfo in propInfos)
			{
				ExtendedPropertyInfo extendedPropertyInfo = propInfo as ExtendedPropertyInfo;
				if (!(extendedPropertyInfo == null))
				{
					string prefix = string.Empty;
					XmlQualifiedName xmlQualifiedName2 = extendedPropertyInfo.GetXmlQualifiedName(manager, out prefix);
					if (xmlQualifiedName2.Name.Equals(xmlQualifiedName.Name, StringComparison.Ordinal) && xmlQualifiedName2.Namespace.Equals(xmlQualifiedName.Namespace, StringComparison.Ordinal))
					{
						return true;
					}
				}
			}
			return false;
		}
	}
	internal sealed class XmlDocumentSurrogate : ISerializationSurrogate
	{
		[Serializable]
		private sealed class XmlDocumentReference : IObjectReference
		{
			private string innerXml = string.Empty;

			object IObjectReference.GetRealObject(StreamingContext context)
			{
				XmlDocument xmlDocument = new XmlDocument();
				if (!string.IsNullOrEmpty(innerXml))
				{
					xmlDocument.InnerXml = innerXml;
				}
				return xmlDocument;
			}
		}

		internal XmlDocumentSurrogate()
		{
		}

		void ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context)
		{
			if (!(obj is XmlDocument xmlDocument))
			{
				throw new ArgumentException(SR.GetString("Error_InvalidArgumentValue"), "obj");
			}
			info.AddValue("innerXml", xmlDocument.InnerXml);
			info.SetType(typeof(XmlDocumentReference));
		}

		object ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
		{
			return null;
		}
	}
	internal sealed class CodeTypeReferenceSerializer : WorkflowMarkupSerializer
	{
		internal const string QualifiedName = "QualifiedName";

		protected internal override bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			return value is CodeTypeReference;
		}

		protected internal override string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value)
		{
			if (serializationManager == null)
			{
				throw new ArgumentNullException("serializationManager");
			}
			if (value == null)
			{
				throw new ArgumentNullException("value");
			}
			if (!(value is CodeTypeReference reference))
			{
				return string.Empty;
			}
			string text = ConvertTypeReferenceToString(reference);
			Type type = serializationManager.GetType(text);
			if (type == null)
			{
				type = Type.GetType(text, throwOnError: false);
				if (type == null)
				{
					return text;
				}
			}
			string text2 = null;
			if (serializationManager.GetService(typeof(ITypeProvider)) is TypeProvider typeProvider)
			{
				text2 = typeProvider.GetAssemblyName(type);
			}
			if (string.IsNullOrEmpty(text2))
			{
				return type.AssemblyQualifiedName;
			}
			return string.Format(CultureInfo.InvariantCulture, "{0}, {1}", new object[2] { type.FullName, text2 });
		}

		protected internal override object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value)
		{
			if (!propertyType.IsAssignableFrom(typeof(CodeTypeReference)))
			{
				return null;
			}
			if (string.IsNullOrEmpty(value) || IsValidCompactAttributeFormat(value))
			{
				return null;
			}
			CodeTypeReference codeTypeReference;
			try
			{
				Type type = serializationManager.GetType(value);
				if (type != null)
				{
					codeTypeReference = new CodeTypeReference(type);
					codeTypeReference.UserData["QualifiedName"] = type.AssemblyQualifiedName;
					return codeTypeReference;
				}
			}
			catch (Exception)
			{
			}
			codeTypeReference = new CodeTypeReference(value);
			codeTypeReference.UserData["QualifiedName"] = value;
			return codeTypeReference;
		}

		private static string ConvertTypeReferenceToString(CodeTypeReference reference)
		{
			StringBuilder stringBuilder;
			if (reference.ArrayElementType != null)
			{
				stringBuilder = new StringBuilder(ConvertTypeReferenceToString(reference.ArrayElementType));
				if (reference.ArrayRank > 0)
				{
					stringBuilder.Append("[");
					stringBuilder.Append(',', reference.ArrayRank - 1);
					stringBuilder.Append("]");
				}
			}
			else
			{
				stringBuilder = new StringBuilder(reference.BaseType);
				if (reference.TypeArguments != null && reference.TypeArguments.Count > 0)
				{
					string value = "[";
					foreach (CodeTypeReference typeArgument in reference.TypeArguments)
					{
						stringBuilder.Append(value);
						stringBuilder.Append(ConvertTypeReferenceToString(typeArgument));
						value = ", ";
					}
					stringBuilder.Append("]");
				}
			}
			return stringBuilder.ToString();
		}
	}
	internal static class StandardXomlKeys
	{
		internal const string WorkflowXmlNs = "http://schemas.microsoft.com/winfx/2006/xaml/workflow";

		internal const string WorkflowPrefix = "wf";

		internal const string CLRNamespaceQualifier = "clr-namespace:";

		internal const string AssemblyNameQualifier = "Assembly=";

		internal const string GlobalNamespace = "{Global}";

		internal const string MarkupExtensionSuffix = "Extension";

		internal const string Definitions_XmlNs = "http://schemas.microsoft.com/winfx/2006/xaml";

		internal const string Definitions_XmlNs_Prefix = "x";

		internal const string Definitions_Class_LocalName = "Class";

		internal const string Definitions_Code_LocalName = "Code";

		internal const string Definitions_ActivityVisible_LocalName = "Visible";

		internal const string Definitions_ActivityEditable_LocalName = "Editable";

		internal const string Definitions_Type_LocalName = "Type";
	}
	internal interface ITypeAuthorizer
	{
		bool IsTypeAuthorized(Type typeToAuthorize);
	}
	internal static class WorkflowMarkupSerializationHelpers
	{
		private class DummySite : ISite, IServiceProvider
		{
			public IComponent Component => null;

			public IContainer Container => null;

			public bool DesignMode => true;

			public string Name
			{
				get
				{
					return string.Empty;
				}
				set
				{
				}
			}

			public object GetService(Type type)
			{
				return null;
			}
		}

		internal static string[] standardNamespaces = new string[8] { "System", "System.Collections", "System.ComponentModel", "System.ComponentModel.Design", "System.Collections.Generic", "System.Workflow.ComponentModel", "System.Workflow.Runtime", "System.Workflow.Activities" };

		internal static ITypeAuthorizer TypeAuthorizer;

		internal static ITypeAuthorizer SerializationTypeAuthorizer;

		public static Activity LoadXomlDocument(WorkflowMarkupSerializationManager xomlSerializationManager, XmlReader textReader, string fileName)
		{
			if (xomlSerializationManager == null)
			{
				throw new ArgumentNullException("xomlSerializationManager");
			}
			Activity activity = null;
			try
			{
				xomlSerializationManager.Context.Push(fileName);
				TypeAuthorizer = null;
				return new WorkflowMarkupSerializer().Deserialize(xomlSerializationManager, textReader) as Activity;
			}
			finally
			{
				xomlSerializationManager.Context.Pop();
			}
		}

		internal static Activity LoadXomlDocument(WorkflowMarkupSerializationManager xomlSerializationManager, XmlReader textReader, string fileName, ITypeAuthorizer typeAuthorizer)
		{
			if (xomlSerializationManager == null)
			{
				throw new ArgumentNullException("xomlSerializationManager");
			}
			Activity activity = null;
			try
			{
				xomlSerializationManager.Context.Push(fileName);
				TypeAuthorizer = typeAuthorizer;
				return new WorkflowMarkupSerializer().Deserialize(xomlSerializationManager, textReader) as Activity;
			}
			finally
			{
				xomlSerializationManager.Context.Pop();
			}
		}

		internal static void ProcessDefTag(WorkflowMarkupSerializationManager serializationManager, XmlReader reader, Activity activity, bool newSegment, string fileName)
		{
			ResourceManager resourceManager = new ResourceManager("System.Workflow.ComponentModel.StringResources", typeof(ActivityBind).Assembly);
			if (reader.NodeType == XmlNodeType.Attribute)
			{
				string localName = reader.LocalName;
				if (localName == "Class")
				{
					activity.SetValue(WorkflowMarkupSerializer.XClassProperty, reader.Value);
					return;
				}
				serializationManager.ReportError(new WorkflowMarkupSerializationException(string.Format(CultureInfo.CurrentCulture, resourceManager.GetString("UnknownDefinitionTag"), new object[3] { "x", reader.LocalName, "http://schemas.microsoft.com/winfx/2006/xaml" }), (!(reader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)reader).LineNumber, (!(reader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)reader).LinePosition));
				return;
			}
			bool flag = false;
			bool isEmptyElement = reader.IsEmptyElement;
			int depth = reader.Depth;
			do
			{
				switch (reader.NodeType)
				{
				case XmlNodeType.Element:
				{
					string localName2 = reader.LocalName;
					if (!(localName2 == "Code"))
					{
						_ = localName2 == "Constructor";
						serializationManager.ReportError(new WorkflowMarkupSerializationException(string.Format(CultureInfo.CurrentCulture, resourceManager.GetString("UnknownDefinitionTag"), new object[3] { "x", reader.LocalName, "http://schemas.microsoft.com/winfx/2006/xaml" }), (!(reader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)reader).LineNumber, (!(reader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)reader).LinePosition));
						return;
					}
					if (isEmptyElement)
					{
						flag = true;
					}
					break;
				}
				case XmlNodeType.EndElement:
					if (reader.Depth == depth)
					{
						flag = true;
					}
					break;
				case XmlNodeType.Text:
				case XmlNodeType.CDATA:
				{
					int num = ((!(reader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)reader).LineNumber);
					int num2 = ((!(reader is IXmlLineInfo)) ? 1 : ((IXmlLineInfo)reader).LinePosition);
					CodeSnippetTypeMember codeSnippetTypeMember = new CodeSnippetTypeMember(reader.Value);
					codeSnippetTypeMember.LinePragma = new CodeLinePragma(fileName, Math.Max(num - 1, 1));
					codeSnippetTypeMember.UserData[UserDataKeys.CodeSegment_New] = newSegment;
					codeSnippetTypeMember.UserData[UserDataKeys.CodeSegment_ColumnNumber] = num2 + reader.Name.Length - 1;
					CodeTypeMemberCollection codeTypeMemberCollection = activity.GetValue(WorkflowMarkupSerializer.XCodeProperty) as CodeTypeMemberCollection;
					if (codeTypeMemberCollection == null)
					{
						codeTypeMemberCollection = new CodeTypeMemberCollection();
						activity.SetValue(WorkflowMarkupSerializer.XCodeProperty, codeTypeMemberCollection);
					}
					codeTypeMemberCollection.Add(codeSnippetTypeMember);
					break;
				}
				}
			}
			while (!flag && reader.Read());
		}

		internal static CodeNamespaceCollection GenerateCodeFromXomlDocument(Activity rootActivity, string filePath, string rootNamespace, SupportedLanguages language, IServiceProvider serviceProvider)
		{
			CodeNamespaceCollection codeNamespaceCollection = new CodeNamespaceCollection();
			CodeDomProvider codeDomProvider = CompilerHelpers.GetCodeDomProvider(language);
			string text = rootActivity.GetValue(WorkflowMarkupSerializer.XClassProperty) as string;
			CodeTypeDeclaration codeTypeDeclaration = null;
			if (codeDomProvider != null && !string.IsNullOrEmpty(text))
			{
				Helpers.GetNamespaceAndClassName(text, out var namespaceName, out var className);
				if (codeDomProvider.IsValidIdentifier(className))
				{
					DesignerSerializationManager designerSerializationManager = new DesignerSerializationManager(serviceProvider);
					using (designerSerializationManager.CreateSession())
					{
						ActivityCodeDomSerializationManager activityCodeDomSerializationManager = new ActivityCodeDomSerializationManager(designerSerializationManager);
						TypeCodeDomSerializer typeCodeDomSerializer = activityCodeDomSerializationManager.GetSerializer(rootActivity.GetType(), typeof(TypeCodeDomSerializer)) as TypeCodeDomSerializer;
						bool flag = true;
						ArrayList arrayList = new ArrayList();
						arrayList.Add(rootActivity);
						if (rootActivity is CompositeActivity)
						{
							Activity[] nestedActivities = Helpers.GetNestedActivities((CompositeActivity)rootActivity);
							foreach (Activity activity in nestedActivities)
							{
								if (!Helpers.IsActivityLocked(activity))
								{
									if (!codeDomProvider.IsValidIdentifier(activityCodeDomSerializationManager.GetName(activity)))
									{
										flag = false;
										break;
									}
									arrayList.Insert(0, activity);
								}
							}
						}
						if (flag)
						{
							DummySite site = new DummySite();
							foreach (Activity item in arrayList)
							{
								((IComponent)item).Site = site;
							}
							((IComponent)rootActivity).Site = site;
							codeTypeDeclaration = typeCodeDomSerializer.Serialize(activityCodeDomSerializationManager, rootActivity, arrayList);
							codeTypeDeclaration.IsPartial = true;
							if (filePath != null && filePath.Length > 0)
							{
								byte[] array = null;
								HashAlgorithm hashAlgorithm = null;
								hashAlgorithm = ((!LocalAppContextSwitches.UseLegacyHashForXomlFileChecksum) ? ((HashAlgorithm)new SHA256CryptoServiceProvider()) : ((HashAlgorithm)new MD5CryptoServiceProvider()));
								using (StreamReader streamReader = new StreamReader(filePath))
								{
									array = hashAlgorithm.ComputeHash(streamReader.BaseStream);
								}
								string value = string.Format(CultureInfo.InvariantCulture, "{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}{14}{15}", array[0].ToString("X2", CultureInfo.InvariantCulture), array[1].ToString("X2", CultureInfo.InvariantCulture), array[2].ToString("X2", CultureInfo.InvariantCulture), array[3].ToString("X2", CultureInfo.InvariantCulture), array[4].ToString("X2", CultureInfo.InvariantCulture), array[5].ToString("X2", CultureInfo.InvariantCulture), array[6].ToString("X2", CultureInfo.InvariantCulture), array[7].ToString("X2", CultureInfo.InvariantCulture), array[8].ToString("X2", CultureInfo.InvariantCulture), array[9].ToString("X2", CultureInfo.InvariantCulture), array[10].ToString("X2", CultureInfo.InvariantCulture), array[11].ToString("X2", CultureInfo.InvariantCulture), array[12].ToString("X2", CultureInfo.InvariantCulture), array[13].ToString("X2", CultureInfo.InvariantCulture), array[14].ToString("X2", CultureInfo.InvariantCulture), array[15].ToString("X2", CultureInfo.InvariantCulture));
								CodeAttributeDeclaration codeAttributeDeclaration = new CodeAttributeDeclaration(typeof(WorkflowMarkupSourceAttribute).FullName);
								codeAttributeDeclaration.Arguments.Add(new CodeAttributeArgument(new CodePrimitiveExpression(filePath)));
								codeAttributeDeclaration.Arguments.Add(new CodeAttributeArgument(new CodePrimitiveExpression(value)));
								codeTypeDeclaration.CustomAttributes.Add(codeAttributeDeclaration);
							}
							CodeNamespace codeNamespace = new CodeNamespace(namespaceName);
							codeNamespace.Types.Add(codeTypeDeclaration);
							codeNamespaceCollection.Add(codeNamespace);
						}
					}
				}
			}
			if (codeTypeDeclaration != null)
			{
				Queue queue = new Queue(new object[1] { rootActivity });
				while (queue.Count > 0)
				{
					Activity activity3 = (Activity)queue.Dequeue();
					if (Helpers.IsActivityLocked(activity3))
					{
						continue;
					}
					Queue queue2 = new Queue(new object[1] { activity3 });
					while (queue2.Count > 0)
					{
						Activity activity4 = (Activity)queue2.Dequeue();
						if (activity4 is CompositeActivity)
						{
							foreach (Activity activity5 in ((CompositeActivity)activity4).Activities)
							{
								queue2.Enqueue(activity5);
							}
						}
						if (!(activity4.GetValue(WorkflowMarkupSerializer.XCodeProperty) is CodeTypeMemberCollection codeTypeMemberCollection))
						{
							continue;
						}
						foreach (CodeSnippetTypeMember item2 in codeTypeMemberCollection)
						{
							codeTypeDeclaration.Members.Add(item2);
						}
					}
				}
				if (language == SupportedLanguages.CSharp)
				{
					codeTypeDeclaration.LinePragma = new CodeLinePragma((string)rootActivity.GetValue(ActivityCodeDomSerializer.MarkupFileNameProperty), Math.Max((int)rootActivity.GetValue(ActivityMarkupSerializer.StartLineProperty), 1));
				}
				CodeConstructor codeConstructor = null;
				CodeMemberMethod codeMemberMethod = null;
				foreach (CodeTypeMember member in codeTypeDeclaration.Members)
				{
					if (codeConstructor == null && member is CodeConstructor)
					{
						codeConstructor = member as CodeConstructor;
					}
					if (codeMemberMethod == null && member is CodeMemberMethod && member.Name.Equals("InitializeComponent", StringComparison.Ordinal))
					{
						codeMemberMethod = member as CodeMemberMethod;
					}
					if (codeConstructor != null && codeMemberMethod != null)
					{
						break;
					}
				}
				if (codeConstructor != null)
				{
					codeConstructor.LinePragma = new CodeLinePragma((string)rootActivity.GetValue(ActivityCodeDomSerializer.MarkupFileNameProperty), Math.Max((int)rootActivity.GetValue(ActivityMarkupSerializer.StartLineProperty), 1));
				}
				if (codeMemberMethod != null && language == SupportedLanguages.CSharp)
				{
					codeMemberMethod.LinePragma = new CodeLinePragma((string)rootActivity.GetValue(ActivityCodeDomSerializer.MarkupFileNameProperty), Math.Max((int)rootActivity.GetValue(ActivityMarkupSerializer.StartLineProperty), 1));
				}
			}
			if (rootActivity.GetValue(WorkflowMarkupSerializer.ClrNamespacesProperty) is List<string> list)
			{
				foreach (CodeNamespace item3 in codeNamespaceCollection)
				{
					foreach (string item4 in list)
					{
						if (!string.IsNullOrEmpty(item4))
						{
							CodeNamespaceImport codeNamespaceImport = new CodeNamespaceImport(item4);
							codeNamespaceImport.LinePragma = new CodeLinePragma((string)rootActivity.GetValue(ActivityCodeDomSerializer.MarkupFileNameProperty), Math.Max((int)rootActivity.GetValue(ActivityMarkupSerializer.StartLineProperty), 1));
							item3.Imports.Add(codeNamespaceImport);
						}
					}
				}
			}
			return codeNamespaceCollection;
		}

		internal static void FixStandardNamespacesAndRootNamespace(CodeNamespaceCollection codeNamespaces, string rootNS, SupportedLanguages language)
		{
			if (language == SupportedLanguages.VB)
			{
				foreach (CodeNamespace codeNamespace3 in codeNamespaces)
				{
					if (codeNamespace3.Name == rootNS)
					{
						codeNamespace3.Name = string.Empty;
						codeNamespace3.UserData.Add("TruncatedNamespace", null);
					}
					else if (codeNamespace3.Name.StartsWith(rootNS + ".", StringComparison.Ordinal))
					{
						codeNamespace3.Name = codeNamespace3.Name.Substring(rootNS.Length + 1);
						codeNamespace3.UserData.Add("TruncatedNamespace", null);
					}
				}
			}
			foreach (CodeNamespace codeNamespace4 in codeNamespaces)
			{
				Hashtable hashtable = new Hashtable();
				foreach (CodeNamespaceImport import in codeNamespace4.Imports)
				{
					hashtable.Add(import.Namespace, import);
				}
				string[] array = standardNamespaces;
				foreach (string text in array)
				{
					if (!hashtable.Contains(text))
					{
						codeNamespace4.Imports.Add(new CodeNamespaceImport(text));
					}
				}
			}
		}

		internal static void ReapplyRootNamespace(CodeNamespaceCollection codeNamespaces, string rootNS, SupportedLanguages language)
		{
			if (language != 0)
			{
				return;
			}
			foreach (CodeNamespace codeNamespace in codeNamespaces)
			{
				if (codeNamespace.UserData.Contains("TruncatedNamespace"))
				{
					if (codeNamespace.Name == null || codeNamespace.Name.Length == 0)
					{
						codeNamespace.Name = rootNS;
					}
					else if (codeNamespace.Name.StartsWith(rootNS + ".", StringComparison.Ordinal))
					{
						codeNamespace.Name = rootNS + "." + codeNamespace.Name;
					}
					codeNamespace.UserData.Remove("TruncatedNamespace");
				}
			}
		}

		internal static string GetEventHandlerName(object owner, string eventName)
		{
			string result = null;
			DependencyObject dependencyObject = owner as DependencyObject;
			if (!string.IsNullOrEmpty(eventName) && owner != null && dependencyObject != null && dependencyObject.GetValue(WorkflowMarkupSerializer.EventsProperty) != null && dependencyObject.GetValue(WorkflowMarkupSerializer.EventsProperty) is Hashtable hashtable && hashtable.ContainsKey(eventName))
			{
				result = hashtable[eventName] as string;
			}
			return result;
		}

		internal static void SetEventHandlerName(object owner, string eventName, string value)
		{
			DependencyObject dependencyObject = owner as DependencyObject;
			if (!string.IsNullOrEmpty(eventName) && owner != null && dependencyObject != null)
			{
				if (dependencyObject.GetValue(WorkflowMarkupSerializer.EventsProperty) == null)
				{
					dependencyObject.SetValue(WorkflowMarkupSerializer.EventsProperty, new Hashtable());
				}
				Hashtable hashtable = dependencyObject.GetValue(WorkflowMarkupSerializer.EventsProperty) as Hashtable;
				hashtable[eventName] = value;
			}
		}
	}
}
